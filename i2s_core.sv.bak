module i2s_core
(
		input  logic        FPGACLK, LRCLK, SCLK, Reset,
		input  logic        write,
		input  logic [31:0] writedata_L, writedata_R
		output logic        MCLK,
		output logic        readdata
);

	//=======================================================
	//   I2S assignments
	//=======================================================

	// Divide master clock by 4 to derive 12.5MHz SGTL5000 master clock
	logic [1:0] aud_mclk_ctr;
	logic prevLRCLK = 1'b0;
	logic shiftLChannel, loadR, loadL, shiftRChannel;
	logic shiftOutL, shiftOutR;
	logic [1:0] actionState; 
	
	
	always_ff @ (posedge FPGACLK, posedge Reset) begin
		if (Reset) begin
			aud_mclk_ctr = 2'b00;
		end
		else begin
			aud_mclk_ctr <= aud_mclk_ctr+1;
		end
	end

	shiftreg_N  shiftregL(
			.Clk(SCLK),
			.Reset(Reset),
			.Enable(write),
			.Shift_In(1'b0),
			.Load(loadL),
			.Shift_En(shiftLChannel),
			.D(writedata_L),
			.Shift_Out(shiftOutL),
			.Data_Out());
													  
	shiftreg_N  shiftregR(
			.Clk(SCLK),
			.Reset(Reset),
			.Enable(write),
			.Shift_In(1'b0),
			.Load(loadR),
			.Shift_En(shiftRChannel),
			.D(writedata_R),
			.Shift_Out(shiftOutR),
			.Data_Out());
													  

	// State machine to determine shift-register behavior
	always_ff @ (posedge SCLK) 
	begin
		actionState <= {prevLRCLK,LRCLK};
		prevLRCLK <= LRCLK;
	end

	always_comb 
	begin
		case (actionState)
			2'b00 :
			begin
				shiftLChannel = 1'b1;
				loadL = 1'b0;
				loadR = 1'b0;
				shiftRChannel = 1'b0;
			end
			2'b01 :
			begin
				shiftLChannel = 1'b0;
				loadL = 1'b0;
				loadR = 1'b1;
				shiftRChannel = 1'b0;
			end
			2'b10 :
			begin
				shiftLChannel = 1'b0;
				loadL = 1'b1;
				loadR = 1'b0;
				shiftRChannel = 1'b0;
			end
			2'b11 :
			begin
				shiftLChannel = 1'b0;
				loadL = 1'b0;
				loadR = 1'b0;
				shiftRChannel = 1'b1;
			end
			default :
				begin
				shiftLChannel = 1'b0;
				loadL = 1'b0;
				loadR = 1'b0;
				shiftRChannel = 1'b0;
				end
		endcase
	end
	
	assign MCLK = aud_mclk_ctr[1]; //12.5 MHz master clock to SGTL5000
	assign  readdata = LRCLK? shiftOutR : shiftOutL;
	
endmodule
