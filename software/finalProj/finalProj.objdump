
finalProj.elf:     file format elf32-littlenios2
finalProj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000182a8 memsz 0x000182a8 flags r-x
    LOAD off    0x000192c8 vaddr 0x080182c8 paddr 0x08019f38 align 2**12
         filesz 0x00001c70 memsz 0x00001c70 flags rw-
    LOAD off    0x0001bba8 vaddr 0x0801bba8 paddr 0x0801bba8 align 2**12
         filesz 0x00000000 memsz 0x0000035c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017428  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c7c  0801764c  0801764c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c70  080182c8  08019f38  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000035c  0801bba8  0801bba8  0001bba8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001af38  2**0
                  CONTENTS
  7 .sdram        00000000  0801bf04  0801bf04  0001af38  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  0001af38  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013c8  00000000  00000000  0001af68  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005b740  00000000  00000000  0001c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00012d82  00000000  00000000  00077a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f880  00000000  00000000  0008a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000358c  00000000  00000000  000aa074  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e5d  00000000  00000000  000ad600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002170d  00000000  00000000  000b345d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000d4b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000022e0  00000000  00000000  000d4bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000db6a3  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000db6a6  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000db6b2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000db6b3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000db6b4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000db6b8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000db6bc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000db6c0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000db6c9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000db6d2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000db6db  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000039  00000000  00000000  000db6e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
0801764c l    d  .rodata	00000000 .rodata
080182c8 l    d  .rwdata	00000000 .rwdata
0801bba8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801bf04 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:\Users\augh\Documents\ECE385\finalProject_multiWaveform\software\finalProj_bsp\obj\HAL\src\crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08019ed0 l     O .rwdata	00000001 addr
08019ed2 l     O .rwdata	00000004 octUpDnKeys
08019ed8 l     O .rwdata	00000008 sampleRate
08019ee0 l     O .rwdata	00000004 phasePrecision
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801bbb8 l     O .bss	00000004 usb_delay.3446
0801bbbc l     O .bss	00000001 tmp_addr.3447
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_rint.c
08017c3c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
080182f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a970 l     F .text	000000c0 __sbprintf
08017da4 l     O .rodata	00000010 blanks.5176
08017d94 l     O .rodata	00000010 zeroes.5177
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800ab8c l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800c7ac l     F .text	00000008 __fp_lock
0800c7c0 l     F .text	00000168 __sinit.part.0
0800c928 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08017e58 l     O .rodata	0000000c p05.3991
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800fccc l     F .text	000000f4 __sprint_r.part.0
08011108 l     F .text	000000c0 __sbprintf
08017f8c l     O .rodata	00000010 blanks.5153
08017f7c l     O .rodata	00000010 zeroes.5154
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
08011cec l     F .text	0000004c _init_signal_r.part.0
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08012be4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012cfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08012d60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08012e78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
08012f64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080130cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080131b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08013398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08019f20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080137e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08013920 l     F .text	00000034 alt_dev_reg
08018e38 l     O .rwdata	00000038 i2c_0
08018e70 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08013a00 l     F .text	00000110 optional_irq_callback
08013b60 l     F .text	000000a0 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08015850 l     F .text	0000020c altera_avalon_jtag_uart_irq
08015a5c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801629c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08016648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08016b3c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08016c8c l     F .text	0000003c alt_get_errno
08016cc8 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0801bbec g     O .bss	00000004 alt_instruction_exception_handler
080086dc g     F .text	00000018 putchar
0800f2e8 g     F .text	00000070 _mprec_log10
0800f3c4 g     F .text	00000060 __any_on
080118e0 g     F .text	00000058 _isatty_r
08017e64 g     O .rodata	00000028 __mprec_tinytens
080132d4 g     F .text	0000007c alt_main
08019ee8 g     O .rwdata	00000008 ctrl_xfers
080086f4 g     F .text	000000cc _puts_r
0801be04 g     O .bss	00000100 alt_irq
080119d0 g     F .text	00000064 _lseek_r
08002d48 g     F .text	00000658 USB_Task
08019f38 g       *ABS*	00000000 __flash_rwdata_start
0800703c g     F .text	00000080 .hidden __eqdf2
0801bf04 g       *ABS*	00000000 __alt_heap_start
08011fa0 g     F .text	00000060 _kill_r
0800869c g     F .text	00000038 printf
08011ba4 g     F .text	0000006c _wcrtomb_r
08001df4 g     F .text	00000084 kbdPoll
08011d4c g     F .text	00000084 _signal_r
0800fc68 g     F .text	0000005c __sseek
0800cab8 g     F .text	00000010 __sinit
080111c8 g     F .text	00000148 __swbuf_r
08011938 g     F .text	00000074 _setlocale_r
0800c930 g     F .text	00000078 __sfmoreglue
08014260 g     F .text	000000a8 alt_avalon_i2c_rx_read
08013374 g     F .text	00000024 __malloc_unlock
080007d8 g     F .text	000001e8 GetDriverandReport
08019ee5 g     O .rwdata	00000001 MONO_POLY
08015488 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
08013fe0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0800e0d0 g     F .text	0000012c memmove
0800caa4 g     F .text	00000014 _cleanup
08014cd0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0800e2ec g     F .text	000000a4 _Balloc
08005c28 g     F .text	00000070 .hidden __fixsfsi
08001f58 g     F .text	000000a4 MAXreg_wr
080182c8 g     O .rwdata	00000030 ClientDriverTable
080070bc g     F .text	000000f0 .hidden __gtdf2
08017160 g     F .text	00000024 altera_nios2_gen2_irq_init
08008660 g     F .text	0000000c __errno
080033a0 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
0800d524 g     F .text	00000008 __localeconv_l
0800284c g     F .text	000000ec XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801bbf0 g     O .bss	00000010 hid_ep
08011880 g     F .text	00000060 _fstat_r
0801bbcc g     O .bss	00000004 errno
0800fbe0 g     F .text	00000008 __seofread
0801bbd8 g     O .bss	00000004 alt_argv
08021ed0 g       *ABS*	00000000 _gp
080137b0 g     F .text	00000030 usleep
080154cc g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
080020e0 g     F .text	000000a0 MAXreg_rd
080057a4 g     F .text	00000484 .hidden __subsf3
08012e58 g     F .text	00000020 getpid
08014170 g     F .text	00000044 alt_avalon_i2c_is_busy
08018cb8 g     O .rwdata	00000180 alt_fd_list
08001d38 g     F .text	00000038 HID_init
080086d4 g     F .text	00000008 _putchar_r
08013f14 g     F .text	000000cc alt_avalon_i2c_master_config_set
080167f4 g     F .text	00000090 alt_find_dev
0800dfd0 g     F .text	00000100 memcpy
0800c7b4 g     F .text	0000000c _cleanup_r
080083cc g     F .text	000000bc .hidden __floatsidf
08016c10 g     F .text	0000007c alt_io_redirect
080071ac g     F .text	000000f0 .hidden __ltdf2
0801764c g       *ABS*	00000000 __DTOR_END__
08014b10 g     F .text	000001c0 alt_avalon_i2c_master_transmit
080087c0 g     F .text	00000010 puts
08017344 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0800f244 g     F .text	000000a4 __ratio
080110ec g     F .text	0000001c __vfiprintf_internal
08015c58 g     F .text	00000220 altera_avalon_jtag_uart_read
0800866c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080051fc g     F .text	00000064 .hidden __udivsi3
08012eb4 g     F .text	000000b0 isatty
08011dd0 g     F .text	000000c4 _raise_r
080113e4 g     F .text	00000064 __assert_func
08017eb4 g     O .rodata	000000c8 __mprec_tens
0800856c g     F .text	00000074 .hidden __fixunsdfsi
08013d80 g     F .text	00000098 alt_avalon_i2c_enable
0801bbc8 g     O .bss	00000004 __malloc_top_pad
08012000 g     F .text	00000004 _getpid_r
080153b4 g     F .text	0000006c alt_avalon_i2c_int_disable
08019ef0 g     O .rwdata	00000001 usb_task_state
0800d52c g     F .text	0000000c _localeconv_r
0800e75c g     F .text	00000054 __i2b
0800cf18 g     F .text	000004cc __sfvwrite_r
08011e94 g     F .text	000000b8 __sigtramp_r
0801bba9 g     O .bss	00000001 currentVoiceNum
0800fb34 g     F .text	00000058 _sbrk_r
08011a84 g     F .text	00000064 _read_r
080024b4 g     F .text	000000e8 MAX3421E_init
08000a3c g     F .text	00000030 setKeycode
08001418 g     F .text	000000b4 SGTL5000_Reg_Rd
08019f18 g     O .rwdata	00000004 alt_max_fd
08011520 g     F .text	000000f8 _fclose_r
0800c784 g     F .text	00000028 fflush
0801bbc4 g     O .bss	00000004 __malloc_max_sbrked_mem
08014edc g     F .text	00000210 alt_avalon_i2c_master_receive
08005d90 g     F .text	00000978 .hidden __adddf3
0800efdc g     F .text	00000104 __b2d
08012620 g     F .text	000005c4 .hidden __umoddi3
080131f4 g     F .text	000000e0 lseek
08019ef4 g     O .rwdata	00000004 __fdlib_version
08015420 g     F .text	00000068 alt_avalon_i2c_int_enable
08019ef8 g     O .rwdata	00000004 _global_impure_ptr
0800f5d0 g     F .text	00000564 _realloc_r
0801bf04 g       *ABS*	00000000 __bss_end
08016a54 g     F .text	000000e8 alt_iic_isr_register
080136a8 g     F .text	00000108 alt_tick
08012004 g     F .text	0000061c .hidden __udivdi3
080152dc g     F .text	00000058 alt_avalon_i2c_int_status_get
080117e4 g     F .text	00000024 _fputwc_r
08017e8c g     O .rodata	00000028 __mprec_bigtens
0800e510 g     F .text	00000138 __s2b
08011cd4 g     F .text	00000018 abort
08008488 g     F .text	00000090 .hidden __floatunsidf
0800ecfc g     F .text	00000058 __mcmp
0800cad8 g     F .text	00000014 __fp_lock_all
08016a08 g     F .text	0000004c alt_ic_irq_enabled
08013604 g     F .text	000000a4 alt_alarm_stop
08013c00 g     F .text	00000054 alt_avalon_i2c_register_callback
0801bbe8 g     O .bss	00000004 alt_irq_active
08013c54 g     F .text	000000ec alt_avalon_i2c_init
08003470 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000c8 alt_irq_handler
08018c90 g     O .rwdata	00000028 alt_dev_null
08001d70 g     F .text	00000084 mousePoll
08004c7c g     F .text	000001dc rint
08002304 g     F .text	00000024 Vbus_power
08016628 g     F .text	00000020 alt_dcache_flush_all
0800e648 g     F .text	00000064 __hi0bits
080085e0 g     F .text	00000080 .hidden __fixdfsi
08019f38 g       *ABS*	00000000 __ram_rwdata_end
08019f10 g     O .rwdata	00000008 alt_dev_list
0801381c g     F .text	00000104 write
0800f424 g     F .text	000000cc _putc_r
0801459c g     F .text	0000004c alt_avalon_i2c_check_arblost
080052e4 g     F .text	000000c4 .hidden __gtsf2
08015378 g     F .text	0000003c alt_avalon_i2c_int_clear
080182c8 g       *ABS*	00000000 __ram_rodata_end
0801bbbd g     O .bss	00000001 usb_error
08012d9c g     F .text	000000bc fstat
08012fa0 g     F .text	0000012c kill
080071ac g     F .text	000000f0 .hidden __ledf2
08019f2c g     O .rwdata	00000008 alt_avalon_i2c_list
0800ea5c g     F .text	00000118 __pow5mult
0800fdd8 g     F .text	00001314 ___vfiprintf_internal_r
08005260 g     F .text	0000005c .hidden __umodsi3
0801bf04 g       *ABS*	00000000 end
08015790 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08013d40 g     F .text	00000040 alt_avalon_i2c_open
080029b8 g     F .text	00000180 XferDispatchPkt
0801764c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08014724 g     F .text	000000e8 alt_avalon_i2c_master_tx
08016318 g     F .text	00000084 alt_avalon_timer_sc_init
08008518 g     F .text	00000054 .hidden __clzsi2
08015e78 g     F .text	00000228 altera_avalon_jtag_uart_write
0800cac8 g     F .text	00000004 __sfp_lock_acquire
0800defc g     F .text	000000d4 memchr
08008868 g     F .text	000020ec ___vfprintf_internal_r
080026c4 g     F .text	00000034 MaxGpxHandler
0800cc1c g     F .text	000002fc _free_r
08016f04 g     F .text	0000022c alt_printf
080180f0 g     O .rodata	00000180 _ctype_b
080119ac g     F .text	0000000c __locale_mb_cur_max
0801752c g     F .text	00000120 __call_exitprocs
08013b10 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08019f00 g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
0801bbe0 g     O .bss	00000004 _alt_tick_rate
08002180 g     F .text	000000e8 MAXbytes_rd
080006c0 g     F .text	00000070 searchForOct
080150ec g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
08015518 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0800eb74 g     F .text	00000188 __lshift
080160a0 g     F .text	000001fc alt_avalon_spi_command
0801bbe4 g     O .bss	00000004 _alt_nticks
08011f5c g     F .text	00000018 signal
080133d4 g     F .text	00000108 read
08013990 g     F .text	00000070 alt_sys_init
0801bdbc g     O .bss	00000048 devtable
0801749c g     F .text	00000090 __register_exitproc
08001954 g     F .text	000003e4 HIDKProbe
0801bc00 g     O .bss	00000018 msd_ep
08014948 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0800e7b0 g     F .text	000002ac __multiply
0800394c g     F .text	000010cc __ieee754_pow
08015afc g     F .text	00000068 altera_avalon_jtag_uart_close
08002cc0 g     F .text	00000088 USB_init
080035b4 g     F .text	00000398 pow
080052bc g     F .text	00000028 .hidden __mulsi3
0801bcbc g     O .bss	00000100 bigbuf
080182c8 g       *ABS*	00000000 __ram_rwdata_start
0801764c g       *ABS*	00000000 __ram_rodata_start
0801bc18 g     O .bss	00000028 __malloc_current_mallinfo
0801bbb4 g     O .bss	00000001 last_usb_task_state
0800f0e0 g     F .text	00000164 __d2b
0801bbac g     O .bss	00000008 dev0ep
080009fc g     F .text	00000040 clearLED
0801562c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801728c g     F .text	000000b8 alt_get_fd
080164d0 g     F .text	00000158 alt_busy_sleep
080033cc g     F .text	0000003c MSDEventHandler
0801138c g     F .text	00000058 _close_r
08017424 g     F .text	00000078 memcmp
080141b4 g     F .text	000000ac alt_avalon_i2c_rx_read_available
080156ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801bf04 g       *ABS*	00000000 __alt_stack_base
0801573c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08000260 g     F .text	000003b8 initPhaseIncrements
0800aa30 g     F .text	0000015c __swsetup_r
08006708 g     F .text	00000934 .hidden __divdf3
0800c9a8 g     F .text	000000fc __sfp
0800f358 g     F .text	0000006c __copybits
0801871c g     O .rwdata	00000408 __malloc_av_
0800cad4 g     F .text	00000004 __sinit_lock_release
08003434 g     F .text	0000003c CDCEventHandler
0800729c g     F .text	000007a8 .hidden __muldf3
0800349c g     F .text	0000003c DummyEventHandler
0800fb8c g     F .text	00000054 __sread
08017184 g     F .text	00000108 alt_find_file
08016684 g     F .text	000000a8 alt_dev_llist_insert
08013350 g     F .text	00000024 __malloc_lock
0801354c g     F .text	000000b8 sbrk
080145e8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
08014550 g     F .text	0000004c alt_avalon_i2c_check_nack
0800c724 g     F .text	00000060 _fflush_r
0801145c g     F .text	000000c4 _calloc_r
0801bba8 g       *ABS*	00000000 __bss_start
08002328 g     F .text	0000018c MAX_busprobe
0801bbaa g     O .bss	00000002 hid_device
0800e1fc g     F .text	000000f0 memset
08000cac g     F .text	0000076c main
0800259c g     F .text	0000005c MAX3421E_Task
0801451c g     F .text	00000034 alt_avalon_i2c_master_target_set
0801bbdc g     O .bss	00000004 alt_envp
0801bbc0 g     O .bss	00000004 __malloc_max_total_mem
0801568c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08011310 g     F .text	00000018 __swbuf
08003530 g     F .text	00000084 ConvUTF8ToStr
08015334 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0800fcc4 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08011618 g     F .text	00000010 fclose
0800adac g     F .text	00001750 _dtoa_r
0800d71c g     F .text	000007e0 _malloc_r
08011ca4 g     F .text	00000030 __ascii_wctomb
08019f1c g     O .rwdata	00000004 alt_errno
08011628 g     F .text	00000020 _fiprintf_r
08011f74 g     F .text	0000001c _init_signal
0800d3e4 g     F .text	00000098 _fwalk
08011a34 g     F .text	0000000c _mbtowc_r
0800f4f0 g     F .text	000000e0 putc
08005108 g     F .text	00000080 .hidden __divsi3
08002b38 g     F .text	00000188 XferInTransfer
08000b7c g     F .text	00000130 printSignedHex1
0800cb00 g     F .text	0000011c _malloc_trim_r
0801764c g       *ABS*	00000000 __CTOR_END__
080053a8 g     F .text	000003fc .hidden __mulsf3
080034f8 g     F .text	00000038 GetDevtable
08011ae8 g     F .text	000000b8 strcmp
0801764c g       *ABS*	00000000 __flash_rodata_start
0801764c g       *ABS*	00000000 __DTOR_LIST__
08002938 g     F .text	00000080 XferCtrlND
080014cc g     F .text	000000a4 SGTL5000_Reg_Wr
0800703c g     F .text	00000080 .hidden __nedf2
08005078 g     F .text	00000090 .hidden __fixunsdfdi
08002268 g     F .text	0000009c MAX3421E_reset
08013954 g     F .text	0000003c alt_irq_init
080134dc g     F .text	00000070 alt_release_fd
08017c4c g     O .rodata	00000100 .hidden __clz_tab
0801bbd0 g     O .bss	00000004 _PathLocale
080173dc g     F .text	00000014 atexit
080052e4 g     F .text	000000c4 .hidden __gesf2
08011328 g     F .text	00000064 _write_r
080119b8 g     F .text	00000018 setlocale
0801bc40 g     O .bss	0000007c phaseIncs
08019efc g     O .rwdata	00000004 _impure_ptr
0801bbd4 g     O .bss	00000004 alt_argc
0800c4fc g     F .text	00000228 __sflush_r
08004e58 g     F .text	000001c0 scalbn
08016790 g     F .text	00000064 _do_dtors
080144e4 g     F .text	00000038 alt_avalon_i2c_master_target_get
080143f4 g     F .text	000000f0 alt_avalon_i2c_send_address
08001ffc g     F .text	000000e4 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
08011a40 g     F .text	00000044 __ascii_mbtowc
0800ef80 g     F .text	0000005c __ulp
0800caec g     F .text	00000014 __fp_unlock_all
08019f08 g     O .rwdata	00000008 alt_fs_list
08003408 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800d538 g     F .text	0000000c localeconv
080009c0 g     F .text	0000003c setLED
08000730 g     F .text	000000a8 setOctUpDn
08004a18 g     F .text	00000264 __ieee754_sqrt
080034d8 g     F .text	00000020 GetUsbTaskState
0800d544 g     F .text	00000098 __swhatbuf_r
080155c8 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
080168a4 g     F .text	00000050 alt_ic_isr_register
08013e18 g     F .text	0000004c alt_avalon_i2c_disable
08017688 g     O .rodata	00000010 devclasses
08019f38 g       *ABS*	00000000 _edata
08001eb4 g     F .text	0000003c HIDKEventHandler
0801bf04 g       *ABS*	00000000 _end
080025f8 g     F .text	000000cc MaxIntHandler
08011680 g     F .text	00000164 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
08015b64 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08013e64 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08001ef0 g     F .text	00000040 SPI_init
0801697c g     F .text	0000008c alt_ic_irq_disable
0800fbe8 g     F .text	00000080 __swrite
08019f04 g     O .rwdata	00000004 __malloc_trim_threshold
080173f0 g     F .text	00000034 exit
08011648 g     F .text	00000038 fiprintf
08011ba0 g     F .text	00000004 _vfiprintf_r
0800d47c g     F .text	000000a8 _fwalk_reent
08005c98 g     F .text	000000f8 .hidden __floatunsisf
0800ed54 g     F .text	0000022c __mdiff
08005188 g     F .text	00000074 .hidden __modsi3
08019ee4 g     O .rwdata	00000001 OCTQ
0801bba8 g     O .bss	00000001 currentOctave
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800cacc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08014074 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08017fec g     O .rodata	00000101 _ctype_
08014308 g     F .text	000000ec alt_avalon_i2c_cmd_write
08008378 g     F .text	00000054 .hidden __unorddf2
08005018 g     F .text	00000060 .hidden __fixunssfsi
08001e78 g     F .text	0000003c HIDMEventHandler
08012d28 g     F .text	00000038 _exit
0801639c g     F .text	00000134 alt_alarm_start
08000a6c g     F .text	00000110 printSignedHex0
0800d5dc g     F .text	00000140 __smakebuf_r
080087d0 g     F .text	00000098 strlen
08011d38 g     F .text	00000014 _init_signal_r
08016da4 g     F .text	00000160 open
080070bc g     F .text	000000f0 .hidden __gedf2
08017130 g     F .text	00000030 alt_putchar
08011448 g     F .text	00000014 __assert
0800fdc0 g     F .text	00000018 __sprint_r
08016884 g     F .text	00000020 alt_icache_flush_all
08019f34 g     O .rwdata	00000004 alt_priority_mask
080168f4 g     F .text	00000088 alt_ic_irq_enable
0800a954 g     F .text	0000001c __vfprintf_internal
08001570 g     F .text	000003e4 HIDMProbe
08011c98 g     F .text	0000000c _wctomb_r
08001f30 g     F .text	00000028 SPI_wr
08007a44 g     F .text	00000934 .hidden __subdf3
0800e6ac g     F .text	000000b0 __lo0bits
08019f24 g     O .rwdata	00000008 alt_alarm_list
0801672c g     F .text	00000064 _do_ctors
08011f90 g     F .text	00000010 __sigtramp
08011c10 g     F .text	00000088 wcrtomb
08000618 g     F .text	000000a8 setKeycodeVoice
08012c20 g     F .text	000000dc close
08018b24 g     O .rwdata	0000016c __global_locale
0801557c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08013134 g     F .text	00000084 alt_load
0801480c g     F .text	0000013c alt_avalon_i2c_master_rx
08011808 g     F .text	00000078 fputwc
08011f4c g     F .text	00000010 raise
0800cad0 g     F .text	00000004 __sinit_lock_acquire
080026f8 g     F .text	00000154 XferCtrlReq
0800e3b4 g     F .text	0000015c __multadd
0800e390 g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	008200b4 	movhi	r2,2050
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10ef8117 	ldw	r3,-16892(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	008200b4 	movhi	r2,2050
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	10af8217 	ldw	r2,-16888(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a74717 	ldw	r2,-25316(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a74717 	ldw	r2,-25316(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 8000230:	d687b414 	ori	gp,gp,7888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	10aeea14 	ori	r2,r2,48040

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18efc114 	ori	r3,r3,48900

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	80131340 	call	8013134 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	80132d40 	call	80132d4 <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <initPhaseIncrements>:
int8_t currentVoiceNum = 0;
BYTE OCTQ = 0x80;
BYTE MONO_POLY = 0x01;


void initPhaseIncrements(){
 8000260:	defff204 	addi	sp,sp,-56
 8000264:	dfc00d15 	stw	ra,52(sp)
 8000268:	df000c15 	stw	fp,48(sp)
 800026c:	dc400b15 	stw	r17,44(sp)
 8000270:	dc000a15 	stw	r16,40(sp)
 8000274:	df000c04 	addi	fp,sp,48
	for (int i = 0; i < 31; i++){
 8000278:	e03ffd15 	stw	zero,-12(fp)
 800027c:	00007306 	br	800044c <initPhaseIncrements+0x1ec>
		int noteNum = (currentOctave)*12 + i-6;
 8000280:	d0a73603 	ldbu	r2,-25384(gp)
 8000284:	10c03fcc 	andi	r3,r2,255
 8000288:	18c0201c 	xori	r3,r3,128
 800028c:	18ffe004 	addi	r3,r3,-128
 8000290:	1805883a 	mov	r2,r3
 8000294:	1085883a 	add	r2,r2,r2
 8000298:	10c5883a 	add	r2,r2,r3
 800029c:	100490ba 	slli	r2,r2,2
 80002a0:	1007883a 	mov	r3,r2
 80002a4:	e0bffd17 	ldw	r2,-12(fp)
 80002a8:	1885883a 	add	r2,r3,r2
 80002ac:	10bffe84 	addi	r2,r2,-6
 80002b0:	e0bff815 	stw	r2,-32(fp)
		double f = (440.00000000/sampleRate)*(double)pow(2,((noteNum-69)/12.0));
 80002b4:	0005883a 	mov	r2,zero
 80002b8:	00d039f4 	movhi	r3,16615
 80002bc:	18dc0004 	addi	r3,r3,28672
 80002c0:	100d883a 	mov	r6,r2
 80002c4:	180f883a 	mov	r7,r3
 80002c8:	0009883a 	mov	r4,zero
 80002cc:	01501f34 	movhi	r5,16508
 80002d0:	29600004 	addi	r5,r5,-32768
 80002d4:	80067080 	call	8006708 <__divdf3>
 80002d8:	1009883a 	mov	r4,r2
 80002dc:	180b883a 	mov	r5,r3
 80002e0:	2021883a 	mov	r16,r4
 80002e4:	2823883a 	mov	r17,r5
 80002e8:	e0bff817 	ldw	r2,-32(fp)
 80002ec:	10bfeec4 	addi	r2,r2,-69
 80002f0:	1009883a 	mov	r4,r2
 80002f4:	80083cc0 	call	80083cc <__floatsidf>
 80002f8:	1011883a 	mov	r8,r2
 80002fc:	1813883a 	mov	r9,r3
 8000300:	000d883a 	mov	r6,zero
 8000304:	01d00a34 	movhi	r7,16424
 8000308:	4009883a 	mov	r4,r8
 800030c:	480b883a 	mov	r5,r9
 8000310:	80067080 	call	8006708 <__divdf3>
 8000314:	1009883a 	mov	r4,r2
 8000318:	180b883a 	mov	r5,r3
 800031c:	2005883a 	mov	r2,r4
 8000320:	2807883a 	mov	r3,r5
 8000324:	100d883a 	mov	r6,r2
 8000328:	180f883a 	mov	r7,r3
 800032c:	0009883a 	mov	r4,zero
 8000330:	01500034 	movhi	r5,16384
 8000334:	80035b40 	call	80035b4 <pow>
 8000338:	1009883a 	mov	r4,r2
 800033c:	180b883a 	mov	r5,r3
 8000340:	200d883a 	mov	r6,r4
 8000344:	280f883a 	mov	r7,r5
 8000348:	8009883a 	mov	r4,r16
 800034c:	880b883a 	mov	r5,r17
 8000350:	800729c0 	call	800729c <__muldf3>
 8000354:	1009883a 	mov	r4,r2
 8000358:	180b883a 	mov	r5,r3
 800035c:	e13ff615 	stw	r4,-40(fp)
 8000360:	e17ff715 	stw	r5,-36(fp)
		//double tableIndex;
		//double tableFract;
		//tableFract = modf(-log2(f/4),&tableIndex);
		uint64_t phaseIncr = (uint64_t)(f*(double)(pow(2.,phasePrecision-8)));
 8000364:	00800804 	movi	r2,32
 8000368:	10bffe04 	addi	r2,r2,-8
 800036c:	1009883a 	mov	r4,r2
 8000370:	80083cc0 	call	80083cc <__floatsidf>
 8000374:	1009883a 	mov	r4,r2
 8000378:	180b883a 	mov	r5,r3
 800037c:	200d883a 	mov	r6,r4
 8000380:	280f883a 	mov	r7,r5
 8000384:	0009883a 	mov	r4,zero
 8000388:	01500034 	movhi	r5,16384
 800038c:	80035b40 	call	80035b4 <pow>
 8000390:	1011883a 	mov	r8,r2
 8000394:	1813883a 	mov	r9,r3
 8000398:	e1bff617 	ldw	r6,-40(fp)
 800039c:	e1fff717 	ldw	r7,-36(fp)
 80003a0:	4009883a 	mov	r4,r8
 80003a4:	480b883a 	mov	r5,r9
 80003a8:	800729c0 	call	800729c <__muldf3>
 80003ac:	1009883a 	mov	r4,r2
 80003b0:	180b883a 	mov	r5,r3
 80003b4:	2005883a 	mov	r2,r4
 80003b8:	2807883a 	mov	r3,r5
 80003bc:	1009883a 	mov	r4,r2
 80003c0:	180b883a 	mov	r5,r3
 80003c4:	80050780 	call	8005078 <__fixunsdfdi>
 80003c8:	1009883a 	mov	r4,r2
 80003cc:	180b883a 	mov	r5,r3
 80003d0:	e13ff415 	stw	r4,-48(fp)
 80003d4:	e17ff515 	stw	r5,-44(fp)
		//uint16_t tableCoef = (uint16_t)(tableFract*(pow(2.,16)-1));
		//WORD TCOEFQ = 0x0000;
		DWORD PHASEQ= 0x00000000;
 80003d8:	e03ffc15 	stw	zero,-16(fp)
		DWORD MASK = 0x00000001;
 80003dc:	00800044 	movi	r2,1
 80003e0:	e0bffb15 	stw	r2,-20(fp)

		for (int j = 0; j < 32; j++) {
 80003e4:	e03ffa15 	stw	zero,-24(fp)
 80003e8:	00000c06 	br	800041c <initPhaseIncrements+0x1bc>
			PHASEQ += phaseIncr & MASK;
 80003ec:	e0fff417 	ldw	r3,-48(fp)
 80003f0:	e0bffb17 	ldw	r2,-20(fp)
 80003f4:	1884703a 	and	r2,r3,r2
 80003f8:	e0fffc17 	ldw	r3,-16(fp)
 80003fc:	1885883a 	add	r2,r3,r2
 8000400:	e0bffc15 	stw	r2,-16(fp)
			//TCOEFQ += (j < 16) ? tableCoef & MASK : 0.;
			MASK <<= 1;
 8000404:	e0bffb17 	ldw	r2,-20(fp)
 8000408:	1085883a 	add	r2,r2,r2
 800040c:	e0bffb15 	stw	r2,-20(fp)
		for (int j = 0; j < 32; j++) {
 8000410:	e0bffa17 	ldw	r2,-24(fp)
 8000414:	10800044 	addi	r2,r2,1
 8000418:	e0bffa15 	stw	r2,-24(fp)
 800041c:	e0bffa17 	ldw	r2,-24(fp)
 8000420:	10800810 	cmplti	r2,r2,32
 8000424:	103ff11e 	bne	r2,zero,80003ec <initPhaseIncrements+0x18c>
		}
		phaseIncs[i] = PHASEQ;
 8000428:	e0bffd17 	ldw	r2,-12(fp)
 800042c:	100890ba 	slli	r4,r2,2
 8000430:	e0fffc17 	ldw	r3,-16(fp)
 8000434:	008200b4 	movhi	r2,2050
 8000438:	2085883a 	add	r2,r4,r2
 800043c:	10ef1015 	stw	r3,-17344(r2)
	for (int i = 0; i < 31; i++){
 8000440:	e0bffd17 	ldw	r2,-12(fp)
 8000444:	10800044 	addi	r2,r2,1
 8000448:	e0bffd15 	stw	r2,-12(fp)
 800044c:	e0bffd17 	ldw	r2,-12(fp)
 8000450:	108007d0 	cmplti	r2,r2,31
 8000454:	103f8a1e 	bne	r2,zero,8000280 <initPhaseIncrements+0x20>
		//tableCoefs[i] = TCOEFQ;
	}
	BYTE OCTQ = 0x80;
 8000458:	00bfe004 	movi	r2,-128
 800045c:	e0bff9c5 	stb	r2,-25(fp)
	OCTQ = OCTQ >> currentOctave;
 8000460:	e0fff9c3 	ldbu	r3,-25(fp)
 8000464:	d0a73603 	ldbu	r2,-25384(gp)
 8000468:	10803fcc 	andi	r2,r2,255
 800046c:	1080201c 	xori	r2,r2,128
 8000470:	10bfe004 	addi	r2,r2,-128
 8000474:	1885d83a 	sra	r2,r3,r2
 8000478:	e0bff9c5 	stb	r2,-25(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR0_BASE, phaseIncs[0]);
 800047c:	008200b4 	movhi	r2,2050
 8000480:	10af1017 	ldw	r2,-17344(r2)
 8000484:	0080c835 	stwio	r2,800(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR1_BASE, phaseIncs[1]);
 8000488:	008200b4 	movhi	r2,2050
 800048c:	10af1117 	ldw	r2,-17340(r2)
 8000490:	0080c435 	stwio	r2,784(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR2_BASE, phaseIncs[2]);
 8000494:	008200b4 	movhi	r2,2050
 8000498:	10af1217 	ldw	r2,-17336(r2)
 800049c:	0080c035 	stwio	r2,768(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR3_BASE, phaseIncs[3]);
 80004a0:	008200b4 	movhi	r2,2050
 80004a4:	10af1317 	ldw	r2,-17332(r2)
 80004a8:	0080bc35 	stwio	r2,752(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR4_BASE, phaseIncs[4]);
 80004ac:	008200b4 	movhi	r2,2050
 80004b0:	10af1417 	ldw	r2,-17328(r2)
 80004b4:	0080b835 	stwio	r2,736(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR5_BASE, phaseIncs[5]);
 80004b8:	008200b4 	movhi	r2,2050
 80004bc:	10af1517 	ldw	r2,-17324(r2)
 80004c0:	0080b435 	stwio	r2,720(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR6_BASE, phaseIncs[6]);
 80004c4:	008200b4 	movhi	r2,2050
 80004c8:	10af1617 	ldw	r2,-17320(r2)
 80004cc:	0080b035 	stwio	r2,704(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR7_BASE, phaseIncs[7]);
 80004d0:	008200b4 	movhi	r2,2050
 80004d4:	10af1717 	ldw	r2,-17316(r2)
 80004d8:	0080ac35 	stwio	r2,688(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR8_BASE, phaseIncs[8]);
 80004dc:	008200b4 	movhi	r2,2050
 80004e0:	10af1817 	ldw	r2,-17312(r2)
 80004e4:	0080a835 	stwio	r2,672(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR9_BASE, phaseIncs[9]);
 80004e8:	008200b4 	movhi	r2,2050
 80004ec:	10af1917 	ldw	r2,-17308(r2)
 80004f0:	0080a435 	stwio	r2,656(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR10_BASE, phaseIncs[10]);
 80004f4:	008200b4 	movhi	r2,2050
 80004f8:	10af1a17 	ldw	r2,-17304(r2)
 80004fc:	0080a035 	stwio	r2,640(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR11_BASE, phaseIncs[11]);
 8000500:	008200b4 	movhi	r2,2050
 8000504:	10af1b17 	ldw	r2,-17300(r2)
 8000508:	00809c35 	stwio	r2,624(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR12_BASE, phaseIncs[12]);
 800050c:	008200b4 	movhi	r2,2050
 8000510:	10af1c17 	ldw	r2,-17296(r2)
 8000514:	00809835 	stwio	r2,608(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR13_BASE, phaseIncs[13]);
 8000518:	008200b4 	movhi	r2,2050
 800051c:	10af1d17 	ldw	r2,-17292(r2)
 8000520:	00809435 	stwio	r2,592(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR14_BASE, phaseIncs[14]);
 8000524:	008200b4 	movhi	r2,2050
 8000528:	10af1e17 	ldw	r2,-17288(r2)
 800052c:	00809035 	stwio	r2,576(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR15_BASE, phaseIncs[15]);
 8000530:	008200b4 	movhi	r2,2050
 8000534:	10af1f17 	ldw	r2,-17284(r2)
 8000538:	00808c35 	stwio	r2,560(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR16_BASE, phaseIncs[16]);
 800053c:	008200b4 	movhi	r2,2050
 8000540:	10af2017 	ldw	r2,-17280(r2)
 8000544:	00808835 	stwio	r2,544(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR17_BASE, phaseIncs[17]);
 8000548:	008200b4 	movhi	r2,2050
 800054c:	10af2117 	ldw	r2,-17276(r2)
 8000550:	00808435 	stwio	r2,528(zero)
	// glitch: BASE ADDRESSES OF NEWLY ADDED PERIPHERALS ARENT RECOGNIZED
	// but they still work for whatever reason
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR18_BASE, phaseIncs[18]);
 8000554:	008200b4 	movhi	r2,2050
 8000558:	10af2217 	ldw	r2,-17272(r2)
 800055c:	00807035 	stwio	r2,448(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR19_BASE, phaseIncs[19]);
 8000560:	008200b4 	movhi	r2,2050
 8000564:	10af2317 	ldw	r2,-17268(r2)
 8000568:	00806c35 	stwio	r2,432(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR20_BASE, phaseIncs[20]);
 800056c:	008200b4 	movhi	r2,2050
 8000570:	10af2417 	ldw	r2,-17264(r2)
 8000574:	00806835 	stwio	r2,416(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR21_BASE, phaseIncs[21]);
 8000578:	008200b4 	movhi	r2,2050
 800057c:	10af2517 	ldw	r2,-17260(r2)
 8000580:	00806435 	stwio	r2,400(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR22_BASE, phaseIncs[22]);
 8000584:	008200b4 	movhi	r2,2050
 8000588:	10af2617 	ldw	r2,-17256(r2)
 800058c:	00806035 	stwio	r2,384(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR23_BASE, phaseIncs[23]);
 8000590:	008200b4 	movhi	r2,2050
 8000594:	10af2717 	ldw	r2,-17252(r2)
 8000598:	00805c35 	stwio	r2,368(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR24_BASE, phaseIncs[24]);
 800059c:	008200b4 	movhi	r2,2050
 80005a0:	10af2817 	ldw	r2,-17248(r2)
 80005a4:	00805835 	stwio	r2,352(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR25_BASE, phaseIncs[25]);
 80005a8:	008200b4 	movhi	r2,2050
 80005ac:	10af2917 	ldw	r2,-17244(r2)
 80005b0:	00805435 	stwio	r2,336(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR26_BASE, phaseIncs[26]);
 80005b4:	008200b4 	movhi	r2,2050
 80005b8:	10af2a17 	ldw	r2,-17240(r2)
 80005bc:	00805035 	stwio	r2,320(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR27_BASE, phaseIncs[27]);
 80005c0:	008200b4 	movhi	r2,2050
 80005c4:	10af2b17 	ldw	r2,-17236(r2)
 80005c8:	00804c35 	stwio	r2,304(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR28_BASE, phaseIncs[28]);
 80005cc:	008200b4 	movhi	r2,2050
 80005d0:	10af2c17 	ldw	r2,-17232(r2)
 80005d4:	00804835 	stwio	r2,288(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR29_BASE, phaseIncs[29]);
 80005d8:	008200b4 	movhi	r2,2050
 80005dc:	10af2d17 	ldw	r2,-17228(r2)
 80005e0:	00804435 	stwio	r2,272(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(PHASE_INCR30_BASE, phaseIncs[30]);
 80005e4:	008200b4 	movhi	r2,2050
 80005e8:	10af2e17 	ldw	r2,-17224(r2)
 80005ec:	00804035 	stwio	r2,256(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(0xf0, phaseIncs[27]);
	IOWR_ALTERA_AVALON_PIO_DATA(0xe0, phaseIncs[28]);
	IOWR_ALTERA_AVALON_PIO_DATA(0xd0, phaseIncs[29]);
	IOWR_ALTERA_AVALON_PIO_DATA(0xc0, phaseIncs[30]);
	*/
	IOWR_ALTERA_AVALON_PIO_DATA(OCT_BASE, OCTQ);
 80005f0:	e0bff9c3 	ldbu	r2,-25(fp)
 80005f4:	00807435 	stwio	r2,464(zero)

	return;
 80005f8:	0001883a 	nop
}
 80005fc:	e6fffe04 	addi	sp,fp,-8
 8000600:	dfc00317 	ldw	ra,12(sp)
 8000604:	df000217 	ldw	fp,8(sp)
 8000608:	dc400117 	ldw	r17,4(sp)
 800060c:	dc000017 	ldw	r16,0(sp)
 8000610:	dec00404 	addi	sp,sp,16
 8000614:	f800283a 	ret

08000618 <setKeycodeVoice>:

void setKeycodeVoice(WORD keycode, int voiceNum) {
 8000618:	defffd04 	addi	sp,sp,-12
 800061c:	df000215 	stw	fp,8(sp)
 8000620:	df000204 	addi	fp,sp,8
 8000624:	2005883a 	mov	r2,r4
 8000628:	e17ffe15 	stw	r5,-8(fp)
 800062c:	e0bfff0d 	sth	r2,-4(fp)

	switch (voiceNum) {
 8000630:	e0bffe17 	ldw	r2,-8(fp)
 8000634:	108000e0 	cmpeqi	r2,r2,3
 8000638:	1000181e 	bne	r2,zero,800069c <setKeycodeVoice+0x84>
 800063c:	e0bffe17 	ldw	r2,-8(fp)
 8000640:	10800108 	cmpgei	r2,r2,4
 8000644:	1000191e 	bne	r2,zero,80006ac <setKeycodeVoice+0x94>
 8000648:	e0bffe17 	ldw	r2,-8(fp)
 800064c:	108000a0 	cmpeqi	r2,r2,2
 8000650:	10000f1e 	bne	r2,zero,8000690 <setKeycodeVoice+0x78>
 8000654:	e0bffe17 	ldw	r2,-8(fp)
 8000658:	108000c8 	cmpgei	r2,r2,3
 800065c:	1000131e 	bne	r2,zero,80006ac <setKeycodeVoice+0x94>
 8000660:	e0bffe17 	ldw	r2,-8(fp)
 8000664:	10000426 	beq	r2,zero,8000678 <setKeycodeVoice+0x60>
 8000668:	e0bffe17 	ldw	r2,-8(fp)
 800066c:	10800060 	cmpeqi	r2,r2,1
 8000670:	1000041e 	bne	r2,zero,8000684 <setKeycodeVoice+0x6c>
		case 3 :
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE3_BASE, keycode);
			break;
		default : ;
	}
	return;
 8000674:	00000d06 	br	80006ac <setKeycodeVoice+0x94>
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE,keycode);
 8000678:	e0bfff0b 	ldhu	r2,-4(fp)
 800067c:	0080e435 	stwio	r2,912(zero)
			break;
 8000680:	00000906 	br	80006a8 <setKeycodeVoice+0x90>
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE1_BASE, keycode);
 8000684:	e0bfff0b 	ldhu	r2,-4(fp)
 8000688:	00808035 	stwio	r2,512(zero)
			break;
 800068c:	00000606 	br	80006a8 <setKeycodeVoice+0x90>
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE2_BASE, keycode);
 8000690:	e0bfff0b 	ldhu	r2,-4(fp)
 8000694:	00807c35 	stwio	r2,496(zero)
			break;
 8000698:	00000306 	br	80006a8 <setKeycodeVoice+0x90>
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE3_BASE, keycode);
 800069c:	e0bfff0b 	ldhu	r2,-4(fp)
 80006a0:	00807835 	stwio	r2,480(zero)
			break;
 80006a4:	0001883a 	nop
	return;
 80006a8:	0001883a 	nop
 80006ac:	0001883a 	nop
}
 80006b0:	e037883a 	mov	sp,fp
 80006b4:	df000017 	ldw	fp,0(sp)
 80006b8:	dec00104 	addi	sp,sp,4
 80006bc:	f800283a 	ret

080006c0 <searchForOct>:

int searchForOct(WORD keycode) {
 80006c0:	defffd04 	addi	sp,sp,-12
 80006c4:	df000215 	stw	fp,8(sp)
 80006c8:	df000204 	addi	fp,sp,8
 80006cc:	2005883a 	mov	r2,r4
 80006d0:	e0bffe0d 	sth	r2,-8(fp)
	for (int i = 0; i < 2; i++) {
 80006d4:	e03fff15 	stw	zero,-4(fp)
 80006d8:	00000d06 	br	8000710 <searchForOct+0x50>
		if (octUpDnKeys[i] == keycode) {return 1;}
 80006dc:	e0bfff17 	ldw	r2,-4(fp)
 80006e0:	1087883a 	add	r3,r2,r2
 80006e4:	d0a00084 	addi	r2,gp,-32766
 80006e8:	1885883a 	add	r2,r3,r2
 80006ec:	1080000b 	ldhu	r2,0(r2)
 80006f0:	e0fffe0b 	ldhu	r3,-8(fp)
 80006f4:	10bfffcc 	andi	r2,r2,65535
 80006f8:	1880021e 	bne	r3,r2,8000704 <searchForOct+0x44>
 80006fc:	00800044 	movi	r2,1
 8000700:	00000706 	br	8000720 <searchForOct+0x60>
	for (int i = 0; i < 2; i++) {
 8000704:	e0bfff17 	ldw	r2,-4(fp)
 8000708:	10800044 	addi	r2,r2,1
 800070c:	e0bfff15 	stw	r2,-4(fp)
 8000710:	e0bfff17 	ldw	r2,-4(fp)
 8000714:	10800090 	cmplti	r2,r2,2
 8000718:	103ff01e 	bne	r2,zero,80006dc <searchForOct+0x1c>
	}
	return 0;
 800071c:	0005883a 	mov	r2,zero
}
 8000720:	e037883a 	mov	sp,fp
 8000724:	df000017 	ldw	fp,0(sp)
 8000728:	dec00104 	addi	sp,sp,4
 800072c:	f800283a 	ret

08000730 <setOctUpDn>:

void setOctUpDn(WORD keycode) {
 8000730:	defffd04 	addi	sp,sp,-12
 8000734:	dfc00215 	stw	ra,8(sp)
 8000738:	df000115 	stw	fp,4(sp)
 800073c:	df000104 	addi	fp,sp,4
 8000740:	2005883a 	mov	r2,r4
 8000744:	e0bfff0d 	sth	r2,-4(fp)
	switch(keycode) {
 8000748:	e0bfff0b 	ldhu	r2,-4(fp)
 800074c:	10c00b60 	cmpeqi	r3,r2,45
 8000750:	1800031e 	bne	r3,zero,8000760 <setOctUpDn+0x30>
 8000754:	10800ba0 	cmpeqi	r2,r2,46
 8000758:	10000d1e 	bne	r2,zero,8000790 <setOctUpDn+0x60>
 800075c:	00001706 	br	80007bc <setOctUpDn+0x8c>
		case 45 :
			currentOctave = (currentOctave == 1)? 1 : currentOctave-1;
 8000760:	d0a73603 	ldbu	r2,-25384(gp)
 8000764:	10803fcc 	andi	r2,r2,255
 8000768:	1080201c 	xori	r2,r2,128
 800076c:	10bfe004 	addi	r2,r2,-128
 8000770:	10800060 	cmpeqi	r2,r2,1
 8000774:	1000031e 	bne	r2,zero,8000784 <setOctUpDn+0x54>
 8000778:	d0a73603 	ldbu	r2,-25384(gp)
 800077c:	10bfffc4 	addi	r2,r2,-1
 8000780:	00000106 	br	8000788 <setOctUpDn+0x58>
 8000784:	00800044 	movi	r2,1
 8000788:	d0a73605 	stb	r2,-25384(gp)
			break;
 800078c:	00000b06 	br	80007bc <setOctUpDn+0x8c>
		case 46 :
			currentOctave = (currentOctave == 7)? 7 : currentOctave+1;
 8000790:	d0a73603 	ldbu	r2,-25384(gp)
 8000794:	10803fcc 	andi	r2,r2,255
 8000798:	1080201c 	xori	r2,r2,128
 800079c:	10bfe004 	addi	r2,r2,-128
 80007a0:	108001e0 	cmpeqi	r2,r2,7
 80007a4:	1000031e 	bne	r2,zero,80007b4 <setOctUpDn+0x84>
 80007a8:	d0a73603 	ldbu	r2,-25384(gp)
 80007ac:	10800044 	addi	r2,r2,1
 80007b0:	00000106 	br	80007b8 <setOctUpDn+0x88>
 80007b4:	008001c4 	movi	r2,7
 80007b8:	d0a73605 	stb	r2,-25384(gp)
	}
	initPhaseIncrements();
 80007bc:	80002600 	call	8000260 <initPhaseIncrements>
}
 80007c0:	0001883a 	nop
 80007c4:	e037883a 	mov	sp,fp
 80007c8:	dfc00117 	ldw	ra,4(sp)
 80007cc:	df000017 	ldw	fp,0(sp)
 80007d0:	dec00204 	addi	sp,sp,8
 80007d4:	f800283a 	ret

080007d8 <GetDriverandReport>:

BYTE GetDriverandReport() {
 80007d8:	defff604 	addi	sp,sp,-40
 80007dc:	dfc00915 	stw	ra,36(sp)
 80007e0:	df000815 	stw	fp,32(sp)
 80007e4:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 80007e8:	00bfffc4 	movi	r2,-1
 80007ec:	e0bfff85 	stb	r2,-2(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 80007f0:	01020074 	movhi	r4,2049
 80007f4:	211da604 	addi	r4,r4,30360
 80007f8:	80087c00 	call	80087c0 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80007fc:	00800044 	movi	r2,1
 8000800:	e0bfffc5 	stb	r2,-1(fp)
 8000804:	00001d06 	br	800087c <GetDriverandReport+0xa4>
		tpl_ptr = GetDevtable(i);
 8000808:	e0bfffc3 	ldbu	r2,-1(fp)
 800080c:	1009883a 	mov	r4,r2
 8000810:	80034f80 	call	80034f8 <GetDevtable>
 8000814:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 8000818:	e0bffe17 	ldw	r2,-8(fp)
 800081c:	10800017 	ldw	r2,0(r2)
 8000820:	10001326 	beq	r2,zero,8000870 <GetDriverandReport+0x98>
			printf("Device: %d", i);
 8000824:	e0bfffc3 	ldbu	r2,-1(fp)
 8000828:	100b883a 	mov	r5,r2
 800082c:	01020074 	movhi	r4,2049
 8000830:	211daf04 	addi	r4,r4,30396
 8000834:	800869c0 	call	800869c <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 8000838:	e0bffe17 	ldw	r2,-8(fp)
 800083c:	10800103 	ldbu	r2,4(r2)
 8000840:	10803fcc 	andi	r2,r2,255
 8000844:	100690ba 	slli	r3,r2,2
 8000848:	00820074 	movhi	r2,2049
 800084c:	1885883a 	add	r2,r3,r2
 8000850:	109da217 	ldw	r2,30344(r2)
 8000854:	100b883a 	mov	r5,r2
 8000858:	01020074 	movhi	r4,2049
 800085c:	211db204 	addi	r4,r4,30408
 8000860:	800869c0 	call	800869c <printf>
			device = tpl_ptr->devclass;
 8000864:	e0bffe17 	ldw	r2,-8(fp)
 8000868:	10800103 	ldbu	r2,4(r2)
 800086c:	e0bfff85 	stb	r2,-2(fp)
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000870:	e0bfffc3 	ldbu	r2,-1(fp)
 8000874:	10800044 	addi	r2,r2,1
 8000878:	e0bfffc5 	stb	r2,-1(fp)
 800087c:	e0bfffc3 	ldbu	r2,-1(fp)
 8000880:	10800230 	cmpltui	r2,r2,8
 8000884:	103fe01e 	bne	r2,zero,8000808 <GetDriverandReport+0x30>
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000888:	d0a00003 	ldbu	r2,-32768(gp)
 800088c:	11003fcc 	andi	r4,r2,255
 8000890:	d0a736c3 	ldbu	r2,-25381(gp)
 8000894:	10803fcc 	andi	r2,r2,255
 8000898:	e0fffdc4 	addi	r3,fp,-9
 800089c:	d8c00415 	stw	r3,16(sp)
 80008a0:	00c00044 	movi	r3,1
 80008a4:	d8c00315 	stw	r3,12(sp)
 80008a8:	d8800215 	stw	r2,8(sp)
 80008ac:	d8000115 	stw	zero,4(sp)
 80008b0:	d8000015 	stw	zero,0(sp)
 80008b4:	01c00084 	movi	r7,2
 80008b8:	01802844 	movi	r6,161
 80008bc:	000b883a 	mov	r5,zero
 80008c0:	80026f80 	call	80026f8 <XferCtrlReq>
 80008c4:	e0bfff45 	stb	r2,-3(fp)
	if (rcode) {   //error handling
 80008c8:	e0bfff43 	ldbu	r2,-3(fp)
 80008cc:	10000926 	beq	r2,zero,80008f4 <GetDriverandReport+0x11c>
		printf("GetIdle Error. Error code: ");
 80008d0:	01020074 	movhi	r4,2049
 80008d4:	211db404 	addi	r4,r4,30416
 80008d8:	800869c0 	call	800869c <printf>
		printf("%x \n", rcode);
 80008dc:	e0bfff43 	ldbu	r2,-3(fp)
 80008e0:	100b883a 	mov	r5,r2
 80008e4:	01020074 	movhi	r4,2049
 80008e8:	211dbb04 	addi	r4,r4,30444
 80008ec:	800869c0 	call	800869c <printf>
 80008f0:	00000906 	br	8000918 <GetDriverandReport+0x140>
	} else {
		printf("Update rate: ");
 80008f4:	01020074 	movhi	r4,2049
 80008f8:	211dbd04 	addi	r4,r4,30452
 80008fc:	800869c0 	call	800869c <printf>
		printf("%x \n", tmpbyte);
 8000900:	e0bffdc3 	ldbu	r2,-9(fp)
 8000904:	10803fcc 	andi	r2,r2,255
 8000908:	100b883a 	mov	r5,r2
 800090c:	01020074 	movhi	r4,2049
 8000910:	211dbb04 	addi	r4,r4,30444
 8000914:	800869c0 	call	800869c <printf>
	}
	printf("Protocol: ");
 8000918:	01020074 	movhi	r4,2049
 800091c:	211dc104 	addi	r4,r4,30468
 8000920:	800869c0 	call	800869c <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 8000924:	d0a00003 	ldbu	r2,-32768(gp)
 8000928:	11003fcc 	andi	r4,r2,255
 800092c:	d0a736c3 	ldbu	r2,-25381(gp)
 8000930:	10803fcc 	andi	r2,r2,255
 8000934:	e0fffdc4 	addi	r3,fp,-9
 8000938:	d8c00415 	stw	r3,16(sp)
 800093c:	00c00044 	movi	r3,1
 8000940:	d8c00315 	stw	r3,12(sp)
 8000944:	d8800215 	stw	r2,8(sp)
 8000948:	d8000115 	stw	zero,4(sp)
 800094c:	d8000015 	stw	zero,0(sp)
 8000950:	01c000c4 	movi	r7,3
 8000954:	01802844 	movi	r6,161
 8000958:	000b883a 	mov	r5,zero
 800095c:	80026f80 	call	80026f8 <XferCtrlReq>
 8000960:	e0bfff45 	stb	r2,-3(fp)
	if (rcode) {   //error handling
 8000964:	e0bfff43 	ldbu	r2,-3(fp)
 8000968:	10000926 	beq	r2,zero,8000990 <GetDriverandReport+0x1b8>
		printf("GetProto Error. Error code ");
 800096c:	01020074 	movhi	r4,2049
 8000970:	211dc404 	addi	r4,r4,30480
 8000974:	800869c0 	call	800869c <printf>
		printf("%x \n", rcode);
 8000978:	e0bfff43 	ldbu	r2,-3(fp)
 800097c:	100b883a 	mov	r5,r2
 8000980:	01020074 	movhi	r4,2049
 8000984:	211dbb04 	addi	r4,r4,30444
 8000988:	800869c0 	call	800869c <printf>
 800098c:	00000606 	br	80009a8 <GetDriverandReport+0x1d0>
	} else {
		printf("%d \n", tmpbyte);
 8000990:	e0bffdc3 	ldbu	r2,-9(fp)
 8000994:	10803fcc 	andi	r2,r2,255
 8000998:	100b883a 	mov	r5,r2
 800099c:	01020074 	movhi	r4,2049
 80009a0:	211dcb04 	addi	r4,r4,30508
 80009a4:	800869c0 	call	800869c <printf>
	}
	return device;
 80009a8:	e0bfff83 	ldbu	r2,-2(fp)
}
 80009ac:	e037883a 	mov	sp,fp
 80009b0:	dfc00117 	ldw	ra,4(sp)
 80009b4:	df000017 	ldw	fp,0(sp)
 80009b8:	dec00204 	addi	sp,sp,8
 80009bc:	f800283a 	ret

080009c0 <setLED>:

void setLED(int LED) {
 80009c0:	defffe04 	addi	sp,sp,-8
 80009c4:	df000115 	stw	fp,4(sp)
 80009c8:	df000104 	addi	fp,sp,4
 80009cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 80009d0:	00c0d037 	ldwio	r3,832(zero)
 80009d4:	01000044 	movi	r4,1
 80009d8:	e0bfff17 	ldw	r2,-4(fp)
 80009dc:	2084983a 	sll	r2,r4,r2
 80009e0:	1884b03a 	or	r2,r3,r2
 80009e4:	0080d035 	stwio	r2,832(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 80009e8:	0001883a 	nop
 80009ec:	e037883a 	mov	sp,fp
 80009f0:	df000017 	ldw	fp,0(sp)
 80009f4:	dec00104 	addi	sp,sp,4
 80009f8:	f800283a 	ret

080009fc <clearLED>:

void clearLED(int LED) {
 80009fc:	defffe04 	addi	sp,sp,-8
 8000a00:	df000115 	stw	fp,4(sp)
 8000a04:	df000104 	addi	fp,sp,4
 8000a08:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000a0c:	00c0d037 	ldwio	r3,832(zero)
 8000a10:	01000044 	movi	r4,1
 8000a14:	e0bfff17 	ldw	r2,-4(fp)
 8000a18:	2084983a 	sll	r2,r4,r2
 8000a1c:	0084303a 	nor	r2,zero,r2
 8000a20:	1884703a 	and	r2,r3,r2
 8000a24:	0080d035 	stwio	r2,832(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 8000a28:	0001883a 	nop
 8000a2c:	e037883a 	mov	sp,fp
 8000a30:	df000017 	ldw	fp,0(sp)
 8000a34:	dec00104 	addi	sp,sp,4
 8000a38:	f800283a 	ret

08000a3c <setKeycode>:

void setKeycode(WORD keycode) {
 8000a3c:	defffe04 	addi	sp,sp,-8
 8000a40:	df000115 	stw	fp,4(sp)
 8000a44:	df000104 	addi	fp,sp,4
 8000a48:	2005883a 	mov	r2,r4
 8000a4c:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 8000a50:	e0bfff0b 	ldhu	r2,-4(fp)
 8000a54:	0080e435 	stwio	r2,912(zero)
}
 8000a58:	0001883a 	nop
 8000a5c:	e037883a 	mov	sp,fp
 8000a60:	df000017 	ldw	fp,0(sp)
 8000a64:	dec00104 	addi	sp,sp,4
 8000a68:	f800283a 	ret

08000a6c <printSignedHex0>:

void printSignedHex0(signed char value) {
 8000a6c:	defffc04 	addi	sp,sp,-16
 8000a70:	dfc00315 	stw	ra,12(sp)
 8000a74:	df000215 	stw	fp,8(sp)
 8000a78:	df000204 	addi	fp,sp,8
 8000a7c:	2005883a 	mov	r2,r4
 8000a80:	e0bffe05 	stb	r2,-8(fp)
	BYTE tens = 0;
 8000a84:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 8000a88:	e03fff85 	stb	zero,-2(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000a8c:	0080d437 	ldwio	r2,848(zero)
 8000a90:	e0bfff0d 	sth	r2,-4(fp)
	if (value < 0) {
 8000a94:	e0bffe07 	ldb	r2,-8(fp)
 8000a98:	1000060e 	bge	r2,zero,8000ab4 <printSignedHex0+0x48>
		setLED(11);
 8000a9c:	010002c4 	movi	r4,11
 8000aa0:	80009c00 	call	80009c0 <setLED>
		value = -value;
 8000aa4:	e0bffe03 	ldbu	r2,-8(fp)
 8000aa8:	0085c83a 	sub	r2,zero,r2
 8000aac:	e0bffe05 	stb	r2,-8(fp)
 8000ab0:	00000206 	br	8000abc <printSignedHex0+0x50>
	} else {
		clearLED(11);
 8000ab4:	010002c4 	movi	r4,11
 8000ab8:	80009fc0 	call	80009fc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000abc:	e0bffe03 	ldbu	r2,-8(fp)
 8000ac0:	108018c4 	addi	r2,r2,99
 8000ac4:	10803fcc 	andi	r2,r2,255
 8000ac8:	108031f0 	cmpltui	r2,r2,199
 8000acc:	1000031e 	bne	r2,zero,8000adc <printSignedHex0+0x70>
		setLED(13);
 8000ad0:	01000344 	movi	r4,13
 8000ad4:	80009c00 	call	80009c0 <setLED>
 8000ad8:	00000206 	br	8000ae4 <printSignedHex0+0x78>
	else
		clearLED(13);
 8000adc:	01000344 	movi	r4,13
 8000ae0:	80009fc0 	call	80009fc <clearLED>

	value = value % 100;
 8000ae4:	e0bffe07 	ldb	r2,-8(fp)
 8000ae8:	01401904 	movi	r5,100
 8000aec:	1009883a 	mov	r4,r2
 8000af0:	80051880 	call	8005188 <__modsi3>
 8000af4:	e0bffe05 	stb	r2,-8(fp)
	tens = value / 10;
 8000af8:	e0bffe07 	ldb	r2,-8(fp)
 8000afc:	01400284 	movi	r5,10
 8000b00:	1009883a 	mov	r4,r2
 8000b04:	80051080 	call	8005108 <__divsi3>
 8000b08:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000b0c:	e0bffe07 	ldb	r2,-8(fp)
 8000b10:	01400284 	movi	r5,10
 8000b14:	1009883a 	mov	r4,r2
 8000b18:	80051880 	call	8005188 <__modsi3>
 8000b1c:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0x00FF;
 8000b20:	e0bfff0b 	ldhu	r2,-4(fp)
 8000b24:	10803fcc 	andi	r2,r2,255
 8000b28:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (tens << 12);
 8000b2c:	e0bfffc3 	ldbu	r2,-1(fp)
 8000b30:	1004933a 	slli	r2,r2,12
 8000b34:	1007883a 	mov	r3,r2
 8000b38:	e0bfff0b 	ldhu	r2,-4(fp)
 8000b3c:	1884b03a 	or	r2,r3,r2
 8000b40:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (ones << 8);
 8000b44:	e0bfff83 	ldbu	r2,-2(fp)
 8000b48:	1004923a 	slli	r2,r2,8
 8000b4c:	1007883a 	mov	r3,r2
 8000b50:	e0bfff0b 	ldhu	r2,-4(fp)
 8000b54:	1884b03a 	or	r2,r3,r2
 8000b58:	e0bfff0d 	sth	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000b5c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000b60:	0080d435 	stwio	r2,848(zero)
}
 8000b64:	0001883a 	nop
 8000b68:	e037883a 	mov	sp,fp
 8000b6c:	dfc00117 	ldw	ra,4(sp)
 8000b70:	df000017 	ldw	fp,0(sp)
 8000b74:	dec00204 	addi	sp,sp,8
 8000b78:	f800283a 	ret

08000b7c <printSignedHex1>:

void printSignedHex1(signed char value) {
 8000b7c:	defffb04 	addi	sp,sp,-20
 8000b80:	dfc00415 	stw	ra,16(sp)
 8000b84:	df000315 	stw	fp,12(sp)
 8000b88:	df000304 	addi	fp,sp,12
 8000b8c:	2005883a 	mov	r2,r4
 8000b90:	e0bffd05 	stb	r2,-12(fp)
	BYTE tens = 0;
 8000b94:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 8000b98:	e03fff85 	stb	zero,-2(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000b9c:	0080d437 	ldwio	r2,848(zero)
 8000ba0:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 8000ba4:	e0bffd07 	ldb	r2,-12(fp)
 8000ba8:	1000060e 	bge	r2,zero,8000bc4 <printSignedHex1+0x48>
		setLED(10);
 8000bac:	01000284 	movi	r4,10
 8000bb0:	80009c00 	call	80009c0 <setLED>
		value = -value;
 8000bb4:	e0bffd03 	ldbu	r2,-12(fp)
 8000bb8:	0085c83a 	sub	r2,zero,r2
 8000bbc:	e0bffd05 	stb	r2,-12(fp)
 8000bc0:	00000206 	br	8000bcc <printSignedHex1+0x50>
	} else {
		clearLED(10);
 8000bc4:	01000284 	movi	r4,10
 8000bc8:	80009fc0 	call	80009fc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000bcc:	e0bffd03 	ldbu	r2,-12(fp)
 8000bd0:	108018c4 	addi	r2,r2,99
 8000bd4:	10803fcc 	andi	r2,r2,255
 8000bd8:	108031f0 	cmpltui	r2,r2,199
 8000bdc:	1000031e 	bne	r2,zero,8000bec <printSignedHex1+0x70>
		setLED(12);
 8000be0:	01000304 	movi	r4,12
 8000be4:	80009c00 	call	80009c0 <setLED>
 8000be8:	00000206 	br	8000bf4 <printSignedHex1+0x78>
	else
		clearLED(12);
 8000bec:	01000304 	movi	r4,12
 8000bf0:	80009fc0 	call	80009fc <clearLED>

	value = value % 100;
 8000bf4:	e0bffd07 	ldb	r2,-12(fp)
 8000bf8:	01401904 	movi	r5,100
 8000bfc:	1009883a 	mov	r4,r2
 8000c00:	80051880 	call	8005188 <__modsi3>
 8000c04:	e0bffd05 	stb	r2,-12(fp)
	tens = value / 10;
 8000c08:	e0bffd07 	ldb	r2,-12(fp)
 8000c0c:	01400284 	movi	r5,10
 8000c10:	1009883a 	mov	r4,r2
 8000c14:	80051080 	call	8005108 <__divsi3>
 8000c18:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000c1c:	e0bffd07 	ldb	r2,-12(fp)
 8000c20:	01400284 	movi	r5,10
 8000c24:	1009883a 	mov	r4,r2
 8000c28:	80051880 	call	8005188 <__modsi3>
 8000c2c:	e0bfff85 	stb	r2,-2(fp)
	tens = value / 10;
 8000c30:	e0bffd07 	ldb	r2,-12(fp)
 8000c34:	01400284 	movi	r5,10
 8000c38:	1009883a 	mov	r4,r2
 8000c3c:	80051080 	call	8005108 <__divsi3>
 8000c40:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000c44:	e0bffd07 	ldb	r2,-12(fp)
 8000c48:	01400284 	movi	r5,10
 8000c4c:	1009883a 	mov	r4,r2
 8000c50:	80051880 	call	8005188 <__modsi3>
 8000c54:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0xFF00;
 8000c58:	e0bffe17 	ldw	r2,-8(fp)
 8000c5c:	10bfc00c 	andi	r2,r2,65280
 8000c60:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 8000c64:	e0bfffc3 	ldbu	r2,-1(fp)
 8000c68:	1004913a 	slli	r2,r2,4
 8000c6c:	1007883a 	mov	r3,r2
 8000c70:	e0bffe17 	ldw	r2,-8(fp)
 8000c74:	10c4b03a 	or	r2,r2,r3
 8000c78:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 8000c7c:	e0bfff83 	ldbu	r2,-2(fp)
 8000c80:	e0fffe17 	ldw	r3,-8(fp)
 8000c84:	1884b03a 	or	r2,r3,r2
 8000c88:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000c8c:	e0bffe17 	ldw	r2,-8(fp)
 8000c90:	0080d435 	stwio	r2,848(zero)
}
 8000c94:	0001883a 	nop
 8000c98:	e037883a 	mov	sp,fp
 8000c9c:	dfc00117 	ldw	ra,4(sp)
 8000ca0:	df000017 	ldw	fp,0(sp)
 8000ca4:	dec00204 	addi	sp,sp,8
 8000ca8:	f800283a 	ret

08000cac <main>:





int main() {
 8000cac:	defff304 	addi	sp,sp,-52
 8000cb0:	dfc00c15 	stw	ra,48(sp)
 8000cb4:	df000b15 	stw	fp,44(sp)
 8000cb8:	df000b04 	addi	fp,sp,44

	int voiceIdx = 0;
 8000cbc:	e03fff15 	stw	zero,-4(fp)
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 8000cc0:	01020074 	movhi	r4,2049
 8000cc4:	211dcd04 	addi	r4,r4,30516
 8000cc8:	8013d400 	call	8013d40 <alt_avalon_i2c_open>
 8000ccc:	e0bffc15 	stw	r2,-16(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 8000cd0:	e0bffc17 	ldw	r2,-16(fp)
 8000cd4:	1000051e 	bne	r2,zero,8000cec <main+0x40>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 8000cd8:	01020074 	movhi	r4,2049
 8000cdc:	211dd004 	addi	r4,r4,30528
 8000ce0:	80087c00 	call	80087c0 <puts>
		return 1;
 8000ce4:	00800044 	movi	r2,1
 8000ce8:	0001c606 	br	8001404 <main+0x758>
	}
	printf ("I2C Test Program\n");
 8000cec:	01020074 	movhi	r4,2049
 8000cf0:	211dd804 	addi	r4,r4,30560
 8000cf4:	80087c00 	call	80087c0 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 8000cf8:	01400284 	movi	r5,10
 8000cfc:	e13ffc17 	ldw	r4,-16(fp)
 8000d00:	801451c0 	call	801451c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 8000d04:	000b883a 	mov	r5,zero
 8000d08:	e13ffc17 	ldw	r4,-16(fp)
 8000d0c:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000d10:	10bfffcc 	andi	r2,r2,65535
 8000d14:	100b883a 	mov	r5,r2
 8000d18:	01020074 	movhi	r4,2049
 8000d1c:	211ddd04 	addi	r4,r4,30580
 8000d20:	800869c0 	call	800869c <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 8000d24:	00800384 	movi	r2,14
 8000d28:	e0bffbc5 	stb	r2,-17(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 8000d2c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d30:	1009883a 	mov	r4,r2
 8000d34:	8005c980 	call	8005c98 <__floatunsisf>
 8000d38:	1007883a 	mov	r3,r2
 8000d3c:	180b883a 	mov	r5,r3
 8000d40:	011059f4 	movhi	r4,16743
 8000d44:	210d8144 	addi	r4,r4,13829
 8000d48:	80057a40 	call	80057a4 <__subsf3>
 8000d4c:	1007883a 	mov	r3,r2
 8000d50:	1805883a 	mov	r2,r3
 8000d54:	01514034 	movhi	r5,17664
 8000d58:	1009883a 	mov	r4,r2
 8000d5c:	80053a80 	call	80053a8 <__mulsf3>
 8000d60:	1007883a 	mov	r3,r2
 8000d64:	1805883a 	mov	r2,r3
 8000d68:	1009883a 	mov	r4,r2
 8000d6c:	80050180 	call	8005018 <__fixunssfsi>
 8000d70:	e0bffb0d 	sth	r2,-20(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 8000d74:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d78:	e0fffb0b 	ldhu	r3,-20(fp)
 8000d7c:	180d883a 	mov	r6,r3
 8000d80:	100b883a 	mov	r5,r2
 8000d84:	01020074 	movhi	r4,2049
 8000d88:	211de304 	addi	r4,r4,30604
 8000d8c:	800869c0 	call	800869c <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 8000d90:	e0bffbc3 	ldbu	r2,-17(fp)
 8000d94:	100492fa 	slli	r2,r2,11
 8000d98:	1007883a 	mov	r3,r2
 8000d9c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000da0:	1884b03a 	or	r2,r3,r2
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 8000da4:	10bfffcc 	andi	r2,r2,65535
 8000da8:	100d883a 	mov	r6,r2
 8000dac:	01400c84 	movi	r5,50
 8000db0:	e13ffc17 	ldw	r4,-16(fp)
 8000db4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 8000db8:	01400c84 	movi	r5,50
 8000dbc:	e13ffc17 	ldw	r4,-16(fp)
 8000dc0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000dc4:	10bfffcc 	andi	r2,r2,65535
 8000dc8:	100b883a 	mov	r5,r2
 8000dcc:	01020074 	movhi	r4,2049
 8000dd0:	211df404 	addi	r4,r4,30672
 8000dd4:	800869c0 	call	800869c <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 8000dd8:	01917f84 	movi	r6,17918
 8000ddc:	01400c04 	movi	r5,48
 8000de0:	e13ffc17 	ldw	r4,-16(fp)
 8000de4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP
			);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 8000de8:	01400c04 	movi	r5,48
 8000dec:	e13ffc17 	ldw	r4,-16(fp)
 8000df0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000df4:	10bfffcc 	andi	r2,r2,65535
 8000df8:	100b883a 	mov	r5,r2
 8000dfc:	01020074 	movhi	r4,2049
 8000e00:	211dfb04 	addi	r4,r4,30700
 8000e04:	800869c0 	call	800869c <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 8000e08:	01801384 	movi	r6,78
 8000e0c:	01400a04 	movi	r5,40
 8000e10:	e13ffc17 	ldw	r4,-16(fp)
 8000e14:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 8000e18:	01400a04 	movi	r5,40
 8000e1c:	e13ffc17 	ldw	r4,-16(fp)
 8000e20:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000e24:	10bfffcc 	andi	r2,r2,65535
 8000e28:	100b883a 	mov	r5,r2
 8000e2c:	01020074 	movhi	r4,2049
 8000e30:	211e0304 	addi	r4,r4,30732
 8000e34:	800869c0 	call	800869c <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 8000e38:	01801cc4 	movi	r6,115
 8000e3c:	01400084 	movi	r5,2
 8000e40:	e13ffc17 	ldw	r4,-16(fp)
 8000e44:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 8000e48:	01400084 	movi	r5,2
 8000e4c:	e13ffc17 	ldw	r4,-16(fp)
 8000e50:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000e54:	10bfffcc 	andi	r2,r2,65535
 8000e58:	100b883a 	mov	r5,r2
 8000e5c:	01020074 	movhi	r4,2049
 8000e60:	211e0a04 	addi	r4,r4,30760
 8000e64:	800869c0 	call	800869c <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 8000e68:	018002c4 	movi	r6,11
 8000e6c:	01400104 	movi	r5,4
 8000e70:	e13ffc17 	ldw	r4,-16(fp)
 8000e74:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_48k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 8000e78:	01400104 	movi	r5,4
 8000e7c:	e13ffc17 	ldw	r4,-16(fp)
 8000e80:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000e84:	10bfffcc 	andi	r2,r2,65535
 8000e88:	100b883a 	mov	r5,r2
 8000e8c:	01020074 	movhi	r4,2049
 8000e90:	211e1204 	addi	r4,r4,30792
 8000e94:	800869c0 	call	800869c <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 8000e98:	01802004 	movi	r6,128
 8000e9c:	01400184 	movi	r5,6
 8000ea0:	e13ffc17 	ldw	r4,-16(fp)
 8000ea4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 8000ea8:	01400184 	movi	r5,6
 8000eac:	e13ffc17 	ldw	r4,-16(fp)
 8000eb0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000eb4:	10bfffcc 	andi	r2,r2,65535
 8000eb8:	100b883a 	mov	r5,r2
 8000ebc:	01020074 	movhi	r4,2049
 8000ec0:	211e1904 	addi	r4,r4,30820
 8000ec4:	800869c0 	call	800869c <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 8000ec8:	01800104 	movi	r6,4
 8000ecc:	01400904 	movi	r5,36
 8000ed0:	e13ffc17 	ldw	r4,-16(fp)
 8000ed4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000ed8:	01400904 	movi	r5,36
 8000edc:	e13ffc17 	ldw	r4,-16(fp)
 8000ee0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000ee4:	10bfffcc 	andi	r2,r2,65535
 8000ee8:	100b883a 	mov	r5,r2
 8000eec:	01020074 	movhi	r4,2049
 8000ef0:	211e2004 	addi	r4,r4,30848
 8000ef4:	800869c0 	call	800869c <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 8000ef8:	01801c04 	movi	r6,112
 8000efc:	01400284 	movi	r5,10
 8000f00:	e13ffc17 	ldw	r4,-16(fp)
 8000f04:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_DAP << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT|
			SGTL5000_DAP_SEL_I2S_IN << SGTL5000_DAP_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000f08:	01400284 	movi	r5,10
 8000f0c:	e13ffc17 	ldw	r4,-16(fp)
 8000f10:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000f14:	10bfffcc 	andi	r2,r2,65535
 8000f18:	100b883a 	mov	r5,r2
 8000f1c:	01020074 	movhi	r4,2049
 8000f20:	211e2704 	addi	r4,r4,30876
 8000f24:	800869c0 	call	800869c <printf>
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000f28:	01400904 	movi	r5,36
 8000f2c:	e13ffc17 	ldw	r4,-16(fp)
 8000f30:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000f34:	10bfffcc 	andi	r2,r2,65535
 8000f38:	100b883a 	mov	r5,r2
 8000f3c:	01020074 	movhi	r4,2049
 8000f40:	211e2004 	addi	r4,r4,30848
 8000f44:	800869c0 	call	800869c <printf>

	//ADC -> I2S out, I2S in -> DAP -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000f48:	000d883a 	mov	r6,zero
 8000f4c:	01400384 	movi	r5,14
 8000f50:	e13ffc17 	ldw	r4,-16(fp)
 8000f54:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000f58:	01400384 	movi	r5,14
 8000f5c:	e13ffc17 	ldw	r4,-16(fp)
 8000f60:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000f64:	10bfffcc 	andi	r2,r2,65535
 8000f68:	100b883a 	mov	r5,r2
 8000f6c:	01020074 	movhi	r4,2049
 8000f70:	211e2e04 	addi	r4,r4,30904
 8000f74:	800869c0 	call	800869c <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000f78:	01400504 	movi	r5,20
 8000f7c:	e13ffc17 	ldw	r4,-16(fp)
 8000f80:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000f84:	10bfffcc 	andi	r2,r2,65535
 8000f88:	100b883a 	mov	r5,r2
 8000f8c:	01020074 	movhi	r4,2049
 8000f90:	211e3604 	addi	r4,r4,30936
 8000f94:	800869c0 	call	800869c <printf>

	// some further attempts to configure for better headphone volume
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DAC_VOL, 0x3c3c);
 8000f98:	018f0f04 	movi	r6,15420
 8000f9c:	01400404 	movi	r5,16
 8000fa0:	e13ffc17 	ldw	r4,-16(fp)
 8000fa4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	printf( "CHIP_DAC_VOL register: %x\n", SGTL5000_Reg_Rd (i2c_dev,SGTL5000_CHIP_DAC_VOL));
 8000fa8:	01400404 	movi	r5,16
 8000fac:	e13ffc17 	ldw	r4,-16(fp)
 8000fb0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000fb4:	10bfffcc 	andi	r2,r2,65535
 8000fb8:	100b883a 	mov	r5,r2
 8000fbc:	01020074 	movhi	r4,2049
 8000fc0:	211e3e04 	addi	r4,r4,30968
 8000fc4:	800869c0 	call	800869c <printf>

	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_HP_CTRL, 0x0505);
 8000fc8:	01814144 	movi	r6,1285
 8000fcc:	01400884 	movi	r5,34
 8000fd0:	e13ffc17 	ldw	r4,-16(fp)
 8000fd4:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	printf( "CHIP_ANA_HP_CTRL register: $x\n", SGTL5000_Reg_Rd (i2c_dev,SGTL5000_CHIP_ANA_HP_CTRL));
 8000fd8:	01400884 	movi	r5,34
 8000fdc:	e13ffc17 	ldw	r4,-16(fp)
 8000fe0:	80014180 	call	8001418 <SGTL5000_Reg_Rd>
 8000fe4:	10bfffcc 	andi	r2,r2,65535
 8000fe8:	100b883a 	mov	r5,r2
 8000fec:	01020074 	movhi	r4,2049
 8000ff0:	211e4504 	addi	r4,r4,30996
 8000ff4:	800869c0 	call	800869c <printf>

	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_DAP_CTRL, SGTL5000_DAP_EN);
 8000ff8:	01800044 	movi	r6,1
 8000ffc:	01404004 	movi	r5,256
 8001000:	e13ffc17 	ldw	r4,-16(fp)
 8001004:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_DAP_BASS_ENHANCE_CTRL, 0x0511);
 8001008:	01814444 	movi	r6,1297
 800100c:	01404184 	movi	r5,262
 8001010:	e13ffc17 	ldw	r4,-16(fp)
 8001014:	80014cc0 	call	80014cc <SGTL5000_Reg_Wr>

	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 8001018:	e03ffec5 	stb	zero,-5(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 800101c:	e03ffe85 	stb	zero,-6(fp)
	BYTE device;
	WORD keycode;

	initPhaseIncrements();
 8001020:	80002600 	call	8000260 <initPhaseIncrements>
	WORD initAmp = 0x38;
 8001024:	00800e04 	movi	r2,56
 8001028:	e0bffa8d 	sth	r2,-22(fp)
	printf("phase increments initialized\n");
 800102c:	01020074 	movhi	r4,2049
 8001030:	211e4d04 	addi	r4,r4,31028
 8001034:	80087c00 	call	80087c0 <puts>
	printf("initializing MAX3421E...\n");
 8001038:	01020074 	movhi	r4,2049
 800103c:	211e5504 	addi	r4,r4,31060
 8001040:	80087c00 	call	80087c0 <puts>
	MAX3421E_init();
 8001044:	80024b40 	call	80024b4 <MAX3421E_init>
	printf("initializing USB...\n");
 8001048:	01020074 	movhi	r4,2049
 800104c:	211e5c04 	addi	r4,r4,31088
 8001050:	80087c00 	call	80087c0 <puts>
	USB_init();
 8001054:	8002cc00 	call	8002cc0 <USB_init>
	while (1) {
		printf(".");
 8001058:	01000b84 	movi	r4,46
 800105c:	80086dc0 	call	80086dc <putchar>
		MAX3421E_Task();
 8001060:	800259c0 	call	800259c <MAX3421E_Task>
		USB_Task();
 8001064:	8002d480 	call	8002d48 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8001068:	80034d80 	call	80034d8 <GetUsbTaskState>
 800106c:	10803fcc 	andi	r2,r2,255
 8001070:	10801018 	cmpnei	r2,r2,64
 8001074:	1000bf1e 	bne	r2,zero,8001374 <main+0x6c8>
			if (!runningdebugflag) {
 8001078:	e0bffec3 	ldbu	r2,-5(fp)
 800107c:	1000071e 	bne	r2,zero,800109c <main+0x3f0>
				runningdebugflag = 1;
 8001080:	00800044 	movi	r2,1
 8001084:	e0bffec5 	stb	r2,-5(fp)
				setLED(9);
 8001088:	01000244 	movi	r4,9
 800108c:	80009c00 	call	80009c0 <setLED>
				device = GetDriverandReport();
 8001090:	80007d80 	call	80007d8 <GetDriverandReport>
 8001094:	e0bffe45 	stb	r2,-7(fp)
 8001098:	003fef06 	br	8001058 <main+0x3ac>
			} else if (device == 1) {
 800109c:	e0bffe43 	ldbu	r2,-7(fp)
 80010a0:	10800058 	cmpnei	r2,r2,1
 80010a4:	1000571e 	bne	r2,zero,8001204 <main+0x558>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 80010a8:	e0bff584 	addi	r2,fp,-42
 80010ac:	1009883a 	mov	r4,r2
 80010b0:	8001df40 	call	8001df4 <kbdPoll>
 80010b4:	e0bffa45 	stb	r2,-23(fp)
				if (rcode == hrNAK) {
 80010b8:	e0bffa43 	ldbu	r2,-23(fp)
 80010bc:	10800118 	cmpnei	r2,r2,4
 80010c0:	1000cc26 	beq	r2,zero,80013f4 <main+0x748>
					continue; //NAK means no new data
				} else if (rcode) {
 80010c4:	e0bffa43 	ldbu	r2,-23(fp)
 80010c8:	10000926 	beq	r2,zero,80010f0 <main+0x444>
					printf("Rcode: ");
 80010cc:	01020074 	movhi	r4,2049
 80010d0:	211e6104 	addi	r4,r4,31108
 80010d4:	800869c0 	call	800869c <printf>
					printf("%x \n", rcode);
 80010d8:	e0bffa43 	ldbu	r2,-23(fp)
 80010dc:	100b883a 	mov	r5,r2
 80010e0:	01020074 	movhi	r4,2049
 80010e4:	211dbb04 	addi	r4,r4,30444
 80010e8:	800869c0 	call	800869c <printf>
					continue;
 80010ec:	0000c406 	br	8001400 <main+0x754>
				}
				printf("keycodes: ");
 80010f0:	01020074 	movhi	r4,2049
 80010f4:	211e6304 	addi	r4,r4,31116
 80010f8:	800869c0 	call	800869c <printf>
				for (int i = 0; i < 4; i++) {
 80010fc:	e03ffd15 	stw	zero,-12(fp)
 8001100:	00002506 	br	8001198 <main+0x4ec>
					keycode = (MONO_POLY == 0x01)? kbdbuf.keycode[i]:kbdbuf.keycode[0];
 8001104:	d0a00543 	ldbu	r2,-32747(gp)
 8001108:	10803fcc 	andi	r2,r2,255
 800110c:	10800058 	cmpnei	r2,r2,1
 8001110:	1000051e 	bne	r2,zero,8001128 <main+0x47c>
 8001114:	e0bffd17 	ldw	r2,-12(fp)
 8001118:	e085883a 	add	r2,fp,r2
 800111c:	10bff603 	ldbu	r2,-40(r2)
 8001120:	10803fcc 	andi	r2,r2,255
 8001124:	00000206 	br	8001130 <main+0x484>
 8001128:	e0bff603 	ldbu	r2,-40(fp)
 800112c:	10803fcc 	andi	r2,r2,255
 8001130:	e0bff98d 	sth	r2,-26(fp)
					printf("%x ", keycode);
 8001134:	e0bff98b 	ldhu	r2,-26(fp)
 8001138:	100b883a 	mov	r5,r2
 800113c:	01020074 	movhi	r4,2049
 8001140:	211e6604 	addi	r4,r4,31128
 8001144:	800869c0 	call	800869c <printf>
					setKeycodeVoice(keycode,voiceIdx);
 8001148:	e0bff98b 	ldhu	r2,-26(fp)
 800114c:	e17fff17 	ldw	r5,-4(fp)
 8001150:	1009883a 	mov	r4,r2
 8001154:	80006180 	call	8000618 <setKeycodeVoice>
					if (keycode != 0x00) {
 8001158:	e0bff98b 	ldhu	r2,-26(fp)
 800115c:	10000b26 	beq	r2,zero,800118c <main+0x4e0>
						voiceIdx = (voiceIdx+1)%4;
 8001160:	e0bfff17 	ldw	r2,-4(fp)
 8001164:	10c00044 	addi	r3,r2,1
 8001168:	00a00034 	movhi	r2,32768
 800116c:	108000c4 	addi	r2,r2,3
 8001170:	1884703a 	and	r2,r3,r2
 8001174:	1000040e 	bge	r2,zero,8001188 <main+0x4dc>
 8001178:	10bfffc4 	addi	r2,r2,-1
 800117c:	00ffff04 	movi	r3,-4
 8001180:	10c4b03a 	or	r2,r2,r3
 8001184:	10800044 	addi	r2,r2,1
 8001188:	e0bfff15 	stw	r2,-4(fp)
				for (int i = 0; i < 4; i++) {
 800118c:	e0bffd17 	ldw	r2,-12(fp)
 8001190:	10800044 	addi	r2,r2,1
 8001194:	e0bffd15 	stw	r2,-12(fp)
 8001198:	e0bffd17 	ldw	r2,-12(fp)
 800119c:	10800110 	cmplti	r2,r2,4
 80011a0:	103fd81e 	bne	r2,zero,8001104 <main+0x458>
					}
				}
				if (searchForOct(kbdbuf.keycode[0])) {
 80011a4:	e0bff603 	ldbu	r2,-40(fp)
 80011a8:	10803fcc 	andi	r2,r2,255
 80011ac:	1009883a 	mov	r4,r2
 80011b0:	80006c00 	call	80006c0 <searchForOct>
 80011b4:	10000426 	beq	r2,zero,80011c8 <main+0x51c>
					setOctUpDn(kbdbuf.keycode[0]);
 80011b8:	e0bff603 	ldbu	r2,-40(fp)
 80011bc:	10803fcc 	andi	r2,r2,255
 80011c0:	1009883a 	mov	r4,r2
 80011c4:	80007300 	call	8000730 <setOctUpDn>
				}

				printSignedHex0(kbdbuf.keycode[0]);
 80011c8:	e0bff603 	ldbu	r2,-40(fp)
 80011cc:	10803fcc 	andi	r2,r2,255
 80011d0:	1080201c 	xori	r2,r2,128
 80011d4:	10bfe004 	addi	r2,r2,-128
 80011d8:	1009883a 	mov	r4,r2
 80011dc:	8000a6c0 	call	8000a6c <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 80011e0:	e0bff643 	ldbu	r2,-39(fp)
 80011e4:	10803fcc 	andi	r2,r2,255
 80011e8:	1080201c 	xori	r2,r2,128
 80011ec:	10bfe004 	addi	r2,r2,-128
 80011f0:	1009883a 	mov	r4,r2
 80011f4:	8000b7c0 	call	8000b7c <printSignedHex1>
				printf("\n");
 80011f8:	01000284 	movi	r4,10
 80011fc:	80086dc0 	call	80086dc <putchar>
 8001200:	003f9506 	br	8001058 <main+0x3ac>
			}

			else if (device == 2) {
 8001204:	e0bffe43 	ldbu	r2,-7(fp)
 8001208:	10800098 	cmpnei	r2,r2,2
 800120c:	103f921e 	bne	r2,zero,8001058 <main+0x3ac>
				rcode = mousePoll(&buf);
 8001210:	e0bff784 	addi	r2,fp,-34
 8001214:	1009883a 	mov	r4,r2
 8001218:	8001d700 	call	8001d70 <mousePoll>
 800121c:	e0bffa45 	stb	r2,-23(fp)
				if (rcode == hrNAK) {
 8001220:	e0bffa43 	ldbu	r2,-23(fp)
 8001224:	10800118 	cmpnei	r2,r2,4
 8001228:	10007426 	beq	r2,zero,80013fc <main+0x750>
					//NAK means no new data
					continue;
				} else if (rcode) {
 800122c:	e0bffa43 	ldbu	r2,-23(fp)
 8001230:	10000926 	beq	r2,zero,8001258 <main+0x5ac>
					printf("Rcode: ");
 8001234:	01020074 	movhi	r4,2049
 8001238:	211e6104 	addi	r4,r4,31108
 800123c:	800869c0 	call	800869c <printf>
					printf("%x \n", rcode);
 8001240:	e0bffa43 	ldbu	r2,-23(fp)
 8001244:	100b883a 	mov	r5,r2
 8001248:	01020074 	movhi	r4,2049
 800124c:	211dbb04 	addi	r4,r4,30444
 8001250:	800869c0 	call	800869c <printf>
					continue;
 8001254:	00006a06 	br	8001400 <main+0x754>
				}
				printf("X displacement: ");
 8001258:	01020074 	movhi	r4,2049
 800125c:	211e6704 	addi	r4,r4,31132
 8001260:	800869c0 	call	800869c <printf>
				printf("%d ", (signed char) buf.Xdispl);
 8001264:	e0bff7c3 	ldbu	r2,-33(fp)
 8001268:	10803fcc 	andi	r2,r2,255
 800126c:	1080201c 	xori	r2,r2,128
 8001270:	10bfe004 	addi	r2,r2,-128
 8001274:	100b883a 	mov	r5,r2
 8001278:	01020074 	movhi	r4,2049
 800127c:	211e6c04 	addi	r4,r4,31152
 8001280:	800869c0 	call	800869c <printf>
				printSignedHex0((signed char) buf.Xdispl);
 8001284:	e0bff7c3 	ldbu	r2,-33(fp)
 8001288:	10803fcc 	andi	r2,r2,255
 800128c:	1080201c 	xori	r2,r2,128
 8001290:	10bfe004 	addi	r2,r2,-128
 8001294:	1009883a 	mov	r4,r2
 8001298:	8000a6c0 	call	8000a6c <printSignedHex0>
				printf("Y displacement: ");
 800129c:	01020074 	movhi	r4,2049
 80012a0:	211e6d04 	addi	r4,r4,31156
 80012a4:	800869c0 	call	800869c <printf>
				printf("%d ", (signed char) buf.Ydispl);
 80012a8:	e0bff803 	ldbu	r2,-32(fp)
 80012ac:	10803fcc 	andi	r2,r2,255
 80012b0:	1080201c 	xori	r2,r2,128
 80012b4:	10bfe004 	addi	r2,r2,-128
 80012b8:	100b883a 	mov	r5,r2
 80012bc:	01020074 	movhi	r4,2049
 80012c0:	211e6c04 	addi	r4,r4,31152
 80012c4:	800869c0 	call	800869c <printf>
				printSignedHex1((signed char) buf.Ydispl);
 80012c8:	e0bff803 	ldbu	r2,-32(fp)
 80012cc:	10803fcc 	andi	r2,r2,255
 80012d0:	1080201c 	xori	r2,r2,128
 80012d4:	10bfe004 	addi	r2,r2,-128
 80012d8:	1009883a 	mov	r4,r2
 80012dc:	8000b7c0 	call	8000b7c <printSignedHex1>
				printf("Buttons: ");
 80012e0:	01020074 	movhi	r4,2049
 80012e4:	211e7204 	addi	r4,r4,31176
 80012e8:	800869c0 	call	800869c <printf>
				printf("%x\n", buf.button);
 80012ec:	e0bff783 	ldbu	r2,-34(fp)
 80012f0:	10803fcc 	andi	r2,r2,255
 80012f4:	100b883a 	mov	r5,r2
 80012f8:	01020074 	movhi	r4,2049
 80012fc:	211e7504 	addi	r4,r4,31188
 8001300:	800869c0 	call	800869c <printf>
				if (buf.button & 0x04)
 8001304:	e0bff783 	ldbu	r2,-34(fp)
 8001308:	10803fcc 	andi	r2,r2,255
 800130c:	1080010c 	andi	r2,r2,4
 8001310:	10000326 	beq	r2,zero,8001320 <main+0x674>
					setLED(2);
 8001314:	01000084 	movi	r4,2
 8001318:	80009c00 	call	80009c0 <setLED>
 800131c:	00000206 	br	8001328 <main+0x67c>
				else
					clearLED(2);
 8001320:	01000084 	movi	r4,2
 8001324:	80009fc0 	call	80009fc <clearLED>
				if (buf.button & 0x02)
 8001328:	e0bff783 	ldbu	r2,-34(fp)
 800132c:	10803fcc 	andi	r2,r2,255
 8001330:	1080008c 	andi	r2,r2,2
 8001334:	10000326 	beq	r2,zero,8001344 <main+0x698>
					setLED(1);
 8001338:	01000044 	movi	r4,1
 800133c:	80009c00 	call	80009c0 <setLED>
 8001340:	00000206 	br	800134c <main+0x6a0>
				else
					clearLED(1);
 8001344:	01000044 	movi	r4,1
 8001348:	80009fc0 	call	80009fc <clearLED>
				if (buf.button & 0x01)
 800134c:	e0bff783 	ldbu	r2,-34(fp)
 8001350:	10803fcc 	andi	r2,r2,255
 8001354:	1080004c 	andi	r2,r2,1
 8001358:	10000326 	beq	r2,zero,8001368 <main+0x6bc>
					setLED(0);
 800135c:	0009883a 	mov	r4,zero
 8001360:	80009c00 	call	80009c0 <setLED>
 8001364:	003f3c06 	br	8001058 <main+0x3ac>
				else
					clearLED(0);
 8001368:	0009883a 	mov	r4,zero
 800136c:	80009fc0 	call	80009fc <clearLED>
 8001370:	003f3906 	br	8001058 <main+0x3ac>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8001374:	80034d80 	call	80034d8 <GetUsbTaskState>
 8001378:	10803fcc 	andi	r2,r2,255
 800137c:	10803fd8 	cmpnei	r2,r2,255
 8001380:	10000a1e 	bne	r2,zero,80013ac <main+0x700>
			if (!errorflag) {
 8001384:	e0bffe83 	ldbu	r2,-6(fp)
 8001388:	103f331e 	bne	r2,zero,8001058 <main+0x3ac>
				errorflag = 1;
 800138c:	00800044 	movi	r2,1
 8001390:	e0bffe85 	stb	r2,-6(fp)
				clearLED(9);
 8001394:	01000244 	movi	r4,9
 8001398:	80009fc0 	call	80009fc <clearLED>
				printf("USB Error State\n");
 800139c:	01020074 	movhi	r4,2049
 80013a0:	211e7604 	addi	r4,r4,31192
 80013a4:	80087c00 	call	80087c0 <puts>
 80013a8:	003f2b06 	br	8001058 <main+0x3ac>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 80013ac:	01020074 	movhi	r4,2049
 80013b0:	211e7a04 	addi	r4,r4,31208
 80013b4:	800869c0 	call	800869c <printf>
			printf("%x\n", GetUsbTaskState());
 80013b8:	80034d80 	call	80034d8 <GetUsbTaskState>
 80013bc:	10803fcc 	andi	r2,r2,255
 80013c0:	100b883a 	mov	r5,r2
 80013c4:	01020074 	movhi	r4,2049
 80013c8:	211e7504 	addi	r4,r4,31188
 80013cc:	800869c0 	call	800869c <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 80013d0:	e0bffec3 	ldbu	r2,-5(fp)
 80013d4:	10000326 	beq	r2,zero,80013e4 <main+0x738>
				runningdebugflag = 0;
 80013d8:	e03ffec5 	stb	zero,-5(fp)
				MAX3421E_init();
 80013dc:	80024b40 	call	80024b4 <MAX3421E_init>
				USB_init();
 80013e0:	8002cc00 	call	8002cc0 <USB_init>
			}
			errorflag = 0;
 80013e4:	e03ffe85 	stb	zero,-6(fp)
			clearLED(9);
 80013e8:	01000244 	movi	r4,9
 80013ec:	80009fc0 	call	80009fc <clearLED>
 80013f0:	003f1906 	br	8001058 <main+0x3ac>
					continue; //NAK means no new data
 80013f4:	0001883a 	nop
 80013f8:	003f1706 	br	8001058 <main+0x3ac>
					continue;
 80013fc:	0001883a 	nop
		printf(".");
 8001400:	003f1506 	br	8001058 <main+0x3ac>
		}

	}
	return 0;
}
 8001404:	e037883a 	mov	sp,fp
 8001408:	dfc00117 	ldw	ra,4(sp)
 800140c:	df000017 	ldw	fp,0(sp)
 8001410:	dec00204 	addi	sp,sp,8
 8001414:	f800283a 	ret

08001418 <SGTL5000_Reg_Rd>:
#include <stdio.h>
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 8001418:	defff804 	addi	sp,sp,-32
 800141c:	dfc00715 	stw	ra,28(sp)
 8001420:	df000615 	stw	fp,24(sp)
 8001424:	df000604 	addi	fp,sp,24
 8001428:	e13ffd15 	stw	r4,-12(fp)
 800142c:	2805883a 	mov	r2,r5
 8001430:	e0bffc0d 	sth	r2,-16(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8001434:	e0bffc0b 	ldhu	r2,-16(fp)
 8001438:	1004d23a 	srli	r2,r2,8
 800143c:	e0bffe05 	stb	r2,-8(fp)
	buffer[1] = (ADDR & 0x00FF);
 8001440:	e0bffc0b 	ldhu	r2,-16(fp)
 8001444:	e0bffe45 	stb	r2,-7(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 8001448:	e13ffe04 	addi	r4,fp,-8
 800144c:	e0fffe04 	addi	r3,fp,-8
 8001450:	d8000115 	stw	zero,4(sp)
 8001454:	00800084 	movi	r2,2
 8001458:	d8800015 	stw	r2,0(sp)
 800145c:	200f883a 	mov	r7,r4
 8001460:	01800084 	movi	r6,2
 8001464:	180b883a 	mov	r5,r3
 8001468:	e13ffd17 	ldw	r4,-12(fp)
 800146c:	80149480 	call	8014948 <alt_avalon_i2c_master_tx_rx>
 8001470:	e0bfff15 	stw	r2,-4(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8001474:	e0bfff17 	ldw	r2,-4(fp)
 8001478:	10000626 	beq	r2,zero,8001494 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 800147c:	e0bffc0b 	ldhu	r2,-16(fp)
 8001480:	100b883a 	mov	r5,r2
 8001484:	01020074 	movhi	r4,2049
 8001488:	211e7f04 	addi	r4,r4,31228
 800148c:	800869c0 	call	800869c <printf>
		while (1)
 8001490:	003fff06 	br	8001490 <SGTL5000_Reg_Rd+0x78>
		{
			//hang here
		}
	}
	value = (buffer[0] << 8) | buffer[1];
 8001494:	e0bffe03 	ldbu	r2,-8(fp)
 8001498:	10803fcc 	andi	r2,r2,255
 800149c:	1004923a 	slli	r2,r2,8
 80014a0:	1007883a 	mov	r3,r2
 80014a4:	e0bffe43 	ldbu	r2,-7(fp)
 80014a8:	10803fcc 	andi	r2,r2,255
 80014ac:	1884b03a 	or	r2,r3,r2
 80014b0:	e0bffe8d 	sth	r2,-6(fp)
	return value;
 80014b4:	e0bffe8b 	ldhu	r2,-6(fp)
}
 80014b8:	e037883a 	mov	sp,fp
 80014bc:	dfc00117 	ldw	ra,4(sp)
 80014c0:	df000017 	ldw	fp,0(sp)
 80014c4:	dec00204 	addi	sp,sp,8
 80014c8:	f800283a 	ret

080014cc <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 80014cc:	defff904 	addi	sp,sp,-28
 80014d0:	dfc00615 	stw	ra,24(sp)
 80014d4:	df000515 	stw	fp,20(sp)
 80014d8:	df000504 	addi	fp,sp,20
 80014dc:	e13ffd15 	stw	r4,-12(fp)
 80014e0:	2805883a 	mov	r2,r5
 80014e4:	3007883a 	mov	r3,r6
 80014e8:	e0bffc0d 	sth	r2,-16(fp)
 80014ec:	1805883a 	mov	r2,r3
 80014f0:	e0bffb0d 	sth	r2,-20(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 80014f4:	e0bffc0b 	ldhu	r2,-16(fp)
 80014f8:	1004d23a 	srli	r2,r2,8
 80014fc:	e0bffe05 	stb	r2,-8(fp)
	buffer[1] = (ADDR & 0x00FF);
 8001500:	e0bffc0b 	ldhu	r2,-16(fp)
 8001504:	e0bffe45 	stb	r2,-7(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 8001508:	e0bffb0b 	ldhu	r2,-20(fp)
 800150c:	1004d23a 	srli	r2,r2,8
 8001510:	e0bffe85 	stb	r2,-6(fp)
	buffer[3] = (DATA & 0x00FF);
 8001514:	e0bffb0b 	ldhu	r2,-20(fp)
 8001518:	e0bffec5 	stb	r2,-5(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 800151c:	e0bffe04 	addi	r2,fp,-8
 8001520:	000f883a 	mov	r7,zero
 8001524:	01800104 	movi	r6,4
 8001528:	100b883a 	mov	r5,r2
 800152c:	e13ffd17 	ldw	r4,-12(fp)
 8001530:	80147240 	call	8014724 <alt_avalon_i2c_master_tx>
 8001534:	e0bfff15 	stw	r2,-4(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8001538:	e0bfff17 	ldw	r2,-4(fp)
 800153c:	10000626 	beq	r2,zero,8001558 <SGTL5000_Reg_Wr+0x8c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8001540:	e0bffc0b 	ldhu	r2,-16(fp)
 8001544:	100b883a 	mov	r5,r2
 8001548:	01020074 	movhi	r4,2049
 800154c:	211e7f04 	addi	r4,r4,31228
 8001550:	800869c0 	call	800869c <printf>
		while (1)
 8001554:	003fff06 	br	8001554 <SGTL5000_Reg_Wr+0x88>
		{
			//hang here
		}
	}
	return DATA;
 8001558:	e0bffb0b 	ldhu	r2,-20(fp)
}
 800155c:	e037883a 	mov	sp,fp
 8001560:	dfc00117 	ldw	ra,4(sp)
 8001564:	df000017 	ldw	fp,0(sp)
 8001568:	dec00204 	addi	sp,sp,8
 800156c:	f800283a 	ret

08001570 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8001570:	defff204 	addi	sp,sp,-56
 8001574:	dfc00d15 	stw	ra,52(sp)
 8001578:	df000c15 	stw	fp,48(sp)
 800157c:	df000c04 	addi	fp,sp,48
 8001580:	2005883a 	mov	r2,r4
 8001584:	e17ff915 	stw	r5,-28(fp)
 8001588:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 800158c:	008200b4 	movhi	r2,2050
 8001590:	10af2f04 	addi	r2,r2,-17220
 8001594:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8001598:	008200b4 	movhi	r2,2050
 800159c:	10af2f04 	addi	r2,r2,-17220
 80015a0:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80015a4:	e0fffa03 	ldbu	r3,-24(fp)
 80015a8:	008200b4 	movhi	r2,2050
 80015ac:	10af2f04 	addi	r2,r2,-17220
 80015b0:	d8800415 	stw	r2,16(sp)
 80015b4:	00800244 	movi	r2,9
 80015b8:	d8800315 	stw	r2,12(sp)
 80015bc:	d8000215 	stw	zero,8(sp)
 80015c0:	00800084 	movi	r2,2
 80015c4:	d8800115 	stw	r2,4(sp)
 80015c8:	d8000015 	stw	zero,0(sp)
 80015cc:	01c00184 	movi	r7,6
 80015d0:	01802004 	movi	r6,128
 80015d4:	000b883a 	mov	r5,zero
 80015d8:	1809883a 	mov	r4,r3
 80015dc:	80026f80 	call	80026f8 <XferCtrlReq>
 80015e0:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 80015e4:	e0bffcc3 	ldbu	r2,-13(fp)
 80015e8:	10000226 	beq	r2,zero,80015f4 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 80015ec:	0005883a 	mov	r2,zero
 80015f0:	0000d306 	br	8001940 <HIDMProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80015f4:	e0bffe17 	ldw	r2,-8(fp)
 80015f8:	1080008b 	ldhu	r2,2(r2)
 80015fc:	10bfffcc 	andi	r2,r2,65535
 8001600:	10804070 	cmpltui	r2,r2,257
 8001604:	1000031e 	bne	r2,zero,8001614 <HIDMProbe+0xa4>
		total_length = 256;
 8001608:	00804004 	movi	r2,256
 800160c:	e0bfff8d 	sth	r2,-2(fp)
 8001610:	00000306 	br	8001620 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8001614:	e0bffe17 	ldw	r2,-8(fp)
 8001618:	1080008b 	ldhu	r2,2(r2)
 800161c:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8001620:	e13ffa03 	ldbu	r4,-24(fp)
 8001624:	e0ffff8b 	ldhu	r3,-2(fp)
 8001628:	008200b4 	movhi	r2,2050
 800162c:	10af2f04 	addi	r2,r2,-17220
 8001630:	d8800415 	stw	r2,16(sp)
 8001634:	d8c00315 	stw	r3,12(sp)
 8001638:	d8000215 	stw	zero,8(sp)
 800163c:	00800084 	movi	r2,2
 8001640:	d8800115 	stw	r2,4(sp)
 8001644:	d8000015 	stw	zero,0(sp)
 8001648:	01c00184 	movi	r7,6
 800164c:	01802004 	movi	r6,128
 8001650:	000b883a 	mov	r5,zero
 8001654:	80026f80 	call	80026f8 <XferCtrlReq>
 8001658:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 800165c:	e0bffcc3 	ldbu	r2,-13(fp)
 8001660:	10000226 	beq	r2,zero,800166c <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8001664:	0005883a 	mov	r2,zero
 8001668:	0000b506 	br	8001940 <HIDMProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 800166c:	e0bffe17 	ldw	r2,-8(fp)
 8001670:	10800143 	ldbu	r2,5(r2)
 8001674:	e0bffc85 	stb	r2,-14(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8001678:	0000aa06 	br	8001924 <HIDMProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 800167c:	e0bffe17 	ldw	r2,-8(fp)
 8001680:	10800043 	ldbu	r2,1(r2)
 8001684:	10803fcc 	andi	r2,r2,255
 8001688:	10800120 	cmpeqi	r2,r2,4
 800168c:	1000091e 	bne	r2,zero,80016b4 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001690:	e0bffe17 	ldw	r2,-8(fp)
 8001694:	10800003 	ldbu	r2,0(r2)
 8001698:	10803fcc 	andi	r2,r2,255
 800169c:	e0fffd17 	ldw	r3,-12(fp)
 80016a0:	1885883a 	add	r2,r3,r2
 80016a4:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 80016a8:	e0bffd17 	ldw	r2,-12(fp)
 80016ac:	e0bffe15 	stw	r2,-8(fp)
 80016b0:	00009c06 	br	8001924 <HIDMProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80016b4:	e0bffe17 	ldw	r2,-8(fp)
 80016b8:	10800143 	ldbu	r2,5(r2)
 80016bc:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80016c0:	e0bffe17 	ldw	r2,-8(fp)
 80016c4:	10800183 	ldbu	r2,6(r2)
 80016c8:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80016cc:	e0bffe17 	ldw	r2,-8(fp)
 80016d0:	108001c3 	ldbu	r2,7(r2)
 80016d4:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80016d8:	e0bffc43 	ldbu	r2,-15(fp)
 80016dc:	108000d8 	cmpnei	r2,r2,3
 80016e0:	10008e1e 	bne	r2,zero,800191c <HIDMProbe+0x3ac>
 80016e4:	e0bffc03 	ldbu	r2,-16(fp)
 80016e8:	10800058 	cmpnei	r2,r2,1
 80016ec:	10008b1e 	bne	r2,zero,800191c <HIDMProbe+0x3ac>
					&& protocol == HID_PROTOCOL_MOUSE) {
 80016f0:	e0bffbc3 	ldbu	r2,-17(fp)
 80016f4:	10800098 	cmpnei	r2,r2,2
 80016f8:	1000881e 	bne	r2,zero,800191c <HIDMProbe+0x3ac>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 80016fc:	e0bffa03 	ldbu	r2,-24(fp)
 8001700:	100890fa 	slli	r4,r2,3
 8001704:	00c00084 	movi	r3,2
 8001708:	008200b4 	movhi	r2,2050
 800170c:	2085883a 	add	r2,r4,r2
 8001710:	10ef7005 	stb	r3,-16960(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8001714:	e0bffa03 	ldbu	r2,-24(fp)
 8001718:	100690fa 	slli	r3,r2,3
 800171c:	008200b4 	movhi	r2,2050
 8001720:	1885883a 	add	r2,r3,r2
 8001724:	10af6f17 	ldw	r2,-16964(r2)
 8001728:	1080008b 	ldhu	r2,2(r2)
 800172c:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8001730:	8001d380 	call	8001d38 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001734:	e0bffa03 	ldbu	r2,-24(fp)
 8001738:	100890fa 	slli	r4,r2,3
 800173c:	00c200b4 	movhi	r3,2050
 8001740:	18eefc04 	addi	r3,r3,-17424
 8001744:	008200b4 	movhi	r2,2050
 8001748:	2085883a 	add	r2,r4,r2
 800174c:	10ef6f15 	stw	r3,-16964(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8001750:	e0bffa03 	ldbu	r2,-24(fp)
 8001754:	100690fa 	slli	r3,r2,3
 8001758:	008200b4 	movhi	r2,2050
 800175c:	1885883a 	add	r2,r3,r2
 8001760:	10af6f17 	ldw	r2,-16964(r2)
 8001764:	e0fffb83 	ldbu	r3,-18(fp)
 8001768:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 800176c:	e0bffe17 	ldw	r2,-8(fp)
 8001770:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8001774:	d0a736c5 	stb	r2,-25381(gp)
				hid_device.addr = addr;
 8001778:	e0bffa03 	ldbu	r2,-24(fp)
 800177c:	d0a73685 	stb	r2,-25382(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001780:	e0bffe17 	ldw	r2,-8(fp)
 8001784:	10800003 	ldbu	r2,0(r2)
 8001788:	10803fcc 	andi	r2,r2,255
 800178c:	e0fffd17 	ldw	r3,-12(fp)
 8001790:	1885883a 	add	r2,r3,r2
 8001794:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8001798:	e0bffd17 	ldw	r2,-12(fp)
 800179c:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 80017a0:	00005706 	br	8001900 <HIDMProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 80017a4:	e0bffe17 	ldw	r2,-8(fp)
 80017a8:	10800043 	ldbu	r2,1(r2)
 80017ac:	10803fcc 	andi	r2,r2,255
 80017b0:	10800160 	cmpeqi	r2,r2,5
 80017b4:	1000091e 	bne	r2,zero,80017dc <HIDMProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80017b8:	e0bffe17 	ldw	r2,-8(fp)
 80017bc:	10800003 	ldbu	r2,0(r2)
 80017c0:	10803fcc 	andi	r2,r2,255
 80017c4:	e0fffd17 	ldw	r3,-12(fp)
 80017c8:	1885883a 	add	r2,r3,r2
 80017cc:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80017d0:	e0bffd17 	ldw	r2,-12(fp)
 80017d4:	e0bffe15 	stw	r2,-8(fp)
 80017d8:	00004906 	br	8001900 <HIDMProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80017dc:	e0bffa03 	ldbu	r2,-24(fp)
 80017e0:	100690fa 	slli	r3,r2,3
 80017e4:	008200b4 	movhi	r2,2050
 80017e8:	1885883a 	add	r2,r3,r2
 80017ec:	10af6f17 	ldw	r2,-16964(r2)
 80017f0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 80017f4:	e0fffe17 	ldw	r3,-8(fp)
 80017f8:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 80017fc:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8001800:	e0bffa03 	ldbu	r2,-24(fp)
 8001804:	100690fa 	slli	r3,r2,3
 8001808:	008200b4 	movhi	r2,2050
 800180c:	1885883a 	add	r2,r3,r2
 8001810:	10af6f17 	ldw	r2,-16964(r2)
 8001814:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001818:	e0fffe17 	ldw	r3,-8(fp)
 800181c:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8001820:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8001824:	e0bffa03 	ldbu	r2,-24(fp)
 8001828:	100690fa 	slli	r3,r2,3
 800182c:	008200b4 	movhi	r2,2050
 8001830:	1885883a 	add	r2,r3,r2
 8001834:	10af6f17 	ldw	r2,-16964(r2)
 8001838:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 800183c:	e0fffe17 	ldw	r3,-8(fp)
 8001840:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8001844:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8001848:	e0bffa03 	ldbu	r2,-24(fp)
 800184c:	100690fa 	slli	r3,r2,3
 8001850:	008200b4 	movhi	r2,2050
 8001854:	1885883a 	add	r2,r3,r2
 8001858:	10af6f17 	ldw	r2,-16964(r2)
 800185c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8001860:	e0fffe17 	ldw	r3,-8(fp)
 8001864:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8001868:	10c00105 	stb	r3,4(r2)
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 800186c:	e0fffa03 	ldbu	r3,-24(fp)
 8001870:	e0bffc83 	ldbu	r2,-14(fp)
 8001874:	d8000415 	stw	zero,16(sp)
 8001878:	d8000315 	stw	zero,12(sp)
 800187c:	d8000215 	stw	zero,8(sp)
 8001880:	d8000115 	stw	zero,4(sp)
 8001884:	d8800015 	stw	r2,0(sp)
 8001888:	01c00244 	movi	r7,9
 800188c:	000d883a 	mov	r6,zero
 8001890:	000b883a 	mov	r5,zero
 8001894:	1809883a 	mov	r4,r3
 8001898:	80026f80 	call	80026f8 <XferCtrlReq>
 800189c:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 80018a0:	e0bffcc3 	ldbu	r2,-13(fp)
 80018a4:	10000226 	beq	r2,zero,80018b0 <HIDMProbe+0x340>
							return (FALSE);
 80018a8:	0005883a 	mov	r2,zero
 80018ac:	00002406 	br	8001940 <HIDMProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80018b0:	e0fffa03 	ldbu	r3,-24(fp)
 80018b4:	d0a736c3 	ldbu	r2,-25381(gp)
 80018b8:	10803fcc 	andi	r2,r2,255
 80018bc:	d8000415 	stw	zero,16(sp)
 80018c0:	d8000315 	stw	zero,12(sp)
 80018c4:	d8800215 	stw	r2,8(sp)
 80018c8:	d8000115 	stw	zero,4(sp)
 80018cc:	d8000015 	stw	zero,0(sp)
 80018d0:	01c002c4 	movi	r7,11
 80018d4:	01800844 	movi	r6,33
 80018d8:	000b883a 	mov	r5,zero
 80018dc:	1809883a 	mov	r4,r3
 80018e0:	80026f80 	call	80026f8 <XferCtrlReq>
 80018e4:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 80018e8:	e0bffcc3 	ldbu	r2,-13(fp)
 80018ec:	10000226 	beq	r2,zero,80018f8 <HIDMProbe+0x388>
							return (FALSE);
 80018f0:	0005883a 	mov	r2,zero
 80018f4:	00001206 	br	8001940 <HIDMProbe+0x3d0>
						} else {
							return (TRUE);
 80018f8:	00800044 	movi	r2,1
 80018fc:	00001006 	br	8001940 <HIDMProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8001900:	e0ffff8b 	ldhu	r3,-2(fp)
 8001904:	008200b4 	movhi	r2,2050
 8001908:	10af2f04 	addi	r2,r2,-17220
 800190c:	1885883a 	add	r2,r3,r2
 8001910:	e0fffd17 	ldw	r3,-12(fp)
 8001914:	18bfa336 	bltu	r3,r2,80017a4 <HIDMProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001918:	00000206 	br	8001924 <HIDMProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 800191c:	0005883a 	mov	r2,zero
 8001920:	00000706 	br	8001940 <HIDMProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {
 8001924:	e0ffff8b 	ldhu	r3,-2(fp)
 8001928:	008200b4 	movhi	r2,2050
 800192c:	10af2f04 	addi	r2,r2,-17220
 8001930:	1885883a 	add	r2,r3,r2
 8001934:	e0fffd17 	ldw	r3,-12(fp)
 8001938:	18bf5036 	bltu	r3,r2,800167c <HIDMProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 800193c:	0005883a 	mov	r2,zero
}
 8001940:	e037883a 	mov	sp,fp
 8001944:	dfc00117 	ldw	ra,4(sp)
 8001948:	df000017 	ldw	fp,0(sp)
 800194c:	dec00204 	addi	sp,sp,8
 8001950:	f800283a 	ret

08001954 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8001954:	defff204 	addi	sp,sp,-56
 8001958:	dfc00d15 	stw	ra,52(sp)
 800195c:	df000c15 	stw	fp,48(sp)
 8001960:	df000c04 	addi	fp,sp,48
 8001964:	2005883a 	mov	r2,r4
 8001968:	e17ff915 	stw	r5,-28(fp)
 800196c:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8001970:	008200b4 	movhi	r2,2050
 8001974:	10af2f04 	addi	r2,r2,-17220
 8001978:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 800197c:	008200b4 	movhi	r2,2050
 8001980:	10af2f04 	addi	r2,r2,-17220
 8001984:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8001988:	e0fffa03 	ldbu	r3,-24(fp)
 800198c:	008200b4 	movhi	r2,2050
 8001990:	10af2f04 	addi	r2,r2,-17220
 8001994:	d8800415 	stw	r2,16(sp)
 8001998:	00800244 	movi	r2,9
 800199c:	d8800315 	stw	r2,12(sp)
 80019a0:	d8000215 	stw	zero,8(sp)
 80019a4:	00800084 	movi	r2,2
 80019a8:	d8800115 	stw	r2,4(sp)
 80019ac:	d8000015 	stw	zero,0(sp)
 80019b0:	01c00184 	movi	r7,6
 80019b4:	01802004 	movi	r6,128
 80019b8:	000b883a 	mov	r5,zero
 80019bc:	1809883a 	mov	r4,r3
 80019c0:	80026f80 	call	80026f8 <XferCtrlReq>
 80019c4:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling           
 80019c8:	e0bffcc3 	ldbu	r2,-13(fp)
 80019cc:	10000226 	beq	r2,zero,80019d8 <HIDKProbe+0x84>
		return (FALSE);
 80019d0:	0005883a 	mov	r2,zero
 80019d4:	0000d306 	br	8001d24 <HIDKProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80019d8:	e0bffe17 	ldw	r2,-8(fp)
 80019dc:	1080008b 	ldhu	r2,2(r2)
 80019e0:	10bfffcc 	andi	r2,r2,65535
 80019e4:	10804070 	cmpltui	r2,r2,257
 80019e8:	1000031e 	bne	r2,zero,80019f8 <HIDKProbe+0xa4>
		total_length = 256;
 80019ec:	00804004 	movi	r2,256
 80019f0:	e0bfff8d 	sth	r2,-2(fp)
 80019f4:	00000306 	br	8001a04 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 80019f8:	e0bffe17 	ldw	r2,-8(fp)
 80019fc:	1080008b 	ldhu	r2,2(r2)
 8001a00:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8001a04:	e13ffa03 	ldbu	r4,-24(fp)
 8001a08:	e0ffff8b 	ldhu	r3,-2(fp)
 8001a0c:	008200b4 	movhi	r2,2050
 8001a10:	10af2f04 	addi	r2,r2,-17220
 8001a14:	d8800415 	stw	r2,16(sp)
 8001a18:	d8c00315 	stw	r3,12(sp)
 8001a1c:	d8000215 	stw	zero,8(sp)
 8001a20:	00800084 	movi	r2,2
 8001a24:	d8800115 	stw	r2,4(sp)
 8001a28:	d8000015 	stw	zero,0(sp)
 8001a2c:	01c00184 	movi	r7,6
 8001a30:	01802004 	movi	r6,128
 8001a34:	000b883a 	mov	r5,zero
 8001a38:	80026f80 	call	80026f8 <XferCtrlReq>
 8001a3c:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8001a40:	e0bffcc3 	ldbu	r2,-13(fp)
 8001a44:	10000226 	beq	r2,zero,8001a50 <HIDKProbe+0xfc>
		return (FALSE);
 8001a48:	0005883a 	mov	r2,zero
 8001a4c:	0000b506 	br	8001d24 <HIDKProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8001a50:	e0bffe17 	ldw	r2,-8(fp)
 8001a54:	10800143 	ldbu	r2,5(r2)
 8001a58:	e0bffc85 	stb	r2,-14(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001a5c:	0000aa06 	br	8001d08 <HIDKProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8001a60:	e0bffe17 	ldw	r2,-8(fp)
 8001a64:	10800043 	ldbu	r2,1(r2)
 8001a68:	10803fcc 	andi	r2,r2,255
 8001a6c:	10800120 	cmpeqi	r2,r2,4
 8001a70:	1000091e 	bne	r2,zero,8001a98 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001a74:	e0bffe17 	ldw	r2,-8(fp)
 8001a78:	10800003 	ldbu	r2,0(r2)
 8001a7c:	10803fcc 	andi	r2,r2,255
 8001a80:	e0fffd17 	ldw	r3,-12(fp)
 8001a84:	1885883a 	add	r2,r3,r2
 8001a88:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8001a8c:	e0bffd17 	ldw	r2,-12(fp)
 8001a90:	e0bffe15 	stw	r2,-8(fp)
 8001a94:	00009c06 	br	8001d08 <HIDKProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8001a98:	e0bffe17 	ldw	r2,-8(fp)
 8001a9c:	10800143 	ldbu	r2,5(r2)
 8001aa0:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8001aa4:	e0bffe17 	ldw	r2,-8(fp)
 8001aa8:	10800183 	ldbu	r2,6(r2)
 8001aac:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8001ab0:	e0bffe17 	ldw	r2,-8(fp)
 8001ab4:	108001c3 	ldbu	r2,7(r2)
 8001ab8:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001abc:	e0bffc43 	ldbu	r2,-15(fp)
 8001ac0:	108000d8 	cmpnei	r2,r2,3
 8001ac4:	10008e1e 	bne	r2,zero,8001d00 <HIDKProbe+0x3ac>
 8001ac8:	e0bffc03 	ldbu	r2,-16(fp)
 8001acc:	10800058 	cmpnei	r2,r2,1
 8001ad0:	10008b1e 	bne	r2,zero,8001d00 <HIDKProbe+0x3ac>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8001ad4:	e0bffbc3 	ldbu	r2,-17(fp)
 8001ad8:	10800058 	cmpnei	r2,r2,1
 8001adc:	1000881e 	bne	r2,zero,8001d00 <HIDKProbe+0x3ac>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8001ae0:	e0bffa03 	ldbu	r2,-24(fp)
 8001ae4:	100890fa 	slli	r4,r2,3
 8001ae8:	00c00044 	movi	r3,1
 8001aec:	008200b4 	movhi	r2,2050
 8001af0:	2085883a 	add	r2,r4,r2
 8001af4:	10ef7005 	stb	r3,-16960(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8001af8:	e0bffa03 	ldbu	r2,-24(fp)
 8001afc:	100690fa 	slli	r3,r2,3
 8001b00:	008200b4 	movhi	r2,2050
 8001b04:	1885883a 	add	r2,r3,r2
 8001b08:	10af6f17 	ldw	r2,-16964(r2)
 8001b0c:	1080008b 	ldhu	r2,2(r2)
 8001b10:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8001b14:	8001d380 	call	8001d38 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001b18:	e0bffa03 	ldbu	r2,-24(fp)
 8001b1c:	100890fa 	slli	r4,r2,3
 8001b20:	00c200b4 	movhi	r3,2050
 8001b24:	18eefc04 	addi	r3,r3,-17424
 8001b28:	008200b4 	movhi	r2,2050
 8001b2c:	2085883a 	add	r2,r4,r2
 8001b30:	10ef6f15 	stw	r3,-16964(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8001b34:	e0bffa03 	ldbu	r2,-24(fp)
 8001b38:	100690fa 	slli	r3,r2,3
 8001b3c:	008200b4 	movhi	r2,2050
 8001b40:	1885883a 	add	r2,r3,r2
 8001b44:	10af6f17 	ldw	r2,-16964(r2)
 8001b48:	e0fffb83 	ldbu	r3,-18(fp)
 8001b4c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8001b50:	e0bffe17 	ldw	r2,-8(fp)
 8001b54:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8001b58:	d0a736c5 	stb	r2,-25381(gp)
				hid_device.addr = addr;                        //fill in address
 8001b5c:	e0bffa03 	ldbu	r2,-24(fp)
 8001b60:	d0a73685 	stb	r2,-25382(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8001b64:	e0bffe17 	ldw	r2,-8(fp)
 8001b68:	10800003 	ldbu	r2,0(r2)
 8001b6c:	10803fcc 	andi	r2,r2,255
 8001b70:	e0fffd17 	ldw	r3,-12(fp)
 8001b74:	1885883a 	add	r2,r3,r2
 8001b78:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8001b7c:	e0bffd17 	ldw	r2,-12(fp)
 8001b80:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 8001b84:	00005706 	br	8001ce4 <HIDKProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 8001b88:	e0bffe17 	ldw	r2,-8(fp)
 8001b8c:	10800043 	ldbu	r2,1(r2)
 8001b90:	10803fcc 	andi	r2,r2,255
 8001b94:	10800160 	cmpeqi	r2,r2,5
 8001b98:	1000091e 	bne	r2,zero,8001bc0 <HIDKProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8001b9c:	e0bffe17 	ldw	r2,-8(fp)
 8001ba0:	10800003 	ldbu	r2,0(r2)
 8001ba4:	10803fcc 	andi	r2,r2,255
 8001ba8:	e0fffd17 	ldw	r3,-12(fp)
 8001bac:	1885883a 	add	r2,r3,r2
 8001bb0:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8001bb4:	e0bffd17 	ldw	r2,-12(fp)
 8001bb8:	e0bffe15 	stw	r2,-8(fp)
 8001bbc:	00004906 	br	8001ce4 <HIDKProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001bc0:	e0bffa03 	ldbu	r2,-24(fp)
 8001bc4:	100690fa 	slli	r3,r2,3
 8001bc8:	008200b4 	movhi	r2,2050
 8001bcc:	1885883a 	add	r2,r3,r2
 8001bd0:	10af6f17 	ldw	r2,-16964(r2)
 8001bd4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8001bd8:	e0fffe17 	ldw	r3,-8(fp)
 8001bdc:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 8001be0:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8001be4:	e0bffa03 	ldbu	r2,-24(fp)
 8001be8:	100690fa 	slli	r3,r2,3
 8001bec:	008200b4 	movhi	r2,2050
 8001bf0:	1885883a 	add	r2,r3,r2
 8001bf4:	10af6f17 	ldw	r2,-16964(r2)
 8001bf8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001bfc:	e0fffe17 	ldw	r3,-8(fp)
 8001c00:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8001c04:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8001c08:	e0bffa03 	ldbu	r2,-24(fp)
 8001c0c:	100690fa 	slli	r3,r2,3
 8001c10:	008200b4 	movhi	r2,2050
 8001c14:	1885883a 	add	r2,r3,r2
 8001c18:	10af6f17 	ldw	r2,-16964(r2)
 8001c1c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8001c20:	e0fffe17 	ldw	r3,-8(fp)
 8001c24:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8001c28:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8001c2c:	e0bffa03 	ldbu	r2,-24(fp)
 8001c30:	100690fa 	slli	r3,r2,3
 8001c34:	008200b4 	movhi	r2,2050
 8001c38:	1885883a 	add	r2,r3,r2
 8001c3c:	10af6f17 	ldw	r2,-16964(r2)
 8001c40:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8001c44:	e0fffe17 	ldw	r3,-8(fp)
 8001c48:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8001c4c:	10c00105 	stb	r3,4(r2)
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8001c50:	e0fffa03 	ldbu	r3,-24(fp)
 8001c54:	e0bffc83 	ldbu	r2,-14(fp)
 8001c58:	d8000415 	stw	zero,16(sp)
 8001c5c:	d8000315 	stw	zero,12(sp)
 8001c60:	d8000215 	stw	zero,8(sp)
 8001c64:	d8000115 	stw	zero,4(sp)
 8001c68:	d8800015 	stw	r2,0(sp)
 8001c6c:	01c00244 	movi	r7,9
 8001c70:	000d883a 	mov	r6,zero
 8001c74:	000b883a 	mov	r5,zero
 8001c78:	1809883a 	mov	r4,r3
 8001c7c:	80026f80 	call	80026f8 <XferCtrlReq>
 8001c80:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 8001c84:	e0bffcc3 	ldbu	r2,-13(fp)
 8001c88:	10000226 	beq	r2,zero,8001c94 <HIDKProbe+0x340>
							return (FALSE);
 8001c8c:	0005883a 	mov	r2,zero
 8001c90:	00002406 	br	8001d24 <HIDKProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8001c94:	e0fffa03 	ldbu	r3,-24(fp)
 8001c98:	d0a736c3 	ldbu	r2,-25381(gp)
 8001c9c:	10803fcc 	andi	r2,r2,255
 8001ca0:	d8000415 	stw	zero,16(sp)
 8001ca4:	d8000315 	stw	zero,12(sp)
 8001ca8:	d8800215 	stw	r2,8(sp)
 8001cac:	d8000115 	stw	zero,4(sp)
 8001cb0:	d8000015 	stw	zero,0(sp)
 8001cb4:	01c002c4 	movi	r7,11
 8001cb8:	01800844 	movi	r6,33
 8001cbc:	000b883a 	mov	r5,zero
 8001cc0:	1809883a 	mov	r4,r3
 8001cc4:	80026f80 	call	80026f8 <XferCtrlReq>
 8001cc8:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8001ccc:	e0bffcc3 	ldbu	r2,-13(fp)
 8001cd0:	10000226 	beq	r2,zero,8001cdc <HIDKProbe+0x388>
							return (FALSE);
 8001cd4:	0005883a 	mov	r2,zero
 8001cd8:	00001206 	br	8001d24 <HIDKProbe+0x3d0>
						} else {
							return (TRUE);
 8001cdc:	00800044 	movi	r2,1
 8001ce0:	00001006 	br	8001d24 <HIDKProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8001ce4:	e0ffff8b 	ldhu	r3,-2(fp)
 8001ce8:	008200b4 	movhi	r2,2050
 8001cec:	10af2f04 	addi	r2,r2,-17220
 8001cf0:	1885883a 	add	r2,r3,r2
 8001cf4:	e0fffd17 	ldw	r3,-12(fp)
 8001cf8:	18bfa336 	bltu	r3,r2,8001b88 <HIDKProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001cfc:	00000206 	br	8001d08 <HIDKProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8001d00:	0005883a 	mov	r2,zero
 8001d04:	00000706 	br	8001d24 <HIDKProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001d08:	e0ffff8b 	ldhu	r3,-2(fp)
 8001d0c:	008200b4 	movhi	r2,2050
 8001d10:	10af2f04 	addi	r2,r2,-17220
 8001d14:	1885883a 	add	r2,r3,r2
 8001d18:	e0fffd17 	ldw	r3,-12(fp)
 8001d1c:	18bf5036 	bltu	r3,r2,8001a60 <HIDKProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8001d20:	0005883a 	mov	r2,zero
}
 8001d24:	e037883a 	mov	sp,fp
 8001d28:	dfc00117 	ldw	ra,4(sp)
 8001d2c:	df000017 	ldw	fp,0(sp)
 8001d30:	dec00204 	addi	sp,sp,8
 8001d34:	f800283a 	ret

08001d38 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8001d38:	deffff04 	addi	sp,sp,-4
 8001d3c:	df000015 	stw	fp,0(sp)
 8001d40:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8001d44:	00c01004 	movi	r3,64
 8001d48:	008200b4 	movhi	r2,2050
 8001d4c:	10eeff45 	stb	r3,-17411(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8001d50:	00c00404 	movi	r3,16
 8001d54:	008200b4 	movhi	r2,2050
 8001d58:	10eeff85 	stb	r3,-17410(r2)
}
 8001d5c:	0001883a 	nop
 8001d60:	e037883a 	mov	sp,fp
 8001d64:	df000017 	ldw	fp,0(sp)
 8001d68:	dec00104 	addi	sp,sp,4
 8001d6c:	f800283a 	ret

08001d70 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8001d70:	defffb04 	addi	sp,sp,-20
 8001d74:	dfc00415 	stw	ra,16(sp)
 8001d78:	df000315 	stw	fp,12(sp)
 8001d7c:	df000304 	addi	fp,sp,12
 8001d80:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001d84:	d0a73683 	ldbu	r2,-25382(gp)
 8001d88:	10803fcc 	andi	r2,r2,255
 8001d8c:	100b883a 	mov	r5,r2
 8001d90:	01003804 	movi	r4,224
 8001d94:	8001f580 	call	8001f58 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001d98:	d0a73683 	ldbu	r2,-25382(gp)
 8001d9c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001da0:	d0a73683 	ldbu	r2,-25382(gp)
 8001da4:	10803fcc 	andi	r2,r2,255
 8001da8:	100690fa 	slli	r3,r2,3
 8001dac:	008200b4 	movhi	r2,2050
 8001db0:	1885883a 	add	r2,r3,r2
 8001db4:	10af6f17 	ldw	r2,-16964(r2)
 8001db8:	10800204 	addi	r2,r2,8
 8001dbc:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001dc0:	10803fcc 	andi	r2,r2,255
 8001dc4:	d8800015 	stw	r2,0(sp)
 8001dc8:	e1fffe17 	ldw	r7,-8(fp)
 8001dcc:	01800204 	movi	r6,8
 8001dd0:	01400044 	movi	r5,1
 8001dd4:	8002b380 	call	8002b38 <XferInTransfer>
 8001dd8:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8001ddc:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001de0:	e037883a 	mov	sp,fp
 8001de4:	dfc00117 	ldw	ra,4(sp)
 8001de8:	df000017 	ldw	fp,0(sp)
 8001dec:	dec00204 	addi	sp,sp,8
 8001df0:	f800283a 	ret

08001df4 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8001df4:	defffb04 	addi	sp,sp,-20
 8001df8:	dfc00415 	stw	ra,16(sp)
 8001dfc:	df000315 	stw	fp,12(sp)
 8001e00:	df000304 	addi	fp,sp,12
 8001e04:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001e08:	d0a73683 	ldbu	r2,-25382(gp)
 8001e0c:	10803fcc 	andi	r2,r2,255
 8001e10:	100b883a 	mov	r5,r2
 8001e14:	01003804 	movi	r4,224
 8001e18:	8001f580 	call	8001f58 <MAXreg_wr>
	//usleep(1000);
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001e1c:	d0a73683 	ldbu	r2,-25382(gp)
 8001e20:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001e24:	d0a73683 	ldbu	r2,-25382(gp)
 8001e28:	10803fcc 	andi	r2,r2,255
 8001e2c:	100690fa 	slli	r3,r2,3
 8001e30:	008200b4 	movhi	r2,2050
 8001e34:	1885883a 	add	r2,r3,r2
 8001e38:	10af6f17 	ldw	r2,-16964(r2)
 8001e3c:	10800204 	addi	r2,r2,8
 8001e40:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001e44:	10803fcc 	andi	r2,r2,255
 8001e48:	d8800015 	stw	r2,0(sp)
 8001e4c:	e1fffe17 	ldw	r7,-8(fp)
 8001e50:	01800204 	movi	r6,8
 8001e54:	01400044 	movi	r5,1
 8001e58:	8002b380 	call	8002b38 <XferInTransfer>
 8001e5c:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8001e60:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001e64:	e037883a 	mov	sp,fp
 8001e68:	dfc00117 	ldw	ra,4(sp)
 8001e6c:	df000017 	ldw	fp,0(sp)
 8001e70:	dec00204 	addi	sp,sp,8
 8001e74:	f800283a 	ret

08001e78 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001e78:	defffb04 	addi	sp,sp,-20
 8001e7c:	df000415 	stw	fp,16(sp)
 8001e80:	df000404 	addi	fp,sp,16
 8001e84:	2005883a 	mov	r2,r4
 8001e88:	2807883a 	mov	r3,r5
 8001e8c:	e1bffd15 	stw	r6,-12(fp)
 8001e90:	e1fffc15 	stw	r7,-16(fp)
 8001e94:	e0bfff05 	stb	r2,-4(fp)
 8001e98:	1805883a 	mov	r2,r3
 8001e9c:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 8001ea0:	0005883a 	mov	r2,zero
}
 8001ea4:	e037883a 	mov	sp,fp
 8001ea8:	df000017 	ldw	fp,0(sp)
 8001eac:	dec00104 	addi	sp,sp,4
 8001eb0:	f800283a 	ret

08001eb4 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001eb4:	defffb04 	addi	sp,sp,-20
 8001eb8:	df000415 	stw	fp,16(sp)
 8001ebc:	df000404 	addi	fp,sp,16
 8001ec0:	2005883a 	mov	r2,r4
 8001ec4:	2807883a 	mov	r3,r5
 8001ec8:	e1bffd15 	stw	r6,-12(fp)
 8001ecc:	e1fffc15 	stw	r7,-16(fp)
 8001ed0:	e0bfff05 	stb	r2,-4(fp)
 8001ed4:	1805883a 	mov	r2,r3
 8001ed8:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 8001edc:	0005883a 	mov	r2,zero
}
 8001ee0:	e037883a 	mov	sp,fp
 8001ee4:	df000017 	ldw	fp,0(sp)
 8001ee8:	dec00104 	addi	sp,sp,4
 8001eec:	f800283a 	ret

08001ef0 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001ef0:	defffc04 	addi	sp,sp,-16
 8001ef4:	df000315 	stw	fp,12(sp)
 8001ef8:	df000304 	addi	fp,sp,12
 8001efc:	2005883a 	mov	r2,r4
 8001f00:	2809883a 	mov	r4,r5
 8001f04:	3007883a 	mov	r3,r6
 8001f08:	e0bfff05 	stb	r2,-4(fp)
 8001f0c:	2005883a 	mov	r2,r4
 8001f10:	e0bffe05 	stb	r2,-8(fp)
 8001f14:	1805883a 	mov	r2,r3
 8001f18:	e0bffd05 	stb	r2,-12(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8001f1c:	0001883a 	nop
 8001f20:	e037883a 	mov	sp,fp
 8001f24:	df000017 	ldw	fp,0(sp)
 8001f28:	dec00104 	addi	sp,sp,4
 8001f2c:	f800283a 	ret

08001f30 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8001f30:	defffe04 	addi	sp,sp,-8
 8001f34:	df000115 	stw	fp,4(sp)
 8001f38:	df000104 	addi	fp,sp,4
 8001f3c:	2005883a 	mov	r2,r4
 8001f40:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8001f44:	0001883a 	nop
 8001f48:	e037883a 	mov	sp,fp
 8001f4c:	df000017 	ldw	fp,0(sp)
 8001f50:	dec00104 	addi	sp,sp,4
 8001f54:	f800283a 	ret

08001f58 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8001f58:	defff604 	addi	sp,sp,-40
 8001f5c:	dfc00915 	stw	ra,36(sp)
 8001f60:	df000815 	stw	fp,32(sp)
 8001f64:	df000804 	addi	fp,sp,32
 8001f68:	2005883a 	mov	r2,r4
 8001f6c:	2807883a 	mov	r3,r5
 8001f70:	e0bffc05 	stb	r2,-16(fp)
 8001f74:	1805883a 	mov	r2,r3
 8001f78:	e0bffb05 	stb	r2,-20(fp)
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)

	alt_u8 wdata[2];
	//alt_u8 wdata_addr[1];
	//alt_u8 wdata[1];
	alt_u8* rdata = NULL;
 8001f7c:	e03fff15 	stw	zero,-4(fp)
	int spi_command_retval;

	//wdata_addr[0] = reg+2;
	wdata[0] = reg+2;
 8001f80:	e0bffc03 	ldbu	r2,-16(fp)
 8001f84:	10800084 	addi	r2,r2,2
 8001f88:	e0bffd85 	stb	r2,-10(fp)
	wdata[1] = val; //correct order?
 8001f8c:	e0bffb03 	ldbu	r2,-20(fp)
 8001f90:	e0bffdc5 	stb	r2,-9(fp)
	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,2,wdata,0,rdata,0);
 8001f94:	e0fffd84 	addi	r3,fp,-10
 8001f98:	d8000215 	stw	zero,8(sp)
 8001f9c:	e0bfff17 	ldw	r2,-4(fp)
 8001fa0:	d8800115 	stw	r2,4(sp)
 8001fa4:	d8000015 	stw	zero,0(sp)
 8001fa8:	180f883a 	mov	r7,r3
 8001fac:	01800084 	movi	r6,2
 8001fb0:	000b883a 	mov	r5,zero
 8001fb4:	01000804 	movi	r4,32
 8001fb8:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 8001fbc:	e0bffe15 	stw	r2,-8(fp)
			return;
		}
		*/

	//spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,1,wdata,0,rdata,0);
	if (spi_command_retval < 0) {
 8001fc0:	e0bffe17 	ldw	r2,-8(fp)
 8001fc4:	1000070e 	bge	r2,zero,8001fe4 <MAXreg_wr+0x8c>
				printf("\nInvalid return value from 'alt_avalon_spi_command' function\n");
 8001fc8:	01020074 	movhi	r4,2049
 8001fcc:	211e8704 	addi	r4,r4,31260
 8001fd0:	80087c00 	call	80087c0 <puts>
				printf("\nCould complete read operation with given address\n");
 8001fd4:	01020074 	movhi	r4,2049
 8001fd8:	211e9704 	addi	r4,r4,31324
 8001fdc:	80087c00 	call	80087c0 <puts>
				return;
 8001fe0:	00000106 	br	8001fe8 <MAXreg_wr+0x90>
			}

	return;
 8001fe4:	0001883a 	nop
	//spi_command_retval = alt_avalon_spi_command(QSYS_SPI_BASE,0,1,wdata,);
}
 8001fe8:	e037883a 	mov	sp,fp
 8001fec:	dfc00117 	ldw	ra,4(sp)
 8001ff0:	df000017 	ldw	fp,0(sp)
 8001ff4:	dec00204 	addi	sp,sp,8
 8001ff8:	f800283a 	ret

08001ffc <MAXbytes_wr>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8001ffc:	defff404 	addi	sp,sp,-48
 8002000:	dfc00b15 	stw	ra,44(sp)
 8002004:	df000a15 	stw	fp,40(sp)
 8002008:	df000a04 	addi	fp,sp,40
 800200c:	2005883a 	mov	r2,r4
 8002010:	2807883a 	mov	r3,r5
 8002014:	e1bff915 	stw	r6,-28(fp)
 8002018:	e0bffb05 	stb	r2,-20(fp)
 800201c:	1805883a 	mov	r2,r3
 8002020:	e0bffa05 	stb	r2,-24(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata_addr[1];
	alt_u8* wdata = data;
 8002024:	e0bff917 	ldw	r2,-28(fp)
 8002028:	e0bfff15 	stw	r2,-4(fp)
	alt_u8* rnull = NULL;
 800202c:	e03ffe15 	stw	zero,-8(fp)
	int i,spi_command_retval;

	wdata_addr[0] = reg+2;
 8002030:	e0bffb03 	ldbu	r2,-20(fp)
 8002034:	10800084 	addi	r2,r2,2
 8002038:	e0bffcc5 	stb	r2,-13(fp)

	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,1,wdata_addr,0,rnull,ALT_AVALON_SPI_COMMAND_MERGE);
 800203c:	e0fffcc4 	addi	r3,fp,-13
 8002040:	00800044 	movi	r2,1
 8002044:	d8800215 	stw	r2,8(sp)
 8002048:	e0bffe17 	ldw	r2,-8(fp)
 800204c:	d8800115 	stw	r2,4(sp)
 8002050:	d8000015 	stw	zero,0(sp)
 8002054:	180f883a 	mov	r7,r3
 8002058:	01800044 	movi	r6,1
 800205c:	000b883a 	mov	r5,zero
 8002060:	01000804 	movi	r4,32
 8002064:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 8002068:	e0bffd15 	stw	r2,-12(fp)
			printf("\nInvalid return value from 'alt_avalon_spi_command' function\n");
			printf("\nCould not write address for write operation\n");
			return data;
		}
	*/
	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,nbytes,wdata,0,rnull,0);
 800206c:	e0fffa03 	ldbu	r3,-24(fp)
 8002070:	d8000215 	stw	zero,8(sp)
 8002074:	e0bffe17 	ldw	r2,-8(fp)
 8002078:	d8800115 	stw	r2,4(sp)
 800207c:	d8000015 	stw	zero,0(sp)
 8002080:	e1ffff17 	ldw	r7,-4(fp)
 8002084:	180d883a 	mov	r6,r3
 8002088:	000b883a 	mov	r5,zero
 800208c:	01000804 	movi	r4,32
 8002090:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 8002094:	e0bffd15 	stw	r2,-12(fp)
	if (spi_command_retval < 0) {
 8002098:	e0bffd17 	ldw	r2,-12(fp)
 800209c:	1000080e 	bge	r2,zero,80020c0 <MAXbytes_wr+0xc4>
		printf("\nInvalid return value from 'alt_avalon_spi_command' function\n");
 80020a0:	01020074 	movhi	r4,2049
 80020a4:	211e8704 	addi	r4,r4,31260
 80020a8:	80087c00 	call	80087c0 <puts>
		printf("\nCould complete read operation with given address\n");
 80020ac:	01020074 	movhi	r4,2049
 80020b0:	211e9704 	addi	r4,r4,31324
 80020b4:	80087c00 	call	80087c0 <puts>
		return data;
 80020b8:	e0bff917 	ldw	r2,-28(fp)
 80020bc:	00000306 	br	80020cc <MAXbytes_wr+0xd0>
	}

	return (data+nbytes);
 80020c0:	e0bffa03 	ldbu	r2,-24(fp)
 80020c4:	e0fff917 	ldw	r3,-28(fp)
 80020c8:	1885883a 	add	r2,r3,r2


}
 80020cc:	e037883a 	mov	sp,fp
 80020d0:	dfc00117 	ldw	ra,4(sp)
 80020d4:	df000017 	ldw	fp,0(sp)
 80020d8:	dec00204 	addi	sp,sp,8
 80020dc:	f800283a 	ret

080020e0 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 80020e0:	defff804 	addi	sp,sp,-32
 80020e4:	dfc00715 	stw	ra,28(sp)
 80020e8:	df000615 	stw	fp,24(sp)
 80020ec:	df000604 	addi	fp,sp,24
 80020f0:	2005883a 	mov	r2,r4
 80020f4:	e0bffd05 	stb	r2,-12(fp)

	alt_u8 wdata[1];
	alt_u8 rdata[1];
	int spi_command_retval;

	wdata[0] = reg;
 80020f8:	e0bffd03 	ldbu	r2,-12(fp)
 80020fc:	e0bffe45 	stb	r2,-7(fp)
	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,1,wdata,1,rdata,0);
 8002100:	e0fffe44 	addi	r3,fp,-7
 8002104:	d8000215 	stw	zero,8(sp)
 8002108:	e0bffe04 	addi	r2,fp,-8
 800210c:	d8800115 	stw	r2,4(sp)
 8002110:	00800044 	movi	r2,1
 8002114:	d8800015 	stw	r2,0(sp)
 8002118:	180f883a 	mov	r7,r3
 800211c:	01800044 	movi	r6,1
 8002120:	000b883a 	mov	r5,zero
 8002124:	01000804 	movi	r4,32
 8002128:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 800212c:	e0bfff15 	stw	r2,-4(fp)
	if (spi_command_retval < 0) {
 8002130:	e0bfff17 	ldw	r2,-4(fp)
 8002134:	10000a0e 	bge	r2,zero,8002160 <MAXreg_rd+0x80>
			printf("\nInvalid return value from 'alt_avalon_spi_command' function\n");
 8002138:	01020074 	movhi	r4,2049
 800213c:	211e8704 	addi	r4,r4,31260
 8002140:	80087c00 	call	80087c0 <puts>
			printf("Could not read from written address\n");
 8002144:	01020074 	movhi	r4,2049
 8002148:	211ea404 	addi	r4,r4,31376
 800214c:	80087c00 	call	80087c0 <puts>
			BYTE invalid_rd = 0x81;
 8002150:	00bfe044 	movi	r2,-127
 8002154:	e0bffe85 	stb	r2,-6(fp)
			return invalid_rd;
 8002158:	e0bffe83 	ldbu	r2,-6(fp)
 800215c:	00000306 	br	800216c <MAXreg_rd+0x8c>
		}
	BYTE ret = (BYTE)rdata[0];
 8002160:	e0bffe03 	ldbu	r2,-8(fp)
 8002164:	e0bffec5 	stb	r2,-5(fp)
	return ret;
 8002168:	e0bffec3 	ldbu	r2,-5(fp)
}
 800216c:	e037883a 	mov	sp,fp
 8002170:	dfc00117 	ldw	ra,4(sp)
 8002174:	df000017 	ldw	fp,0(sp)
 8002178:	dec00204 	addi	sp,sp,8
 800217c:	f800283a 	ret

08002180 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8002180:	defff204 	addi	sp,sp,-56
 8002184:	dfc00d15 	stw	ra,52(sp)
 8002188:	df000c15 	stw	fp,48(sp)
 800218c:	df000c04 	addi	fp,sp,48
 8002190:	2005883a 	mov	r2,r4
 8002194:	2807883a 	mov	r3,r5
 8002198:	e1bff715 	stw	r6,-36(fp)
 800219c:	e0bff905 	stb	r2,-28(fp)
 80021a0:	1805883a 	mov	r2,r3
 80021a4:	e0bff805 	stb	r2,-32(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	alt_u8 wdata[1];
	alt_u8* wnull = NULL;
 80021a8:	e03fff15 	stw	zero,-4(fp)
	alt_u8* rdata = data;
 80021ac:	e0bff717 	ldw	r2,-36(fp)
 80021b0:	e0bffe15 	stw	r2,-8(fp)
	alt_u8* rnull = NULL;
 80021b4:	e03ffd15 	stw	zero,-12(fp)

	int spi_command_retval;

	wdata[0] = reg;
 80021b8:	e0bff903 	ldbu	r2,-28(fp)
 80021bc:	e0bffac5 	stb	r2,-21(fp)
	//spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,1,wdata,nbytes,rdata,0); //are flags still 0?
	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,1,wdata,0,rnull,ALT_AVALON_SPI_COMMAND_MERGE);
 80021c0:	e0fffac4 	addi	r3,fp,-21
 80021c4:	00800044 	movi	r2,1
 80021c8:	d8800215 	stw	r2,8(sp)
 80021cc:	e0bffd17 	ldw	r2,-12(fp)
 80021d0:	d8800115 	stw	r2,4(sp)
 80021d4:	d8000015 	stw	zero,0(sp)
 80021d8:	180f883a 	mov	r7,r3
 80021dc:	01800044 	movi	r6,1
 80021e0:	000b883a 	mov	r5,zero
 80021e4:	01000804 	movi	r4,32
 80021e8:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 80021ec:	e0bffc15 	stw	r2,-16(fp)
	if (spi_command_retval < 0) {
 80021f0:	e0bffc17 	ldw	r2,-16(fp)
 80021f4:	1000090e 	bge	r2,zero,800221c <MAXbytes_rd+0x9c>
			printf("\nInvalid return value from 'alt_avalon_spi_command' function\n");
 80021f8:	01020074 	movhi	r4,2049
 80021fc:	211e8704 	addi	r4,r4,31260
 8002200:	80087c00 	call	80087c0 <puts>
			printf("Could not perform read operation\n");
 8002204:	01020074 	movhi	r4,2049
 8002208:	211ead04 	addi	r4,r4,31412
 800220c:	80087c00 	call	80087c0 <puts>
			BYTE* invalid_rd = NULL;
 8002210:	e03ffb15 	stw	zero,-20(fp)
			return invalid_rd;
 8002214:	e0bffb17 	ldw	r2,-20(fp)
 8002218:	00000e06 	br	8002254 <MAXbytes_rd+0xd4>
		}
	spi_command_retval = alt_avalon_spi_command(SPI_0_BASE,0,0,wnull,nbytes,data,0);
 800221c:	e0bff803 	ldbu	r2,-32(fp)
 8002220:	d8000215 	stw	zero,8(sp)
 8002224:	e0fff717 	ldw	r3,-36(fp)
 8002228:	d8c00115 	stw	r3,4(sp)
 800222c:	d8800015 	stw	r2,0(sp)
 8002230:	e1ffff17 	ldw	r7,-4(fp)
 8002234:	000d883a 	mov	r6,zero
 8002238:	000b883a 	mov	r5,zero
 800223c:	01000804 	movi	r4,32
 8002240:	80160a00 	call	80160a0 <alt_avalon_spi_command>
 8002244:	e0bffc15 	stw	r2,-16(fp)
	return (data+nbytes);
 8002248:	e0bff803 	ldbu	r2,-32(fp)
 800224c:	e0fff717 	ldw	r3,-36(fp)
 8002250:	1885883a 	add	r2,r3,r2

}
 8002254:	e037883a 	mov	sp,fp
 8002258:	dfc00117 	ldw	ra,4(sp)
 800225c:	df000017 	ldw	fp,0(sp)
 8002260:	dec00204 	addi	sp,sp,8
 8002264:	f800283a 	ret

08002268 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8002268:	defffd04 	addi	sp,sp,-12
 800226c:	dfc00215 	stw	ra,8(sp)
 8002270:	df000115 	stw	fp,4(sp)
 8002274:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8002278:	0005883a 	mov	r2,zero
 800227c:	0080d835 	stwio	r2,864(zero)
	usleep(1000000);
 8002280:	010003f4 	movhi	r4,15
 8002284:	21109004 	addi	r4,r4,16960
 8002288:	80137b00 	call	80137b0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 800228c:	00800044 	movi	r2,1
 8002290:	0080d835 	stwio	r2,864(zero)
	BYTE tmp = 0;
 8002294:	e03fffc5 	stb	zero,-1(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8002298:	01400804 	movi	r5,32
 800229c:	01001e04 	movi	r4,120
 80022a0:	8001f580 	call	8001f58 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 80022a4:	000b883a 	mov	r5,zero
 80022a8:	01001e04 	movi	r4,120
 80022ac:	8001f580 	call	8001f58 <MAXreg_wr>

	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80022b0:	00000806 	br	80022d4 <MAX3421E_reset+0x6c>
		tmp++;                                      //timeout after 256 attempts
 80022b4:	e0bfffc3 	ldbu	r2,-1(fp)
 80022b8:	10800044 	addi	r2,r2,1
 80022bc:	e0bfffc5 	stb	r2,-1(fp)
		if (tmp == 0) {
 80022c0:	e0bfffc3 	ldbu	r2,-1(fp)
 80022c4:	1000031e 	bne	r2,zero,80022d4 <MAX3421E_reset+0x6c>
			printf("reset timeout!");
 80022c8:	01020074 	movhi	r4,2049
 80022cc:	211eb604 	addi	r4,r4,31448
 80022d0:	800869c0 	call	800869c <printf>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80022d4:	01001a04 	movi	r4,104
 80022d8:	80020e00 	call	80020e0 <MAXreg_rd>
 80022dc:	10803fcc 	andi	r2,r2,255
 80022e0:	1080004c 	andi	r2,r2,1
 80022e4:	103ff326 	beq	r2,zero,80022b4 <MAX3421E_reset+0x4c>
		}
	}

}
 80022e8:	0001883a 	nop
 80022ec:	0001883a 	nop
 80022f0:	e037883a 	mov	sp,fp
 80022f4:	dfc00117 	ldw	ra,4(sp)
 80022f8:	df000017 	ldw	fp,0(sp)
 80022fc:	dec00204 	addi	sp,sp,8
 8002300:	f800283a 	ret

08002304 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8002304:	defffe04 	addi	sp,sp,-8
 8002308:	df000115 	stw	fp,4(sp)
 800230c:	df000104 	addi	fp,sp,4
 8002310:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8002314:	00800044 	movi	r2,1
}
 8002318:	e037883a 	mov	sp,fp
 800231c:	df000017 	ldw	fp,0(sp)
 8002320:	dec00104 	addi	sp,sp,4
 8002324:	f800283a 	ret

08002328 <MAX_busprobe>:

/* probe bus to determine device presence and speed */
void MAX_busprobe(void) {
 8002328:	defffd04 	addi	sp,sp,-12
 800232c:	dfc00215 	stw	ra,8(sp)
 8002330:	df000115 	stw	fp,4(sp)
 8002334:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8002338:	01003e04 	movi	r4,248
 800233c:	80020e00 	call	80020e0 <MAXreg_rd>
 8002340:	e0bfffc5 	stb	r2,-1(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8002344:	e0ffffc3 	ldbu	r3,-1(fp)
 8002348:	00bff004 	movi	r2,-64
 800234c:	1884703a 	and	r2,r3,r2
 8002350:	e0bfffc5 	stb	r2,-1(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 8002354:	e0bfffc3 	ldbu	r2,-1(fp)
 8002358:	10c03020 	cmpeqi	r3,r2,192
 800235c:	18003c1e 	bne	r3,zero,8002450 <MAX_busprobe+0x128>
 8002360:	10c03048 	cmpgei	r3,r2,193
 8002364:	18004d1e 	bne	r3,zero,800249c <MAX_busprobe+0x174>
 8002368:	10c02020 	cmpeqi	r3,r2,128
 800236c:	1800061e 	bne	r3,zero,8002388 <MAX_busprobe+0x60>
 8002370:	10c02048 	cmpgei	r3,r2,129
 8002374:	1800491e 	bne	r3,zero,800249c <MAX_busprobe+0x174>
 8002378:	10003826 	beq	r2,zero,800245c <MAX_busprobe+0x134>
 800237c:	10801020 	cmpeqi	r2,r2,64
 8002380:	10001a1e 	bne	r2,zero,80023ec <MAX_busprobe+0xc4>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8002384:	00004506 	br	800249c <MAX_busprobe+0x174>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8002388:	d0a00803 	ldbu	r2,-32736(gp)
 800238c:	10803fcc 	andi	r2,r2,255
 8002390:	108004e0 	cmpeqi	r2,r2,19
 8002394:	10003e1e 	bne	r2,zero,8002490 <MAX_busprobe+0x168>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8002398:	01003604 	movi	r4,216
 800239c:	80020e00 	call	80020e0 <MAXreg_rd>
 80023a0:	10803fcc 	andi	r2,r2,255
 80023a4:	1080008c 	andi	r2,r2,2
 80023a8:	1000071e 	bne	r2,zero,80023c8 <MAX_busprobe+0xa0>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80023ac:	01403244 	movi	r5,201
 80023b0:	01003604 	movi	r4,216
 80023b4:	8001f580 	call	8001f58 <MAXreg_wr>
				printf("Starting in full speed\n");
 80023b8:	01020074 	movhi	r4,2049
 80023bc:	211eba04 	addi	r4,r4,31464
 80023c0:	80087c00 	call	80087c0 <puts>
 80023c4:	00000606 	br	80023e0 <MAX_busprobe+0xb8>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 80023c8:	014032c4 	movi	r5,203
 80023cc:	01003604 	movi	r4,216
 80023d0:	8001f580 	call	8001f58 <MAXreg_wr>
				printf("Starting in low speed\n");
 80023d4:	01020074 	movhi	r4,2049
 80023d8:	211ec004 	addi	r4,r4,31488
 80023dc:	80087c00 	call	80087c0 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80023e0:	00800404 	movi	r2,16
 80023e4:	d0a00805 	stb	r2,-32736(gp)
		break;
 80023e8:	00002906 	br	8002490 <MAX_busprobe+0x168>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80023ec:	d0a00803 	ldbu	r2,-32736(gp)
 80023f0:	10803fcc 	andi	r2,r2,255
 80023f4:	108004e0 	cmpeqi	r2,r2,19
 80023f8:	1000271e 	bne	r2,zero,8002498 <MAX_busprobe+0x170>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80023fc:	01003604 	movi	r4,216
 8002400:	80020e00 	call	80020e0 <MAXreg_rd>
 8002404:	10803fcc 	andi	r2,r2,255
 8002408:	1080008c 	andi	r2,r2,2
 800240c:	1000071e 	bne	r2,zero,800242c <MAX_busprobe+0x104>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 8002410:	014032c4 	movi	r5,203
 8002414:	01003604 	movi	r4,216
 8002418:	8001f580 	call	8001f58 <MAXreg_wr>
				printf("Starting in low speed\n");
 800241c:	01020074 	movhi	r4,2049
 8002420:	211ec004 	addi	r4,r4,31488
 8002424:	80087c00 	call	80087c0 <puts>
 8002428:	00000606 	br	8002444 <MAX_busprobe+0x11c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 800242c:	01403244 	movi	r5,201
 8002430:	01003604 	movi	r4,216
 8002434:	8001f580 	call	8001f58 <MAXreg_wr>
				printf("Starting in full speed\n");
 8002438:	01020074 	movhi	r4,2049
 800243c:	211eba04 	addi	r4,r4,31464
 8002440:	80087c00 	call	80087c0 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8002444:	00800404 	movi	r2,16
 8002448:	d0a00805 	stb	r2,-32736(gp)
		break;
 800244c:	00001206 	br	8002498 <MAX_busprobe+0x170>
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 8002450:	00800104 	movi	r2,4
 8002454:	d0a00805 	stb	r2,-32736(gp)
		break;
 8002458:	00001006 	br	800249c <MAX_busprobe+0x174>
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 800245c:	d0a00803 	ldbu	r2,-32736(gp)
 8002460:	10803fcc 	andi	r2,r2,255
 8002464:	10803c0c 	andi	r2,r2,240
 8002468:	10000326 	beq	r2,zero,8002478 <MAX_busprobe+0x150>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 800246c:	00800044 	movi	r2,1
 8002470:	d0a00805 	stb	r2,-32736(gp)
		break;
 8002474:	00000906 	br	800249c <MAX_busprobe+0x174>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 8002478:	01403244 	movi	r5,201
 800247c:	01003604 	movi	r4,216
 8002480:	8001f580 	call	8001f58 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8002484:	008000c4 	movi	r2,3
 8002488:	d0a00805 	stb	r2,-32736(gp)
		break;
 800248c:	00000306 	br	800249c <MAX_busprobe+0x174>
		break;
 8002490:	0001883a 	nop
 8002494:	00000106 	br	800249c <MAX_busprobe+0x174>
		break;
 8002498:	0001883a 	nop
}
 800249c:	0001883a 	nop
 80024a0:	e037883a 	mov	sp,fp
 80024a4:	dfc00117 	ldw	ra,4(sp)
 80024a8:	df000017 	ldw	fp,0(sp)
 80024ac:	dec00204 	addi	sp,sp,8
 80024b0:	f800283a 	ret

080024b4 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80024b4:	defffe04 	addi	sp,sp,-8
 80024b8:	dfc00115 	stw	ra,4(sp)
 80024bc:	df000015 	stw	fp,0(sp)
 80024c0:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 80024c4:	01400684 	movi	r5,26
 80024c8:	01002204 	movi	r4,136
 80024cc:	8001f580 	call	8001f58 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 80024d0:	80022680 	call	8002268 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 80024d4:	0009883a 	mov	r4,zero
 80024d8:	80023040 	call	8002304 <Vbus_power>

	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 80024dc:	01402004 	movi	r5,128
 80024e0:	01002e04 	movi	r4,184
 80024e4:	8001f580 	call	8001f58 <MAXreg_wr>
	Vbus_power( ON);
 80024e8:	01000044 	movi	r4,1
 80024ec:	80023040 	call	8002304 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 80024f0:	01403444 	movi	r5,209
 80024f4:	01003604 	movi	r4,216
 80024f8:	8001f580 	call	8001f58 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	// adding print statements for debug
	printf("connection detection: %x\n", bmCONDETIE);
 80024fc:	01400804 	movi	r5,32
 8002500:	01020074 	movhi	r4,2049
 8002504:	211ec604 	addi	r4,r4,31512
 8002508:	800869c0 	call	800869c <printf>
	printf("value of reg to be written to (rHIEN): %x\n", MAXreg_rd(rHIEN));
 800250c:	01003404 	movi	r4,208
 8002510:	80020e00 	call	80020e0 <MAXreg_rd>
 8002514:	10803fcc 	andi	r2,r2,255
 8002518:	100b883a 	mov	r5,r2
 800251c:	01020074 	movhi	r4,2049
 8002520:	211ecd04 	addi	r4,r4,31540
 8002524:	800869c0 	call	800869c <printf>
	printf("doin a regwrite with value connection detection to register rHIEN...\n");
 8002528:	01020074 	movhi	r4,2049
 800252c:	211ed804 	addi	r4,r4,31584
 8002530:	80087c00 	call	80087c0 <puts>
	// vvv this instruction was already here
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8002534:	01400804 	movi	r5,32
 8002538:	01003404 	movi	r4,208
 800253c:	8001f580 	call	8001f58 <MAXreg_wr>
	// vvv more debug
	printf("value in rHIEN after ostensibly performing a write: %x\n", MAXreg_rd(rHIEN));
 8002540:	01003404 	movi	r4,208
 8002544:	80020e00 	call	80020e0 <MAXreg_rd>
 8002548:	10803fcc 	andi	r2,r2,255
 800254c:	100b883a 	mov	r5,r2
 8002550:	01020074 	movhi	r4,2049
 8002554:	211eea04 	addi	r4,r4,31656
 8002558:	800869c0 	call	800869c <printf>
	// end debug
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 800255c:	01400104 	movi	r5,4
 8002560:	01003a04 	movi	r4,232
 8002564:	8001f580 	call	8001f58 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8002568:	80023280 	call	8002328 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 800256c:	01400804 	movi	r5,32
 8002570:	01003204 	movi	r4,200
 8002574:	8001f580 	call	8001f58 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8002578:	01400044 	movi	r5,1
 800257c:	01002004 	movi	r4,128
 8002580:	8001f580 	call	8001f58 <MAXreg_wr>
}
 8002584:	0001883a 	nop
 8002588:	e037883a 	mov	sp,fp
 800258c:	dfc00117 	ldw	ra,4(sp)
 8002590:	df000017 	ldw	fp,0(sp)
 8002594:	dec00204 	addi	sp,sp,8
 8002598:	f800283a 	ret

0800259c <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 800259c:	defffe04 	addi	sp,sp,-8
 80025a0:	dfc00115 	stw	ra,4(sp)
 80025a4:	df000015 	stw	fp,0(sp)
 80025a8:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80025ac:	0080e037 	ldwio	r2,896(zero)
 80025b0:	1000041e 	bne	r2,zero,80025c4 <MAX3421E_Task+0x28>
		printf("MAX interrupt\n\r");
 80025b4:	01020074 	movhi	r4,2049
 80025b8:	211ef804 	addi	r4,r4,31712
 80025bc:	800869c0 	call	800869c <printf>
		MaxIntHandler();
 80025c0:	80025f80 	call	80025f8 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 80025c4:	0080dc37 	ldwio	r2,880(zero)
 80025c8:	10800058 	cmpnei	r2,r2,1
 80025cc:	1000041e 	bne	r2,zero,80025e0 <MAX3421E_Task+0x44>
		printf("GPX interrupt\n\r");
 80025d0:	01020074 	movhi	r4,2049
 80025d4:	211efc04 	addi	r4,r4,31728
 80025d8:	800869c0 	call	800869c <printf>
		MaxGpxHandler();
 80025dc:	80026c40 	call	80026c4 <MaxGpxHandler>
	}
}
 80025e0:	0001883a 	nop
 80025e4:	e037883a 	mov	sp,fp
 80025e8:	dfc00117 	ldw	ra,4(sp)
 80025ec:	df000017 	ldw	fp,0(sp)
 80025f0:	dec00204 	addi	sp,sp,8
 80025f4:	f800283a 	ret

080025f8 <MaxIntHandler>:

void MaxIntHandler(void) {
 80025f8:	defffd04 	addi	sp,sp,-12
 80025fc:	dfc00215 	stw	ra,8(sp)
 8002600:	df000115 	stw	fp,4(sp)
 8002604:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8002608:	e03fffc5 	stb	zero,-1(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 800260c:	01003204 	movi	r4,200
 8002610:	80020e00 	call	80020e0 <MAXreg_rd>
 8002614:	e0bfff85 	stb	r2,-2(fp)
	printf("IRQ: %x\n", HIRQ);
 8002618:	e0bfff83 	ldbu	r2,-2(fp)
 800261c:	100b883a 	mov	r5,r2
 8002620:	01020074 	movhi	r4,2049
 8002624:	211f0004 	addi	r4,r4,31744
 8002628:	800869c0 	call	800869c <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 800262c:	e0bfff83 	ldbu	r2,-2(fp)
 8002630:	1080100c 	andi	r2,r2,64
 8002634:	10000326 	beq	r2,zero,8002644 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8002638:	e0bfffc3 	ldbu	r2,-1(fp)
 800263c:	10801014 	ori	r2,r2,64
 8002640:	e0bfffc5 	stb	r2,-1(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8002644:	e0bfff83 	ldbu	r2,-2(fp)
 8002648:	1080080c 	andi	r2,r2,32
 800264c:	10000426 	beq	r2,zero,8002660 <MaxIntHandler+0x68>
		MAX_busprobe();
 8002650:	80023280 	call	8002328 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8002654:	e0bfffc3 	ldbu	r2,-1(fp)
 8002658:	10800814 	ori	r2,r2,32
 800265c:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8002660:	e0bfff83 	ldbu	r2,-2(fp)
 8002664:	1080020c 	andi	r2,r2,8
 8002668:	10000326 	beq	r2,zero,8002678 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 800266c:	000b883a 	mov	r5,zero
 8002670:	01000e04 	movi	r4,56
 8002674:	8001f580 	call	8001f58 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8002678:	e0bfff83 	ldbu	r2,-2(fp)
 800267c:	1080004c 	andi	r2,r2,1
 8002680:	10000626 	beq	r2,zero,800269c <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8002684:	d0a00803 	ldbu	r2,-32736(gp)
 8002688:	10800044 	addi	r2,r2,1
 800268c:	d0a00805 	stb	r2,-32736(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8002690:	e0bfffc3 	ldbu	r2,-1(fp)
 8002694:	10800054 	ori	r2,r2,1
 8002698:	e0bfffc5 	stb	r2,-1(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 800269c:	e0bfffc3 	ldbu	r2,-1(fp)
 80026a0:	100b883a 	mov	r5,r2
 80026a4:	01003204 	movi	r4,200
 80026a8:	8001f580 	call	8001f58 <MAXreg_wr>
}
 80026ac:	0001883a 	nop
 80026b0:	e037883a 	mov	sp,fp
 80026b4:	dfc00117 	ldw	ra,4(sp)
 80026b8:	df000017 	ldw	fp,0(sp)
 80026bc:	dec00204 	addi	sp,sp,8
 80026c0:	f800283a 	ret

080026c4 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 80026c4:	defffd04 	addi	sp,sp,-12
 80026c8:	dfc00215 	stw	ra,8(sp)
 80026cc:	df000115 	stw	fp,4(sp)
 80026d0:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 80026d4:	01002c04 	movi	r4,176
 80026d8:	80020e00 	call	80020e0 <MAXreg_rd>
 80026dc:	e0bfffc5 	stb	r2,-1(fp)
}
 80026e0:	0001883a 	nop
 80026e4:	e037883a 	mov	sp,fp
 80026e8:	dfc00117 	ldw	ra,4(sp)
 80026ec:	df000017 	ldw	fp,0(sp)
 80026f0:	dec00204 	addi	sp,sp,8
 80026f4:	f800283a 	ret

080026f8 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 80026f8:	defff104 	addi	sp,sp,-60
 80026fc:	dfc00e15 	stw	ra,56(sp)
 8002700:	df000d15 	stw	fp,52(sp)
 8002704:	df000d04 	addi	fp,sp,52
 8002708:	2015883a 	mov	r10,r4
 800270c:	2813883a 	mov	r9,r5
 8002710:	3011883a 	mov	r8,r6
 8002714:	e1400217 	ldw	r5,8(fp)
 8002718:	e1000317 	ldw	r4,12(fp)
 800271c:	e0c00417 	ldw	r3,16(fp)
 8002720:	e0800517 	ldw	r2,20(fp)
 8002724:	500d883a 	mov	r6,r10
 8002728:	e1bffb05 	stb	r6,-20(fp)
 800272c:	480d883a 	mov	r6,r9
 8002730:	e1bffa05 	stb	r6,-24(fp)
 8002734:	400d883a 	mov	r6,r8
 8002738:	e1bff905 	stb	r6,-28(fp)
 800273c:	380d883a 	mov	r6,r7
 8002740:	e1bff805 	stb	r6,-32(fp)
 8002744:	e17ff705 	stb	r5,-36(fp)
 8002748:	e13ff605 	stb	r4,-40(fp)
 800274c:	e0fff50d 	sth	r3,-44(fp)
 8002750:	e0bff40d 	sth	r2,-48(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8002754:	e03fff15 	stw	zero,-4(fp)
 BYTE datastage = 1; //request data stage present or absent
 8002758:	00800044 	movi	r2,1
 800275c:	e0bffec5 	stb	r2,-5(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8002760:	e0800617 	ldw	r2,24(fp)
 8002764:	1000011e 	bne	r2,zero,800276c <XferCtrlReq+0x74>
        datastage = 0;
 8002768:	e03ffec5 	stb	zero,-5(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 800276c:	e0bffb03 	ldbu	r2,-20(fp)
 8002770:	100b883a 	mov	r5,r2
 8002774:	01003804 	movi	r4,224
 8002778:	8001f580 	call	8001f58 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 800277c:	e0bff903 	ldbu	r2,-28(fp)
 8002780:	10803fcc 	andi	r2,r2,255
 8002784:	1080201c 	xori	r2,r2,128
 8002788:	10bfe004 	addi	r2,r2,-128
 800278c:	1000020e 	bge	r2,zero,8002798 <XferCtrlReq+0xa0>
        direction = TRUE;                   		//determine request direction
 8002790:	00800044 	movi	r2,1
 8002794:	e0bfff15 	stw	r2,-4(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8002798:	e0bff903 	ldbu	r2,-28(fp)
 800279c:	e0bffc85 	stb	r2,-14(fp)
    setup_pkt.bRequest = bRequest;
 80027a0:	e0bff803 	ldbu	r2,-32(fp)
 80027a4:	e0bffcc5 	stb	r2,-13(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 80027a8:	e0bff703 	ldbu	r2,-36(fp)
 80027ac:	e0bffd05 	stb	r2,-12(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 80027b0:	e0bff603 	ldbu	r2,-40(fp)
 80027b4:	e0bffd45 	stb	r2,-11(fp)
    setup_pkt.wIndex = wInd;
 80027b8:	e0bff50b 	ldhu	r2,-44(fp)
 80027bc:	e0bffd8d 	sth	r2,-10(fp)
    setup_pkt.wLength = nbytes;
 80027c0:	e0bff40b 	ldhu	r2,-48(fp)
 80027c4:	e0bffe0d 	sth	r2,-8(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 80027c8:	e0bffc84 	addi	r2,fp,-14
 80027cc:	100d883a 	mov	r6,r2
 80027d0:	01400204 	movi	r5,8
 80027d4:	01000804 	movi	r4,32
 80027d8:	8001ffc0 	call	8001ffc <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 80027dc:	e0bffa03 	ldbu	r2,-24(fp)
 80027e0:	100b883a 	mov	r5,r2
 80027e4:	01000404 	movi	r4,16
 80027e8:	80029b80 	call	80029b8 <XferDispatchPkt>
 80027ec:	e0bffe85 	stb	r2,-6(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 80027f0:	e0bffe83 	ldbu	r2,-6(fp)
 80027f4:	10000226 	beq	r2,zero,8002800 <XferCtrlReq+0x108>
        return( rcode );
 80027f8:	e0bffe83 	ldbu	r2,-6(fp)
 80027fc:	00000e06 	br	8002838 <XferCtrlReq+0x140>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8002800:	e0bffec3 	ldbu	r2,-5(fp)
 8002804:	100690ba 	slli	r3,r2,2
 8002808:	d0a00604 	addi	r2,gp,-32744
 800280c:	1885883a 	add	r2,r3,r2
 8002810:	10800017 	ldw	r2,0(r2)
 8002814:	e13ffb03 	ldbu	r4,-20(fp)
 8002818:	e17ffa03 	ldbu	r5,-24(fp)
 800281c:	e1bff40b 	ldhu	r6,-48(fp)
 8002820:	e0ffff17 	ldw	r3,-4(fp)
 8002824:	d8c00015 	stw	r3,0(sp)
 8002828:	e1c00617 	ldw	r7,24(fp)
 800282c:	103ee83a 	callr	r2
 8002830:	e0bffe85 	stb	r2,-6(fp)
    return( rcode );
 8002834:	e0bffe83 	ldbu	r2,-6(fp)
}
 8002838:	e037883a 	mov	sp,fp
 800283c:	dfc00117 	ldw	ra,4(sp)
 8002840:	df000017 	ldw	fp,0(sp)
 8002844:	dec00204 	addi	sp,sp,8
 8002848:	f800283a 	ret

0800284c <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 800284c:	defff804 	addi	sp,sp,-32
 8002850:	dfc00715 	stw	ra,28(sp)
 8002854:	df000615 	stw	fp,24(sp)
 8002858:	df000604 	addi	fp,sp,24
 800285c:	2005883a 	mov	r2,r4
 8002860:	2809883a 	mov	r4,r5
 8002864:	3007883a 	mov	r3,r6
 8002868:	e1fffb15 	stw	r7,-20(fp)
 800286c:	e0bffe05 	stb	r2,-8(fp)
 8002870:	2005883a 	mov	r2,r4
 8002874:	e0bffd05 	stb	r2,-12(fp)
 8002878:	1805883a 	mov	r2,r3
 800287c:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8002880:	e0800217 	ldw	r2,8(fp)
 8002884:	10002626 	beq	r2,zero,8002920 <XferCtrlData+0xd4>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002888:	e0bffe03 	ldbu	r2,-8(fp)
 800288c:	100690fa 	slli	r3,r2,3
 8002890:	008200b4 	movhi	r2,2050
 8002894:	1885883a 	add	r2,r3,r2
 8002898:	10ef6f17 	ldw	r3,-16964(r2)
 800289c:	e0bffd03 	ldbu	r2,-12(fp)
 80028a0:	100490fa 	slli	r2,r2,3
 80028a4:	1885883a 	add	r2,r3,r2
 80028a8:	00c00804 	movi	r3,32
 80028ac:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 80028b0:	e13ffe03 	ldbu	r4,-8(fp)
 80028b4:	e17ffd03 	ldbu	r5,-12(fp)
 80028b8:	e1bffc0b 	ldhu	r6,-16(fp)
 80028bc:	e0bffe03 	ldbu	r2,-8(fp)
 80028c0:	100690fa 	slli	r3,r2,3
 80028c4:	008200b4 	movhi	r2,2050
 80028c8:	1885883a 	add	r2,r3,r2
 80028cc:	10ef6f17 	ldw	r3,-16964(r2)
 80028d0:	e0bffd03 	ldbu	r2,-12(fp)
 80028d4:	100490fa 	slli	r2,r2,3
 80028d8:	1885883a 	add	r2,r3,r2
 80028dc:	1080008b 	ldhu	r2,2(r2)
 80028e0:	10803fcc 	andi	r2,r2,255
 80028e4:	d8800015 	stw	r2,0(sp)
 80028e8:	e1fffb17 	ldw	r7,-20(fp)
 80028ec:	8002b380 	call	8002b38 <XferInTransfer>
 80028f0:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode ) {
 80028f4:	e0bfffc3 	ldbu	r2,-1(fp)
 80028f8:	10000226 	beq	r2,zero,8002904 <XferCtrlData+0xb8>
        return( rcode );
 80028fc:	e0bfffc3 	ldbu	r2,-1(fp)
 8002900:	00000806 	br	8002924 <XferCtrlData+0xd8>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8002904:	e0bffd03 	ldbu	r2,-12(fp)
 8002908:	100b883a 	mov	r5,r2
 800290c:	01002804 	movi	r4,160
 8002910:	80029b80 	call	80029b8 <XferDispatchPkt>
 8002914:	e0bfffc5 	stb	r2,-1(fp)
        return( rcode );
 8002918:	e0bfffc3 	ldbu	r2,-1(fp)
 800291c:	00000106 	br	8002924 <XferCtrlData+0xd8>
    }
    else {              //OUT not implemented
        return( 0xff );
 8002920:	00bfffc4 	movi	r2,-1
    }
}
 8002924:	e037883a 	mov	sp,fp
 8002928:	dfc00117 	ldw	ra,4(sp)
 800292c:	df000017 	ldw	fp,0(sp)
 8002930:	dec00204 	addi	sp,sp,8
 8002934:	f800283a 	ret

08002938 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8002938:	defff904 	addi	sp,sp,-28
 800293c:	dfc00615 	stw	ra,24(sp)
 8002940:	df000515 	stw	fp,20(sp)
 8002944:	df000504 	addi	fp,sp,20
 8002948:	2005883a 	mov	r2,r4
 800294c:	2809883a 	mov	r4,r5
 8002950:	3007883a 	mov	r3,r6
 8002954:	e1fffb15 	stw	r7,-20(fp)
 8002958:	e0bffe05 	stb	r2,-8(fp)
 800295c:	2005883a 	mov	r2,r4
 8002960:	e0bffd05 	stb	r2,-12(fp)
 8002964:	1805883a 	mov	r2,r3
 8002968:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;
    if( direction ) { //GET
 800296c:	e0800217 	ldw	r2,8(fp)
 8002970:	10000626 	beq	r2,zero,800298c <XferCtrlND+0x54>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8002974:	e0bffd03 	ldbu	r2,-12(fp)
 8002978:	100b883a 	mov	r5,r2
 800297c:	01002804 	movi	r4,160
 8002980:	80029b80 	call	80029b8 <XferDispatchPkt>
 8002984:	e0bfffc5 	stb	r2,-1(fp)
 8002988:	00000506 	br	80029a0 <XferCtrlND+0x68>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 800298c:	e0bffd03 	ldbu	r2,-12(fp)
 8002990:	100b883a 	mov	r5,r2
 8002994:	01002004 	movi	r4,128
 8002998:	80029b80 	call	80029b8 <XferDispatchPkt>
 800299c:	e0bfffc5 	stb	r2,-1(fp)
    }
    return( rcode );
 80029a0:	e0bfffc3 	ldbu	r2,-1(fp)
}
 80029a4:	e037883a 	mov	sp,fp
 80029a8:	dfc00117 	ldw	ra,4(sp)
 80029ac:	df000017 	ldw	fp,0(sp)
 80029b0:	dec00204 	addi	sp,sp,8
 80029b4:	f800283a 	ret

080029b8 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 80029b8:	defff904 	addi	sp,sp,-28
 80029bc:	dfc00615 	stw	ra,24(sp)
 80029c0:	df000515 	stw	fp,20(sp)
 80029c4:	df000504 	addi	fp,sp,20
 80029c8:	2005883a 	mov	r2,r4
 80029cc:	2807883a 	mov	r3,r5
 80029d0:	e0bffc05 	stb	r2,-16(fp)
 80029d4:	1805883a 	mov	r2,r3
 80029d8:	e0bffb05 	stb	r2,-20(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80029dc:	d0a74517 	ldw	r2,-25324(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 80029e0:	0140fa04 	movi	r5,1000
 80029e4:	1009883a 	mov	r4,r2
 80029e8:	80052bc0 	call	80052bc <__mulsi3>
 80029ec:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 80029f0:	d0a74417 	ldw	r2,-25328(gp)
 80029f4:	100b883a 	mov	r5,r2
 80029f8:	1809883a 	mov	r4,r3
 80029fc:	80051fc0 	call	80051fc <__udivsi3>
 8002a00:	1084e204 	addi	r2,r2,5000
 8002a04:	e0bffe15 	stw	r2,-8(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8002a08:	e03fff85 	stb	zero,-2(fp)
 BYTE nak_count = 0;
 8002a0c:	e03fff45 	stb	zero,-3(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8002a10:	e0fffc03 	ldbu	r3,-16(fp)
 8002a14:	e0bffb03 	ldbu	r2,-20(fp)
 8002a18:	1884b03a 	or	r2,r3,r2
 8002a1c:	10803fcc 	andi	r2,r2,255
 8002a20:	100b883a 	mov	r5,r2
 8002a24:	01003c04 	movi	r4,240
 8002a28:	8001f580 	call	8001f58 <MAXreg_wr>
        rcode = 0xff;
 8002a2c:	00bfffc4 	movi	r2,-1
 8002a30:	e0bfffc5 	stb	r2,-1(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8002a34:	00000d06 	br	8002a6c <XferDispatchPkt+0xb4>
            tmpdata = MAXreg_rd( rHIRQ );
 8002a38:	01003204 	movi	r4,200
 8002a3c:	80020e00 	call	80020e0 <MAXreg_rd>
 8002a40:	e0bffdc5 	stb	r2,-9(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8002a44:	e0bffdc3 	ldbu	r2,-9(fp)
 8002a48:	10803fcc 	andi	r2,r2,255
 8002a4c:	1080201c 	xori	r2,r2,128
 8002a50:	10bfe004 	addi	r2,r2,-128
 8002a54:	1000050e 	bge	r2,zero,8002a6c <XferDispatchPkt+0xb4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8002a58:	01402004 	movi	r5,128
 8002a5c:	01003204 	movi	r4,200
 8002a60:	8001f580 	call	8001f58 <MAXreg_wr>
                rcode = 0x00;
 8002a64:	e03fffc5 	stb	zero,-1(fp)
                break;
 8002a68:	00000c06 	br	8002a9c <XferDispatchPkt+0xe4>
  return _alt_nticks;
 8002a6c:	d0a74517 	ldw	r2,-25324(gp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8002a70:	0140fa04 	movi	r5,1000
 8002a74:	1009883a 	mov	r4,r2
 8002a78:	80052bc0 	call	80052bc <__mulsi3>
 8002a7c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002a80:	d0a74417 	ldw	r2,-25328(gp)
 8002a84:	100b883a 	mov	r5,r2
 8002a88:	1809883a 	mov	r4,r3
 8002a8c:	80051fc0 	call	80051fc <__udivsi3>
 8002a90:	1007883a 	mov	r3,r2
 8002a94:	e0bffe17 	ldw	r2,-8(fp)
 8002a98:	18bfe736 	bltu	r3,r2,8002a38 <XferDispatchPkt+0x80>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8002a9c:	e0bfffc3 	ldbu	r2,-1(fp)
 8002aa0:	10000226 	beq	r2,zero,8002aac <XferDispatchPkt+0xf4>
            return( rcode );
 8002aa4:	e0bfffc3 	ldbu	r2,-1(fp)
 8002aa8:	00001e06 	br	8002b24 <XferDispatchPkt+0x16c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8002aac:	01003e04 	movi	r4,248
 8002ab0:	80020e00 	call	80020e0 <MAXreg_rd>
 8002ab4:	108003cc 	andi	r2,r2,15
 8002ab8:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode == hrNAK ) {
 8002abc:	e0bfffc3 	ldbu	r2,-1(fp)
 8002ac0:	10800118 	cmpnei	r2,r2,4
 8002ac4:	1000071e 	bne	r2,zero,8002ae4 <XferDispatchPkt+0x12c>
            nak_count++;
 8002ac8:	e0bfff43 	ldbu	r2,-3(fp)
 8002acc:	10800044 	addi	r2,r2,1
 8002ad0:	e0bfff45 	stb	r2,-3(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8002ad4:	e0bfff43 	ldbu	r2,-3(fp)
 8002ad8:	10803218 	cmpnei	r2,r2,200
 8002adc:	10000b1e 	bne	r2,zero,8002b0c <XferDispatchPkt+0x154>
                break;
 8002ae0:	00000f06 	br	8002b20 <XferDispatchPkt+0x168>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8002ae4:	e0bfffc3 	ldbu	r2,-1(fp)
 8002ae8:	10800398 	cmpnei	r2,r2,14
 8002aec:	1000091e 	bne	r2,zero,8002b14 <XferDispatchPkt+0x15c>
            retry_count++;
 8002af0:	e0bfff83 	ldbu	r2,-2(fp)
 8002af4:	10800044 	addi	r2,r2,1
 8002af8:	e0bfff85 	stb	r2,-2(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8002afc:	e0bfff87 	ldb	r2,-2(fp)
 8002b00:	108000d8 	cmpnei	r2,r2,3
 8002b04:	10000526 	beq	r2,zero,8002b1c <XferDispatchPkt+0x164>
                break;
            }
            else {
                continue;
 8002b08:	00000106 	br	8002b10 <XferDispatchPkt+0x158>
                continue;
 8002b0c:	0001883a 	nop
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8002b10:	003fbf06 	br	8002a10 <XferDispatchPkt+0x58>
            }
        }
        else break;
 8002b14:	0001883a 	nop
 8002b18:	00000106 	br	8002b20 <XferDispatchPkt+0x168>
                break;
 8002b1c:	0001883a 	nop
    }//while( 1 )
    return( rcode );
 8002b20:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8002b24:	e037883a 	mov	sp,fp
 8002b28:	dfc00117 	ldw	ra,4(sp)
 8002b2c:	df000017 	ldw	fp,0(sp)
 8002b30:	dec00204 	addi	sp,sp,8
 8002b34:	f800283a 	ret

08002b38 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8002b38:	defff804 	addi	sp,sp,-32
 8002b3c:	dfc00715 	stw	ra,28(sp)
 8002b40:	df000615 	stw	fp,24(sp)
 8002b44:	df000604 	addi	fp,sp,24
 8002b48:	2007883a 	mov	r3,r4
 8002b4c:	3009883a 	mov	r4,r6
 8002b50:	e1fffb15 	stw	r7,-20(fp)
 8002b54:	e0800217 	ldw	r2,8(fp)
 8002b58:	e0fffe05 	stb	r3,-8(fp)
 8002b5c:	2807883a 	mov	r3,r5
 8002b60:	e0fffd05 	stb	r3,-12(fp)
 8002b64:	2007883a 	mov	r3,r4
 8002b68:	e0fffc0d 	sth	r3,-16(fp)
 8002b6c:	e0bffa05 	stb	r2,-24(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8002b70:	e03fff8d 	sth	zero,-2(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8002b74:	e0bffe03 	ldbu	r2,-8(fp)
 8002b78:	100690fa 	slli	r3,r2,3
 8002b7c:	008200b4 	movhi	r2,2050
 8002b80:	1885883a 	add	r2,r3,r2
 8002b84:	10ef6f17 	ldw	r3,-16964(r2)
 8002b88:	e0bffd03 	ldbu	r2,-12(fp)
 8002b8c:	100490fa 	slli	r2,r2,3
 8002b90:	1885883a 	add	r2,r3,r2
 8002b94:	10800183 	ldbu	r2,6(r2)
 8002b98:	10803fcc 	andi	r2,r2,255
 8002b9c:	100b883a 	mov	r5,r2
 8002ba0:	01003a04 	movi	r4,232
 8002ba4:	8001f580 	call	8001f58 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8002ba8:	e0bffd03 	ldbu	r2,-12(fp)
 8002bac:	100b883a 	mov	r5,r2
 8002bb0:	0009883a 	mov	r4,zero
 8002bb4:	80029b80 	call	80029b8 <XferDispatchPkt>
 8002bb8:	e0bfff45 	stb	r2,-3(fp)
        if( rcode ) {
 8002bbc:	e0bfff43 	ldbu	r2,-3(fp)
 8002bc0:	10000226 	beq	r2,zero,8002bcc <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8002bc4:	e0bfff43 	ldbu	r2,-3(fp)
 8002bc8:	00003806 	br	8002cac <XferInTransfer+0x174>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8002bcc:	01003204 	movi	r4,200
 8002bd0:	80020e00 	call	80020e0 <MAXreg_rd>
 8002bd4:	10803fcc 	andi	r2,r2,255
 8002bd8:	1080010c 	andi	r2,r2,4
 8002bdc:	1000021e 	bne	r2,zero,8002be8 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8002be0:	00bffc04 	movi	r2,-16
 8002be4:	00003106 	br	8002cac <XferInTransfer+0x174>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8002be8:	01000c04 	movi	r4,48
 8002bec:	80020e00 	call	80020e0 <MAXreg_rd>
 8002bf0:	e0bfff05 	stb	r2,-4(fp)
        //printf("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8002bf4:	e0bfff03 	ldbu	r2,-4(fp)
 8002bf8:	e1bffb17 	ldw	r6,-20(fp)
 8002bfc:	100b883a 	mov	r5,r2
 8002c00:	01000204 	movi	r4,8
 8002c04:	80021800 	call	8002180 <MAXbytes_rd>
 8002c08:	e0bffb15 	stw	r2,-20(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8002c0c:	01400104 	movi	r5,4
 8002c10:	01003204 	movi	r4,200
 8002c14:	8001f580 	call	8001f58 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8002c18:	e0bfff03 	ldbu	r2,-4(fp)
 8002c1c:	e0ffff8b 	ldhu	r3,-2(fp)
 8002c20:	1885883a 	add	r2,r3,r2
 8002c24:	e0bfff8d 	sth	r2,-2(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8002c28:	e0ffff03 	ldbu	r3,-4(fp)
 8002c2c:	e0bffa03 	ldbu	r2,-24(fp)
 8002c30:	18800336 	bltu	r3,r2,8002c40 <XferInTransfer+0x108>
 8002c34:	e0ffff8b 	ldhu	r3,-2(fp)
 8002c38:	e0bffc0b 	ldhu	r2,-16(fp)
 8002c3c:	18bfda36 	bltu	r3,r2,8002ba8 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8002c40:	01003e04 	movi	r4,248
 8002c44:	80020e00 	call	80020e0 <MAXreg_rd>
 8002c48:	10803fcc 	andi	r2,r2,255
 8002c4c:	1080040c 	andi	r2,r2,16
 8002c50:	10000b26 	beq	r2,zero,8002c80 <XferInTransfer+0x148>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002c54:	e0bffe03 	ldbu	r2,-8(fp)
 8002c58:	100690fa 	slli	r3,r2,3
 8002c5c:	008200b4 	movhi	r2,2050
 8002c60:	1885883a 	add	r2,r3,r2
 8002c64:	10ef6f17 	ldw	r3,-16964(r2)
 8002c68:	e0bffd03 	ldbu	r2,-12(fp)
 8002c6c:	100490fa 	slli	r2,r2,3
 8002c70:	1885883a 	add	r2,r3,r2
 8002c74:	00c00804 	movi	r3,32
 8002c78:	10c00185 	stb	r3,6(r2)
 8002c7c:	00000a06 	br	8002ca8 <XferInTransfer+0x170>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8002c80:	e0bffe03 	ldbu	r2,-8(fp)
 8002c84:	100690fa 	slli	r3,r2,3
 8002c88:	008200b4 	movhi	r2,2050
 8002c8c:	1885883a 	add	r2,r3,r2
 8002c90:	10ef6f17 	ldw	r3,-16964(r2)
 8002c94:	e0bffd03 	ldbu	r2,-12(fp)
 8002c98:	100490fa 	slli	r2,r2,3
 8002c9c:	1885883a 	add	r2,r3,r2
 8002ca0:	00c00404 	movi	r3,16
 8002ca4:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8002ca8:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8002cac:	e037883a 	mov	sp,fp
 8002cb0:	dfc00117 	ldw	ra,4(sp)
 8002cb4:	df000017 	ldw	fp,0(sp)
 8002cb8:	dec00204 	addi	sp,sp,8
 8002cbc:	f800283a 	ret

08002cc0 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8002cc0:	defffe04 	addi	sp,sp,-8
 8002cc4:	df000115 	stw	fp,4(sp)
 8002cc8:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002ccc:	e03fffc5 	stb	zero,-1(fp)
 8002cd0:	00000d06 	br	8002d08 <USB_init+0x48>
        devtable[ i ].epinfo = NULL;       //clear device table
 8002cd4:	e0bfffc3 	ldbu	r2,-1(fp)
 8002cd8:	100690fa 	slli	r3,r2,3
 8002cdc:	008200b4 	movhi	r2,2050
 8002ce0:	1885883a 	add	r2,r3,r2
 8002ce4:	102f6f15 	stw	zero,-16964(r2)
        devtable[ i ].devclass = 0;
 8002ce8:	e0bfffc3 	ldbu	r2,-1(fp)
 8002cec:	100690fa 	slli	r3,r2,3
 8002cf0:	008200b4 	movhi	r2,2050
 8002cf4:	1885883a 	add	r2,r3,r2
 8002cf8:	102f7005 	stb	zero,-16960(r2)
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002cfc:	e0bfffc3 	ldbu	r2,-1(fp)
 8002d00:	10800044 	addi	r2,r2,1
 8002d04:	e0bfffc5 	stb	r2,-1(fp)
 8002d08:	e0bfffc3 	ldbu	r2,-1(fp)
 8002d0c:	10800270 	cmpltui	r2,r2,9
 8002d10:	103ff01e 	bne	r2,zero,8002cd4 <USB_init+0x14>
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8002d14:	d0e73704 	addi	r3,gp,-25380
 8002d18:	008200b4 	movhi	r2,2050
 8002d1c:	10ef6f15 	stw	r3,-16964(r2)
    dev0ep.MaxPktSize = 0;
 8002d20:	d027378d 	sth	zero,-25378(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8002d24:	00801004 	movi	r2,64
 8002d28:	d0a73845 	stb	r2,-25375(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8002d2c:	00800404 	movi	r2,16
 8002d30:	d0a73885 	stb	r2,-25374(gp)
}
 8002d34:	0001883a 	nop
 8002d38:	e037883a 	mov	sp,fp
 8002d3c:	df000017 	ldw	fp,0(sp)
 8002d40:	dec00104 	addi	sp,sp,4
 8002d44:	f800283a 	ret

08002d48 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8002d48:	deffb204 	addi	sp,sp,-312
 8002d4c:	dfc04d15 	stw	ra,308(sp)
 8002d50:	df004c15 	stw	fp,304(sp)
 8002d54:	dc004b15 	stw	r16,300(sp)
 8002d58:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002d5c:	d0a00803 	ldbu	r2,-32736(gp)
 8002d60:	10803fcc 	andi	r2,r2,255
 8002d64:	10803c0c 	andi	r2,r2,240
 8002d68:	10c03fe0 	cmpeqi	r3,r2,255
 8002d6c:	1801781e 	bne	r3,zero,8003350 <USB_Task+0x608>
 8002d70:	10c04008 	cmpgei	r3,r2,256
 8002d74:	1801781e 	bne	r3,zero,8003358 <USB_Task+0x610>
 8002d78:	10c01020 	cmpeqi	r3,r2,64
 8002d7c:	1801781e 	bne	r3,zero,8003360 <USB_Task+0x618>
 8002d80:	10c01048 	cmpgei	r3,r2,65
 8002d84:	1801741e 	bne	r3,zero,8003358 <USB_Task+0x610>
 8002d88:	10c00c20 	cmpeqi	r3,r2,48
 8002d8c:	1801491e 	bne	r3,zero,80032b4 <USB_Task+0x56c>
 8002d90:	10c00c48 	cmpgei	r3,r2,49
 8002d94:	1801701e 	bne	r3,zero,8003358 <USB_Task+0x610>
 8002d98:	10c00820 	cmpeqi	r3,r2,32
 8002d9c:	18010a1e 	bne	r3,zero,80031c8 <USB_Task+0x480>
 8002da0:	10c00848 	cmpgei	r3,r2,33
 8002da4:	18016c1e 	bne	r3,zero,8003358 <USB_Task+0x610>
 8002da8:	10000326 	beq	r2,zero,8002db8 <USB_Task+0x70>
 8002dac:	10800420 	cmpeqi	r2,r2,16
 8002db0:	1000161e 	bne	r2,zero,8002e0c <USB_Task+0xc4>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002db4:	00016806 	br	8003358 <USB_Task+0x610>
            switch( usb_task_state ) {
 8002db8:	d0a00803 	ldbu	r2,-32736(gp)
 8002dbc:	10803fcc 	andi	r2,r2,255
 8002dc0:	10c00120 	cmpeqi	r3,r2,4
 8002dc4:	18000f1e 	bne	r3,zero,8002e04 <USB_Task+0xbc>
 8002dc8:	10c00148 	cmpgei	r3,r2,5
 8002dcc:	1801661e 	bne	r3,zero,8003368 <USB_Task+0x620>
 8002dd0:	10c00060 	cmpeqi	r3,r2,1
 8002dd4:	1800031e 	bne	r3,zero,8002de4 <USB_Task+0x9c>
 8002dd8:	108000e0 	cmpeqi	r2,r2,3
 8002ddc:	1000051e 	bne	r2,zero,8002df4 <USB_Task+0xac>
            break;//( USB_STATE_DETACHED ):
 8002de0:	00016106 	br	8003368 <USB_Task+0x620>
                    USB_init();
 8002de4:	8002cc00 	call	8002cc0 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8002de8:	008000c4 	movi	r2,3
 8002dec:	d0a00805 	stb	r2,-32736(gp)
                    break;
 8002df0:	00000506 	br	8002e08 <USB_Task+0xc0>
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002df4:	01400104 	movi	r5,4
 8002df8:	01003a04 	movi	r4,232
 8002dfc:	8001f580 	call	8001f58 <MAXreg_wr>
                    break;
 8002e00:	00000106 	br	8002e08 <USB_Task+0xc0>
                    break;
 8002e04:	0001883a 	nop
            break;//( USB_STATE_DETACHED ):
 8002e08:	00015706 	br	8003368 <USB_Task+0x620>
            switch( usb_task_state ) {
 8002e0c:	d0a00803 	ldbu	r2,-32736(gp)
 8002e10:	10803fcc 	andi	r2,r2,255
 8002e14:	10bffc04 	addi	r2,r2,-16
 8002e18:	10c001a8 	cmpgeui	r3,r2,6
 8002e1c:	1801541e 	bne	r3,zero,8003370 <USB_Task+0x628>
 8002e20:	100690ba 	slli	r3,r2,2
 8002e24:	00820034 	movhi	r2,2048
 8002e28:	1885883a 	add	r2,r3,r2
 8002e2c:	108b8d17 	ldw	r2,11828(r2)
 8002e30:	1000683a 	jmp	r2
 8002e34:	08002e4c 	andi	zero,at,185
 8002e38:	08002e84 	addi	zero,at,186
 8002e3c:	08002ec0 	call	8002ec <__alt_mem_onchip_memory2_0+0x8002ec>
 8002e40:	08002ee4 	muli	zero,at,187
 8002e44:	08002f24 	muli	zero,at,188
 8002e48:	08002f38 	rdprs	zero,at,188
  return _alt_nticks;
 8002e4c:	d0a74517 	ldw	r2,-25324(gp)
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8002e50:	0140fa04 	movi	r5,1000
 8002e54:	1009883a 	mov	r4,r2
 8002e58:	80052bc0 	call	80052bc <__mulsi3>
 8002e5c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002e60:	d0a74417 	ldw	r2,-25328(gp)
 8002e64:	100b883a 	mov	r5,r2
 8002e68:	1809883a 	mov	r4,r3
 8002e6c:	80051fc0 	call	80051fc <__udivsi3>
 8002e70:	10803204 	addi	r2,r2,200
 8002e74:	d0a73a15 	stw	r2,-25368(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8002e78:	00800444 	movi	r2,17
 8002e7c:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002e80:	0000d006 	br	80031c4 <USB_Task+0x47c>
  return _alt_nticks;
 8002e84:	d0a74517 	ldw	r2,-25324(gp)
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002e88:	0140fa04 	movi	r5,1000
 8002e8c:	1009883a 	mov	r4,r2
 8002e90:	80052bc0 	call	80052bc <__mulsi3>
 8002e94:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002e98:	d0a74417 	ldw	r2,-25328(gp)
 8002e9c:	100b883a 	mov	r5,r2
 8002ea0:	1809883a 	mov	r4,r3
 8002ea4:	80051fc0 	call	80051fc <__udivsi3>
 8002ea8:	1007883a 	mov	r3,r2
 8002eac:	d0a73a17 	ldw	r2,-25368(gp)
 8002eb0:	10c0c12e 	bgeu	r2,r3,80031b8 <USB_Task+0x470>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8002eb4:	00800484 	movi	r2,18
 8002eb8:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002ebc:	0000be06 	br	80031b8 <USB_Task+0x470>
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002ec0:	01400044 	movi	r5,1
 8002ec4:	01003204 	movi	r4,200
 8002ec8:	8001f580 	call	8001f58 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8002ecc:	01400044 	movi	r5,1
 8002ed0:	01003a04 	movi	r4,232
 8002ed4:	8001f580 	call	8001f58 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002ed8:	008004c4 	movi	r2,19
 8002edc:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002ee0:	0000b806 	br	80031c4 <USB_Task+0x47c>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8002ee4:	01003a04 	movi	r4,232
 8002ee8:	80020e00 	call	80020e0 <MAXreg_rd>
 8002eec:	10803fcc 	andi	r2,r2,255
 8002ef0:	1080004c 	andi	r2,r2,1
 8002ef4:	1000b21e 	bne	r2,zero,80031c0 <USB_Task+0x478>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002ef8:	01003604 	movi	r4,216
 8002efc:	80020e00 	call	80020e0 <MAXreg_rd>
 8002f00:	10800214 	ori	r2,r2,8
 8002f04:	e0bffe45 	stb	r2,-7(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8002f08:	e0bffe43 	ldbu	r2,-7(fp)
 8002f0c:	100b883a 	mov	r5,r2
 8002f10:	01003604 	movi	r4,216
 8002f14:	8001f580 	call	8001f58 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002f18:	00800504 	movi	r2,20
 8002f1c:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002f20:	0000a706 	br	80031c0 <USB_Task+0x478>
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002f24:	01003204 	movi	r4,200
 8002f28:	80020e00 	call	80020e0 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002f2c:	00800544 	movi	r2,21
 8002f30:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8002f34:	0000a306 	br	80031c4 <USB_Task+0x47c>
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002f38:	008200b4 	movhi	r2,2050
 8002f3c:	10af6f17 	ldw	r2,-16964(r2)
 8002f40:	00c00204 	movi	r3,8
 8002f44:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002f48:	e0bff984 	addi	r2,fp,-26
 8002f4c:	d8800415 	stw	r2,16(sp)
 8002f50:	00800204 	movi	r2,8
 8002f54:	d8800315 	stw	r2,12(sp)
 8002f58:	d8000215 	stw	zero,8(sp)
 8002f5c:	00800044 	movi	r2,1
 8002f60:	d8800115 	stw	r2,4(sp)
 8002f64:	d8000015 	stw	zero,0(sp)
 8002f68:	01c00184 	movi	r7,6
 8002f6c:	01802004 	movi	r6,128
 8002f70:	000b883a 	mov	r5,zero
 8002f74:	0009883a 	mov	r4,zero
 8002f78:	80026f80 	call	80026f8 <XferCtrlReq>
 8002f7c:	e0bffe85 	stb	r2,-6(fp)
                    if( rcode == 0 ) {
 8002f80:	e0bffe83 	ldbu	r2,-6(fp)
 8002f84:	1000851e 	bne	r2,zero,800319c <USB_Task+0x454>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002f88:	e0fffb43 	ldbu	r3,-19(fp)
 8002f8c:	008200b4 	movhi	r2,2050
 8002f90:	10af6f17 	ldw	r2,-16964(r2)
 8002f94:	18c03fcc 	andi	r3,r3,255
 8002f98:	10c0008d 	sth	r3,2(r2)
                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8002f9c:	e0bff983 	ldbu	r2,-26(fp)
 8002fa0:	10803fcc 	andi	r2,r2,255
 8002fa4:	e0fff984 	addi	r3,fp,-26
 8002fa8:	d8c00415 	stw	r3,16(sp)
 8002fac:	d8800315 	stw	r2,12(sp)
 8002fb0:	d8000215 	stw	zero,8(sp)
 8002fb4:	00800044 	movi	r2,1
 8002fb8:	d8800115 	stw	r2,4(sp)
 8002fbc:	d8000015 	stw	zero,0(sp)
 8002fc0:	01c00184 	movi	r7,6
 8002fc4:	01802004 	movi	r6,128
 8002fc8:	000b883a 	mov	r5,zero
 8002fcc:	0009883a 	mov	r4,zero
 8002fd0:	80026f80 	call	80026f8 <XferCtrlReq>
 8002fd4:	e0bffe85 	stb	r2,-6(fp)
                        if (buf.iManufacturer != 0)
 8002fd8:	e0bffd03 	ldbu	r2,-12(fp)
 8002fdc:	10803fcc 	andi	r2,r2,255
 8002fe0:	10003426 	beq	r2,zero,80030b4 <USB_Task+0x36c>
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002fe4:	e0bffd03 	ldbu	r2,-12(fp)
 8002fe8:	10803fcc 	andi	r2,r2,255
 8002fec:	e0ffb984 	addi	r3,fp,-282
 8002ff0:	d8c00415 	stw	r3,16(sp)
 8002ff4:	00c00084 	movi	r3,2
 8002ff8:	d8c00315 	stw	r3,12(sp)
 8002ffc:	00c10244 	movi	r3,1033
 8003000:	d8c00215 	stw	r3,8(sp)
 8003004:	00c000c4 	movi	r3,3
 8003008:	d8c00115 	stw	r3,4(sp)
 800300c:	d8800015 	stw	r2,0(sp)
 8003010:	01c00184 	movi	r7,6
 8003014:	01802004 	movi	r6,128
 8003018:	000b883a 	mov	r5,zero
 800301c:	0009883a 	mov	r4,zero
 8003020:	80026f80 	call	80026f8 <XferCtrlReq>
 8003024:	e0bffe85 	stb	r2,-6(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8003028:	e0bffd03 	ldbu	r2,-12(fp)
 800302c:	10803fcc 	andi	r2,r2,255
 8003030:	e0ffb983 	ldbu	r3,-282(fp)
 8003034:	18c03fcc 	andi	r3,r3,255
 8003038:	e13fb984 	addi	r4,fp,-282
 800303c:	d9000415 	stw	r4,16(sp)
 8003040:	d8c00315 	stw	r3,12(sp)
 8003044:	00c10244 	movi	r3,1033
 8003048:	d8c00215 	stw	r3,8(sp)
 800304c:	00c000c4 	movi	r3,3
 8003050:	d8c00115 	stw	r3,4(sp)
 8003054:	d8800015 	stw	r2,0(sp)
 8003058:	01c00184 	movi	r7,6
 800305c:	01802004 	movi	r6,128
 8003060:	000b883a 	mov	r5,zero
 8003064:	0009883a 	mov	r4,zero
 8003068:	80026f80 	call	80026f8 <XferCtrlReq>
 800306c:	e0bffe85 	stb	r2,-6(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8003070:	e0bffd03 	ldbu	r2,-12(fp)
 8003074:	14003fcc 	andi	r16,r2,255
 8003078:	e0bfb983 	ldbu	r2,-282(fp)
 800307c:	10803fcc 	andi	r2,r2,255
 8003080:	1004d07a 	srli	r2,r2,1
 8003084:	10bfffc4 	addi	r2,r2,-1
 8003088:	10c03fcc 	andi	r3,r2,255
 800308c:	e0bfb984 	addi	r2,fp,-282
 8003090:	10800084 	addi	r2,r2,2
 8003094:	180b883a 	mov	r5,r3
 8003098:	1009883a 	mov	r4,r2
 800309c:	80035300 	call	8003530 <ConvUTF8ToStr>
 80030a0:	100d883a 	mov	r6,r2
 80030a4:	800b883a 	mov	r5,r16
 80030a8:	01020074 	movhi	r4,2049
 80030ac:	211f0304 	addi	r4,r4,31756
 80030b0:	800869c0 	call	800869c <printf>
                		if (buf.iProduct != 0)
 80030b4:	e0bffd43 	ldbu	r2,-11(fp)
 80030b8:	10803fcc 	andi	r2,r2,255
 80030bc:	10003426 	beq	r2,zero,8003190 <USB_Task+0x448>
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80030c0:	e0bffd43 	ldbu	r2,-11(fp)
 80030c4:	10803fcc 	andi	r2,r2,255
 80030c8:	e0ffb984 	addi	r3,fp,-282
 80030cc:	d8c00415 	stw	r3,16(sp)
 80030d0:	00c00084 	movi	r3,2
 80030d4:	d8c00315 	stw	r3,12(sp)
 80030d8:	00c10244 	movi	r3,1033
 80030dc:	d8c00215 	stw	r3,8(sp)
 80030e0:	00c000c4 	movi	r3,3
 80030e4:	d8c00115 	stw	r3,4(sp)
 80030e8:	d8800015 	stw	r2,0(sp)
 80030ec:	01c00184 	movi	r7,6
 80030f0:	01802004 	movi	r6,128
 80030f4:	000b883a 	mov	r5,zero
 80030f8:	0009883a 	mov	r4,zero
 80030fc:	80026f80 	call	80026f8 <XferCtrlReq>
 8003100:	e0bffe85 	stb	r2,-6(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8003104:	e0bffd43 	ldbu	r2,-11(fp)
 8003108:	10803fcc 	andi	r2,r2,255
 800310c:	e0ffb983 	ldbu	r3,-282(fp)
 8003110:	18c03fcc 	andi	r3,r3,255
 8003114:	e13fb984 	addi	r4,fp,-282
 8003118:	d9000415 	stw	r4,16(sp)
 800311c:	d8c00315 	stw	r3,12(sp)
 8003120:	00c10244 	movi	r3,1033
 8003124:	d8c00215 	stw	r3,8(sp)
 8003128:	00c000c4 	movi	r3,3
 800312c:	d8c00115 	stw	r3,4(sp)
 8003130:	d8800015 	stw	r2,0(sp)
 8003134:	01c00184 	movi	r7,6
 8003138:	01802004 	movi	r6,128
 800313c:	000b883a 	mov	r5,zero
 8003140:	0009883a 	mov	r4,zero
 8003144:	80026f80 	call	80026f8 <XferCtrlReq>
 8003148:	e0bffe85 	stb	r2,-6(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 800314c:	e0bffd43 	ldbu	r2,-11(fp)
 8003150:	14003fcc 	andi	r16,r2,255
 8003154:	e0bfb983 	ldbu	r2,-282(fp)
 8003158:	10803fcc 	andi	r2,r2,255
 800315c:	1004d07a 	srli	r2,r2,1
 8003160:	10bfffc4 	addi	r2,r2,-1
 8003164:	10c03fcc 	andi	r3,r2,255
 8003168:	e0bfb984 	addi	r2,fp,-282
 800316c:	10800084 	addi	r2,r2,2
 8003170:	180b883a 	mov	r5,r3
 8003174:	1009883a 	mov	r4,r2
 8003178:	80035300 	call	8003530 <ConvUTF8ToStr>
 800317c:	100d883a 	mov	r6,r2
 8003180:	800b883a 	mov	r5,r16
 8003184:	01020074 	movhi	r4,2049
 8003188:	211f0904 	addi	r4,r4,31780
 800318c:	800869c0 	call	800869c <printf>
                        usb_task_state = USB_STATE_ADDRESSING;
 8003190:	00800804 	movi	r2,32
 8003194:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8003198:	00000a06 	br	80031c4 <USB_Task+0x47c>
                        usb_error = rcode;
 800319c:	e0bffe83 	ldbu	r2,-6(fp)
 80031a0:	d0a73b45 	stb	r2,-25363(gp)
                        last_usb_task_state = usb_task_state;
 80031a4:	d0a00803 	ldbu	r2,-32736(gp)
 80031a8:	d0a73905 	stb	r2,-25372(gp)
                        usb_task_state = USB_STATE_ERROR;
 80031ac:	00bfffc4 	movi	r2,-1
 80031b0:	d0a00805 	stb	r2,-32736(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80031b4:	00000306 	br	80031c4 <USB_Task+0x47c>
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80031b8:	0001883a 	nop
 80031bc:	00006c06 	br	8003370 <USB_Task+0x628>
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80031c0:	0001883a 	nop
            break;//case ( USB_STATE_ATTACHED )
 80031c4:	00006a06 	br	8003370 <USB_Task+0x628>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80031c8:	00800044 	movi	r2,1
 80031cc:	e0bffec5 	stb	r2,-5(fp)
 80031d0:	00002a06 	br	800327c <USB_Task+0x534>
                if( devtable[ i ].epinfo == NULL ) {
 80031d4:	e0bffec3 	ldbu	r2,-5(fp)
 80031d8:	100690fa 	slli	r3,r2,3
 80031dc:	008200b4 	movhi	r2,2050
 80031e0:	1885883a 	add	r2,r3,r2
 80031e4:	10af6f17 	ldw	r2,-16964(r2)
 80031e8:	1000211e 	bne	r2,zero,8003270 <USB_Task+0x528>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80031ec:	e0bffec3 	ldbu	r2,-5(fp)
 80031f0:	00c200b4 	movhi	r3,2050
 80031f4:	18ef6f17 	ldw	r3,-16964(r3)
 80031f8:	100890fa 	slli	r4,r2,3
 80031fc:	008200b4 	movhi	r2,2050
 8003200:	2085883a 	add	r2,r4,r2
 8003204:	10ef6f15 	stw	r3,-16964(r2)
                    rcode = XferSetAddr( 0, 0, i );
 8003208:	e0bffec3 	ldbu	r2,-5(fp)
 800320c:	d8000415 	stw	zero,16(sp)
 8003210:	d8000315 	stw	zero,12(sp)
 8003214:	d8000215 	stw	zero,8(sp)
 8003218:	d8000115 	stw	zero,4(sp)
 800321c:	d8800015 	stw	r2,0(sp)
 8003220:	01c00144 	movi	r7,5
 8003224:	000d883a 	mov	r6,zero
 8003228:	000b883a 	mov	r5,zero
 800322c:	0009883a 	mov	r4,zero
 8003230:	80026f80 	call	80026f8 <XferCtrlReq>
 8003234:	e0bffe85 	stb	r2,-6(fp)
                    if( rcode == 0 ) {
 8003238:	e0bffe83 	ldbu	r2,-6(fp)
 800323c:	1000051e 	bne	r2,zero,8003254 <USB_Task+0x50c>
                        tmp_addr = i;
 8003240:	e0bffec3 	ldbu	r2,-5(fp)
 8003244:	d0a73b05 	stb	r2,-25364(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8003248:	00800c04 	movi	r2,48
 800324c:	d0a00805 	stb	r2,-32736(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 8003250:	00000d06 	br	8003288 <USB_Task+0x540>
                        usb_error = rcode;          //set address error
 8003254:	e0bffe83 	ldbu	r2,-6(fp)
 8003258:	d0a73b45 	stb	r2,-25363(gp)
                        last_usb_task_state = usb_task_state;
 800325c:	d0a00803 	ldbu	r2,-32736(gp)
 8003260:	d0a73905 	stb	r2,-25372(gp)
                        usb_task_state = USB_STATE_ERROR;
 8003264:	00bfffc4 	movi	r2,-1
 8003268:	d0a00805 	stb	r2,-32736(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 800326c:	00000606 	br	8003288 <USB_Task+0x540>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8003270:	e0bffec3 	ldbu	r2,-5(fp)
 8003274:	10800044 	addi	r2,r2,1
 8003278:	e0bffec5 	stb	r2,-5(fp)
 800327c:	e0bffec3 	ldbu	r2,-5(fp)
 8003280:	10800230 	cmpltui	r2,r2,8
 8003284:	103fd31e 	bne	r2,zero,80031d4 <USB_Task+0x48c>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8003288:	d0a00803 	ldbu	r2,-32736(gp)
 800328c:	10803fcc 	andi	r2,r2,255
 8003290:	10800818 	cmpnei	r2,r2,32
 8003294:	1000381e 	bne	r2,zero,8003378 <USB_Task+0x630>
                usb_error = 0xfe;
 8003298:	00bfff84 	movi	r2,-2
 800329c:	d0a73b45 	stb	r2,-25363(gp)
                last_usb_task_state = usb_task_state;
 80032a0:	d0a00803 	ldbu	r2,-32736(gp)
 80032a4:	d0a73905 	stb	r2,-25372(gp)
                usb_task_state = USB_STATE_ERROR;
 80032a8:	00bfffc4 	movi	r2,-1
 80032ac:	d0a00805 	stb	r2,-32736(gp)
            break;//case ( USB_STATE_ADDRESSING )
 80032b0:	00003106 	br	8003378 <USB_Task+0x630>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80032b4:	e03ffec5 	stb	zero,-5(fp)
 80032b8:	00001706 	br	8003318 <USB_Task+0x5d0>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 80032bc:	e0fffec3 	ldbu	r3,-5(fp)
 80032c0:	1805883a 	mov	r2,r3
 80032c4:	1085883a 	add	r2,r2,r2
 80032c8:	10c5883a 	add	r2,r2,r3
 80032cc:	100490ba 	slli	r2,r2,2
 80032d0:	00c200b4 	movhi	r3,2050
 80032d4:	10c7883a 	add	r3,r2,r3
 80032d8:	18a0b217 	ldw	r2,-32056(r3)
 80032dc:	d0e73b03 	ldbu	r3,-25364(gp)
 80032e0:	18c03fcc 	andi	r3,r3,255
 80032e4:	000b883a 	mov	r5,zero
 80032e8:	1809883a 	mov	r4,r3
 80032ec:	103ee83a 	callr	r2
 80032f0:	e0bffe85 	stb	r2,-6(fp)
                if( rcode == TRUE ) {
 80032f4:	e0bffe83 	ldbu	r2,-6(fp)
 80032f8:	10800058 	cmpnei	r2,r2,1
 80032fc:	1000031e 	bne	r2,zero,800330c <USB_Task+0x5c4>
			        usb_task_state = USB_STATE_RUNNING;
 8003300:	00801004 	movi	r2,64
 8003304:	d0a00805 	stb	r2,-32736(gp)
                    break;
 8003308:	00000606 	br	8003324 <USB_Task+0x5dc>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800330c:	e0bffec3 	ldbu	r2,-5(fp)
 8003310:	10800044 	addi	r2,r2,1
 8003314:	e0bffec5 	stb	r2,-5(fp)
 8003318:	e0bffec3 	ldbu	r2,-5(fp)
 800331c:	10800130 	cmpltui	r2,r2,4
 8003320:	103fe61e 	bne	r2,zero,80032bc <USB_Task+0x574>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8003324:	d0a00803 	ldbu	r2,-32736(gp)
 8003328:	10803fcc 	andi	r2,r2,255
 800332c:	10800c18 	cmpnei	r2,r2,48
 8003330:	1000131e 	bne	r2,zero,8003380 <USB_Task+0x638>
                usb_error = 0xfd;
 8003334:	00bfff44 	movi	r2,-3
 8003338:	d0a73b45 	stb	r2,-25363(gp)
                last_usb_task_state = usb_task_state;
 800333c:	d0a00803 	ldbu	r2,-32736(gp)
 8003340:	d0a73905 	stb	r2,-25372(gp)
                usb_task_state = USB_STATE_ERROR;
 8003344:	00bfffc4 	movi	r2,-1
 8003348:	d0a00805 	stb	r2,-32736(gp)
            break;//( USB_STATE_CONFIGURING )
 800334c:	00000c06 	br	8003380 <USB_Task+0x638>
            break;//( USB_STATE_ERROR )
 8003350:	0001883a 	nop
 8003354:	00000b06 	br	8003384 <USB_Task+0x63c>
            break;
 8003358:	0001883a 	nop
 800335c:	00000906 	br	8003384 <USB_Task+0x63c>
            break;//( USB_STATE_RUNNING )
 8003360:	0001883a 	nop
 8003364:	00000706 	br	8003384 <USB_Task+0x63c>
            break;//( USB_STATE_DETACHED ):
 8003368:	0001883a 	nop
 800336c:	00000506 	br	8003384 <USB_Task+0x63c>
            break;//case ( USB_STATE_ATTACHED )
 8003370:	0001883a 	nop
 8003374:	00000306 	br	8003384 <USB_Task+0x63c>
            break;//case ( USB_STATE_ADDRESSING )
 8003378:	0001883a 	nop
 800337c:	00000106 	br	8003384 <USB_Task+0x63c>
            break;//( USB_STATE_CONFIGURING )
 8003380:	0001883a 	nop
    }//switch( usb_task_state & STATE_MASK )
}
 8003384:	0001883a 	nop
 8003388:	e6ffff04 	addi	sp,fp,-4
 800338c:	dfc00217 	ldw	ra,8(sp)
 8003390:	df000117 	ldw	fp,4(sp)
 8003394:	dc000017 	ldw	r16,0(sp)
 8003398:	dec00304 	addi	sp,sp,12
 800339c:	f800283a 	ret

080033a0 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 80033a0:	defffd04 	addi	sp,sp,-12
 80033a4:	df000215 	stw	fp,8(sp)
 80033a8:	df000204 	addi	fp,sp,8
 80033ac:	2005883a 	mov	r2,r4
 80033b0:	e17ffe15 	stw	r5,-8(fp)
 80033b4:	e0bfff05 	stb	r2,-4(fp)
    return( FALSE );
 80033b8:	0005883a 	mov	r2,zero
}
 80033bc:	e037883a 	mov	sp,fp
 80033c0:	df000017 	ldw	fp,0(sp)
 80033c4:	dec00104 	addi	sp,sp,4
 80033c8:	f800283a 	ret

080033cc <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80033cc:	defffb04 	addi	sp,sp,-20
 80033d0:	df000415 	stw	fp,16(sp)
 80033d4:	df000404 	addi	fp,sp,16
 80033d8:	2005883a 	mov	r2,r4
 80033dc:	2807883a 	mov	r3,r5
 80033e0:	e1bffd15 	stw	r6,-12(fp)
 80033e4:	e1fffc15 	stw	r7,-16(fp)
 80033e8:	e0bfff05 	stb	r2,-4(fp)
 80033ec:	1805883a 	mov	r2,r3
 80033f0:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 80033f4:	0005883a 	mov	r2,zero

}
 80033f8:	e037883a 	mov	sp,fp
 80033fc:	df000017 	ldw	fp,0(sp)
 8003400:	dec00104 	addi	sp,sp,4
 8003404:	f800283a 	ret

08003408 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 8003408:	defffd04 	addi	sp,sp,-12
 800340c:	df000215 	stw	fp,8(sp)
 8003410:	df000204 	addi	fp,sp,8
 8003414:	2005883a 	mov	r2,r4
 8003418:	e17ffe15 	stw	r5,-8(fp)
 800341c:	e0bfff05 	stb	r2,-4(fp)

	return( FALSE );
 8003420:	0005883a 	mov	r2,zero

}
 8003424:	e037883a 	mov	sp,fp
 8003428:	df000017 	ldw	fp,0(sp)
 800342c:	dec00104 	addi	sp,sp,4
 8003430:	f800283a 	ret

08003434 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8003434:	defffb04 	addi	sp,sp,-20
 8003438:	df000415 	stw	fp,16(sp)
 800343c:	df000404 	addi	fp,sp,16
 8003440:	2005883a 	mov	r2,r4
 8003444:	2807883a 	mov	r3,r5
 8003448:	e1bffd15 	stw	r6,-12(fp)
 800344c:	e1fffc15 	stw	r7,-16(fp)
 8003450:	e0bfff05 	stb	r2,-4(fp)
 8003454:	1805883a 	mov	r2,r3
 8003458:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800345c:	0005883a 	mov	r2,zero
}
 8003460:	e037883a 	mov	sp,fp
 8003464:	df000017 	ldw	fp,0(sp)
 8003468:	dec00104 	addi	sp,sp,4
 800346c:	f800283a 	ret

08003470 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8003470:	defffd04 	addi	sp,sp,-12
 8003474:	df000215 	stw	fp,8(sp)
 8003478:	df000204 	addi	fp,sp,8
 800347c:	2005883a 	mov	r2,r4
 8003480:	e17ffe15 	stw	r5,-8(fp)
 8003484:	e0bfff05 	stb	r2,-4(fp)
	return( FALSE );
 8003488:	0005883a 	mov	r2,zero
}
 800348c:	e037883a 	mov	sp,fp
 8003490:	df000017 	ldw	fp,0(sp)
 8003494:	dec00104 	addi	sp,sp,4
 8003498:	f800283a 	ret

0800349c <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800349c:	defffb04 	addi	sp,sp,-20
 80034a0:	df000415 	stw	fp,16(sp)
 80034a4:	df000404 	addi	fp,sp,16
 80034a8:	2005883a 	mov	r2,r4
 80034ac:	2807883a 	mov	r3,r5
 80034b0:	e1bffd15 	stw	r6,-12(fp)
 80034b4:	e1fffc15 	stw	r7,-16(fp)
 80034b8:	e0bfff05 	stb	r2,-4(fp)
 80034bc:	1805883a 	mov	r2,r3
 80034c0:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80034c4:	0005883a 	mov	r2,zero
}
 80034c8:	e037883a 	mov	sp,fp
 80034cc:	df000017 	ldw	fp,0(sp)
 80034d0:	dec00104 	addi	sp,sp,4
 80034d4:	f800283a 	ret

080034d8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80034d8:	deffff04 	addi	sp,sp,-4
 80034dc:	df000015 	stw	fp,0(sp)
 80034e0:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80034e4:	d0a00803 	ldbu	r2,-32736(gp)
}
 80034e8:	e037883a 	mov	sp,fp
 80034ec:	df000017 	ldw	fp,0(sp)
 80034f0:	dec00104 	addi	sp,sp,4
 80034f4:	f800283a 	ret

080034f8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80034f8:	defffe04 	addi	sp,sp,-8
 80034fc:	df000115 	stw	fp,4(sp)
 8003500:	df000104 	addi	fp,sp,4
 8003504:	2005883a 	mov	r2,r4
 8003508:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 800350c:	e0bfff03 	ldbu	r2,-4(fp)
 8003510:	100690fa 	slli	r3,r2,3
 8003514:	008200b4 	movhi	r2,2050
 8003518:	10af6f04 	addi	r2,r2,-16964
 800351c:	1885883a 	add	r2,r3,r2
}
 8003520:	e037883a 	mov	sp,fp
 8003524:	df000017 	ldw	fp,0(sp)
 8003528:	dec00104 	addi	sp,sp,4
 800352c:	f800283a 	ret

08003530 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8003530:	defffc04 	addi	sp,sp,-16
 8003534:	df000315 	stw	fp,12(sp)
 8003538:	df000304 	addi	fp,sp,12
 800353c:	e13ffe15 	stw	r4,-8(fp)
 8003540:	2805883a 	mov	r2,r5
 8003544:	e0bffd05 	stb	r2,-12(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8003548:	e03fffc5 	stb	zero,-1(fp)
 800354c:	00000d06 	br	8003584 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8003550:	e0bfffc3 	ldbu	r2,-1(fp)
 8003554:	1085883a 	add	r2,r2,r2
 8003558:	1007883a 	mov	r3,r2
 800355c:	e0bffe17 	ldw	r2,-8(fp)
 8003560:	10c7883a 	add	r3,r2,r3
 8003564:	e0bfffc3 	ldbu	r2,-1(fp)
 8003568:	e13ffe17 	ldw	r4,-8(fp)
 800356c:	2085883a 	add	r2,r4,r2
 8003570:	18c00003 	ldbu	r3,0(r3)
 8003574:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < length; i++)
 8003578:	e0bfffc3 	ldbu	r2,-1(fp)
 800357c:	10800044 	addi	r2,r2,1
 8003580:	e0bfffc5 	stb	r2,-1(fp)
 8003584:	e0ffffc3 	ldbu	r3,-1(fp)
 8003588:	e0bffd03 	ldbu	r2,-12(fp)
 800358c:	18bff036 	bltu	r3,r2,8003550 <ConvUTF8ToStr+0x20>
	}
	utf8[length] = 0x00;
 8003590:	e0bffd03 	ldbu	r2,-12(fp)
 8003594:	e0fffe17 	ldw	r3,-8(fp)
 8003598:	1885883a 	add	r2,r3,r2
 800359c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 80035a0:	e0bffe17 	ldw	r2,-8(fp)
}
 80035a4:	e037883a 	mov	sp,fp
 80035a8:	df000017 	ldw	fp,0(sp)
 80035ac:	dec00104 	addi	sp,sp,4
 80035b0:	f800283a 	ret

080035b4 <pow>:
 80035b4:	defff704 	addi	sp,sp,-36
 80035b8:	dd400515 	stw	r21,20(sp)
 80035bc:	dd000415 	stw	r20,16(sp)
 80035c0:	dcc00315 	stw	r19,12(sp)
 80035c4:	dc800215 	stw	r18,8(sp)
 80035c8:	dc400115 	stw	r17,4(sp)
 80035cc:	dc000015 	stw	r16,0(sp)
 80035d0:	202b883a 	mov	r21,r4
 80035d4:	dfc00815 	stw	ra,32(sp)
 80035d8:	ddc00715 	stw	r23,28(sp)
 80035dc:	dd800615 	stw	r22,24(sp)
 80035e0:	2823883a 	mov	r17,r5
 80035e4:	3021883a 	mov	r16,r6
 80035e8:	3825883a 	mov	r18,r7
 80035ec:	800394c0 	call	800394c <__ieee754_pow>
 80035f0:	010200b4 	movhi	r4,2050
 80035f4:	2227bd17 	ldw	r8,-24844(r4)
 80035f8:	1029883a 	mov	r20,r2
 80035fc:	1827883a 	mov	r19,r3
 8003600:	423fffe0 	cmpeqi	r8,r8,-1
 8003604:	40002f1e 	bne	r8,zero,80036c4 <pow+0x110>
 8003608:	800d883a 	mov	r6,r16
 800360c:	900f883a 	mov	r7,r18
 8003610:	8009883a 	mov	r4,r16
 8003614:	900b883a 	mov	r5,r18
 8003618:	80083780 	call	8008378 <__unorddf2>
 800361c:	1000291e 	bne	r2,zero,80036c4 <pow+0x110>
 8003620:	a80d883a 	mov	r6,r21
 8003624:	880f883a 	mov	r7,r17
 8003628:	a809883a 	mov	r4,r21
 800362c:	880b883a 	mov	r5,r17
 8003630:	80083780 	call	8008378 <__unorddf2>
 8003634:	000d883a 	mov	r6,zero
 8003638:	000f883a 	mov	r7,zero
 800363c:	1000a61e 	bne	r2,zero,80038d8 <pow+0x324>
 8003640:	a809883a 	mov	r4,r21
 8003644:	880b883a 	mov	r5,r17
 8003648:	800703c0 	call	800703c <__eqdf2>
 800364c:	10002a1e 	bne	r2,zero,80036f8 <pow+0x144>
 8003650:	000d883a 	mov	r6,zero
 8003654:	000f883a 	mov	r7,zero
 8003658:	8009883a 	mov	r4,r16
 800365c:	900b883a 	mov	r5,r18
 8003660:	800703c0 	call	800703c <__eqdf2>
 8003664:	1000a026 	beq	r2,zero,80038e8 <pow+0x334>
 8003668:	01600034 	movhi	r5,32768
 800366c:	297fffc4 	addi	r5,r5,-1
 8003670:	9162703a 	and	r17,r18,r5
 8003674:	01dffc34 	movhi	r7,32752
 8003678:	01bfffc4 	movi	r6,-1
 800367c:	39ffffc4 	addi	r7,r7,-1
 8003680:	8009883a 	mov	r4,r16
 8003684:	880b883a 	mov	r5,r17
 8003688:	80083780 	call	8008378 <__unorddf2>
 800368c:	10000d1e 	bne	r2,zero,80036c4 <pow+0x110>
 8003690:	01dffc34 	movhi	r7,32752
 8003694:	01bfffc4 	movi	r6,-1
 8003698:	39ffffc4 	addi	r7,r7,-1
 800369c:	8009883a 	mov	r4,r16
 80036a0:	880b883a 	mov	r5,r17
 80036a4:	80070bc0 	call	80070bc <__gedf2>
 80036a8:	00800616 	blt	zero,r2,80036c4 <pow+0x110>
 80036ac:	000d883a 	mov	r6,zero
 80036b0:	000f883a 	mov	r7,zero
 80036b4:	8009883a 	mov	r4,r16
 80036b8:	900b883a 	mov	r5,r18
 80036bc:	80071ac0 	call	80071ac <__ledf2>
 80036c0:	10008c16 	blt	r2,zero,80038f4 <pow+0x340>
 80036c4:	a005883a 	mov	r2,r20
 80036c8:	9807883a 	mov	r3,r19
 80036cc:	dfc00817 	ldw	ra,32(sp)
 80036d0:	ddc00717 	ldw	r23,28(sp)
 80036d4:	dd800617 	ldw	r22,24(sp)
 80036d8:	dd400517 	ldw	r21,20(sp)
 80036dc:	dd000417 	ldw	r20,16(sp)
 80036e0:	dcc00317 	ldw	r19,12(sp)
 80036e4:	dc800217 	ldw	r18,8(sp)
 80036e8:	dc400117 	ldw	r17,4(sp)
 80036ec:	dc000017 	ldw	r16,0(sp)
 80036f0:	dec00904 	addi	sp,sp,36
 80036f4:	f800283a 	ret
 80036f8:	01600034 	movhi	r5,32768
 80036fc:	297fffc4 	addi	r5,r5,-1
 8003700:	996c703a 	and	r22,r19,r5
 8003704:	01dffc34 	movhi	r7,32752
 8003708:	01bfffc4 	movi	r6,-1
 800370c:	39ffffc4 	addi	r7,r7,-1
 8003710:	a009883a 	mov	r4,r20
 8003714:	b00b883a 	mov	r5,r22
 8003718:	80083780 	call	8008378 <__unorddf2>
 800371c:	1000331e 	bne	r2,zero,80037ec <pow+0x238>
 8003720:	01dffc34 	movhi	r7,32752
 8003724:	01bfffc4 	movi	r6,-1
 8003728:	39ffffc4 	addi	r7,r7,-1
 800372c:	a009883a 	mov	r4,r20
 8003730:	b00b883a 	mov	r5,r22
 8003734:	80070bc0 	call	80070bc <__gedf2>
 8003738:	00802c16 	blt	zero,r2,80037ec <pow+0x238>
 800373c:	000d883a 	mov	r6,zero
 8003740:	000f883a 	mov	r7,zero
 8003744:	a009883a 	mov	r4,r20
 8003748:	980b883a 	mov	r5,r19
 800374c:	800703c0 	call	800703c <__eqdf2>
 8003750:	103fdc1e 	bne	r2,zero,80036c4 <pow+0x110>
 8003754:	05a00034 	movhi	r22,32768
 8003758:	b5bfffc4 	addi	r22,r22,-1
 800375c:	8da2703a 	and	r17,r17,r22
 8003760:	01dffc34 	movhi	r7,32752
 8003764:	01bfffc4 	movi	r6,-1
 8003768:	39ffffc4 	addi	r7,r7,-1
 800376c:	a809883a 	mov	r4,r21
 8003770:	880b883a 	mov	r5,r17
 8003774:	80083780 	call	8008378 <__unorddf2>
 8003778:	103fd21e 	bne	r2,zero,80036c4 <pow+0x110>
 800377c:	01dffc34 	movhi	r7,32752
 8003780:	01bfffc4 	movi	r6,-1
 8003784:	39ffffc4 	addi	r7,r7,-1
 8003788:	a809883a 	mov	r4,r21
 800378c:	880b883a 	mov	r5,r17
 8003790:	80070bc0 	call	80070bc <__gedf2>
 8003794:	00bfcb16 	blt	zero,r2,80036c4 <pow+0x110>
 8003798:	95a4703a 	and	r18,r18,r22
 800379c:	01dffc34 	movhi	r7,32752
 80037a0:	01bfffc4 	movi	r6,-1
 80037a4:	39ffffc4 	addi	r7,r7,-1
 80037a8:	8009883a 	mov	r4,r16
 80037ac:	900b883a 	mov	r5,r18
 80037b0:	80083780 	call	8008378 <__unorddf2>
 80037b4:	103fc31e 	bne	r2,zero,80036c4 <pow+0x110>
 80037b8:	01dffc34 	movhi	r7,32752
 80037bc:	01bfffc4 	movi	r6,-1
 80037c0:	39ffffc4 	addi	r7,r7,-1
 80037c4:	8009883a 	mov	r4,r16
 80037c8:	900b883a 	mov	r5,r18
 80037cc:	80070bc0 	call	80070bc <__gedf2>
 80037d0:	00bfbc16 	blt	zero,r2,80036c4 <pow+0x110>
 80037d4:	80086600 	call	8008660 <__errno>
 80037d8:	00c00884 	movi	r3,34
 80037dc:	10c00015 	stw	r3,0(r2)
 80037e0:	0029883a 	mov	r20,zero
 80037e4:	0027883a 	mov	r19,zero
 80037e8:	003fb606 	br	80036c4 <pow+0x110>
 80037ec:	05a00034 	movhi	r22,32768
 80037f0:	b5bfffc4 	addi	r22,r22,-1
 80037f4:	8dae703a 	and	r23,r17,r22
 80037f8:	01dffc34 	movhi	r7,32752
 80037fc:	01bfffc4 	movi	r6,-1
 8003800:	39ffffc4 	addi	r7,r7,-1
 8003804:	a809883a 	mov	r4,r21
 8003808:	b80b883a 	mov	r5,r23
 800380c:	80083780 	call	8008378 <__unorddf2>
 8003810:	103fac1e 	bne	r2,zero,80036c4 <pow+0x110>
 8003814:	01dffc34 	movhi	r7,32752
 8003818:	01bfffc4 	movi	r6,-1
 800381c:	39ffffc4 	addi	r7,r7,-1
 8003820:	a809883a 	mov	r4,r21
 8003824:	b80b883a 	mov	r5,r23
 8003828:	80070bc0 	call	80070bc <__gedf2>
 800382c:	00bfa516 	blt	zero,r2,80036c4 <pow+0x110>
 8003830:	95ac703a 	and	r22,r18,r22
 8003834:	01dffc34 	movhi	r7,32752
 8003838:	01bfffc4 	movi	r6,-1
 800383c:	39ffffc4 	addi	r7,r7,-1
 8003840:	8009883a 	mov	r4,r16
 8003844:	b00b883a 	mov	r5,r22
 8003848:	80083780 	call	8008378 <__unorddf2>
 800384c:	103fbb1e 	bne	r2,zero,800373c <pow+0x188>
 8003850:	01dffc34 	movhi	r7,32752
 8003854:	01bfffc4 	movi	r6,-1
 8003858:	39ffffc4 	addi	r7,r7,-1
 800385c:	8009883a 	mov	r4,r16
 8003860:	b00b883a 	mov	r5,r22
 8003864:	80070bc0 	call	80070bc <__gedf2>
 8003868:	00bfb416 	blt	zero,r2,800373c <pow+0x188>
 800386c:	a00d883a 	mov	r6,r20
 8003870:	980f883a 	mov	r7,r19
 8003874:	a009883a 	mov	r4,r20
 8003878:	980b883a 	mov	r5,r19
 800387c:	80083780 	call	8008378 <__unorddf2>
 8003880:	1000271e 	bne	r2,zero,8003920 <pow+0x36c>
 8003884:	80086600 	call	8008660 <__errno>
 8003888:	00c00884 	movi	r3,34
 800388c:	10c00015 	stw	r3,0(r2)
 8003890:	000d883a 	mov	r6,zero
 8003894:	000f883a 	mov	r7,zero
 8003898:	a809883a 	mov	r4,r21
 800389c:	880b883a 	mov	r5,r17
 80038a0:	80071ac0 	call	80071ac <__ledf2>
 80038a4:	1000190e 	bge	r2,zero,800390c <pow+0x358>
 80038a8:	8009883a 	mov	r4,r16
 80038ac:	900b883a 	mov	r5,r18
 80038b0:	8004c7c0 	call	8004c7c <rint>
 80038b4:	800d883a 	mov	r6,r16
 80038b8:	900f883a 	mov	r7,r18
 80038bc:	1009883a 	mov	r4,r2
 80038c0:	180b883a 	mov	r5,r3
 80038c4:	800703c0 	call	800703c <__eqdf2>
 80038c8:	0029883a 	mov	r20,zero
 80038cc:	10001226 	beq	r2,zero,8003918 <pow+0x364>
 80038d0:	04fffc34 	movhi	r19,65520
 80038d4:	003f7b06 	br	80036c4 <pow+0x110>
 80038d8:	8009883a 	mov	r4,r16
 80038dc:	900b883a 	mov	r5,r18
 80038e0:	800703c0 	call	800703c <__eqdf2>
 80038e4:	103f771e 	bne	r2,zero,80036c4 <pow+0x110>
 80038e8:	0029883a 	mov	r20,zero
 80038ec:	04cffc34 	movhi	r19,16368
 80038f0:	003f7406 	br	80036c4 <pow+0x110>
 80038f4:	80086600 	call	8008660 <__errno>
 80038f8:	00c00844 	movi	r3,33
 80038fc:	10c00015 	stw	r3,0(r2)
 8003900:	0029883a 	mov	r20,zero
 8003904:	04fffc34 	movhi	r19,65520
 8003908:	003f6e06 	br	80036c4 <pow+0x110>
 800390c:	0029883a 	mov	r20,zero
 8003910:	04dffc34 	movhi	r19,32752
 8003914:	003f6b06 	br	80036c4 <pow+0x110>
 8003918:	04dffc34 	movhi	r19,32752
 800391c:	003f6906 	br	80036c4 <pow+0x110>
 8003920:	80086600 	call	8008660 <__errno>
 8003924:	00c00844 	movi	r3,33
 8003928:	10c00015 	stw	r3,0(r2)
 800392c:	000d883a 	mov	r6,zero
 8003930:	000f883a 	mov	r7,zero
 8003934:	0009883a 	mov	r4,zero
 8003938:	000b883a 	mov	r5,zero
 800393c:	80067080 	call	8006708 <__divdf3>
 8003940:	1029883a 	mov	r20,r2
 8003944:	1827883a 	mov	r19,r3
 8003948:	003f5e06 	br	80036c4 <pow+0x110>

0800394c <__ieee754_pow>:
 800394c:	00e00034 	movhi	r3,32768
 8003950:	18ffffc4 	addi	r3,r3,-1
 8003954:	deffeb04 	addi	sp,sp,-84
 8003958:	38c4703a 	and	r2,r7,r3
 800395c:	dfc01415 	stw	ra,80(sp)
 8003960:	df001315 	stw	fp,76(sp)
 8003964:	ddc01215 	stw	r23,72(sp)
 8003968:	dd801115 	stw	r22,68(sp)
 800396c:	dd401015 	stw	r21,64(sp)
 8003970:	dd000f15 	stw	r20,60(sp)
 8003974:	dcc00e15 	stw	r19,56(sp)
 8003978:	dc800d15 	stw	r18,52(sp)
 800397c:	dc400c15 	stw	r17,48(sp)
 8003980:	dc000b15 	stw	r16,44(sp)
 8003984:	1190b03a 	or	r8,r2,r6
 8003988:	40003326 	beq	r8,zero,8003a58 <__ieee754_pow+0x10c>
 800398c:	28e8703a 	and	r20,r5,r3
 8003990:	00dffc34 	movhi	r3,32752
 8003994:	282b883a 	mov	r21,r5
 8003998:	1d00130e 	bge	r3,r20,80039e8 <__ieee754_pow+0x9c>
 800399c:	00f00434 	movhi	r3,49168
 80039a0:	a0c7883a 	add	r3,r20,r3
 80039a4:	1906b03a 	or	r3,r3,r4
 80039a8:	002d883a 	mov	r22,zero
 80039ac:	18002f1e 	bne	r3,zero,8003a6c <__ieee754_pow+0x120>
 80039b0:	00cffc34 	movhi	r3,16368
 80039b4:	b005883a 	mov	r2,r22
 80039b8:	dfc01417 	ldw	ra,80(sp)
 80039bc:	df001317 	ldw	fp,76(sp)
 80039c0:	ddc01217 	ldw	r23,72(sp)
 80039c4:	dd801117 	ldw	r22,68(sp)
 80039c8:	dd401017 	ldw	r21,64(sp)
 80039cc:	dd000f17 	ldw	r20,60(sp)
 80039d0:	dcc00e17 	ldw	r19,56(sp)
 80039d4:	dc800d17 	ldw	r18,52(sp)
 80039d8:	dc400c17 	ldw	r17,48(sp)
 80039dc:	dc000b17 	ldw	r16,44(sp)
 80039e0:	dec01504 	addi	sp,sp,84
 80039e4:	f800283a 	ret
 80039e8:	3823883a 	mov	r17,r7
 80039ec:	3021883a 	mov	r16,r6
 80039f0:	a0c01b26 	beq	r20,r3,8003a60 <__ieee754_pow+0x114>
 80039f4:	18bfe916 	blt	r3,r2,800399c <__ieee754_pow+0x50>
 80039f8:	00dffc34 	movhi	r3,32752
 80039fc:	10c01d26 	beq	r2,r3,8003a74 <__ieee754_pow+0x128>
 8003a00:	a8006616 	blt	r21,zero,8003b9c <__ieee754_pow+0x250>
 8003a04:	0025883a 	mov	r18,zero
 8003a08:	80001c26 	beq	r16,zero,8003a7c <__ieee754_pow+0x130>
 8003a0c:	00e00034 	movhi	r3,32768
 8003a10:	18ffffc4 	addi	r3,r3,-1
 8003a14:	202d883a 	mov	r22,r4
 8003a18:	a8c6703a 	and	r3,r21,r3
 8003a1c:	20003326 	beq	r4,zero,8003aec <__ieee754_pow+0x1a0>
 8003a20:	a826d7fa 	srli	r19,r21,31
 8003a24:	9cffffc4 	addi	r19,r19,-1
 8003a28:	94cab03a 	or	r5,r18,r19
 8003a2c:	28003e26 	beq	r5,zero,8003b28 <__ieee754_pow+0x1dc>
 8003a30:	01507834 	movhi	r5,16864
 8003a34:	2880760e 	bge	r5,r2,8003c10 <__ieee754_pow+0x2c4>
 8003a38:	0150fc34 	movhi	r5,17392
 8003a3c:	28834d0e 	bge	r5,r2,8004774 <__ieee754_pow+0xe28>
 8003a40:	008ffc34 	movhi	r2,16368
 8003a44:	a080440e 	bge	r20,r2,8003b58 <__ieee754_pow+0x20c>
 8003a48:	88004416 	blt	r17,zero,8003b5c <__ieee754_pow+0x210>
 8003a4c:	002d883a 	mov	r22,zero
 8003a50:	0007883a 	mov	r3,zero
 8003a54:	003fd706 	br	80039b4 <__ieee754_pow+0x68>
 8003a58:	002d883a 	mov	r22,zero
 8003a5c:	003fd406 	br	80039b0 <__ieee754_pow+0x64>
 8003a60:	2000011e 	bne	r4,zero,8003a68 <__ieee754_pow+0x11c>
 8003a64:	a0bfe40e 	bge	r20,r2,80039f8 <__ieee754_pow+0xac>
 8003a68:	002d883a 	mov	r22,zero
 8003a6c:	00dffe34 	movhi	r3,32760
 8003a70:	003fd006 	br	80039b4 <__ieee754_pow+0x68>
 8003a74:	803fe226 	beq	r16,zero,8003a00 <__ieee754_pow+0xb4>
 8003a78:	003fc806 	br	800399c <__ieee754_pow+0x50>
 8003a7c:	00dffc34 	movhi	r3,32752
 8003a80:	10c05926 	beq	r2,r3,8003be8 <__ieee754_pow+0x29c>
 8003a84:	00cffc34 	movhi	r3,16368
 8003a88:	10c30c26 	beq	r2,r3,80046bc <__ieee754_pow+0xd70>
 8003a8c:	00d00034 	movhi	r3,16384
 8003a90:	88c3b226 	beq	r17,r3,800495c <__ieee754_pow+0x1010>
 8003a94:	00cff834 	movhi	r3,16352
 8003a98:	88ffdc1e 	bne	r17,r3,8003a0c <__ieee754_pow+0xc0>
 8003a9c:	a83fdb16 	blt	r21,zero,8003a0c <__ieee754_pow+0xc0>
 8003aa0:	a80b883a 	mov	r5,r21
 8003aa4:	dfc01417 	ldw	ra,80(sp)
 8003aa8:	df001317 	ldw	fp,76(sp)
 8003aac:	ddc01217 	ldw	r23,72(sp)
 8003ab0:	dd801117 	ldw	r22,68(sp)
 8003ab4:	dd401017 	ldw	r21,64(sp)
 8003ab8:	dd000f17 	ldw	r20,60(sp)
 8003abc:	dcc00e17 	ldw	r19,56(sp)
 8003ac0:	dc800d17 	ldw	r18,52(sp)
 8003ac4:	dc400c17 	ldw	r17,48(sp)
 8003ac8:	dc000b17 	ldw	r16,44(sp)
 8003acc:	dec01504 	addi	sp,sp,84
 8003ad0:	8004a181 	jmpi	8004a18 <__ieee754_sqrt>
 8003ad4:	2000141e 	bne	r4,zero,8003b28 <__ieee754_pow+0x1dc>
 8003ad8:	00e00034 	movhi	r3,32768
 8003adc:	18ffffc4 	addi	r3,r3,-1
 8003ae0:	002d883a 	mov	r22,zero
 8003ae4:	a8c6703a 	and	r3,r21,r3
 8003ae8:	0025883a 	mov	r18,zero
 8003aec:	a0000526 	beq	r20,zero,8003b04 <__ieee754_pow+0x1b8>
 8003af0:	01500034 	movhi	r5,16384
 8003af4:	297fffc4 	addi	r5,r5,-1
 8003af8:	a94a703a 	and	r5,r21,r5
 8003afc:	018ffc34 	movhi	r6,16368
 8003b00:	29bfc71e 	bne	r5,r6,8003a20 <__ieee754_pow+0xd4>
 8003b04:	88001e16 	blt	r17,zero,8003b80 <__ieee754_pow+0x234>
 8003b08:	a83faa0e 	bge	r21,zero,80039b4 <__ieee754_pow+0x68>
 8003b0c:	00b00434 	movhi	r2,49168
 8003b10:	a085883a 	add	r2,r20,r2
 8003b14:	1484b03a 	or	r2,r2,r18
 8003b18:	10039d1e 	bne	r2,zero,8004990 <__ieee754_pow+0x1044>
 8003b1c:	b00d883a 	mov	r6,r22
 8003b20:	180f883a 	mov	r7,r3
 8003b24:	00000206 	br	8003b30 <__ieee754_pow+0x1e4>
 8003b28:	200d883a 	mov	r6,r4
 8003b2c:	a80f883a 	mov	r7,r21
 8003b30:	3009883a 	mov	r4,r6
 8003b34:	380b883a 	mov	r5,r7
 8003b38:	8007a440 	call	8007a44 <__subdf3>
 8003b3c:	100d883a 	mov	r6,r2
 8003b40:	180f883a 	mov	r7,r3
 8003b44:	1009883a 	mov	r4,r2
 8003b48:	180b883a 	mov	r5,r3
 8003b4c:	80067080 	call	8006708 <__divdf3>
 8003b50:	102d883a 	mov	r22,r2
 8003b54:	003f9706 	br	80039b4 <__ieee754_pow+0x68>
 8003b58:	047fbc0e 	bge	zero,r17,8003a4c <__ieee754_pow+0x100>
 8003b5c:	01a20034 	movhi	r6,34816
 8003b60:	01df8e34 	movhi	r7,32312
 8003b64:	319d6704 	addi	r6,r6,30108
 8003b68:	39f90f04 	addi	r7,r7,-7108
 8003b6c:	3009883a 	mov	r4,r6
 8003b70:	380b883a 	mov	r5,r7
 8003b74:	800729c0 	call	800729c <__muldf3>
 8003b78:	102d883a 	mov	r22,r2
 8003b7c:	003f8d06 	br	80039b4 <__ieee754_pow+0x68>
 8003b80:	180f883a 	mov	r7,r3
 8003b84:	000d883a 	mov	r6,zero
 8003b88:	0009883a 	mov	r4,zero
 8003b8c:	014ffc34 	movhi	r5,16368
 8003b90:	80067080 	call	8006708 <__divdf3>
 8003b94:	102d883a 	mov	r22,r2
 8003b98:	003fdb06 	br	8003b08 <__ieee754_pow+0x1bc>
 8003b9c:	00d0d034 	movhi	r3,17216
 8003ba0:	10c00e0e 	bge	r2,r3,8003bdc <__ieee754_pow+0x290>
 8003ba4:	00cffc34 	movhi	r3,16368
 8003ba8:	10c00916 	blt	r2,r3,8003bd0 <__ieee754_pow+0x284>
 8003bac:	1007d53a 	srai	r3,r2,20
 8003bb0:	18ff0044 	addi	r3,r3,-1023
 8003bb4:	19400550 	cmplti	r5,r3,21
 8003bb8:	2803601e 	bne	r5,zero,800493c <__ieee754_pow+0xff0>
 8003bbc:	01400d04 	movi	r5,52
 8003bc0:	28c7c83a 	sub	r3,r5,r3
 8003bc4:	80cad83a 	srl	r5,r16,r3
 8003bc8:	28c6983a 	sll	r3,r5,r3
 8003bcc:	1c038726 	beq	r3,r16,80049ec <__ieee754_pow+0x10a0>
 8003bd0:	0025883a 	mov	r18,zero
 8003bd4:	803fab26 	beq	r16,zero,8003a84 <__ieee754_pow+0x138>
 8003bd8:	003f8c06 	br	8003a0c <__ieee754_pow+0xc0>
 8003bdc:	04800084 	movi	r18,2
 8003be0:	803f8a1e 	bne	r16,zero,8003a0c <__ieee754_pow+0xc0>
 8003be4:	003fa506 	br	8003a7c <__ieee754_pow+0x130>
 8003be8:	00b00434 	movhi	r2,49168
 8003bec:	a085883a 	add	r2,r20,r2
 8003bf0:	1108b03a 	or	r4,r2,r4
 8003bf4:	203f9826 	beq	r4,zero,8003a58 <__ieee754_pow+0x10c>
 8003bf8:	008ffc34 	movhi	r2,16368
 8003bfc:	002d883a 	mov	r22,zero
 8003c00:	a0833616 	blt	r20,r2,80048dc <__ieee754_pow+0xf90>
 8003c04:	883f9216 	blt	r17,zero,8003a50 <__ieee754_pow+0x104>
 8003c08:	8807883a 	mov	r3,r17
 8003c0c:	003f6906 	br	80039b4 <__ieee754_pow+0x68>
 8003c10:	a95ffc2c 	andhi	r5,r21,32752
 8003c14:	2802d51e 	bne	r5,zero,800476c <__ieee754_pow+0xe20>
 8003c18:	180b883a 	mov	r5,r3
 8003c1c:	000d883a 	mov	r6,zero
 8003c20:	01d0d034 	movhi	r7,17216
 8003c24:	800729c0 	call	800729c <__muldf3>
 8003c28:	102d883a 	mov	r22,r2
 8003c2c:	1829883a 	mov	r20,r3
 8003c30:	017ff2c4 	movi	r5,-53
 8003c34:	a009d53a 	srai	r4,r20,20
 8003c38:	00c00434 	movhi	r3,16
 8003c3c:	18ffffc4 	addi	r3,r3,-1
 8003c40:	00800134 	movhi	r2,4
 8003c44:	213f0044 	addi	r4,r4,-1023
 8003c48:	a0c6703a 	and	r3,r20,r3
 8003c4c:	10a62384 	addi	r2,r2,-26482
 8003c50:	2159883a 	add	r12,r4,r5
 8003c54:	1f0ffc34 	orhi	fp,r3,16368
 8003c58:	10c0060e 	bge	r2,r3,8003c74 <__ieee754_pow+0x328>
 8003c5c:	00800334 	movhi	r2,12
 8003c60:	10ad9e44 	addi	r2,r2,-18823
 8003c64:	10c34e0e 	bge	r2,r3,80049a0 <__ieee754_pow+0x1054>
 8003c68:	00bffc34 	movhi	r2,65520
 8003c6c:	63000044 	addi	r12,r12,1
 8003c70:	e0b9883a 	add	fp,fp,r2
 8003c74:	d8000015 	stw	zero,0(sp)
 8003c78:	d8000115 	stw	zero,4(sp)
 8003c7c:	d8000a15 	stw	zero,40(sp)
 8003c80:	001f883a 	mov	r15,zero
 8003c84:	002f883a 	mov	r23,zero
 8003c88:	034ffc34 	movhi	r13,16368
 8003c8c:	680f883a 	mov	r7,r13
 8003c90:	b009883a 	mov	r4,r22
 8003c94:	e00b883a 	mov	r5,fp
 8003c98:	000d883a 	mov	r6,zero
 8003c9c:	dbc00915 	stw	r15,36(sp)
 8003ca0:	db000815 	stw	r12,32(sp)
 8003ca4:	db400215 	stw	r13,8(sp)
 8003ca8:	8007a440 	call	8007a44 <__subdf3>
 8003cac:	db400217 	ldw	r13,8(sp)
 8003cb0:	b009883a 	mov	r4,r22
 8003cb4:	e00b883a 	mov	r5,fp
 8003cb8:	680f883a 	mov	r7,r13
 8003cbc:	000d883a 	mov	r6,zero
 8003cc0:	db400615 	stw	r13,24(sp)
 8003cc4:	d8800315 	stw	r2,12(sp)
 8003cc8:	d8c00215 	stw	r3,8(sp)
 8003ccc:	8005d900 	call	8005d90 <__adddf3>
 8003cd0:	100d883a 	mov	r6,r2
 8003cd4:	180f883a 	mov	r7,r3
 8003cd8:	0009883a 	mov	r4,zero
 8003cdc:	014ffc34 	movhi	r5,16368
 8003ce0:	80067080 	call	8006708 <__divdf3>
 8003ce4:	dac00217 	ldw	r11,8(sp)
 8003ce8:	da400317 	ldw	r9,12(sp)
 8003cec:	100d883a 	mov	r6,r2
 8003cf0:	580b883a 	mov	r5,r11
 8003cf4:	4809883a 	mov	r4,r9
 8003cf8:	180f883a 	mov	r7,r3
 8003cfc:	d8800515 	stw	r2,20(sp)
 8003d00:	d8c00415 	stw	r3,16(sp)
 8003d04:	800729c0 	call	800729c <__muldf3>
 8003d08:	e009d07a 	srai	r4,fp,1
 8003d0c:	01400234 	movhi	r5,8
 8003d10:	000d883a 	mov	r6,zero
 8003d14:	21080034 	orhi	r4,r4,8192
 8003d18:	2149883a 	add	r4,r4,r5
 8003d1c:	25ef883a 	add	r23,r4,r23
 8003d20:	b80f883a 	mov	r7,r23
 8003d24:	0009883a 	mov	r4,zero
 8003d28:	180b883a 	mov	r5,r3
 8003d2c:	1829883a 	mov	r20,r3
 8003d30:	102b883a 	mov	r21,r2
 8003d34:	800729c0 	call	800729c <__muldf3>
 8003d38:	da400317 	ldw	r9,12(sp)
 8003d3c:	dac00217 	ldw	r11,8(sp)
 8003d40:	100d883a 	mov	r6,r2
 8003d44:	4809883a 	mov	r4,r9
 8003d48:	580b883a 	mov	r5,r11
 8003d4c:	180f883a 	mov	r7,r3
 8003d50:	8007a440 	call	8007a44 <__subdf3>
 8003d54:	db400617 	ldw	r13,24(sp)
 8003d58:	b80b883a 	mov	r5,r23
 8003d5c:	000d883a 	mov	r6,zero
 8003d60:	680f883a 	mov	r7,r13
 8003d64:	0009883a 	mov	r4,zero
 8003d68:	182f883a 	mov	r23,r3
 8003d6c:	d8800215 	stw	r2,8(sp)
 8003d70:	8007a440 	call	8007a44 <__subdf3>
 8003d74:	b009883a 	mov	r4,r22
 8003d78:	e00b883a 	mov	r5,fp
 8003d7c:	100d883a 	mov	r6,r2
 8003d80:	180f883a 	mov	r7,r3
 8003d84:	8007a440 	call	8007a44 <__subdf3>
 8003d88:	a00f883a 	mov	r7,r20
 8003d8c:	000d883a 	mov	r6,zero
 8003d90:	1009883a 	mov	r4,r2
 8003d94:	180b883a 	mov	r5,r3
 8003d98:	800729c0 	call	800729c <__muldf3>
 8003d9c:	dac00217 	ldw	r11,8(sp)
 8003da0:	b80b883a 	mov	r5,r23
 8003da4:	100d883a 	mov	r6,r2
 8003da8:	5809883a 	mov	r4,r11
 8003dac:	180f883a 	mov	r7,r3
 8003db0:	8007a440 	call	8007a44 <__subdf3>
 8003db4:	da000417 	ldw	r8,16(sp)
 8003db8:	da800517 	ldw	r10,20(sp)
 8003dbc:	1009883a 	mov	r4,r2
 8003dc0:	400f883a 	mov	r7,r8
 8003dc4:	500d883a 	mov	r6,r10
 8003dc8:	180b883a 	mov	r5,r3
 8003dcc:	800729c0 	call	800729c <__muldf3>
 8003dd0:	a80d883a 	mov	r6,r21
 8003dd4:	a00f883a 	mov	r7,r20
 8003dd8:	a809883a 	mov	r4,r21
 8003ddc:	a00b883a 	mov	r5,r20
 8003de0:	d8800415 	stw	r2,16(sp)
 8003de4:	d8c00315 	stw	r3,12(sp)
 8003de8:	800729c0 	call	800729c <__muldf3>
 8003dec:	01929174 	movhi	r6,19013
 8003df0:	01cff2b4 	movhi	r7,16330
 8003df4:	3193bbc4 	addi	r6,r6,20207
 8003df8:	39df8a04 	addi	r7,r7,32296
 8003dfc:	1009883a 	mov	r4,r2
 8003e00:	180b883a 	mov	r5,r3
 8003e04:	102f883a 	mov	r23,r2
 8003e08:	182d883a 	mov	r22,r3
 8003e0c:	800729c0 	call	800729c <__muldf3>
 8003e10:	01a4f2b4 	movhi	r6,37834
 8003e14:	01cff3b4 	movhi	r7,16334
 8003e18:	31b6d944 	addi	r6,r6,-9371
 8003e1c:	39e19284 	addi	r7,r7,-31158
 8003e20:	1009883a 	mov	r4,r2
 8003e24:	180b883a 	mov	r5,r3
 8003e28:	8005d900 	call	8005d90 <__adddf3>
 8003e2c:	b80d883a 	mov	r6,r23
 8003e30:	b00f883a 	mov	r7,r22
 8003e34:	1009883a 	mov	r4,r2
 8003e38:	180b883a 	mov	r5,r3
 8003e3c:	800729c0 	call	800729c <__muldf3>
 8003e40:	01aa4774 	movhi	r6,43293
 8003e44:	01cff474 	movhi	r7,16337
 8003e48:	31904044 	addi	r6,r6,16641
 8003e4c:	39dd1804 	addi	r7,r7,29792
 8003e50:	1009883a 	mov	r4,r2
 8003e54:	180b883a 	mov	r5,r3
 8003e58:	8005d900 	call	8005d90 <__adddf3>
 8003e5c:	b80d883a 	mov	r6,r23
 8003e60:	b00f883a 	mov	r7,r22
 8003e64:	1009883a 	mov	r4,r2
 8003e68:	180b883a 	mov	r5,r3
 8003e6c:	800729c0 	call	800729c <__muldf3>
 8003e70:	019463f4 	movhi	r6,20879
 8003e74:	01cff574 	movhi	r7,16341
 8003e78:	31899344 	addi	r6,r6,9805
 8003e7c:	39d55544 	addi	r7,r7,21845
 8003e80:	1009883a 	mov	r4,r2
 8003e84:	180b883a 	mov	r5,r3
 8003e88:	8005d900 	call	8005d90 <__adddf3>
 8003e8c:	b80d883a 	mov	r6,r23
 8003e90:	b00f883a 	mov	r7,r22
 8003e94:	1009883a 	mov	r4,r2
 8003e98:	180b883a 	mov	r5,r3
 8003e9c:	800729c0 	call	800729c <__muldf3>
 8003ea0:	01b6dc34 	movhi	r6,56176
 8003ea4:	01cff6f4 	movhi	r7,16347
 8003ea8:	31aaffc4 	addi	r6,r6,-21505
 8003eac:	39db6d84 	addi	r7,r7,28086
 8003eb0:	1009883a 	mov	r4,r2
 8003eb4:	180b883a 	mov	r5,r3
 8003eb8:	8005d900 	call	8005d90 <__adddf3>
 8003ebc:	b80d883a 	mov	r6,r23
 8003ec0:	b00f883a 	mov	r7,r22
 8003ec4:	1009883a 	mov	r4,r2
 8003ec8:	180b883a 	mov	r5,r3
 8003ecc:	800729c0 	call	800729c <__muldf3>
 8003ed0:	018cccf4 	movhi	r6,13107
 8003ed4:	01cff8f4 	movhi	r7,16355
 8003ed8:	318cc0c4 	addi	r6,r6,13059
 8003edc:	39ccccc4 	addi	r7,r7,13107
 8003ee0:	1009883a 	mov	r4,r2
 8003ee4:	180b883a 	mov	r5,r3
 8003ee8:	8005d900 	call	8005d90 <__adddf3>
 8003eec:	b80d883a 	mov	r6,r23
 8003ef0:	b00f883a 	mov	r7,r22
 8003ef4:	b809883a 	mov	r4,r23
 8003ef8:	b00b883a 	mov	r5,r22
 8003efc:	1839883a 	mov	fp,r3
 8003f00:	d8800215 	stw	r2,8(sp)
 8003f04:	800729c0 	call	800729c <__muldf3>
 8003f08:	dac00217 	ldw	r11,8(sp)
 8003f0c:	e00b883a 	mov	r5,fp
 8003f10:	100d883a 	mov	r6,r2
 8003f14:	5809883a 	mov	r4,r11
 8003f18:	180f883a 	mov	r7,r3
 8003f1c:	800729c0 	call	800729c <__muldf3>
 8003f20:	a00f883a 	mov	r7,r20
 8003f24:	a809883a 	mov	r4,r21
 8003f28:	a00b883a 	mov	r5,r20
 8003f2c:	000d883a 	mov	r6,zero
 8003f30:	102f883a 	mov	r23,r2
 8003f34:	182d883a 	mov	r22,r3
 8003f38:	8005d900 	call	8005d90 <__adddf3>
 8003f3c:	da800417 	ldw	r10,16(sp)
 8003f40:	da400317 	ldw	r9,12(sp)
 8003f44:	1009883a 	mov	r4,r2
 8003f48:	500d883a 	mov	r6,r10
 8003f4c:	480f883a 	mov	r7,r9
 8003f50:	180b883a 	mov	r5,r3
 8003f54:	da800715 	stw	r10,28(sp)
 8003f58:	da400615 	stw	r9,24(sp)
 8003f5c:	800729c0 	call	800729c <__muldf3>
 8003f60:	b80d883a 	mov	r6,r23
 8003f64:	b00f883a 	mov	r7,r22
 8003f68:	1009883a 	mov	r4,r2
 8003f6c:	180b883a 	mov	r5,r3
 8003f70:	8005d900 	call	8005d90 <__adddf3>
 8003f74:	a00f883a 	mov	r7,r20
 8003f78:	a00b883a 	mov	r5,r20
 8003f7c:	000d883a 	mov	r6,zero
 8003f80:	0009883a 	mov	r4,zero
 8003f84:	d8800315 	stw	r2,12(sp)
 8003f88:	d8c00215 	stw	r3,8(sp)
 8003f8c:	800729c0 	call	800729c <__muldf3>
 8003f90:	000d883a 	mov	r6,zero
 8003f94:	01d00234 	movhi	r7,16392
 8003f98:	1009883a 	mov	r4,r2
 8003f9c:	180b883a 	mov	r5,r3
 8003fa0:	d8800515 	stw	r2,20(sp)
 8003fa4:	d8c00415 	stw	r3,16(sp)
 8003fa8:	8005d900 	call	8005d90 <__adddf3>
 8003fac:	da000317 	ldw	r8,12(sp)
 8003fb0:	dac00217 	ldw	r11,8(sp)
 8003fb4:	1009883a 	mov	r4,r2
 8003fb8:	400d883a 	mov	r6,r8
 8003fbc:	580f883a 	mov	r7,r11
 8003fc0:	180b883a 	mov	r5,r3
 8003fc4:	8005d900 	call	8005d90 <__adddf3>
 8003fc8:	a00b883a 	mov	r5,r20
 8003fcc:	000d883a 	mov	r6,zero
 8003fd0:	180f883a 	mov	r7,r3
 8003fd4:	0009883a 	mov	r4,zero
 8003fd8:	182d883a 	mov	r22,r3
 8003fdc:	800729c0 	call	800729c <__muldf3>
 8003fe0:	b00b883a 	mov	r5,r22
 8003fe4:	000d883a 	mov	r6,zero
 8003fe8:	01d00234 	movhi	r7,16392
 8003fec:	0009883a 	mov	r4,zero
 8003ff0:	1039883a 	mov	fp,r2
 8003ff4:	182f883a 	mov	r23,r3
 8003ff8:	8007a440 	call	8007a44 <__subdf3>
 8003ffc:	db800517 	ldw	r14,20(sp)
 8004000:	db400417 	ldw	r13,16(sp)
 8004004:	1009883a 	mov	r4,r2
 8004008:	700d883a 	mov	r6,r14
 800400c:	680f883a 	mov	r7,r13
 8004010:	180b883a 	mov	r5,r3
 8004014:	8007a440 	call	8007a44 <__subdf3>
 8004018:	da000317 	ldw	r8,12(sp)
 800401c:	dac00217 	ldw	r11,8(sp)
 8004020:	100d883a 	mov	r6,r2
 8004024:	4009883a 	mov	r4,r8
 8004028:	580b883a 	mov	r5,r11
 800402c:	180f883a 	mov	r7,r3
 8004030:	8007a440 	call	8007a44 <__subdf3>
 8004034:	a80d883a 	mov	r6,r21
 8004038:	a00f883a 	mov	r7,r20
 800403c:	1009883a 	mov	r4,r2
 8004040:	180b883a 	mov	r5,r3
 8004044:	800729c0 	call	800729c <__muldf3>
 8004048:	da800717 	ldw	r10,28(sp)
 800404c:	da400617 	ldw	r9,24(sp)
 8004050:	b00f883a 	mov	r7,r22
 8004054:	5009883a 	mov	r4,r10
 8004058:	480b883a 	mov	r5,r9
 800405c:	000d883a 	mov	r6,zero
 8004060:	102b883a 	mov	r21,r2
 8004064:	1829883a 	mov	r20,r3
 8004068:	800729c0 	call	800729c <__muldf3>
 800406c:	a809883a 	mov	r4,r21
 8004070:	a00b883a 	mov	r5,r20
 8004074:	100d883a 	mov	r6,r2
 8004078:	180f883a 	mov	r7,r3
 800407c:	8005d900 	call	8005d90 <__adddf3>
 8004080:	e009883a 	mov	r4,fp
 8004084:	b80b883a 	mov	r5,r23
 8004088:	100d883a 	mov	r6,r2
 800408c:	180f883a 	mov	r7,r3
 8004090:	102d883a 	mov	r22,r2
 8004094:	182b883a 	mov	r21,r3
 8004098:	8005d900 	call	8005d90 <__adddf3>
 800409c:	01cffbf4 	movhi	r7,16367
 80040a0:	01b80034 	movhi	r6,57344
 80040a4:	39f1c244 	addi	r7,r7,-14583
 80040a8:	0009883a 	mov	r4,zero
 80040ac:	180b883a 	mov	r5,r3
 80040b0:	1829883a 	mov	r20,r3
 80040b4:	800729c0 	call	800729c <__muldf3>
 80040b8:	e00d883a 	mov	r6,fp
 80040bc:	b80f883a 	mov	r7,r23
 80040c0:	a00b883a 	mov	r5,r20
 80040c4:	0009883a 	mov	r4,zero
 80040c8:	1039883a 	mov	fp,r2
 80040cc:	182f883a 	mov	r23,r3
 80040d0:	8007a440 	call	8007a44 <__subdf3>
 80040d4:	b009883a 	mov	r4,r22
 80040d8:	a80b883a 	mov	r5,r21
 80040dc:	100d883a 	mov	r6,r2
 80040e0:	180f883a 	mov	r7,r3
 80040e4:	8007a440 	call	8007a44 <__subdf3>
 80040e8:	01b70eb4 	movhi	r6,56378
 80040ec:	01cffbf4 	movhi	r7,16367
 80040f0:	3180ff44 	addi	r6,r6,1021
 80040f4:	39f1c244 	addi	r7,r7,-14583
 80040f8:	1009883a 	mov	r4,r2
 80040fc:	180b883a 	mov	r5,r3
 8004100:	800729c0 	call	800729c <__muldf3>
 8004104:	018516f4 	movhi	r6,5211
 8004108:	01ef8fb4 	movhi	r7,48702
 800410c:	a00b883a 	mov	r5,r20
 8004110:	31807d44 	addi	r6,r6,501
 8004114:	39cbf804 	addi	r7,r7,12256
 8004118:	0009883a 	mov	r4,zero
 800411c:	102d883a 	mov	r22,r2
 8004120:	182b883a 	mov	r21,r3
 8004124:	800729c0 	call	800729c <__muldf3>
 8004128:	b009883a 	mov	r4,r22
 800412c:	a80b883a 	mov	r5,r21
 8004130:	100d883a 	mov	r6,r2
 8004134:	180f883a 	mov	r7,r3
 8004138:	8005d900 	call	8005d90 <__adddf3>
 800413c:	dbc00917 	ldw	r15,36(sp)
 8004140:	d9800a17 	ldw	r6,40(sp)
 8004144:	180b883a 	mov	r5,r3
 8004148:	780f883a 	mov	r7,r15
 800414c:	1009883a 	mov	r4,r2
 8004150:	8005d900 	call	8005d90 <__adddf3>
 8004154:	db000817 	ldw	r12,32(sp)
 8004158:	102d883a 	mov	r22,r2
 800415c:	182b883a 	mov	r21,r3
 8004160:	6009883a 	mov	r4,r12
 8004164:	80083cc0 	call	80083cc <__floatsidf>
 8004168:	b00d883a 	mov	r6,r22
 800416c:	a80f883a 	mov	r7,r21
 8004170:	e009883a 	mov	r4,fp
 8004174:	b80b883a 	mov	r5,r23
 8004178:	d8800315 	stw	r2,12(sp)
 800417c:	d8c00215 	stw	r3,8(sp)
 8004180:	8005d900 	call	8005d90 <__adddf3>
 8004184:	d9800017 	ldw	r6,0(sp)
 8004188:	d9c00117 	ldw	r7,4(sp)
 800418c:	1009883a 	mov	r4,r2
 8004190:	180b883a 	mov	r5,r3
 8004194:	8005d900 	call	8005d90 <__adddf3>
 8004198:	da800317 	ldw	r10,12(sp)
 800419c:	da400217 	ldw	r9,8(sp)
 80041a0:	1009883a 	mov	r4,r2
 80041a4:	500d883a 	mov	r6,r10
 80041a8:	480f883a 	mov	r7,r9
 80041ac:	180b883a 	mov	r5,r3
 80041b0:	8005d900 	call	8005d90 <__adddf3>
 80041b4:	da800317 	ldw	r10,12(sp)
 80041b8:	da400217 	ldw	r9,8(sp)
 80041bc:	0009883a 	mov	r4,zero
 80041c0:	500d883a 	mov	r6,r10
 80041c4:	480f883a 	mov	r7,r9
 80041c8:	180b883a 	mov	r5,r3
 80041cc:	1829883a 	mov	r20,r3
 80041d0:	8007a440 	call	8007a44 <__subdf3>
 80041d4:	d9800017 	ldw	r6,0(sp)
 80041d8:	d9c00117 	ldw	r7,4(sp)
 80041dc:	1009883a 	mov	r4,r2
 80041e0:	180b883a 	mov	r5,r3
 80041e4:	8007a440 	call	8007a44 <__subdf3>
 80041e8:	e00d883a 	mov	r6,fp
 80041ec:	b80f883a 	mov	r7,r23
 80041f0:	1009883a 	mov	r4,r2
 80041f4:	180b883a 	mov	r5,r3
 80041f8:	8007a440 	call	8007a44 <__subdf3>
 80041fc:	b009883a 	mov	r4,r22
 8004200:	100d883a 	mov	r6,r2
 8004204:	180f883a 	mov	r7,r3
 8004208:	a80b883a 	mov	r5,r21
 800420c:	94bfffc4 	addi	r18,r18,-1
 8004210:	8007a440 	call	8007a44 <__subdf3>
 8004214:	94e6b03a 	or	r19,r18,r19
 8004218:	102f883a 	mov	r23,r2
 800421c:	182d883a 	mov	r22,r3
 8004220:	9801501e 	bne	r19,zero,8004764 <__ieee754_pow+0xe18>
 8004224:	04effc34 	movhi	r19,49136
 8004228:	880f883a 	mov	r7,r17
 800422c:	8009883a 	mov	r4,r16
 8004230:	880b883a 	mov	r5,r17
 8004234:	000d883a 	mov	r6,zero
 8004238:	8007a440 	call	8007a44 <__subdf3>
 800423c:	a00f883a 	mov	r7,r20
 8004240:	000d883a 	mov	r6,zero
 8004244:	1009883a 	mov	r4,r2
 8004248:	180b883a 	mov	r5,r3
 800424c:	800729c0 	call	800729c <__muldf3>
 8004250:	800d883a 	mov	r6,r16
 8004254:	880f883a 	mov	r7,r17
 8004258:	b809883a 	mov	r4,r23
 800425c:	b00b883a 	mov	r5,r22
 8004260:	102b883a 	mov	r21,r2
 8004264:	1825883a 	mov	r18,r3
 8004268:	800729c0 	call	800729c <__muldf3>
 800426c:	a809883a 	mov	r4,r21
 8004270:	900b883a 	mov	r5,r18
 8004274:	100d883a 	mov	r6,r2
 8004278:	180f883a 	mov	r7,r3
 800427c:	8005d900 	call	8005d90 <__adddf3>
 8004280:	880f883a 	mov	r7,r17
 8004284:	a00b883a 	mov	r5,r20
 8004288:	000d883a 	mov	r6,zero
 800428c:	0009883a 	mov	r4,zero
 8004290:	1029883a 	mov	r20,r2
 8004294:	182b883a 	mov	r21,r3
 8004298:	800729c0 	call	800729c <__muldf3>
 800429c:	a80b883a 	mov	r5,r21
 80042a0:	100d883a 	mov	r6,r2
 80042a4:	180f883a 	mov	r7,r3
 80042a8:	a009883a 	mov	r4,r20
 80042ac:	1023883a 	mov	r17,r2
 80042b0:	1825883a 	mov	r18,r3
 80042b4:	8005d900 	call	8005d90 <__adddf3>
 80042b8:	01502434 	movhi	r5,16528
 80042bc:	1821883a 	mov	r16,r3
 80042c0:	8817883a 	mov	r11,r17
 80042c4:	902f883a 	mov	r23,r18
 80042c8:	102d883a 	mov	r22,r2
 80042cc:	1839883a 	mov	fp,r3
 80042d0:	1940fe16 	blt	r3,r5,80046cc <__ieee754_pow+0xd80>
 80042d4:	1947c83a 	sub	r3,r3,r5
 80042d8:	1d86b03a 	or	r3,r3,r22
 80042dc:	1801871e 	bne	r3,zero,80048fc <__ieee754_pow+0xfb0>
 80042e0:	01994b34 	movhi	r6,25900
 80042e4:	01cf25f4 	movhi	r7,15511
 80042e8:	31a0bf84 	addi	r6,r6,-32002
 80042ec:	39c551c4 	addi	r7,r7,5447
 80042f0:	a009883a 	mov	r4,r20
 80042f4:	a80b883a 	mov	r5,r21
 80042f8:	8005d900 	call	8005d90 <__adddf3>
 80042fc:	880d883a 	mov	r6,r17
 8004300:	900f883a 	mov	r7,r18
 8004304:	b009883a 	mov	r4,r22
 8004308:	800b883a 	mov	r5,r16
 800430c:	1039883a 	mov	fp,r2
 8004310:	182f883a 	mov	r23,r3
 8004314:	8007a440 	call	8007a44 <__subdf3>
 8004318:	100d883a 	mov	r6,r2
 800431c:	180f883a 	mov	r7,r3
 8004320:	e009883a 	mov	r4,fp
 8004324:	b80b883a 	mov	r5,r23
 8004328:	80070bc0 	call	80070bc <__gedf2>
 800432c:	00817316 	blt	zero,r2,80048fc <__ieee754_pow+0xfb0>
 8004330:	8009d53a 	srai	r4,r16,20
 8004334:	2101ffcc 	andi	r4,r4,2047
 8004338:	00c00434 	movhi	r3,16
 800433c:	213f0084 	addi	r4,r4,-1022
 8004340:	1909d83a 	sra	r4,r3,r4
 8004344:	00800434 	movhi	r2,16
 8004348:	10bfffc4 	addi	r2,r2,-1
 800434c:	2407883a 	add	r3,r4,r16
 8004350:	1809d53a 	srai	r4,r3,20
 8004354:	18ac703a 	and	r22,r3,r2
 8004358:	b5800434 	orhi	r22,r22,16
 800435c:	2101ffcc 	andi	r4,r4,2047
 8004360:	213f0044 	addi	r4,r4,-1023
 8004364:	110fd83a 	sra	r7,r2,r4
 8004368:	00800504 	movi	r2,20
 800436c:	1109c83a 	sub	r4,r2,r4
 8004370:	b105d83a 	sra	r2,r22,r4
 8004374:	01ce303a 	nor	r7,zero,r7
 8004378:	38ce703a 	and	r7,r7,r3
 800437c:	d8800315 	stw	r2,12(sp)
 8004380:	8000020e 	bge	r16,zero,800438c <__ieee754_pow+0xa40>
 8004384:	0085c83a 	sub	r2,zero,r2
 8004388:	d8800315 	stw	r2,12(sp)
 800438c:	000d883a 	mov	r6,zero
 8004390:	8809883a 	mov	r4,r17
 8004394:	900b883a 	mov	r5,r18
 8004398:	8007a440 	call	8007a44 <__subdf3>
 800439c:	100d883a 	mov	r6,r2
 80043a0:	180f883a 	mov	r7,r3
 80043a4:	a009883a 	mov	r4,r20
 80043a8:	a80b883a 	mov	r5,r21
 80043ac:	182f883a 	mov	r23,r3
 80043b0:	d8800015 	stw	r2,0(sp)
 80043b4:	8005d900 	call	8005d90 <__adddf3>
 80043b8:	d8800317 	ldw	r2,12(sp)
 80043bc:	dac00017 	ldw	r11,0(sp)
 80043c0:	1839883a 	mov	fp,r3
 80043c4:	1014953a 	slli	r10,r2,20
 80043c8:	01cff9b4 	movhi	r7,16358
 80043cc:	e00b883a 	mov	r5,fp
 80043d0:	000d883a 	mov	r6,zero
 80043d4:	39cb90c4 	addi	r7,r7,11843
 80043d8:	0009883a 	mov	r4,zero
 80043dc:	da800215 	stw	r10,8(sp)
 80043e0:	dac00015 	stw	r11,0(sp)
 80043e4:	800729c0 	call	800729c <__muldf3>
 80043e8:	dac00017 	ldw	r11,0(sp)
 80043ec:	b80f883a 	mov	r7,r23
 80043f0:	e00b883a 	mov	r5,fp
 80043f4:	580d883a 	mov	r6,r11
 80043f8:	0009883a 	mov	r4,zero
 80043fc:	102d883a 	mov	r22,r2
 8004400:	182f883a 	mov	r23,r3
 8004404:	8007a440 	call	8007a44 <__subdf3>
 8004408:	a009883a 	mov	r4,r20
 800440c:	a80b883a 	mov	r5,r21
 8004410:	100d883a 	mov	r6,r2
 8004414:	180f883a 	mov	r7,r3
 8004418:	8007a440 	call	8007a44 <__subdf3>
 800441c:	01bfbeb4 	movhi	r6,65274
 8004420:	01cff9b4 	movhi	r7,16358
 8004424:	318e7bc4 	addi	r6,r6,14831
 8004428:	39cb9084 	addi	r7,r7,11842
 800442c:	1009883a 	mov	r4,r2
 8004430:	180b883a 	mov	r5,r3
 8004434:	800729c0 	call	800729c <__muldf3>
 8004438:	01832a34 	movhi	r6,3240
 800443c:	01ef8834 	movhi	r7,48672
 8004440:	e00b883a 	mov	r5,fp
 8004444:	319b0e44 	addi	r6,r6,27705
 8004448:	39d71844 	addi	r7,r7,23649
 800444c:	0009883a 	mov	r4,zero
 8004450:	1023883a 	mov	r17,r2
 8004454:	1821883a 	mov	r16,r3
 8004458:	800729c0 	call	800729c <__muldf3>
 800445c:	8809883a 	mov	r4,r17
 8004460:	800b883a 	mov	r5,r16
 8004464:	100d883a 	mov	r6,r2
 8004468:	180f883a 	mov	r7,r3
 800446c:	8005d900 	call	8005d90 <__adddf3>
 8004470:	100d883a 	mov	r6,r2
 8004474:	180f883a 	mov	r7,r3
 8004478:	b009883a 	mov	r4,r22
 800447c:	b80b883a 	mov	r5,r23
 8004480:	1029883a 	mov	r20,r2
 8004484:	1825883a 	mov	r18,r3
 8004488:	8005d900 	call	8005d90 <__adddf3>
 800448c:	b00d883a 	mov	r6,r22
 8004490:	b80f883a 	mov	r7,r23
 8004494:	1009883a 	mov	r4,r2
 8004498:	180b883a 	mov	r5,r3
 800449c:	1023883a 	mov	r17,r2
 80044a0:	1821883a 	mov	r16,r3
 80044a4:	8007a440 	call	8007a44 <__subdf3>
 80044a8:	a009883a 	mov	r4,r20
 80044ac:	900b883a 	mov	r5,r18
 80044b0:	100d883a 	mov	r6,r2
 80044b4:	180f883a 	mov	r7,r3
 80044b8:	8007a440 	call	8007a44 <__subdf3>
 80044bc:	880d883a 	mov	r6,r17
 80044c0:	800f883a 	mov	r7,r16
 80044c4:	8809883a 	mov	r4,r17
 80044c8:	800b883a 	mov	r5,r16
 80044cc:	1039883a 	mov	fp,r2
 80044d0:	182b883a 	mov	r21,r3
 80044d4:	800729c0 	call	800729c <__muldf3>
 80044d8:	019caff4 	movhi	r6,29375
 80044dc:	01cf99b4 	movhi	r7,15974
 80044e0:	31a93404 	addi	r6,r6,-23344
 80044e4:	39cdda44 	addi	r7,r7,14185
 80044e8:	1009883a 	mov	r4,r2
 80044ec:	180b883a 	mov	r5,r3
 80044f0:	1029883a 	mov	r20,r2
 80044f4:	1825883a 	mov	r18,r3
 80044f8:	800729c0 	call	800729c <__muldf3>
 80044fc:	01b174b4 	movhi	r6,50642
 8004500:	01cfaf34 	movhi	r7,16060
 8004504:	319afc44 	addi	r6,r6,27633
 8004508:	39ef5044 	addi	r7,r7,-17087
 800450c:	1009883a 	mov	r4,r2
 8004510:	180b883a 	mov	r5,r3
 8004514:	8007a440 	call	8007a44 <__subdf3>
 8004518:	a00d883a 	mov	r6,r20
 800451c:	900f883a 	mov	r7,r18
 8004520:	1009883a 	mov	r4,r2
 8004524:	180b883a 	mov	r5,r3
 8004528:	800729c0 	call	800729c <__muldf3>
 800452c:	01abc9b4 	movhi	r6,44838
 8004530:	01cfc474 	movhi	r7,16145
 8004534:	31b78b04 	addi	r6,r6,-8660
 8004538:	39d59a84 	addi	r7,r7,22122
 800453c:	1009883a 	mov	r4,r2
 8004540:	180b883a 	mov	r5,r3
 8004544:	8005d900 	call	8005d90 <__adddf3>
 8004548:	a00d883a 	mov	r6,r20
 800454c:	900f883a 	mov	r7,r18
 8004550:	1009883a 	mov	r4,r2
 8004554:	180b883a 	mov	r5,r3
 8004558:	800729c0 	call	800729c <__muldf3>
 800455c:	0185aff4 	movhi	r6,5823
 8004560:	01cfd9f4 	movhi	r7,16231
 8004564:	31af64c4 	addi	r6,r6,-17005
 8004568:	39f05b04 	addi	r7,r7,-16020
 800456c:	1009883a 	mov	r4,r2
 8004570:	180b883a 	mov	r5,r3
 8004574:	8007a440 	call	8007a44 <__subdf3>
 8004578:	a00d883a 	mov	r6,r20
 800457c:	900f883a 	mov	r7,r18
 8004580:	1009883a 	mov	r4,r2
 8004584:	180b883a 	mov	r5,r3
 8004588:	800729c0 	call	800729c <__muldf3>
 800458c:	01955574 	movhi	r6,21845
 8004590:	01cff174 	movhi	r7,16325
 8004594:	31954f84 	addi	r6,r6,21822
 8004598:	39d55544 	addi	r7,r7,21845
 800459c:	1009883a 	mov	r4,r2
 80045a0:	180b883a 	mov	r5,r3
 80045a4:	8005d900 	call	8005d90 <__adddf3>
 80045a8:	a00d883a 	mov	r6,r20
 80045ac:	900f883a 	mov	r7,r18
 80045b0:	1009883a 	mov	r4,r2
 80045b4:	180b883a 	mov	r5,r3
 80045b8:	800729c0 	call	800729c <__muldf3>
 80045bc:	100d883a 	mov	r6,r2
 80045c0:	180f883a 	mov	r7,r3
 80045c4:	8809883a 	mov	r4,r17
 80045c8:	800b883a 	mov	r5,r16
 80045cc:	8007a440 	call	8007a44 <__subdf3>
 80045d0:	100d883a 	mov	r6,r2
 80045d4:	180f883a 	mov	r7,r3
 80045d8:	8809883a 	mov	r4,r17
 80045dc:	800b883a 	mov	r5,r16
 80045e0:	1029883a 	mov	r20,r2
 80045e4:	1825883a 	mov	r18,r3
 80045e8:	800729c0 	call	800729c <__muldf3>
 80045ec:	a009883a 	mov	r4,r20
 80045f0:	900b883a 	mov	r5,r18
 80045f4:	000d883a 	mov	r6,zero
 80045f8:	01d00034 	movhi	r7,16384
 80045fc:	d8800115 	stw	r2,4(sp)
 8004600:	d8c00015 	stw	r3,0(sp)
 8004604:	8007a440 	call	8007a44 <__subdf3>
 8004608:	da400117 	ldw	r9,4(sp)
 800460c:	da000017 	ldw	r8,0(sp)
 8004610:	100d883a 	mov	r6,r2
 8004614:	4809883a 	mov	r4,r9
 8004618:	400b883a 	mov	r5,r8
 800461c:	180f883a 	mov	r7,r3
 8004620:	80067080 	call	8006708 <__divdf3>
 8004624:	e00d883a 	mov	r6,fp
 8004628:	a80f883a 	mov	r7,r21
 800462c:	8809883a 	mov	r4,r17
 8004630:	800b883a 	mov	r5,r16
 8004634:	1029883a 	mov	r20,r2
 8004638:	1825883a 	mov	r18,r3
 800463c:	800729c0 	call	800729c <__muldf3>
 8004640:	e00d883a 	mov	r6,fp
 8004644:	a80f883a 	mov	r7,r21
 8004648:	1009883a 	mov	r4,r2
 800464c:	180b883a 	mov	r5,r3
 8004650:	8005d900 	call	8005d90 <__adddf3>
 8004654:	100d883a 	mov	r6,r2
 8004658:	180f883a 	mov	r7,r3
 800465c:	a009883a 	mov	r4,r20
 8004660:	900b883a 	mov	r5,r18
 8004664:	8007a440 	call	8007a44 <__subdf3>
 8004668:	880d883a 	mov	r6,r17
 800466c:	800f883a 	mov	r7,r16
 8004670:	1009883a 	mov	r4,r2
 8004674:	180b883a 	mov	r5,r3
 8004678:	8007a440 	call	8007a44 <__subdf3>
 800467c:	100d883a 	mov	r6,r2
 8004680:	0009883a 	mov	r4,zero
 8004684:	014ffc34 	movhi	r5,16368
 8004688:	180f883a 	mov	r7,r3
 800468c:	8007a440 	call	8007a44 <__subdf3>
 8004690:	da800217 	ldw	r10,8(sp)
 8004694:	1009883a 	mov	r4,r2
 8004698:	1a8d883a 	add	r6,r3,r10
 800469c:	300bd53a 	srai	r5,r6,20
 80046a0:	0140cc0e 	bge	zero,r5,80049d4 <__ieee754_pow+0x1088>
 80046a4:	300b883a 	mov	r5,r6
 80046a8:	000d883a 	mov	r6,zero
 80046ac:	980f883a 	mov	r7,r19
 80046b0:	800729c0 	call	800729c <__muldf3>
 80046b4:	102d883a 	mov	r22,r2
 80046b8:	003cbe06 	br	80039b4 <__ieee754_pow+0x68>
 80046bc:	8800ad16 	blt	r17,zero,8004974 <__ieee754_pow+0x1028>
 80046c0:	202d883a 	mov	r22,r4
 80046c4:	a807883a 	mov	r3,r21
 80046c8:	003cba06 	br	80039b4 <__ieee754_pow+0x68>
 80046cc:	01200034 	movhi	r4,32768
 80046d0:	213fffc4 	addi	r4,r4,-1
 80046d4:	00902474 	movhi	r2,16529
 80046d8:	1908703a 	and	r4,r3,r4
 80046dc:	10b2ffc4 	addi	r2,r2,-13313
 80046e0:	1100810e 	bge	r2,r4,80048e8 <__ieee754_pow+0xf9c>
 80046e4:	008fdbf4 	movhi	r2,16239
 80046e8:	108d0004 	addi	r2,r2,13312
 80046ec:	1885883a 	add	r2,r3,r2
 80046f0:	1584b03a 	or	r2,r2,r22
 80046f4:	10000b1e 	bne	r2,zero,8004724 <__ieee754_pow+0xdd8>
 80046f8:	880d883a 	mov	r6,r17
 80046fc:	900f883a 	mov	r7,r18
 8004700:	b009883a 	mov	r4,r22
 8004704:	180b883a 	mov	r5,r3
 8004708:	8007a440 	call	8007a44 <__subdf3>
 800470c:	a00d883a 	mov	r6,r20
 8004710:	a80f883a 	mov	r7,r21
 8004714:	1009883a 	mov	r4,r2
 8004718:	180b883a 	mov	r5,r3
 800471c:	80070bc0 	call	80070bc <__gedf2>
 8004720:	103f0316 	blt	r2,zero,8004330 <__ieee754_pow+0x9e4>
 8004724:	01b0be74 	movhi	r6,49913
 8004728:	01c06974 	movhi	r7,421
 800472c:	31bcd644 	addi	r6,r6,-3239
 8004730:	39db87c4 	addi	r7,r7,28191
 8004734:	0009883a 	mov	r4,zero
 8004738:	980b883a 	mov	r5,r19
 800473c:	800729c0 	call	800729c <__muldf3>
 8004740:	01b0be74 	movhi	r6,49913
 8004744:	01c06974 	movhi	r7,421
 8004748:	31bcd644 	addi	r6,r6,-3239
 800474c:	39db87c4 	addi	r7,r7,28191
 8004750:	1009883a 	mov	r4,r2
 8004754:	180b883a 	mov	r5,r3
 8004758:	800729c0 	call	800729c <__muldf3>
 800475c:	102d883a 	mov	r22,r2
 8004760:	003c9406 	br	80039b4 <__ieee754_pow+0x68>
 8004764:	04cffc34 	movhi	r19,16368
 8004768:	003eaf06 	br	8004228 <__ieee754_pow+0x8dc>
 800476c:	000b883a 	mov	r5,zero
 8004770:	003d3006 	br	8003c34 <__ieee754_pow+0x2e8>
 8004774:	008ffc34 	movhi	r2,16368
 8004778:	10bfff84 	addi	r2,r2,-2
 800477c:	153cb20e 	bge	r2,r20,8003a48 <__ieee754_pow+0xfc>
 8004780:	008ffc34 	movhi	r2,16368
 8004784:	153cf416 	blt	r2,r20,8003b58 <__ieee754_pow+0x20c>
 8004788:	000d883a 	mov	r6,zero
 800478c:	01cffc34 	movhi	r7,16368
 8004790:	180b883a 	mov	r5,r3
 8004794:	8007a440 	call	8007a44 <__subdf3>
 8004798:	01cffdf4 	movhi	r7,16375
 800479c:	01980034 	movhi	r6,24576
 80047a0:	39c551c4 	addi	r7,r7,5447
 80047a4:	1009883a 	mov	r4,r2
 80047a8:	180b883a 	mov	r5,r3
 80047ac:	102b883a 	mov	r21,r2
 80047b0:	1829883a 	mov	r20,r3
 80047b4:	800729c0 	call	800729c <__muldf3>
 80047b8:	01be17b4 	movhi	r6,63582
 80047bc:	01cf9574 	movhi	r7,15957
 80047c0:	a809883a 	mov	r4,r21
 80047c4:	a00b883a 	mov	r5,r20
 80047c8:	31b7d104 	addi	r6,r6,-8380
 80047cc:	39eb82c4 	addi	r7,r7,-20981
 80047d0:	1039883a 	mov	fp,r2
 80047d4:	182f883a 	mov	r23,r3
 80047d8:	800729c0 	call	800729c <__muldf3>
 80047dc:	a809883a 	mov	r4,r21
 80047e0:	a00b883a 	mov	r5,r20
 80047e4:	000d883a 	mov	r6,zero
 80047e8:	01cff434 	movhi	r7,16336
 80047ec:	182d883a 	mov	r22,r3
 80047f0:	d8800215 	stw	r2,8(sp)
 80047f4:	800729c0 	call	800729c <__muldf3>
 80047f8:	01155574 	movhi	r4,21845
 80047fc:	014ff574 	movhi	r5,16341
 8004800:	100d883a 	mov	r6,r2
 8004804:	180f883a 	mov	r7,r3
 8004808:	21155544 	addi	r4,r4,21845
 800480c:	29555544 	addi	r5,r5,21845
 8004810:	8007a440 	call	8007a44 <__subdf3>
 8004814:	a80d883a 	mov	r6,r21
 8004818:	a00f883a 	mov	r7,r20
 800481c:	1009883a 	mov	r4,r2
 8004820:	180b883a 	mov	r5,r3
 8004824:	800729c0 	call	800729c <__muldf3>
 8004828:	100d883a 	mov	r6,r2
 800482c:	180f883a 	mov	r7,r3
 8004830:	0009883a 	mov	r4,zero
 8004834:	014ff834 	movhi	r5,16352
 8004838:	8007a440 	call	8007a44 <__subdf3>
 800483c:	a80d883a 	mov	r6,r21
 8004840:	a00f883a 	mov	r7,r20
 8004844:	a809883a 	mov	r4,r21
 8004848:	a00b883a 	mov	r5,r20
 800484c:	d8800115 	stw	r2,4(sp)
 8004850:	d8c00015 	stw	r3,0(sp)
 8004854:	800729c0 	call	800729c <__muldf3>
 8004858:	da800117 	ldw	r10,4(sp)
 800485c:	da400017 	ldw	r9,0(sp)
 8004860:	100d883a 	mov	r6,r2
 8004864:	5009883a 	mov	r4,r10
 8004868:	480b883a 	mov	r5,r9
 800486c:	180f883a 	mov	r7,r3
 8004870:	800729c0 	call	800729c <__muldf3>
 8004874:	01994b34 	movhi	r6,25900
 8004878:	01cffdf4 	movhi	r7,16375
 800487c:	31a0bf84 	addi	r6,r6,-32002
 8004880:	39c551c4 	addi	r7,r7,5447
 8004884:	1009883a 	mov	r4,r2
 8004888:	180b883a 	mov	r5,r3
 800488c:	800729c0 	call	800729c <__muldf3>
 8004890:	da000217 	ldw	r8,8(sp)
 8004894:	b00b883a 	mov	r5,r22
 8004898:	100d883a 	mov	r6,r2
 800489c:	4009883a 	mov	r4,r8
 80048a0:	180f883a 	mov	r7,r3
 80048a4:	8007a440 	call	8007a44 <__subdf3>
 80048a8:	100d883a 	mov	r6,r2
 80048ac:	180f883a 	mov	r7,r3
 80048b0:	e009883a 	mov	r4,fp
 80048b4:	b80b883a 	mov	r5,r23
 80048b8:	102d883a 	mov	r22,r2
 80048bc:	182b883a 	mov	r21,r3
 80048c0:	8005d900 	call	8005d90 <__adddf3>
 80048c4:	1829883a 	mov	r20,r3
 80048c8:	e00d883a 	mov	r6,fp
 80048cc:	b80f883a 	mov	r7,r23
 80048d0:	0009883a 	mov	r4,zero
 80048d4:	180b883a 	mov	r5,r3
 80048d8:	003e4706 	br	80041f8 <__ieee754_pow+0x8ac>
 80048dc:	883c5c0e 	bge	r17,zero,8003a50 <__ieee754_pow+0x104>
 80048e0:	88e0003c 	xorhi	r3,r17,32768
 80048e4:	003c3306 	br	80039b4 <__ieee754_pow+0x68>
 80048e8:	008ff834 	movhi	r2,16352
 80048ec:	11004816 	blt	r2,r4,8004a10 <__ieee754_pow+0x10c4>
 80048f0:	0015883a 	mov	r10,zero
 80048f4:	d8000315 	stw	zero,12(sp)
 80048f8:	003eb306 	br	80043c8 <__ieee754_pow+0xa7c>
 80048fc:	01a20034 	movhi	r6,34816
 8004900:	01df8e34 	movhi	r7,32312
 8004904:	319d6704 	addi	r6,r6,30108
 8004908:	39f90f04 	addi	r7,r7,-7108
 800490c:	0009883a 	mov	r4,zero
 8004910:	980b883a 	mov	r5,r19
 8004914:	800729c0 	call	800729c <__muldf3>
 8004918:	01a20034 	movhi	r6,34816
 800491c:	01df8e34 	movhi	r7,32312
 8004920:	319d6704 	addi	r6,r6,30108
 8004924:	39f90f04 	addi	r7,r7,-7108
 8004928:	1009883a 	mov	r4,r2
 800492c:	180b883a 	mov	r5,r3
 8004930:	800729c0 	call	800729c <__muldf3>
 8004934:	102d883a 	mov	r22,r2
 8004938:	003c1e06 	br	80039b4 <__ieee754_pow+0x68>
 800493c:	803c651e 	bne	r16,zero,8003ad4 <__ieee754_pow+0x188>
 8004940:	01400504 	movi	r5,20
 8004944:	28c7c83a 	sub	r3,r5,r3
 8004948:	10cbd83a 	sra	r5,r2,r3
 800494c:	28c6983a 	sll	r3,r5,r3
 8004950:	18802b26 	beq	r3,r2,8004a00 <__ieee754_pow+0x10b4>
 8004954:	0025883a 	mov	r18,zero
 8004958:	003c4a06 	br	8003a84 <__ieee754_pow+0x138>
 800495c:	200d883a 	mov	r6,r4
 8004960:	a80f883a 	mov	r7,r21
 8004964:	a80b883a 	mov	r5,r21
 8004968:	800729c0 	call	800729c <__muldf3>
 800496c:	102d883a 	mov	r22,r2
 8004970:	003c1006 	br	80039b4 <__ieee754_pow+0x68>
 8004974:	200d883a 	mov	r6,r4
 8004978:	a80f883a 	mov	r7,r21
 800497c:	0009883a 	mov	r4,zero
 8004980:	014ffc34 	movhi	r5,16368
 8004984:	80067080 	call	8006708 <__divdf3>
 8004988:	102d883a 	mov	r22,r2
 800498c:	003c0906 	br	80039b4 <__ieee754_pow+0x68>
 8004990:	94800058 	cmpnei	r18,r18,1
 8004994:	903c071e 	bne	r18,zero,80039b4 <__ieee754_pow+0x68>
 8004998:	18e0003c 	xorhi	r3,r3,32768
 800499c:	003c0506 	br	80039b4 <__ieee754_pow+0x68>
 80049a0:	008ff8f4 	movhi	r2,16355
 80049a4:	10ae00c4 	addi	r2,r2,-18429
 80049a8:	00d0f434 	movhi	r3,17360
 80049ac:	03cf9374 	movhi	r15,15949
 80049b0:	01100034 	movhi	r4,16384
 80049b4:	d8800115 	stw	r2,4(sp)
 80049b8:	18b40184 	addi	r2,r3,-12282
 80049bc:	d9000015 	stw	r4,0(sp)
 80049c0:	d8800a15 	stw	r2,40(sp)
 80049c4:	7bff7ac4 	addi	r15,r15,-533
 80049c8:	05c00134 	movhi	r23,4
 80049cc:	034ffe34 	movhi	r13,16376
 80049d0:	003cae06 	br	8003c8c <__ieee754_pow+0x340>
 80049d4:	d9800317 	ldw	r6,12(sp)
 80049d8:	180b883a 	mov	r5,r3
 80049dc:	8004e580 	call	8004e58 <scalbn>
 80049e0:	1009883a 	mov	r4,r2
 80049e4:	180b883a 	mov	r5,r3
 80049e8:	003f2f06 	br	80046a8 <__ieee754_pow+0xd5c>
 80049ec:	2940004c 	andi	r5,r5,1
 80049f0:	04800084 	movi	r18,2
 80049f4:	9165c83a 	sub	r18,r18,r5
 80049f8:	803c2226 	beq	r16,zero,8003a84 <__ieee754_pow+0x138>
 80049fc:	003c0306 	br	8003a0c <__ieee754_pow+0xc0>
 8004a00:	2940004c 	andi	r5,r5,1
 8004a04:	04800084 	movi	r18,2
 8004a08:	9165c83a 	sub	r18,r18,r5
 8004a0c:	003c1d06 	br	8003a84 <__ieee754_pow+0x138>
 8004a10:	2009d53a 	srai	r4,r4,20
 8004a14:	003e4806 	br	8004338 <__ieee754_pow+0x9ec>

08004a18 <__ieee754_sqrt>:
 8004a18:	defffd04 	addi	sp,sp,-12
 8004a1c:	dc400115 	stw	r17,4(sp)
 8004a20:	dc000015 	stw	r16,0(sp)
 8004a24:	dfc00215 	stw	ra,8(sp)
 8004a28:	28dffc2c 	andhi	r3,r5,32752
 8004a2c:	009ffc34 	movhi	r2,32752
 8004a30:	2823883a 	mov	r17,r5
 8004a34:	2021883a 	mov	r16,r4
 8004a38:	200d883a 	mov	r6,r4
 8004a3c:	18807626 	beq	r3,r2,8004c18 <__ieee754_sqrt+0x200>
 8004a40:	01403a0e 	bge	zero,r5,8004b2c <__ieee754_sqrt+0x114>
 8004a44:	280bd53a 	srai	r5,r5,20
 8004a48:	28004626 	beq	r5,zero,8004b64 <__ieee754_sqrt+0x14c>
 8004a4c:	00800434 	movhi	r2,16
 8004a50:	10bfffc4 	addi	r2,r2,-1
 8004a54:	3006d7fa 	srli	r3,r6,31
 8004a58:	8884703a 	and	r2,r17,r2
 8004a5c:	297f0044 	addi	r5,r5,-1023
 8004a60:	10800434 	orhi	r2,r2,16
 8004a64:	1085883a 	add	r2,r2,r2
 8004a68:	29c0004c 	andi	r7,r5,1
 8004a6c:	10c7883a 	add	r3,r2,r3
 8004a70:	3189883a 	add	r4,r6,r6
 8004a74:	38000426 	beq	r7,zero,8004a88 <__ieee754_sqrt+0x70>
 8004a78:	2004d7fa 	srli	r2,r4,31
 8004a7c:	300890ba 	slli	r4,r6,2
 8004a80:	18c7883a 	add	r3,r3,r3
 8004a84:	1887883a 	add	r3,r3,r2
 8004a88:	2815d07a 	srai	r10,r5,1
 8004a8c:	01c00584 	movi	r7,22
 8004a90:	0019883a 	mov	r12,zero
 8004a94:	000b883a 	mov	r5,zero
 8004a98:	00800834 	movhi	r2,32
 8004a9c:	288d883a 	add	r6,r5,r2
 8004aa0:	2010d7fa 	srli	r8,r4,31
 8004aa4:	39ffffc4 	addi	r7,r7,-1
 8004aa8:	19800316 	blt	r3,r6,8004ab8 <__ieee754_sqrt+0xa0>
 8004aac:	1987c83a 	sub	r3,r3,r6
 8004ab0:	308b883a 	add	r5,r6,r2
 8004ab4:	6099883a 	add	r12,r12,r2
 8004ab8:	18c7883a 	add	r3,r3,r3
 8004abc:	1004d07a 	srli	r2,r2,1
 8004ac0:	40c7883a 	add	r3,r8,r3
 8004ac4:	2109883a 	add	r4,r4,r4
 8004ac8:	383ff41e 	bne	r7,zero,8004a9c <__ieee754_sqrt+0x84>
 8004acc:	0013883a 	mov	r9,zero
 8004ad0:	00800804 	movi	r2,32
 8004ad4:	01a00034 	movhi	r6,32768
 8004ad8:	00000806 	br	8004afc <__ieee754_sqrt+0xe4>
 8004adc:	19403326 	beq	r3,r5,8004bac <__ieee754_sqrt+0x194>
 8004ae0:	2010d7fa 	srli	r8,r4,31
 8004ae4:	18c7883a 	add	r3,r3,r3
 8004ae8:	10bfffc4 	addi	r2,r2,-1
 8004aec:	300cd07a 	srli	r6,r6,1
 8004af0:	1a07883a 	add	r3,r3,r8
 8004af4:	2109883a 	add	r4,r4,r4
 8004af8:	10003226 	beq	r2,zero,8004bc4 <__ieee754_sqrt+0x1ac>
 8004afc:	31d1883a 	add	r8,r6,r7
 8004b00:	28fff60e 	bge	r5,r3,8004adc <__ieee754_sqrt+0xc4>
 8004b04:	418f883a 	add	r7,r8,r6
 8004b08:	40002516 	blt	r8,zero,8004ba0 <__ieee754_sqrt+0x188>
 8004b0c:	2817883a 	mov	r11,r5
 8004b10:	1947c83a 	sub	r3,r3,r5
 8004b14:	2200012e 	bgeu	r4,r8,8004b1c <__ieee754_sqrt+0x104>
 8004b18:	18ffffc4 	addi	r3,r3,-1
 8004b1c:	2209c83a 	sub	r4,r4,r8
 8004b20:	4993883a 	add	r9,r9,r6
 8004b24:	580b883a 	mov	r5,r11
 8004b28:	003fed06 	br	8004ae0 <__ieee754_sqrt+0xc8>
 8004b2c:	00a00034 	movhi	r2,32768
 8004b30:	10bfffc4 	addi	r2,r2,-1
 8004b34:	2884703a 	and	r2,r5,r2
 8004b38:	1104b03a 	or	r2,r2,r4
 8004b3c:	10004626 	beq	r2,zero,8004c58 <__ieee754_sqrt+0x240>
 8004b40:	28003d1e 	bne	r5,zero,8004c38 <__ieee754_sqrt+0x220>
 8004b44:	000b883a 	mov	r5,zero
 8004b48:	3004d2fa 	srli	r2,r6,11
 8004b4c:	297ffac4 	addi	r5,r5,-21
 8004b50:	300c957a 	slli	r6,r6,21
 8004b54:	1023883a 	mov	r17,r2
 8004b58:	103ffb26 	beq	r2,zero,8004b48 <__ieee754_sqrt+0x130>
 8004b5c:	10c0042c 	andhi	r3,r2,16
 8004b60:	1800421e 	bne	r3,zero,8004c6c <__ieee754_sqrt+0x254>
 8004b64:	0005883a 	mov	r2,zero
 8004b68:	8c63883a 	add	r17,r17,r17
 8004b6c:	8900042c 	andhi	r4,r17,16
 8004b70:	1007883a 	mov	r3,r2
 8004b74:	10800044 	addi	r2,r2,1
 8004b78:	203ffb26 	beq	r4,zero,8004b68 <__ieee754_sqrt+0x150>
 8004b7c:	02000804 	movi	r8,32
 8004b80:	3009883a 	mov	r4,r6
 8004b84:	4091c83a 	sub	r8,r8,r2
 8004b88:	308c983a 	sll	r6,r6,r2
 8004b8c:	8805883a 	mov	r2,r17
 8004b90:	220ed83a 	srl	r7,r4,r8
 8004b94:	28cbc83a 	sub	r5,r5,r3
 8004b98:	38a2b03a 	or	r17,r7,r2
 8004b9c:	003fab06 	br	8004a4c <__ieee754_sqrt+0x34>
 8004ba0:	383fda16 	blt	r7,zero,8004b0c <__ieee754_sqrt+0xf4>
 8004ba4:	2ac00044 	addi	r11,r5,1
 8004ba8:	003fd906 	br	8004b10 <__ieee754_sqrt+0xf8>
 8004bac:	223fcc36 	bltu	r4,r8,8004ae0 <__ieee754_sqrt+0xc8>
 8004bb0:	418f883a 	add	r7,r8,r6
 8004bb4:	403ffa16 	blt	r8,zero,8004ba0 <__ieee754_sqrt+0x188>
 8004bb8:	1817883a 	mov	r11,r3
 8004bbc:	0007883a 	mov	r3,zero
 8004bc0:	003fd606 	br	8004b1c <__ieee754_sqrt+0x104>
 8004bc4:	1906b03a 	or	r3,r3,r4
 8004bc8:	18000e1e 	bne	r3,zero,8004c04 <__ieee754_sqrt+0x1ec>
 8004bcc:	4804d07a 	srli	r2,r9,1
 8004bd0:	6007d07a 	srai	r3,r12,1
 8004bd4:	01cff834 	movhi	r7,16352
 8004bd8:	6300004c 	andi	r12,r12,1
 8004bdc:	19cf883a 	add	r7,r3,r7
 8004be0:	60000126 	beq	r12,zero,8004be8 <__ieee754_sqrt+0x1d0>
 8004be4:	10a00034 	orhi	r2,r2,32768
 8004be8:	5006953a 	slli	r3,r10,20
 8004bec:	19c7883a 	add	r3,r3,r7
 8004bf0:	dfc00217 	ldw	ra,8(sp)
 8004bf4:	dc400117 	ldw	r17,4(sp)
 8004bf8:	dc000017 	ldw	r16,0(sp)
 8004bfc:	dec00304 	addi	sp,sp,12
 8004c00:	f800283a 	ret
 8004c04:	48ffffd8 	cmpnei	r3,r9,-1
 8004c08:	18001626 	beq	r3,zero,8004c64 <__ieee754_sqrt+0x24c>
 8004c0c:	48800044 	addi	r2,r9,1
 8004c10:	1004d07a 	srli	r2,r2,1
 8004c14:	003fee06 	br	8004bd0 <__ieee754_sqrt+0x1b8>
 8004c18:	280f883a 	mov	r7,r5
 8004c1c:	800729c0 	call	800729c <__muldf3>
 8004c20:	800d883a 	mov	r6,r16
 8004c24:	880f883a 	mov	r7,r17
 8004c28:	1009883a 	mov	r4,r2
 8004c2c:	180b883a 	mov	r5,r3
 8004c30:	8005d900 	call	8005d90 <__adddf3>
 8004c34:	003fee06 	br	8004bf0 <__ieee754_sqrt+0x1d8>
 8004c38:	280f883a 	mov	r7,r5
 8004c3c:	8007a440 	call	8007a44 <__subdf3>
 8004c40:	100d883a 	mov	r6,r2
 8004c44:	180f883a 	mov	r7,r3
 8004c48:	1009883a 	mov	r4,r2
 8004c4c:	180b883a 	mov	r5,r3
 8004c50:	80067080 	call	8006708 <__divdf3>
 8004c54:	003fe606 	br	8004bf0 <__ieee754_sqrt+0x1d8>
 8004c58:	2005883a 	mov	r2,r4
 8004c5c:	2807883a 	mov	r3,r5
 8004c60:	003fe306 	br	8004bf0 <__ieee754_sqrt+0x1d8>
 8004c64:	63000044 	addi	r12,r12,1
 8004c68:	003fd906 	br	8004bd0 <__ieee754_sqrt+0x1b8>
 8004c6c:	3009883a 	mov	r4,r6
 8004c70:	02000804 	movi	r8,32
 8004c74:	00ffffc4 	movi	r3,-1
 8004c78:	003fc506 	br	8004b90 <__ieee754_sqrt+0x178>

08004c7c <rint>:
 8004c7c:	2811d53a 	srai	r8,r5,20
 8004c80:	defff904 	addi	sp,sp,-28
 8004c84:	dc000215 	stw	r16,8(sp)
 8004c88:	4201ffcc 	andi	r8,r8,2047
 8004c8c:	427f0044 	addi	r9,r8,-1023
 8004c90:	dfc00615 	stw	ra,24(sp)
 8004c94:	dcc00515 	stw	r19,20(sp)
 8004c98:	dc800415 	stw	r18,16(sp)
 8004c9c:	dc400315 	stw	r17,12(sp)
 8004ca0:	4a800508 	cmpgei	r10,r9,20
 8004ca4:	2820d7fa 	srli	r16,r5,31
 8004ca8:	2817883a 	mov	r11,r5
 8004cac:	2005883a 	mov	r2,r4
 8004cb0:	280f883a 	mov	r7,r5
 8004cb4:	200d883a 	mov	r6,r4
 8004cb8:	5000241e 	bne	r10,zero,8004d4c <rint+0xd0>
 8004cbc:	48003d16 	blt	r9,zero,8004db4 <rint+0x138>
 8004cc0:	01000434 	movhi	r4,16
 8004cc4:	213fffc4 	addi	r4,r4,-1
 8004cc8:	2249d83a 	sra	r4,r4,r9
 8004ccc:	2906703a 	and	r3,r5,r4
 8004cd0:	1886b03a 	or	r3,r3,r2
 8004cd4:	18002126 	beq	r3,zero,8004d5c <rint+0xe0>
 8004cd8:	2008d07a 	srli	r4,r4,1
 8004cdc:	2904703a 	and	r2,r5,r4
 8004ce0:	308cb03a 	or	r6,r6,r2
 8004ce4:	30000826 	beq	r6,zero,8004d08 <rint+0x8c>
 8004ce8:	488004e0 	cmpeqi	r2,r9,19
 8004cec:	1000581e 	bne	r2,zero,8004e50 <rint+0x1d4>
 8004cf0:	000d883a 	mov	r6,zero
 8004cf4:	01c00134 	movhi	r7,4
 8004cf8:	3a47d83a 	sra	r3,r7,r9
 8004cfc:	0108303a 	nor	r4,zero,r4
 8004d00:	22c8703a 	and	r4,r4,r11
 8004d04:	20ceb03a 	or	r7,r4,r3
 8004d08:	800890fa 	slli	r4,r16,3
 8004d0c:	00820074 	movhi	r2,2049
 8004d10:	109f0f04 	addi	r2,r2,31804
 8004d14:	1105883a 	add	r2,r2,r4
 8004d18:	14400017 	ldw	r17,0(r2)
 8004d1c:	14000117 	ldw	r16,4(r2)
 8004d20:	8809883a 	mov	r4,r17
 8004d24:	800b883a 	mov	r5,r16
 8004d28:	8005d900 	call	8005d90 <__adddf3>
 8004d2c:	d8800015 	stw	r2,0(sp)
 8004d30:	d8c00115 	stw	r3,4(sp)
 8004d34:	d9000017 	ldw	r4,0(sp)
 8004d38:	d9400117 	ldw	r5,4(sp)
 8004d3c:	880d883a 	mov	r6,r17
 8004d40:	800f883a 	mov	r7,r16
 8004d44:	8007a440 	call	8007a44 <__subdf3>
 8004d48:	00000506 	br	8004d60 <rint+0xe4>
 8004d4c:	48c00d10 	cmplti	r3,r9,52
 8004d50:	18000a1e 	bne	r3,zero,8004d7c <rint+0x100>
 8004d54:	4a410018 	cmpnei	r9,r9,1024
 8004d58:	48003b26 	beq	r9,zero,8004e48 <rint+0x1cc>
 8004d5c:	3807883a 	mov	r3,r7
 8004d60:	dfc00617 	ldw	ra,24(sp)
 8004d64:	dcc00517 	ldw	r19,20(sp)
 8004d68:	dc800417 	ldw	r18,16(sp)
 8004d6c:	dc400317 	ldw	r17,12(sp)
 8004d70:	dc000217 	ldw	r16,8(sp)
 8004d74:	dec00704 	addi	sp,sp,28
 8004d78:	f800283a 	ret
 8004d7c:	423efb44 	addi	r8,r8,-1043
 8004d80:	00ffffc4 	movi	r3,-1
 8004d84:	1a06d83a 	srl	r3,r3,r8
 8004d88:	20c8703a 	and	r4,r4,r3
 8004d8c:	20000e26 	beq	r4,zero,8004dc8 <rint+0x14c>
 8004d90:	1806d07a 	srli	r3,r3,1
 8004d94:	10c4703a 	and	r2,r2,r3
 8004d98:	103fdb26 	beq	r2,zero,8004d08 <rint+0x8c>
 8004d9c:	00900034 	movhi	r2,16384
 8004da0:	1211d83a 	sra	r8,r2,r8
 8004da4:	00c6303a 	nor	r3,zero,r3
 8004da8:	1986703a 	and	r3,r3,r6
 8004dac:	1a0cb03a 	or	r6,r3,r8
 8004db0:	003fd506 	br	8004d08 <rint+0x8c>
 8004db4:	04600034 	movhi	r17,32768
 8004db8:	8c7fffc4 	addi	r17,r17,-1
 8004dbc:	2c46703a 	and	r3,r5,r17
 8004dc0:	1906b03a 	or	r3,r3,r4
 8004dc4:	1800021e 	bne	r3,zero,8004dd0 <rint+0x154>
 8004dc8:	5807883a 	mov	r3,r11
 8004dcc:	003fe406 	br	8004d60 <rint+0xe4>
 8004dd0:	00c00434 	movhi	r3,16
 8004dd4:	18ffffc4 	addi	r3,r3,-1
 8004dd8:	28c6703a 	and	r3,r5,r3
 8004ddc:	1906b03a 	or	r3,r3,r4
 8004de0:	800a90fa 	slli	r5,r16,3
 8004de4:	00d1c83a 	sub	r8,zero,r3
 8004de8:	01020074 	movhi	r4,2049
 8004dec:	40d0b03a 	or	r8,r8,r3
 8004df0:	211f0f04 	addi	r4,r4,31804
 8004df4:	2147883a 	add	r3,r4,r5
 8004df8:	4010d33a 	srli	r8,r8,12
 8004dfc:	1cc00017 	ldw	r19,0(r3)
 8004e00:	1c800117 	ldw	r18,4(r3)
 8004e04:	4200022c 	andhi	r8,r8,8
 8004e08:	59ffffac 	andhi	r7,r11,65534
 8004e0c:	41ceb03a 	or	r7,r8,r7
 8004e10:	9809883a 	mov	r4,r19
 8004e14:	900b883a 	mov	r5,r18
 8004e18:	8005d900 	call	8005d90 <__adddf3>
 8004e1c:	d8800015 	stw	r2,0(sp)
 8004e20:	d8c00115 	stw	r3,4(sp)
 8004e24:	d9000017 	ldw	r4,0(sp)
 8004e28:	d9400117 	ldw	r5,4(sp)
 8004e2c:	980d883a 	mov	r6,r19
 8004e30:	900f883a 	mov	r7,r18
 8004e34:	8007a440 	call	8007a44 <__subdf3>
 8004e38:	800897fa 	slli	r4,r16,31
 8004e3c:	1c46703a 	and	r3,r3,r17
 8004e40:	1906b03a 	or	r3,r3,r4
 8004e44:	003fc606 	br	8004d60 <rint+0xe4>
 8004e48:	8005d900 	call	8005d90 <__adddf3>
 8004e4c:	003fc406 	br	8004d60 <rint+0xe4>
 8004e50:	01a00034 	movhi	r6,32768
 8004e54:	003fa706 	br	8004cf4 <rint+0x78>

08004e58 <scalbn>:
 8004e58:	2807d53a 	srai	r3,r5,20
 8004e5c:	defffe04 	addi	sp,sp,-8
 8004e60:	dc000015 	stw	r16,0(sp)
 8004e64:	dfc00115 	stw	ra,4(sp)
 8004e68:	18c1ffcc 	andi	r3,r3,2047
 8004e6c:	280f883a 	mov	r7,r5
 8004e70:	2005883a 	mov	r2,r4
 8004e74:	3021883a 	mov	r16,r6
 8004e78:	1800241e 	bne	r3,zero,8004f0c <scalbn+0xb4>
 8004e7c:	00e00034 	movhi	r3,32768
 8004e80:	18ffffc4 	addi	r3,r3,-1
 8004e84:	28c6703a 	and	r3,r5,r3
 8004e88:	1906b03a 	or	r3,r3,r4
 8004e8c:	18003626 	beq	r3,zero,8004f68 <scalbn+0x110>
 8004e90:	000d883a 	mov	r6,zero
 8004e94:	01d0d434 	movhi	r7,17232
 8004e98:	800729c0 	call	800729c <__muldf3>
 8004e9c:	01bffff4 	movhi	r6,65535
 8004ea0:	318f2c04 	addi	r6,r6,15536
 8004ea4:	1009883a 	mov	r4,r2
 8004ea8:	180f883a 	mov	r7,r3
 8004eac:	81804d16 	blt	r16,r6,8004fe4 <scalbn+0x18c>
 8004eb0:	1807d53a 	srai	r3,r3,20
 8004eb4:	3811883a 	mov	r8,r7
 8004eb8:	18c1ffcc 	andi	r3,r3,2047
 8004ebc:	18fff284 	addi	r3,r3,-54
 8004ec0:	80c7883a 	add	r3,r16,r3
 8004ec4:	1901ffd0 	cmplti	r4,r3,2047
 8004ec8:	20001926 	beq	r4,zero,8004f30 <scalbn+0xd8>
 8004ecc:	00c03c16 	blt	zero,r3,8004fc0 <scalbn+0x168>
 8004ed0:	193ff2c8 	cmpgei	r4,r3,-53
 8004ed4:	20002c1e 	bne	r4,zero,8004f88 <scalbn+0x130>
 8004ed8:	00b0d414 	movui	r2,50000
 8004edc:	14001416 	blt	r2,r16,8004f30 <scalbn+0xd8>
 8004ee0:	0130be74 	movhi	r4,49913
 8004ee4:	01406974 	movhi	r5,421
 8004ee8:	213cd644 	addi	r4,r4,-3239
 8004eec:	295b87c4 	addi	r5,r5,28191
 8004ef0:	38004616 	blt	r7,zero,800500c <scalbn+0x1b4>
 8004ef4:	01b0be74 	movhi	r6,49913
 8004ef8:	01c06974 	movhi	r7,421
 8004efc:	31bcd644 	addi	r6,r6,-3239
 8004f00:	39db87c4 	addi	r7,r7,28191
 8004f04:	800729c0 	call	800729c <__muldf3>
 8004f08:	00001306 	br	8004f58 <scalbn+0x100>
 8004f0c:	1981ffd8 	cmpnei	r6,r3,2047
 8004f10:	2811883a 	mov	r8,r5
 8004f14:	303fea1e 	bne	r6,zero,8004ec0 <scalbn+0x68>
 8004f18:	200d883a 	mov	r6,r4
 8004f1c:	8005d900 	call	8005d90 <__adddf3>
 8004f20:	dfc00117 	ldw	ra,4(sp)
 8004f24:	dc000017 	ldw	r16,0(sp)
 8004f28:	dec00204 	addi	sp,sp,8
 8004f2c:	f800283a 	ret
 8004f30:	01220034 	movhi	r4,34816
 8004f34:	015f8e34 	movhi	r5,32312
 8004f38:	211d6704 	addi	r4,r4,30108
 8004f3c:	29790f04 	addi	r5,r5,-7108
 8004f40:	38000e16 	blt	r7,zero,8004f7c <scalbn+0x124>
 8004f44:	01a20034 	movhi	r6,34816
 8004f48:	01df8e34 	movhi	r7,32312
 8004f4c:	319d6704 	addi	r6,r6,30108
 8004f50:	39f90f04 	addi	r7,r7,-7108
 8004f54:	800729c0 	call	800729c <__muldf3>
 8004f58:	dfc00117 	ldw	ra,4(sp)
 8004f5c:	dc000017 	ldw	r16,0(sp)
 8004f60:	dec00204 	addi	sp,sp,8
 8004f64:	f800283a 	ret
 8004f68:	2807883a 	mov	r3,r5
 8004f6c:	dfc00117 	ldw	ra,4(sp)
 8004f70:	dc000017 	ldw	r16,0(sp)
 8004f74:	dec00204 	addi	sp,sp,8
 8004f78:	f800283a 	ret
 8004f7c:	017f8e34 	movhi	r5,65080
 8004f80:	29790f04 	addi	r5,r5,-7108
 8004f84:	003fef06 	br	8004f44 <scalbn+0xec>
 8004f88:	18c00d84 	addi	r3,r3,54
 8004f8c:	1806953a 	slli	r3,r3,20
 8004f90:	01600434 	movhi	r5,32784
 8004f94:	297fffc4 	addi	r5,r5,-1
 8004f98:	414a703a 	and	r5,r8,r5
 8004f9c:	000d883a 	mov	r6,zero
 8004fa0:	01cf2434 	movhi	r7,15504
 8004fa4:	1009883a 	mov	r4,r2
 8004fa8:	194ab03a 	or	r5,r3,r5
 8004fac:	800729c0 	call	800729c <__muldf3>
 8004fb0:	dfc00117 	ldw	ra,4(sp)
 8004fb4:	dc000017 	ldw	r16,0(sp)
 8004fb8:	dec00204 	addi	sp,sp,8
 8004fbc:	f800283a 	ret
 8004fc0:	1806953a 	slli	r3,r3,20
 8004fc4:	01e00434 	movhi	r7,32784
 8004fc8:	39ffffc4 	addi	r7,r7,-1
 8004fcc:	41ce703a 	and	r7,r8,r7
 8004fd0:	38c6b03a 	or	r3,r7,r3
 8004fd4:	dfc00117 	ldw	ra,4(sp)
 8004fd8:	dc000017 	ldw	r16,0(sp)
 8004fdc:	dec00204 	addi	sp,sp,8
 8004fe0:	f800283a 	ret
 8004fe4:	01b0be74 	movhi	r6,49913
 8004fe8:	01c06974 	movhi	r7,421
 8004fec:	31bcd644 	addi	r6,r6,-3239
 8004ff0:	39db87c4 	addi	r7,r7,28191
 8004ff4:	180b883a 	mov	r5,r3
 8004ff8:	800729c0 	call	800729c <__muldf3>
 8004ffc:	dfc00117 	ldw	ra,4(sp)
 8005000:	dc000017 	ldw	r16,0(sp)
 8005004:	dec00204 	addi	sp,sp,8
 8005008:	f800283a 	ret
 800500c:	01606974 	movhi	r5,33189
 8005010:	295b87c4 	addi	r5,r5,28191
 8005014:	003fb706 	br	8004ef4 <scalbn+0x9c>

08005018 <__fixunssfsi>:
 8005018:	defffe04 	addi	sp,sp,-8
 800501c:	0153c034 	movhi	r5,20224
 8005020:	dc000015 	stw	r16,0(sp)
 8005024:	dfc00115 	stw	ra,4(sp)
 8005028:	2021883a 	mov	r16,r4
 800502c:	80052e40 	call	80052e4 <__gesf2>
 8005030:	1000060e 	bge	r2,zero,800504c <__fixunssfsi+0x34>
 8005034:	8009883a 	mov	r4,r16
 8005038:	8005c280 	call	8005c28 <__fixsfsi>
 800503c:	dfc00117 	ldw	ra,4(sp)
 8005040:	dc000017 	ldw	r16,0(sp)
 8005044:	dec00204 	addi	sp,sp,8
 8005048:	f800283a 	ret
 800504c:	0153c034 	movhi	r5,20224
 8005050:	8009883a 	mov	r4,r16
 8005054:	80057a40 	call	80057a4 <__subsf3>
 8005058:	1009883a 	mov	r4,r2
 800505c:	8005c280 	call	8005c28 <__fixsfsi>
 8005060:	00e00034 	movhi	r3,32768
 8005064:	10c5883a 	add	r2,r2,r3
 8005068:	dfc00117 	ldw	ra,4(sp)
 800506c:	dc000017 	ldw	r16,0(sp)
 8005070:	dec00204 	addi	sp,sp,8
 8005074:	f800283a 	ret

08005078 <__fixunsdfdi>:
 8005078:	defffc04 	addi	sp,sp,-16
 800507c:	000d883a 	mov	r6,zero
 8005080:	01cf7c34 	movhi	r7,15856
 8005084:	dfc00315 	stw	ra,12(sp)
 8005088:	dc800215 	stw	r18,8(sp)
 800508c:	dc400115 	stw	r17,4(sp)
 8005090:	dc000015 	stw	r16,0(sp)
 8005094:	2025883a 	mov	r18,r4
 8005098:	2823883a 	mov	r17,r5
 800509c:	800729c0 	call	800729c <__muldf3>
 80050a0:	180b883a 	mov	r5,r3
 80050a4:	1009883a 	mov	r4,r2
 80050a8:	800856c0 	call	800856c <__fixunsdfsi>
 80050ac:	1009883a 	mov	r4,r2
 80050b0:	1021883a 	mov	r16,r2
 80050b4:	80084880 	call	8008488 <__floatunsidf>
 80050b8:	000d883a 	mov	r6,zero
 80050bc:	01d07c34 	movhi	r7,16880
 80050c0:	1009883a 	mov	r4,r2
 80050c4:	180b883a 	mov	r5,r3
 80050c8:	800729c0 	call	800729c <__muldf3>
 80050cc:	100d883a 	mov	r6,r2
 80050d0:	180f883a 	mov	r7,r3
 80050d4:	9009883a 	mov	r4,r18
 80050d8:	880b883a 	mov	r5,r17
 80050dc:	8007a440 	call	8007a44 <__subdf3>
 80050e0:	180b883a 	mov	r5,r3
 80050e4:	1009883a 	mov	r4,r2
 80050e8:	800856c0 	call	800856c <__fixunsdfsi>
 80050ec:	8007883a 	mov	r3,r16
 80050f0:	dfc00317 	ldw	ra,12(sp)
 80050f4:	dc800217 	ldw	r18,8(sp)
 80050f8:	dc400117 	ldw	r17,4(sp)
 80050fc:	dc000017 	ldw	r16,0(sp)
 8005100:	dec00404 	addi	sp,sp,16
 8005104:	f800283a 	ret

08005108 <__divsi3>:
 8005108:	20001a16 	blt	r4,zero,8005174 <__divsi3+0x6c>
 800510c:	000f883a 	mov	r7,zero
 8005110:	2800020e 	bge	r5,zero,800511c <__divsi3+0x14>
 8005114:	014bc83a 	sub	r5,zero,r5
 8005118:	39c0005c 	xori	r7,r7,1
 800511c:	200d883a 	mov	r6,r4
 8005120:	00c00044 	movi	r3,1
 8005124:	2900092e 	bgeu	r5,r4,800514c <__divsi3+0x44>
 8005128:	00800804 	movi	r2,32
 800512c:	00c00044 	movi	r3,1
 8005130:	00000106 	br	8005138 <__divsi3+0x30>
 8005134:	10001226 	beq	r2,zero,8005180 <__divsi3+0x78>
 8005138:	294b883a 	add	r5,r5,r5
 800513c:	10bfffc4 	addi	r2,r2,-1
 8005140:	18c7883a 	add	r3,r3,r3
 8005144:	293ffb36 	bltu	r5,r4,8005134 <__divsi3+0x2c>
 8005148:	18000d26 	beq	r3,zero,8005180 <__divsi3+0x78>
 800514c:	0005883a 	mov	r2,zero
 8005150:	31400236 	bltu	r6,r5,800515c <__divsi3+0x54>
 8005154:	314dc83a 	sub	r6,r6,r5
 8005158:	10c4b03a 	or	r2,r2,r3
 800515c:	1806d07a 	srli	r3,r3,1
 8005160:	280ad07a 	srli	r5,r5,1
 8005164:	183ffa1e 	bne	r3,zero,8005150 <__divsi3+0x48>
 8005168:	38000126 	beq	r7,zero,8005170 <__divsi3+0x68>
 800516c:	0085c83a 	sub	r2,zero,r2
 8005170:	f800283a 	ret
 8005174:	0109c83a 	sub	r4,zero,r4
 8005178:	01c00044 	movi	r7,1
 800517c:	003fe406 	br	8005110 <__divsi3+0x8>
 8005180:	0005883a 	mov	r2,zero
 8005184:	003ff806 	br	8005168 <__divsi3+0x60>

08005188 <__modsi3>:
 8005188:	20001916 	blt	r4,zero,80051f0 <__modsi3+0x68>
 800518c:	000f883a 	mov	r7,zero
 8005190:	2005883a 	mov	r2,r4
 8005194:	2800010e 	bge	r5,zero,800519c <__modsi3+0x14>
 8005198:	014bc83a 	sub	r5,zero,r5
 800519c:	00c00044 	movi	r3,1
 80051a0:	2900092e 	bgeu	r5,r4,80051c8 <__modsi3+0x40>
 80051a4:	01800804 	movi	r6,32
 80051a8:	00c00044 	movi	r3,1
 80051ac:	00000106 	br	80051b4 <__modsi3+0x2c>
 80051b0:	30000d26 	beq	r6,zero,80051e8 <__modsi3+0x60>
 80051b4:	294b883a 	add	r5,r5,r5
 80051b8:	31bfffc4 	addi	r6,r6,-1
 80051bc:	18c7883a 	add	r3,r3,r3
 80051c0:	293ffb36 	bltu	r5,r4,80051b0 <__modsi3+0x28>
 80051c4:	18000826 	beq	r3,zero,80051e8 <__modsi3+0x60>
 80051c8:	1806d07a 	srli	r3,r3,1
 80051cc:	11400136 	bltu	r2,r5,80051d4 <__modsi3+0x4c>
 80051d0:	1145c83a 	sub	r2,r2,r5
 80051d4:	280ad07a 	srli	r5,r5,1
 80051d8:	183ffb1e 	bne	r3,zero,80051c8 <__modsi3+0x40>
 80051dc:	38000126 	beq	r7,zero,80051e4 <__modsi3+0x5c>
 80051e0:	0085c83a 	sub	r2,zero,r2
 80051e4:	f800283a 	ret
 80051e8:	2005883a 	mov	r2,r4
 80051ec:	003ffb06 	br	80051dc <__modsi3+0x54>
 80051f0:	0109c83a 	sub	r4,zero,r4
 80051f4:	01c00044 	movi	r7,1
 80051f8:	003fe506 	br	8005190 <__modsi3+0x8>

080051fc <__udivsi3>:
 80051fc:	200d883a 	mov	r6,r4
 8005200:	2900152e 	bgeu	r5,r4,8005258 <__udivsi3+0x5c>
 8005204:	28001416 	blt	r5,zero,8005258 <__udivsi3+0x5c>
 8005208:	00800804 	movi	r2,32
 800520c:	00c00044 	movi	r3,1
 8005210:	00000206 	br	800521c <__udivsi3+0x20>
 8005214:	10000e26 	beq	r2,zero,8005250 <__udivsi3+0x54>
 8005218:	28000516 	blt	r5,zero,8005230 <__udivsi3+0x34>
 800521c:	294b883a 	add	r5,r5,r5
 8005220:	10bfffc4 	addi	r2,r2,-1
 8005224:	18c7883a 	add	r3,r3,r3
 8005228:	293ffa36 	bltu	r5,r4,8005214 <__udivsi3+0x18>
 800522c:	18000826 	beq	r3,zero,8005250 <__udivsi3+0x54>
 8005230:	0005883a 	mov	r2,zero
 8005234:	31400236 	bltu	r6,r5,8005240 <__udivsi3+0x44>
 8005238:	314dc83a 	sub	r6,r6,r5
 800523c:	10c4b03a 	or	r2,r2,r3
 8005240:	1806d07a 	srli	r3,r3,1
 8005244:	280ad07a 	srli	r5,r5,1
 8005248:	183ffa1e 	bne	r3,zero,8005234 <__udivsi3+0x38>
 800524c:	f800283a 	ret
 8005250:	0005883a 	mov	r2,zero
 8005254:	f800283a 	ret
 8005258:	00c00044 	movi	r3,1
 800525c:	003ff406 	br	8005230 <__udivsi3+0x34>

08005260 <__umodsi3>:
 8005260:	2005883a 	mov	r2,r4
 8005264:	2900132e 	bgeu	r5,r4,80052b4 <__umodsi3+0x54>
 8005268:	28001216 	blt	r5,zero,80052b4 <__umodsi3+0x54>
 800526c:	01800804 	movi	r6,32
 8005270:	00c00044 	movi	r3,1
 8005274:	00000206 	br	8005280 <__umodsi3+0x20>
 8005278:	30000c26 	beq	r6,zero,80052ac <__umodsi3+0x4c>
 800527c:	28000516 	blt	r5,zero,8005294 <__umodsi3+0x34>
 8005280:	294b883a 	add	r5,r5,r5
 8005284:	31bfffc4 	addi	r6,r6,-1
 8005288:	18c7883a 	add	r3,r3,r3
 800528c:	293ffa36 	bltu	r5,r4,8005278 <__umodsi3+0x18>
 8005290:	18000626 	beq	r3,zero,80052ac <__umodsi3+0x4c>
 8005294:	1806d07a 	srli	r3,r3,1
 8005298:	11400136 	bltu	r2,r5,80052a0 <__umodsi3+0x40>
 800529c:	1145c83a 	sub	r2,r2,r5
 80052a0:	280ad07a 	srli	r5,r5,1
 80052a4:	183ffb1e 	bne	r3,zero,8005294 <__umodsi3+0x34>
 80052a8:	f800283a 	ret
 80052ac:	2005883a 	mov	r2,r4
 80052b0:	f800283a 	ret
 80052b4:	00c00044 	movi	r3,1
 80052b8:	003ff606 	br	8005294 <__umodsi3+0x34>

080052bc <__mulsi3>:
 80052bc:	0005883a 	mov	r2,zero
 80052c0:	20000726 	beq	r4,zero,80052e0 <__mulsi3+0x24>
 80052c4:	20c0004c 	andi	r3,r4,1
 80052c8:	2008d07a 	srli	r4,r4,1
 80052cc:	18000126 	beq	r3,zero,80052d4 <__mulsi3+0x18>
 80052d0:	1145883a 	add	r2,r2,r5
 80052d4:	294b883a 	add	r5,r5,r5
 80052d8:	203ffa1e 	bne	r4,zero,80052c4 <__mulsi3+0x8>
 80052dc:	f800283a 	ret
 80052e0:	f800283a 	ret

080052e4 <__gesf2>:
 80052e4:	200cd5fa 	srli	r6,r4,23
 80052e8:	00c02034 	movhi	r3,128
 80052ec:	18ffffc4 	addi	r3,r3,-1
 80052f0:	31803fcc 	andi	r6,r6,255
 80052f4:	32003fd8 	cmpnei	r8,r6,255
 80052f8:	2012d7fa 	srli	r9,r4,31
 80052fc:	280ed5fa 	srli	r7,r5,23
 8005300:	1908703a 	and	r4,r3,r4
 8005304:	2804d7fa 	srli	r2,r5,31
 8005308:	1946703a 	and	r3,r3,r5
 800530c:	40000a26 	beq	r8,zero,8005338 <__gesf2+0x54>
 8005310:	39403fcc 	andi	r5,r7,255
 8005314:	29c03fd8 	cmpnei	r7,r5,255
 8005318:	38000b26 	beq	r7,zero,8005348 <__gesf2+0x64>
 800531c:	3000151e 	bne	r6,zero,8005374 <__gesf2+0x90>
 8005320:	200f003a 	cmpeq	r7,r4,zero
 8005324:	2800101e 	bne	r5,zero,8005368 <__gesf2+0x84>
 8005328:	18000f1e 	bne	r3,zero,8005368 <__gesf2+0x84>
 800532c:	2000091e 	bne	r4,zero,8005354 <__gesf2+0x70>
 8005330:	0005883a 	mov	r2,zero
 8005334:	f800283a 	ret
 8005338:	2000191e 	bne	r4,zero,80053a0 <__gesf2+0xbc>
 800533c:	39403fcc 	andi	r5,r7,255
 8005340:	29c03fe0 	cmpeqi	r7,r5,255
 8005344:	38000b26 	beq	r7,zero,8005374 <__gesf2+0x90>
 8005348:	1800151e 	bne	r3,zero,80053a0 <__gesf2+0xbc>
 800534c:	30000526 	beq	r6,zero,8005364 <__gesf2+0x80>
 8005350:	48800b26 	beq	r9,r2,8005380 <__gesf2+0x9c>
 8005354:	00800044 	movi	r2,1
 8005358:	48000526 	beq	r9,zero,8005370 <__gesf2+0x8c>
 800535c:	00bfffc4 	movi	r2,-1
 8005360:	f800283a 	ret
 8005364:	200f003a 	cmpeq	r7,r4,zero
 8005368:	383ff926 	beq	r7,zero,8005350 <__gesf2+0x6c>
 800536c:	103ffb26 	beq	r2,zero,800535c <__gesf2+0x78>
 8005370:	f800283a 	ret
 8005374:	283ff61e 	bne	r5,zero,8005350 <__gesf2+0x6c>
 8005378:	183ff51e 	bne	r3,zero,8005350 <__gesf2+0x6c>
 800537c:	003ff506 	br	8005354 <__gesf2+0x70>
 8005380:	29800416 	blt	r5,r6,8005394 <__gesf2+0xb0>
 8005384:	317ff916 	blt	r6,r5,800536c <__gesf2+0x88>
 8005388:	19000236 	bltu	r3,r4,8005394 <__gesf2+0xb0>
 800538c:	20ffe82e 	bgeu	r4,r3,8005330 <__gesf2+0x4c>
 8005390:	003ff606 	br	800536c <__gesf2+0x88>
 8005394:	103ff11e 	bne	r2,zero,800535c <__gesf2+0x78>
 8005398:	00800044 	movi	r2,1
 800539c:	f800283a 	ret
 80053a0:	00bfff84 	movi	r2,-2
 80053a4:	f800283a 	ret

080053a8 <__mulsf3>:
 80053a8:	defff504 	addi	sp,sp,-44
 80053ac:	dc400215 	stw	r17,8(sp)
 80053b0:	2022d5fa 	srli	r17,r4,23
 80053b4:	dc000115 	stw	r16,4(sp)
 80053b8:	04002034 	movhi	r16,128
 80053bc:	dd800715 	stw	r22,28(sp)
 80053c0:	843fffc4 	addi	r16,r16,-1
 80053c4:	dfc00a15 	stw	ra,40(sp)
 80053c8:	df000915 	stw	fp,36(sp)
 80053cc:	ddc00815 	stw	r23,32(sp)
 80053d0:	dd400615 	stw	r21,24(sp)
 80053d4:	dd000515 	stw	r20,20(sp)
 80053d8:	dcc00415 	stw	r19,16(sp)
 80053dc:	dc800315 	stw	r18,12(sp)
 80053e0:	8c403fcc 	andi	r17,r17,255
 80053e4:	202cd7fa 	srli	r22,r4,31
 80053e8:	8120703a 	and	r16,r16,r4
 80053ec:	88005026 	beq	r17,zero,8005530 <__mulsf3+0x188>
 80053f0:	88803fe0 	cmpeqi	r2,r17,255
 80053f4:	1000531e 	bne	r2,zero,8005544 <__mulsf3+0x19c>
 80053f8:	802090fa 	slli	r16,r16,3
 80053fc:	8c7fe044 	addi	r17,r17,-127
 8005400:	0025883a 	mov	r18,zero
 8005404:	84010034 	orhi	r16,r16,1024
 8005408:	0029883a 	mov	r20,zero
 800540c:	2804d5fa 	srli	r2,r5,23
 8005410:	01002034 	movhi	r4,128
 8005414:	213fffc4 	addi	r4,r4,-1
 8005418:	10803fcc 	andi	r2,r2,255
 800541c:	282ed7fa 	srli	r23,r5,31
 8005420:	2166703a 	and	r19,r4,r5
 8005424:	10004c26 	beq	r2,zero,8005558 <__mulsf3+0x1b0>
 8005428:	10c03fe0 	cmpeqi	r3,r2,255
 800542c:	18001e1e 	bne	r3,zero,80054a8 <__mulsf3+0x100>
 8005430:	980890fa 	slli	r4,r19,3
 8005434:	10bfe044 	addi	r2,r2,-127
 8005438:	88a3883a 	add	r17,r17,r2
 800543c:	24c10034 	orhi	r19,r4,1024
 8005440:	0007883a 	mov	r3,zero
 8005444:	90800428 	cmpgeui	r2,r18,16
 8005448:	b5eaf03a 	xor	r21,r22,r23
 800544c:	8f000044 	addi	fp,r17,1
 8005450:	1000481e 	bne	r2,zero,8005574 <__mulsf3+0x1cc>
 8005454:	902490ba 	slli	r18,r18,2
 8005458:	00820034 	movhi	r2,2048
 800545c:	9085883a 	add	r2,r18,r2
 8005460:	10951a17 	ldw	r2,21608(r2)
 8005464:	1000683a 	jmp	r2
 8005468:	08005574 	orhi	zero,at,341
 800546c:	080054c0 	call	80054c <__alt_mem_onchip_memory2_0+0x80054c>
 8005470:	080054c0 	call	80054c <__alt_mem_onchip_memory2_0+0x80054c>
 8005474:	080054bc 	xorhi	zero,at,338
 8005478:	080054c8 	cmpgei	zero,at,339
 800547c:	080054c8 	cmpgei	zero,at,339
 8005480:	080056d4 	ori	zero,at,347
 8005484:	080054bc 	xorhi	zero,at,338
 8005488:	080054c8 	cmpgei	zero,at,339
 800548c:	080056d4 	ori	zero,at,347
 8005490:	080054c8 	cmpgei	zero,at,339
 8005494:	080054bc 	xorhi	zero,at,338
 8005498:	08005664 	muli	zero,at,345
 800549c:	08005664 	muli	zero,at,345
 80054a0:	08005664 	muli	zero,at,345
 80054a4:	08005738 	rdprs	zero,at,348
 80054a8:	8c403fc4 	addi	r17,r17,255
 80054ac:	98006f1e 	bne	r19,zero,800566c <__mulsf3+0x2c4>
 80054b0:	94800094 	ori	r18,r18,2
 80054b4:	00c00084 	movi	r3,2
 80054b8:	003fe206 	br	8005444 <__mulsf3+0x9c>
 80054bc:	b82b883a 	mov	r21,r23
 80054c0:	9821883a 	mov	r16,r19
 80054c4:	1829883a 	mov	r20,r3
 80054c8:	a08000a0 	cmpeqi	r2,r20,2
 80054cc:	1000261e 	bne	r2,zero,8005568 <__mulsf3+0x1c0>
 80054d0:	a08000e0 	cmpeqi	r2,r20,3
 80054d4:	1000ae1e 	bne	r2,zero,8005790 <__mulsf3+0x3e8>
 80054d8:	a0800060 	cmpeqi	r2,r20,1
 80054dc:	10004e26 	beq	r2,zero,8005618 <__mulsf3+0x270>
 80054e0:	0007883a 	mov	r3,zero
 80054e4:	0009883a 	mov	r4,zero
 80054e8:	1c003fcc 	andi	r16,r3,255
 80054ec:	a8803fcc 	andi	r2,r21,255
 80054f0:	802095fa 	slli	r16,r16,23
 80054f4:	100497fa 	slli	r2,r2,31
 80054f8:	8120b03a 	or	r16,r16,r4
 80054fc:	8084b03a 	or	r2,r16,r2
 8005500:	dfc00a17 	ldw	ra,40(sp)
 8005504:	df000917 	ldw	fp,36(sp)
 8005508:	ddc00817 	ldw	r23,32(sp)
 800550c:	dd800717 	ldw	r22,28(sp)
 8005510:	dd400617 	ldw	r21,24(sp)
 8005514:	dd000517 	ldw	r20,20(sp)
 8005518:	dcc00417 	ldw	r19,16(sp)
 800551c:	dc800317 	ldw	r18,12(sp)
 8005520:	dc400217 	ldw	r17,8(sp)
 8005524:	dc000117 	ldw	r16,4(sp)
 8005528:	dec00b04 	addi	sp,sp,44
 800552c:	f800283a 	ret
 8005530:	80005d1e 	bne	r16,zero,80056a8 <__mulsf3+0x300>
 8005534:	04800104 	movi	r18,4
 8005538:	0023883a 	mov	r17,zero
 800553c:	05000044 	movi	r20,1
 8005540:	003fb206 	br	800540c <__mulsf3+0x64>
 8005544:	8000541e 	bne	r16,zero,8005698 <__mulsf3+0x2f0>
 8005548:	04800204 	movi	r18,8
 800554c:	04403fc4 	movi	r17,255
 8005550:	05000084 	movi	r20,2
 8005554:	003fad06 	br	800540c <__mulsf3+0x64>
 8005558:	9800471e 	bne	r19,zero,8005678 <__mulsf3+0x2d0>
 800555c:	94800054 	ori	r18,r18,1
 8005560:	00c00044 	movi	r3,1
 8005564:	003fb706 	br	8005444 <__mulsf3+0x9c>
 8005568:	00ffffc4 	movi	r3,-1
 800556c:	0009883a 	mov	r4,zero
 8005570:	003fdd06 	br	80054e8 <__mulsf3+0x140>
 8005574:	8028d43a 	srli	r20,r16,16
 8005578:	9cbfffcc 	andi	r18,r19,65535
 800557c:	843fffcc 	andi	r16,r16,65535
 8005580:	900b883a 	mov	r5,r18
 8005584:	8009883a 	mov	r4,r16
 8005588:	80052bc0 	call	80052bc <__mulsi3>
 800558c:	9826d43a 	srli	r19,r19,16
 8005590:	900b883a 	mov	r5,r18
 8005594:	a009883a 	mov	r4,r20
 8005598:	1025883a 	mov	r18,r2
 800559c:	80052bc0 	call	80052bc <__mulsi3>
 80055a0:	980b883a 	mov	r5,r19
 80055a4:	a009883a 	mov	r4,r20
 80055a8:	1029883a 	mov	r20,r2
 80055ac:	80052bc0 	call	80052bc <__mulsi3>
 80055b0:	9809883a 	mov	r4,r19
 80055b4:	800b883a 	mov	r5,r16
 80055b8:	1027883a 	mov	r19,r2
 80055bc:	80052bc0 	call	80052bc <__mulsi3>
 80055c0:	9006d43a 	srli	r3,r18,16
 80055c4:	1505883a 	add	r2,r2,r20
 80055c8:	1887883a 	add	r3,r3,r2
 80055cc:	1d00022e 	bgeu	r3,r20,80055d8 <__mulsf3+0x230>
 80055d0:	00800074 	movhi	r2,1
 80055d4:	98a7883a 	add	r19,r19,r2
 80055d8:	1808943a 	slli	r4,r3,16
 80055dc:	1820d43a 	srli	r16,r3,16
 80055e0:	94bfffcc 	andi	r18,r18,65535
 80055e4:	2489883a 	add	r4,r4,r18
 80055e8:	200a91ba 	slli	r5,r4,6
 80055ec:	84e1883a 	add	r16,r16,r19
 80055f0:	802091ba 	slli	r16,r16,6
 80055f4:	2008d6ba 	srli	r4,r4,26
 80055f8:	2804c03a 	cmpne	r2,r5,zero
 80055fc:	80c2002c 	andhi	r3,r16,2048
 8005600:	1108b03a 	or	r4,r2,r4
 8005604:	8120b03a 	or	r16,r16,r4
 8005608:	18005b26 	beq	r3,zero,8005778 <__mulsf3+0x3d0>
 800560c:	8004d07a 	srli	r2,r16,1
 8005610:	8400004c 	andi	r16,r16,1
 8005614:	1420b03a 	or	r16,r2,r16
 8005618:	e0c01fc4 	addi	r3,fp,127
 800561c:	00c0320e 	bge	zero,r3,80056e8 <__mulsf3+0x340>
 8005620:	808001cc 	andi	r2,r16,7
 8005624:	10000426 	beq	r2,zero,8005638 <__mulsf3+0x290>
 8005628:	808003cc 	andi	r2,r16,15
 800562c:	10800120 	cmpeqi	r2,r2,4
 8005630:	1000011e 	bne	r2,zero,8005638 <__mulsf3+0x290>
 8005634:	84000104 	addi	r16,r16,4
 8005638:	8082002c 	andhi	r2,r16,2048
 800563c:	10000426 	beq	r2,zero,8005650 <__mulsf3+0x2a8>
 8005640:	00be0034 	movhi	r2,63488
 8005644:	10bfffc4 	addi	r2,r2,-1
 8005648:	80a0703a 	and	r16,r16,r2
 800564c:	e0c02004 	addi	r3,fp,128
 8005650:	18803fc8 	cmpgei	r2,r3,255
 8005654:	103fc41e 	bne	r2,zero,8005568 <__mulsf3+0x1c0>
 8005658:	802091ba 	slli	r16,r16,6
 800565c:	8008d27a 	srli	r4,r16,9
 8005660:	003fa106 	br	80054e8 <__mulsf3+0x140>
 8005664:	b02b883a 	mov	r21,r22
 8005668:	003f9706 	br	80054c8 <__mulsf3+0x120>
 800566c:	948000d4 	ori	r18,r18,3
 8005670:	00c000c4 	movi	r3,3
 8005674:	003f7306 	br	8005444 <__mulsf3+0x9c>
 8005678:	9809883a 	mov	r4,r19
 800567c:	80085180 	call	8008518 <__clzsi2>
 8005680:	10fffec4 	addi	r3,r2,-5
 8005684:	88a3c83a 	sub	r17,r17,r2
 8005688:	98e6983a 	sll	r19,r19,r3
 800568c:	8c7fe284 	addi	r17,r17,-118
 8005690:	0007883a 	mov	r3,zero
 8005694:	003f6b06 	br	8005444 <__mulsf3+0x9c>
 8005698:	04800304 	movi	r18,12
 800569c:	04403fc4 	movi	r17,255
 80056a0:	050000c4 	movi	r20,3
 80056a4:	003f5906 	br	800540c <__mulsf3+0x64>
 80056a8:	8009883a 	mov	r4,r16
 80056ac:	d9400015 	stw	r5,0(sp)
 80056b0:	80085180 	call	8008518 <__clzsi2>
 80056b4:	10fffec4 	addi	r3,r2,-5
 80056b8:	047fe284 	movi	r17,-118
 80056bc:	80e0983a 	sll	r16,r16,r3
 80056c0:	d9400017 	ldw	r5,0(sp)
 80056c4:	88a3c83a 	sub	r17,r17,r2
 80056c8:	0025883a 	mov	r18,zero
 80056cc:	0029883a 	mov	r20,zero
 80056d0:	003f4e06 	br	800540c <__mulsf3+0x64>
 80056d4:	01002034 	movhi	r4,128
 80056d8:	002b883a 	mov	r21,zero
 80056dc:	213fffc4 	addi	r4,r4,-1
 80056e0:	00ffffc4 	movi	r3,-1
 80056e4:	003f8006 	br	80054e8 <__mulsf3+0x140>
 80056e8:	00800044 	movi	r2,1
 80056ec:	10c7c83a 	sub	r3,r2,r3
 80056f0:	18800708 	cmpgei	r2,r3,28
 80056f4:	103f7a1e 	bne	r2,zero,80054e0 <__mulsf3+0x138>
 80056f8:	e1002784 	addi	r4,fp,158
 80056fc:	8108983a 	sll	r4,r16,r4
 8005700:	80e0d83a 	srl	r16,r16,r3
 8005704:	2008c03a 	cmpne	r4,r4,zero
 8005708:	8120b03a 	or	r16,r16,r4
 800570c:	808001cc 	andi	r2,r16,7
 8005710:	10000426 	beq	r2,zero,8005724 <__mulsf3+0x37c>
 8005714:	808003cc 	andi	r2,r16,15
 8005718:	10800120 	cmpeqi	r2,r2,4
 800571c:	1000011e 	bne	r2,zero,8005724 <__mulsf3+0x37c>
 8005720:	84000104 	addi	r16,r16,4
 8005724:	8081002c 	andhi	r2,r16,1024
 8005728:	10001526 	beq	r2,zero,8005780 <__mulsf3+0x3d8>
 800572c:	00c00044 	movi	r3,1
 8005730:	0009883a 	mov	r4,zero
 8005734:	003f6c06 	br	80054e8 <__mulsf3+0x140>
 8005738:	8080102c 	andhi	r2,r16,64
 800573c:	10000826 	beq	r2,zero,8005760 <__mulsf3+0x3b8>
 8005740:	9880102c 	andhi	r2,r19,64
 8005744:	1000061e 	bne	r2,zero,8005760 <__mulsf3+0x3b8>
 8005748:	00802034 	movhi	r2,128
 800574c:	99001034 	orhi	r4,r19,64
 8005750:	10bfffc4 	addi	r2,r2,-1
 8005754:	2088703a 	and	r4,r4,r2
 8005758:	b82b883a 	mov	r21,r23
 800575c:	003fe006 	br	80056e0 <__mulsf3+0x338>
 8005760:	00802034 	movhi	r2,128
 8005764:	81001034 	orhi	r4,r16,64
 8005768:	10bfffc4 	addi	r2,r2,-1
 800576c:	2088703a 	and	r4,r4,r2
 8005770:	b02b883a 	mov	r21,r22
 8005774:	003fda06 	br	80056e0 <__mulsf3+0x338>
 8005778:	8839883a 	mov	fp,r17
 800577c:	003fa606 	br	8005618 <__mulsf3+0x270>
 8005780:	802091ba 	slli	r16,r16,6
 8005784:	0007883a 	mov	r3,zero
 8005788:	8008d27a 	srli	r4,r16,9
 800578c:	003f5606 	br	80054e8 <__mulsf3+0x140>
 8005790:	00802034 	movhi	r2,128
 8005794:	81001034 	orhi	r4,r16,64
 8005798:	10bfffc4 	addi	r2,r2,-1
 800579c:	2088703a 	and	r4,r4,r2
 80057a0:	003fcf06 	br	80056e0 <__mulsf3+0x338>

080057a4 <__subsf3>:
 80057a4:	2818d5fa 	srli	r12,r5,23
 80057a8:	2006d5fa 	srli	r3,r4,23
 80057ac:	200ed7fa 	srli	r7,r4,31
 80057b0:	01802034 	movhi	r6,128
 80057b4:	defffc04 	addi	sp,sp,-16
 80057b8:	31bfffc4 	addi	r6,r6,-1
 80057bc:	63003fcc 	andi	r12,r12,255
 80057c0:	3108703a 	and	r4,r6,r4
 80057c4:	3150703a 	and	r8,r6,r5
 80057c8:	1a403fcc 	andi	r9,r3,255
 80057cc:	dc800215 	stw	r18,8(sp)
 80057d0:	dc400115 	stw	r17,4(sp)
 80057d4:	dfc00315 	stw	ra,12(sp)
 80057d8:	dc000015 	stw	r16,0(sp)
 80057dc:	63403fd8 	cmpnei	r13,r12,255
 80057e0:	3823883a 	mov	r17,r7
 80057e4:	201490fa 	slli	r10,r4,3
 80057e8:	280ad7fa 	srli	r5,r5,31
 80057ec:	401690fa 	slli	r11,r8,3
 80057f0:	201d883a 	mov	r14,r4
 80057f4:	4825883a 	mov	r18,r9
 80057f8:	39c03fcc 	andi	r7,r7,255
 80057fc:	4b0dc83a 	sub	r6,r9,r12
 8005800:	68004f26 	beq	r13,zero,8005940 <__subsf3+0x19c>
 8005804:	2b40005c 	xori	r13,r5,1
 8005808:	3b405826 	beq	r7,r13,800596c <__subsf3+0x1c8>
 800580c:	01803b0e 	bge	zero,r6,80058fc <__subsf3+0x158>
 8005810:	60004f1e 	bne	r12,zero,8005950 <__subsf3+0x1ac>
 8005814:	58009226 	beq	r11,zero,8005a60 <__subsf3+0x2bc>
 8005818:	31bfffc4 	addi	r6,r6,-1
 800581c:	3000e326 	beq	r6,zero,8005bac <__subsf3+0x408>
 8005820:	4a403fe0 	cmpeqi	r9,r9,255
 8005824:	48003f1e 	bne	r9,zero,8005924 <__subsf3+0x180>
 8005828:	30800708 	cmpgei	r2,r6,28
 800582c:	10004d1e 	bne	r2,zero,8005964 <__subsf3+0x1c0>
 8005830:	00c00804 	movi	r3,32
 8005834:	1987c83a 	sub	r3,r3,r6
 8005838:	58c6983a 	sll	r3,r11,r3
 800583c:	5984d83a 	srl	r2,r11,r6
 8005840:	180cc03a 	cmpne	r6,r3,zero
 8005844:	1184b03a 	or	r2,r2,r6
 8005848:	5085c83a 	sub	r2,r10,r2
 800584c:	10c1002c 	andhi	r3,r2,1024
 8005850:	18008026 	beq	r3,zero,8005a54 <__subsf3+0x2b0>
 8005854:	04010034 	movhi	r16,1024
 8005858:	843fffc4 	addi	r16,r16,-1
 800585c:	1420703a 	and	r16,r2,r16
 8005860:	8009883a 	mov	r4,r16
 8005864:	80085180 	call	8008518 <__clzsi2>
 8005868:	10fffec4 	addi	r3,r2,-5
 800586c:	80c4983a 	sll	r2,r16,r3
 8005870:	1c809616 	blt	r3,r18,8005acc <__subsf3+0x328>
 8005874:	1c87c83a 	sub	r3,r3,r18
 8005878:	1c000044 	addi	r16,r3,1
 800587c:	01000804 	movi	r4,32
 8005880:	2409c83a 	sub	r4,r4,r16
 8005884:	1108983a 	sll	r4,r2,r4
 8005888:	1404d83a 	srl	r2,r2,r16
 800588c:	0025883a 	mov	r18,zero
 8005890:	2008c03a 	cmpne	r4,r4,zero
 8005894:	1104b03a 	or	r2,r2,r4
 8005898:	10c001cc 	andi	r3,r2,7
 800589c:	18000426 	beq	r3,zero,80058b0 <__subsf3+0x10c>
 80058a0:	10c003cc 	andi	r3,r2,15
 80058a4:	18c00120 	cmpeqi	r3,r3,4
 80058a8:	1800011e 	bne	r3,zero,80058b0 <__subsf3+0x10c>
 80058ac:	10800104 	addi	r2,r2,4
 80058b0:	10c1002c 	andhi	r3,r2,1024
 80058b4:	18006926 	beq	r3,zero,8005a5c <__subsf3+0x2b8>
 80058b8:	90c00044 	addi	r3,r18,1
 80058bc:	19003fe0 	cmpeqi	r4,r3,255
 80058c0:	20006e1e 	bne	r4,zero,8005a7c <__subsf3+0x2d8>
 80058c4:	100491ba 	slli	r2,r2,6
 80058c8:	1008d27a 	srli	r4,r2,9
 80058cc:	18803fcc 	andi	r2,r3,255
 80058d0:	100495fa 	slli	r2,r2,23
 80058d4:	8c403fcc 	andi	r17,r17,255
 80058d8:	882297fa 	slli	r17,r17,31
 80058dc:	1104b03a 	or	r2,r2,r4
 80058e0:	1444b03a 	or	r2,r2,r17
 80058e4:	dfc00317 	ldw	ra,12(sp)
 80058e8:	dc800217 	ldw	r18,8(sp)
 80058ec:	dc400117 	ldw	r17,4(sp)
 80058f0:	dc000017 	ldw	r16,0(sp)
 80058f4:	dec00404 	addi	sp,sp,16
 80058f8:	f800283a 	ret
 80058fc:	30003526 	beq	r6,zero,80059d4 <__subsf3+0x230>
 8005900:	6247c83a 	sub	r3,r12,r9
 8005904:	6823883a 	mov	r17,r13
 8005908:	48007d1e 	bne	r9,zero,8005b00 <__subsf3+0x35c>
 800590c:	50009926 	beq	r10,zero,8005b74 <__subsf3+0x3d0>
 8005910:	18ffffc4 	addi	r3,r3,-1
 8005914:	1800b226 	beq	r3,zero,8005be0 <__subsf3+0x43c>
 8005918:	60803fe0 	cmpeqi	r2,r12,255
 800591c:	10007b26 	beq	r2,zero,8005b0c <__subsf3+0x368>
 8005920:	401d883a 	mov	r14,r8
 8005924:	70005526 	beq	r14,zero,8005a7c <__subsf3+0x2d8>
 8005928:	00802034 	movhi	r2,128
 800592c:	71001034 	orhi	r4,r14,64
 8005930:	10bfffc4 	addi	r2,r2,-1
 8005934:	2088703a 	and	r4,r4,r2
 8005938:	00ffffc4 	movi	r3,-1
 800593c:	003fe306 	br	80058cc <__subsf3+0x128>
 8005940:	583fb026 	beq	r11,zero,8005804 <__subsf3+0x60>
 8005944:	2b403fcc 	andi	r13,r5,255
 8005948:	39404f26 	beq	r7,r5,8005a88 <__subsf3+0x2e4>
 800594c:	01bfeb0e 	bge	zero,r6,80058fc <__subsf3+0x158>
 8005950:	4a403fe0 	cmpeqi	r9,r9,255
 8005954:	483ff31e 	bne	r9,zero,8005924 <__subsf3+0x180>
 8005958:	30800708 	cmpgei	r2,r6,28
 800595c:	5ac10034 	orhi	r11,r11,1024
 8005960:	103fb326 	beq	r2,zero,8005830 <__subsf3+0x8c>
 8005964:	00800044 	movi	r2,1
 8005968:	003fb706 	br	8005848 <__subsf3+0xa4>
 800596c:	0180460e 	bge	zero,r6,8005a88 <__subsf3+0x2e4>
 8005970:	60002526 	beq	r12,zero,8005a08 <__subsf3+0x264>
 8005974:	4a403fe0 	cmpeqi	r9,r9,255
 8005978:	483fea1e 	bne	r9,zero,8005924 <__subsf3+0x180>
 800597c:	5ac10034 	orhi	r11,r11,1024
 8005980:	30800708 	cmpgei	r2,r6,28
 8005984:	1000671e 	bne	r2,zero,8005b24 <__subsf3+0x380>
 8005988:	00c00804 	movi	r3,32
 800598c:	1987c83a 	sub	r3,r3,r6
 8005990:	58c6983a 	sll	r3,r11,r3
 8005994:	5984d83a 	srl	r2,r11,r6
 8005998:	180cc03a 	cmpne	r6,r3,zero
 800599c:	1184b03a 	or	r2,r2,r6
 80059a0:	1285883a 	add	r2,r2,r10
 80059a4:	10c1002c 	andhi	r3,r2,1024
 80059a8:	18002a26 	beq	r3,zero,8005a54 <__subsf3+0x2b0>
 80059ac:	94800044 	addi	r18,r18,1
 80059b0:	90c03fe0 	cmpeqi	r3,r18,255
 80059b4:	1800311e 	bne	r3,zero,8005a7c <__subsf3+0x2d8>
 80059b8:	1008d07a 	srli	r4,r2,1
 80059bc:	00df8034 	movhi	r3,32256
 80059c0:	18ffffc4 	addi	r3,r3,-1
 80059c4:	1080004c 	andi	r2,r2,1
 80059c8:	20c8703a 	and	r4,r4,r3
 80059cc:	2084b03a 	or	r2,r4,r2
 80059d0:	003fb106 	br	8005898 <__subsf3+0xf4>
 80059d4:	48800044 	addi	r2,r9,1
 80059d8:	10803f8c 	andi	r2,r2,254
 80059dc:	1000401e 	bne	r2,zero,8005ae0 <__subsf3+0x33c>
 80059e0:	48006a1e 	bne	r9,zero,8005b8c <__subsf3+0x3e8>
 80059e4:	50008126 	beq	r10,zero,8005bec <__subsf3+0x448>
 80059e8:	583fb826 	beq	r11,zero,80058cc <__subsf3+0x128>
 80059ec:	52c5c83a 	sub	r2,r10,r11
 80059f0:	1101002c 	andhi	r4,r2,1024
 80059f4:	20008126 	beq	r4,zero,8005bfc <__subsf3+0x458>
 80059f8:	5a85c83a 	sub	r2,r11,r10
 80059fc:	6823883a 	mov	r17,r13
 8005a00:	0025883a 	mov	r18,zero
 8005a04:	003fa406 	br	8005898 <__subsf3+0xf4>
 8005a08:	58001526 	beq	r11,zero,8005a60 <__subsf3+0x2bc>
 8005a0c:	31bfffc4 	addi	r6,r6,-1
 8005a10:	30006426 	beq	r6,zero,8005ba4 <__subsf3+0x400>
 8005a14:	4a403fe0 	cmpeqi	r9,r9,255
 8005a18:	483fd926 	beq	r9,zero,8005980 <__subsf3+0x1dc>
 8005a1c:	003fc106 	br	8005924 <__subsf3+0x180>
 8005a20:	4c800044 	addi	r18,r9,1
 8005a24:	90803f8c 	andi	r2,r18,254
 8005a28:	10004d1e 	bne	r2,zero,8005b60 <__subsf3+0x3bc>
 8005a2c:	4800611e 	bne	r9,zero,8005bb4 <__subsf3+0x410>
 8005a30:	50007626 	beq	r10,zero,8005c0c <__subsf3+0x468>
 8005a34:	583fa526 	beq	r11,zero,80058cc <__subsf3+0x128>
 8005a38:	52c5883a 	add	r2,r10,r11
 8005a3c:	10c1002c 	andhi	r3,r2,1024
 8005a40:	18007426 	beq	r3,zero,8005c14 <__subsf3+0x470>
 8005a44:	00ff0034 	movhi	r3,64512
 8005a48:	18ffffc4 	addi	r3,r3,-1
 8005a4c:	10c4703a 	and	r2,r2,r3
 8005a50:	04800044 	movi	r18,1
 8005a54:	10c001cc 	andi	r3,r2,7
 8005a58:	183f911e 	bne	r3,zero,80058a0 <__subsf3+0xfc>
 8005a5c:	101cd0fa 	srli	r14,r2,3
 8005a60:	90803fe0 	cmpeqi	r2,r18,255
 8005a64:	103faf1e 	bne	r2,zero,8005924 <__subsf3+0x180>
 8005a68:	00802034 	movhi	r2,128
 8005a6c:	10bfffc4 	addi	r2,r2,-1
 8005a70:	7088703a 	and	r4,r14,r2
 8005a74:	9007883a 	mov	r3,r18
 8005a78:	003f9406 	br	80058cc <__subsf3+0x128>
 8005a7c:	00ffffc4 	movi	r3,-1
 8005a80:	0009883a 	mov	r4,zero
 8005a84:	003f9106 	br	80058cc <__subsf3+0x128>
 8005a88:	303fe526 	beq	r6,zero,8005a20 <__subsf3+0x27c>
 8005a8c:	6247c83a 	sub	r3,r12,r9
 8005a90:	48002d26 	beq	r9,zero,8005b48 <__subsf3+0x3a4>
 8005a94:	60803fe0 	cmpeqi	r2,r12,255
 8005a98:	103fa11e 	bne	r2,zero,8005920 <__subsf3+0x17c>
 8005a9c:	52810034 	orhi	r10,r10,1024
 8005aa0:	18800708 	cmpgei	r2,r3,28
 8005aa4:	10004c1e 	bne	r2,zero,8005bd8 <__subsf3+0x434>
 8005aa8:	00800804 	movi	r2,32
 8005aac:	10c5c83a 	sub	r2,r2,r3
 8005ab0:	5084983a 	sll	r2,r10,r2
 8005ab4:	50c6d83a 	srl	r3,r10,r3
 8005ab8:	1004c03a 	cmpne	r2,r2,zero
 8005abc:	1888b03a 	or	r4,r3,r2
 8005ac0:	22c5883a 	add	r2,r4,r11
 8005ac4:	6025883a 	mov	r18,r12
 8005ac8:	003fb606 	br	80059a4 <__subsf3+0x200>
 8005acc:	013f0034 	movhi	r4,64512
 8005ad0:	213fffc4 	addi	r4,r4,-1
 8005ad4:	90e5c83a 	sub	r18,r18,r3
 8005ad8:	1104703a 	and	r2,r2,r4
 8005adc:	003f6e06 	br	8005898 <__subsf3+0xf4>
 8005ae0:	52e1c83a 	sub	r16,r10,r11
 8005ae4:	8081002c 	andhi	r2,r16,1024
 8005ae8:	1000251e 	bne	r2,zero,8005b80 <__subsf3+0x3dc>
 8005aec:	803f5c1e 	bne	r16,zero,8005860 <__subsf3+0xbc>
 8005af0:	0023883a 	mov	r17,zero
 8005af4:	0007883a 	mov	r3,zero
 8005af8:	0009883a 	mov	r4,zero
 8005afc:	003f7306 	br	80058cc <__subsf3+0x128>
 8005b00:	60803fe0 	cmpeqi	r2,r12,255
 8005b04:	103f861e 	bne	r2,zero,8005920 <__subsf3+0x17c>
 8005b08:	52810034 	orhi	r10,r10,1024
 8005b0c:	18800708 	cmpgei	r2,r3,28
 8005b10:	10000626 	beq	r2,zero,8005b2c <__subsf3+0x388>
 8005b14:	01000044 	movi	r4,1
 8005b18:	5905c83a 	sub	r2,r11,r4
 8005b1c:	6025883a 	mov	r18,r12
 8005b20:	003f4a06 	br	800584c <__subsf3+0xa8>
 8005b24:	00800044 	movi	r2,1
 8005b28:	003f9d06 	br	80059a0 <__subsf3+0x1fc>
 8005b2c:	00800804 	movi	r2,32
 8005b30:	10c5c83a 	sub	r2,r2,r3
 8005b34:	5084983a 	sll	r2,r10,r2
 8005b38:	50c6d83a 	srl	r3,r10,r3
 8005b3c:	1004c03a 	cmpne	r2,r2,zero
 8005b40:	1888b03a 	or	r4,r3,r2
 8005b44:	003ff406 	br	8005b18 <__subsf3+0x374>
 8005b48:	50000a26 	beq	r10,zero,8005b74 <__subsf3+0x3d0>
 8005b4c:	18ffffc4 	addi	r3,r3,-1
 8005b50:	18003226 	beq	r3,zero,8005c1c <__subsf3+0x478>
 8005b54:	60803fe0 	cmpeqi	r2,r12,255
 8005b58:	103fd126 	beq	r2,zero,8005aa0 <__subsf3+0x2fc>
 8005b5c:	003f7006 	br	8005920 <__subsf3+0x17c>
 8005b60:	90803fe0 	cmpeqi	r2,r18,255
 8005b64:	103fc51e 	bne	r2,zero,8005a7c <__subsf3+0x2d8>
 8005b68:	52c5883a 	add	r2,r10,r11
 8005b6c:	1004d07a 	srli	r2,r2,1
 8005b70:	003fb806 	br	8005a54 <__subsf3+0x2b0>
 8005b74:	401d883a 	mov	r14,r8
 8005b78:	6025883a 	mov	r18,r12
 8005b7c:	003fb806 	br	8005a60 <__subsf3+0x2bc>
 8005b80:	5aa1c83a 	sub	r16,r11,r10
 8005b84:	6823883a 	mov	r17,r13
 8005b88:	003f3506 	br	8005860 <__subsf3+0xbc>
 8005b8c:	50000a1e 	bne	r10,zero,8005bb8 <__subsf3+0x414>
 8005b90:	58000e1e 	bne	r11,zero,8005bcc <__subsf3+0x428>
 8005b94:	01002034 	movhi	r4,128
 8005b98:	0023883a 	mov	r17,zero
 8005b9c:	213fffc4 	addi	r4,r4,-1
 8005ba0:	003f6506 	br	8005938 <__subsf3+0x194>
 8005ba4:	52c5883a 	add	r2,r10,r11
 8005ba8:	003f7e06 	br	80059a4 <__subsf3+0x200>
 8005bac:	52c5c83a 	sub	r2,r10,r11
 8005bb0:	003f2606 	br	800584c <__subsf3+0xa8>
 8005bb4:	503f5a26 	beq	r10,zero,8005920 <__subsf3+0x17c>
 8005bb8:	583f5a26 	beq	r11,zero,8005924 <__subsf3+0x180>
 8005bbc:	2080102c 	andhi	r2,r4,64
 8005bc0:	103f5826 	beq	r2,zero,8005924 <__subsf3+0x180>
 8005bc4:	4080102c 	andhi	r2,r8,64
 8005bc8:	103f561e 	bne	r2,zero,8005924 <__subsf3+0x180>
 8005bcc:	6823883a 	mov	r17,r13
 8005bd0:	401d883a 	mov	r14,r8
 8005bd4:	003f5306 	br	8005924 <__subsf3+0x180>
 8005bd8:	01000044 	movi	r4,1
 8005bdc:	003fb806 	br	8005ac0 <__subsf3+0x31c>
 8005be0:	5a85c83a 	sub	r2,r11,r10
 8005be4:	6025883a 	mov	r18,r12
 8005be8:	003f1806 	br	800584c <__subsf3+0xa8>
 8005bec:	58000426 	beq	r11,zero,8005c00 <__subsf3+0x45c>
 8005bf0:	6823883a 	mov	r17,r13
 8005bf4:	4009883a 	mov	r4,r8
 8005bf8:	003f3406 	br	80058cc <__subsf3+0x128>
 8005bfc:	1000051e 	bne	r2,zero,8005c14 <__subsf3+0x470>
 8005c00:	0023883a 	mov	r17,zero
 8005c04:	0009883a 	mov	r4,zero
 8005c08:	003f3006 	br	80058cc <__subsf3+0x128>
 8005c0c:	4009883a 	mov	r4,r8
 8005c10:	003f2e06 	br	80058cc <__subsf3+0x128>
 8005c14:	0025883a 	mov	r18,zero
 8005c18:	003f8e06 	br	8005a54 <__subsf3+0x2b0>
 8005c1c:	52c5883a 	add	r2,r10,r11
 8005c20:	6025883a 	mov	r18,r12
 8005c24:	003f5f06 	br	80059a4 <__subsf3+0x200>

08005c28 <__fixsfsi>:
 8005c28:	200ad5fa 	srli	r5,r4,23
 8005c2c:	00c02034 	movhi	r3,128
 8005c30:	18ffffc4 	addi	r3,r3,-1
 8005c34:	29403fcc 	andi	r5,r5,255
 8005c38:	29801ff0 	cmpltui	r6,r5,127
 8005c3c:	200ed7fa 	srli	r7,r4,31
 8005c40:	1906703a 	and	r3,r3,r4
 8005c44:	3000061e 	bne	r6,zero,8005c60 <__fixsfsi+0x38>
 8005c48:	288027b0 	cmpltui	r2,r5,158
 8005c4c:	1000061e 	bne	r2,zero,8005c68 <__fixsfsi+0x40>
 8005c50:	00a00034 	movhi	r2,32768
 8005c54:	10bfffc4 	addi	r2,r2,-1
 8005c58:	3885883a 	add	r2,r7,r2
 8005c5c:	f800283a 	ret
 8005c60:	0005883a 	mov	r2,zero
 8005c64:	f800283a 	ret
 8005c68:	28802590 	cmplti	r2,r5,150
 8005c6c:	18c02034 	orhi	r3,r3,128
 8005c70:	1000051e 	bne	r2,zero,8005c88 <__fixsfsi+0x60>
 8005c74:	28bfda84 	addi	r2,r5,-150
 8005c78:	1884983a 	sll	r2,r3,r2
 8005c7c:	383ff926 	beq	r7,zero,8005c64 <__fixsfsi+0x3c>
 8005c80:	0085c83a 	sub	r2,zero,r2
 8005c84:	f800283a 	ret
 8005c88:	00802584 	movi	r2,150
 8005c8c:	1145c83a 	sub	r2,r2,r5
 8005c90:	1884d83a 	srl	r2,r3,r2
 8005c94:	003ff906 	br	8005c7c <__fixsfsi+0x54>

08005c98 <__floatunsisf>:
 8005c98:	defffe04 	addi	sp,sp,-8
 8005c9c:	dfc00115 	stw	ra,4(sp)
 8005ca0:	dc000015 	stw	r16,0(sp)
 8005ca4:	20000f26 	beq	r4,zero,8005ce4 <__floatunsisf+0x4c>
 8005ca8:	2021883a 	mov	r16,r4
 8005cac:	80085180 	call	8008518 <__clzsi2>
 8005cb0:	100b883a 	mov	r5,r2
 8005cb4:	00802784 	movi	r2,158
 8005cb8:	1145c83a 	sub	r2,r2,r5
 8005cbc:	10c025c8 	cmpgei	r3,r2,151
 8005cc0:	1800111e 	bne	r3,zero,8005d08 <__floatunsisf+0x70>
 8005cc4:	28c00248 	cmpgei	r3,r5,9
 8005cc8:	18002d26 	beq	r3,zero,8005d80 <__floatunsisf+0xe8>
 8005ccc:	297ffe04 	addi	r5,r5,-8
 8005cd0:	8160983a 	sll	r16,r16,r5
 8005cd4:	00c02034 	movhi	r3,128
 8005cd8:	18ffffc4 	addi	r3,r3,-1
 8005cdc:	80e0703a 	and	r16,r16,r3
 8005ce0:	00000206 	br	8005cec <__floatunsisf+0x54>
 8005ce4:	0005883a 	mov	r2,zero
 8005ce8:	0021883a 	mov	r16,zero
 8005cec:	10803fcc 	andi	r2,r2,255
 8005cf0:	100495fa 	slli	r2,r2,23
 8005cf4:	1404b03a 	or	r2,r2,r16
 8005cf8:	dfc00117 	ldw	ra,4(sp)
 8005cfc:	dc000017 	ldw	r16,0(sp)
 8005d00:	dec00204 	addi	sp,sp,8
 8005d04:	f800283a 	ret
 8005d08:	10c02690 	cmplti	r3,r2,154
 8005d0c:	1800071e 	bne	r3,zero,8005d2c <__floatunsisf+0x94>
 8005d10:	290006c4 	addi	r4,r5,27
 8005d14:	8106983a 	sll	r3,r16,r4
 8005d18:	01000144 	movi	r4,5
 8005d1c:	2149c83a 	sub	r4,r4,r5
 8005d20:	8120d83a 	srl	r16,r16,r4
 8005d24:	1808c03a 	cmpne	r4,r3,zero
 8005d28:	2420b03a 	or	r16,r4,r16
 8005d2c:	28c00190 	cmplti	r3,r5,6
 8005d30:	1800021e 	bne	r3,zero,8005d3c <__floatunsisf+0xa4>
 8005d34:	28fffec4 	addi	r3,r5,-5
 8005d38:	80e0983a 	sll	r16,r16,r3
 8005d3c:	01bf0034 	movhi	r6,64512
 8005d40:	31bfffc4 	addi	r6,r6,-1
 8005d44:	80c001cc 	andi	r3,r16,7
 8005d48:	8188703a 	and	r4,r16,r6
 8005d4c:	18000926 	beq	r3,zero,8005d74 <__floatunsisf+0xdc>
 8005d50:	80c003cc 	andi	r3,r16,15
 8005d54:	18c00120 	cmpeqi	r3,r3,4
 8005d58:	1800061e 	bne	r3,zero,8005d74 <__floatunsisf+0xdc>
 8005d5c:	21000104 	addi	r4,r4,4
 8005d60:	20c1002c 	andhi	r3,r4,1024
 8005d64:	18000326 	beq	r3,zero,8005d74 <__floatunsisf+0xdc>
 8005d68:	00c027c4 	movi	r3,159
 8005d6c:	2188703a 	and	r4,r4,r6
 8005d70:	1945c83a 	sub	r2,r3,r5
 8005d74:	202091ba 	slli	r16,r4,6
 8005d78:	8020d27a 	srli	r16,r16,9
 8005d7c:	003fdb06 	br	8005cec <__floatunsisf+0x54>
 8005d80:	01002034 	movhi	r4,128
 8005d84:	213fffc4 	addi	r4,r4,-1
 8005d88:	8120703a 	and	r16,r16,r4
 8005d8c:	003fd706 	br	8005cec <__floatunsisf+0x54>

08005d90 <__adddf3>:
 8005d90:	02000434 	movhi	r8,16
 8005d94:	423fffc4 	addi	r8,r8,-1
 8005d98:	3a12703a 	and	r9,r7,r8
 8005d9c:	2a06703a 	and	r3,r5,r8
 8005da0:	2818d53a 	srli	r12,r5,20
 8005da4:	3804d53a 	srli	r2,r7,20
 8005da8:	481490fa 	slli	r10,r9,3
 8005dac:	280ad7fa 	srli	r5,r5,31
 8005db0:	180690fa 	slli	r3,r3,3
 8005db4:	2016d77a 	srli	r11,r4,29
 8005db8:	3012d77a 	srli	r9,r6,29
 8005dbc:	380ed7fa 	srli	r7,r7,31
 8005dc0:	defffb04 	addi	sp,sp,-20
 8005dc4:	dc400115 	stw	r17,4(sp)
 8005dc8:	dc000015 	stw	r16,0(sp)
 8005dcc:	dfc00415 	stw	ra,16(sp)
 8005dd0:	dcc00315 	stw	r19,12(sp)
 8005dd4:	dc800215 	stw	r18,8(sp)
 8005dd8:	201c90fa 	slli	r14,r4,3
 8005ddc:	301a90fa 	slli	r13,r6,3
 8005de0:	6441ffcc 	andi	r17,r12,2047
 8005de4:	2821883a 	mov	r16,r5
 8005de8:	58c6b03a 	or	r3,r11,r3
 8005dec:	1081ffcc 	andi	r2,r2,2047
 8005df0:	4a92b03a 	or	r9,r9,r10
 8005df4:	29c06326 	beq	r5,r7,8005f84 <__adddf3+0x1f4>
 8005df8:	888bc83a 	sub	r5,r17,r2
 8005dfc:	0140560e 	bge	zero,r5,8005f58 <__adddf3+0x1c8>
 8005e00:	10007526 	beq	r2,zero,8005fd8 <__adddf3+0x248>
 8005e04:	8881ffd8 	cmpnei	r2,r17,2047
 8005e08:	10012d26 	beq	r2,zero,80062c0 <__adddf3+0x530>
 8005e0c:	4a402034 	orhi	r9,r9,128
 8005e10:	28800e48 	cmpgei	r2,r5,57
 8005e14:	1000f41e 	bne	r2,zero,80061e8 <__adddf3+0x458>
 8005e18:	28800808 	cmpgei	r2,r5,32
 8005e1c:	1001471e 	bne	r2,zero,800633c <__adddf3+0x5ac>
 8005e20:	00800804 	movi	r2,32
 8005e24:	1145c83a 	sub	r2,r2,r5
 8005e28:	6948d83a 	srl	r4,r13,r5
 8005e2c:	48a4983a 	sll	r18,r9,r2
 8005e30:	6884983a 	sll	r2,r13,r2
 8005e34:	494ad83a 	srl	r5,r9,r5
 8005e38:	9124b03a 	or	r18,r18,r4
 8005e3c:	101ac03a 	cmpne	r13,r2,zero
 8005e40:	9364b03a 	or	r18,r18,r13
 8005e44:	1947c83a 	sub	r3,r3,r5
 8005e48:	74a5c83a 	sub	r18,r14,r18
 8005e4c:	7489803a 	cmpltu	r4,r14,r18
 8005e50:	1909c83a 	sub	r4,r3,r4
 8005e54:	2080202c 	andhi	r2,r4,128
 8005e58:	10008626 	beq	r2,zero,8006074 <__adddf3+0x2e4>
 8005e5c:	00802034 	movhi	r2,128
 8005e60:	10bfffc4 	addi	r2,r2,-1
 8005e64:	20a6703a 	and	r19,r4,r2
 8005e68:	9800d626 	beq	r19,zero,80061c4 <__adddf3+0x434>
 8005e6c:	9809883a 	mov	r4,r19
 8005e70:	80085180 	call	8008518 <__clzsi2>
 8005e74:	133ffe04 	addi	r12,r2,-8
 8005e78:	01000804 	movi	r4,32
 8005e7c:	2309c83a 	sub	r4,r4,r12
 8005e80:	9108d83a 	srl	r4,r18,r4
 8005e84:	9b04983a 	sll	r2,r19,r12
 8005e88:	9324983a 	sll	r18,r18,r12
 8005e8c:	2088b03a 	or	r4,r4,r2
 8005e90:	6440c716 	blt	r12,r17,80061b0 <__adddf3+0x420>
 8005e94:	6459c83a 	sub	r12,r12,r17
 8005e98:	62000044 	addi	r8,r12,1
 8005e9c:	40800808 	cmpgei	r2,r8,32
 8005ea0:	1001191e 	bne	r2,zero,8006308 <__adddf3+0x578>
 8005ea4:	00800804 	movi	r2,32
 8005ea8:	1205c83a 	sub	r2,r2,r8
 8005eac:	9206d83a 	srl	r3,r18,r8
 8005eb0:	90a4983a 	sll	r18,r18,r2
 8005eb4:	2084983a 	sll	r2,r4,r2
 8005eb8:	2208d83a 	srl	r4,r4,r8
 8005ebc:	9024c03a 	cmpne	r18,r18,zero
 8005ec0:	10c4b03a 	or	r2,r2,r3
 8005ec4:	14a4b03a 	or	r18,r2,r18
 8005ec8:	0023883a 	mov	r17,zero
 8005ecc:	908001cc 	andi	r2,r18,7
 8005ed0:	10000726 	beq	r2,zero,8005ef0 <__adddf3+0x160>
 8005ed4:	908003cc 	andi	r2,r18,15
 8005ed8:	10800120 	cmpeqi	r2,r2,4
 8005edc:	1000041e 	bne	r2,zero,8005ef0 <__adddf3+0x160>
 8005ee0:	90c00104 	addi	r3,r18,4
 8005ee4:	1ca5803a 	cmpltu	r18,r3,r18
 8005ee8:	2489883a 	add	r4,r4,r18
 8005eec:	1825883a 	mov	r18,r3
 8005ef0:	2080202c 	andhi	r2,r4,128
 8005ef4:	10006126 	beq	r2,zero,800607c <__adddf3+0x2ec>
 8005ef8:	89400044 	addi	r5,r17,1
 8005efc:	2881ffe0 	cmpeqi	r2,r5,2047
 8005f00:	2941ffcc 	andi	r5,r5,2047
 8005f04:	1000731e 	bne	r2,zero,80060d4 <__adddf3+0x344>
 8005f08:	023fe034 	movhi	r8,65408
 8005f0c:	423fffc4 	addi	r8,r8,-1
 8005f10:	2210703a 	and	r8,r4,r8
 8005f14:	4006927a 	slli	r3,r8,9
 8005f18:	9024d0fa 	srli	r18,r18,3
 8005f1c:	4004977a 	slli	r2,r8,29
 8005f20:	1806d33a 	srli	r3,r3,12
 8005f24:	1484b03a 	or	r2,r2,r18
 8005f28:	280a953a 	slli	r5,r5,20
 8005f2c:	84003fcc 	andi	r16,r16,255
 8005f30:	802097fa 	slli	r16,r16,31
 8005f34:	28c6b03a 	or	r3,r5,r3
 8005f38:	1c06b03a 	or	r3,r3,r16
 8005f3c:	dfc00417 	ldw	ra,16(sp)
 8005f40:	dcc00317 	ldw	r19,12(sp)
 8005f44:	dc800217 	ldw	r18,8(sp)
 8005f48:	dc400117 	ldw	r17,4(sp)
 8005f4c:	dc000017 	ldw	r16,0(sp)
 8005f50:	dec00504 	addi	sp,sp,20
 8005f54:	f800283a 	ret
 8005f58:	28002726 	beq	r5,zero,8005ff8 <__adddf3+0x268>
 8005f5c:	144bc83a 	sub	r5,r2,r17
 8005f60:	8800be1e 	bne	r17,zero,800625c <__adddf3+0x4cc>
 8005f64:	1b88b03a 	or	r4,r3,r14
 8005f68:	20013126 	beq	r4,zero,8006430 <__adddf3+0x6a0>
 8005f6c:	293fffc4 	addi	r4,r5,-1
 8005f70:	20017226 	beq	r4,zero,800653c <__adddf3+0x7ac>
 8005f74:	2941ffd8 	cmpnei	r5,r5,2047
 8005f78:	2801c226 	beq	r5,zero,8006684 <__adddf3+0x8f4>
 8005f7c:	200b883a 	mov	r5,r4
 8005f80:	0000b906 	br	8006268 <__adddf3+0x4d8>
 8005f84:	888bc83a 	sub	r5,r17,r2
 8005f88:	0140700e 	bge	zero,r5,800614c <__adddf3+0x3bc>
 8005f8c:	10002a26 	beq	r2,zero,8006038 <__adddf3+0x2a8>
 8005f90:	8881ffd8 	cmpnei	r2,r17,2047
 8005f94:	1000ca26 	beq	r2,zero,80062c0 <__adddf3+0x530>
 8005f98:	4a402034 	orhi	r9,r9,128
 8005f9c:	28800e48 	cmpgei	r2,r5,57
 8005fa0:	1000421e 	bne	r2,zero,80060ac <__adddf3+0x31c>
 8005fa4:	28800808 	cmpgei	r2,r5,32
 8005fa8:	1000ff26 	beq	r2,zero,80063a8 <__adddf3+0x618>
 8005fac:	2cbff804 	addi	r18,r5,-32
 8005fb0:	29000820 	cmpeqi	r4,r5,32
 8005fb4:	4c84d83a 	srl	r2,r9,r18
 8005fb8:	2000041e 	bne	r4,zero,8005fcc <__adddf3+0x23c>
 8005fbc:	01001004 	movi	r4,64
 8005fc0:	214bc83a 	sub	r5,r4,r5
 8005fc4:	4952983a 	sll	r9,r9,r5
 8005fc8:	6a5ab03a 	or	r13,r13,r9
 8005fcc:	6824c03a 	cmpne	r18,r13,zero
 8005fd0:	90a4b03a 	or	r18,r18,r2
 8005fd4:	00003706 	br	80060b4 <__adddf3+0x324>
 8005fd8:	4b44b03a 	or	r2,r9,r13
 8005fdc:	1000b126 	beq	r2,zero,80062a4 <__adddf3+0x514>
 8005fe0:	28bfffc4 	addi	r2,r5,-1
 8005fe4:	10011a26 	beq	r2,zero,8006450 <__adddf3+0x6c0>
 8005fe8:	2941ffd8 	cmpnei	r5,r5,2047
 8005fec:	28012526 	beq	r5,zero,8006484 <__adddf3+0x6f4>
 8005ff0:	100b883a 	mov	r5,r2
 8005ff4:	003f8606 	br	8005e10 <__adddf3+0x80>
 8005ff8:	8a800044 	addi	r10,r17,1
 8005ffc:	5281ff8c 	andi	r10,r10,2046
 8006000:	50008b1e 	bne	r10,zero,8006230 <__adddf3+0x4a0>
 8006004:	1b96b03a 	or	r11,r3,r14
 8006008:	4b44b03a 	or	r2,r9,r13
 800600c:	8801031e 	bne	r17,zero,800641c <__adddf3+0x68c>
 8006010:	58014126 	beq	r11,zero,8006518 <__adddf3+0x788>
 8006014:	1001571e 	bne	r2,zero,8006574 <__adddf3+0x7e4>
 8006018:	1804977a 	slli	r2,r3,29
 800601c:	01480034 	movhi	r5,8192
 8006020:	297fffc4 	addi	r5,r5,-1
 8006024:	2148703a 	and	r4,r4,r5
 8006028:	1810d0fa 	srli	r8,r3,3
 800602c:	1104b03a 	or	r2,r2,r4
 8006030:	500b883a 	mov	r5,r10
 8006034:	00001806 	br	8006098 <__adddf3+0x308>
 8006038:	4b44b03a 	or	r2,r9,r13
 800603c:	10010a26 	beq	r2,zero,8006468 <__adddf3+0x6d8>
 8006040:	28bfffc4 	addi	r2,r5,-1
 8006044:	10000426 	beq	r2,zero,8006058 <__adddf3+0x2c8>
 8006048:	2941ffd8 	cmpnei	r5,r5,2047
 800604c:	28014226 	beq	r5,zero,8006558 <__adddf3+0x7c8>
 8006050:	100b883a 	mov	r5,r2
 8006054:	003fd106 	br	8005f9c <__adddf3+0x20c>
 8006058:	7365883a 	add	r18,r14,r13
 800605c:	1a47883a 	add	r3,r3,r9
 8006060:	9389803a 	cmpltu	r4,r18,r14
 8006064:	1909883a 	add	r4,r3,r4
 8006068:	2080202c 	andhi	r2,r4,128
 800606c:	10009b1e 	bne	r2,zero,80062dc <__adddf3+0x54c>
 8006070:	04400044 	movi	r17,1
 8006074:	908001cc 	andi	r2,r18,7
 8006078:	103f961e 	bne	r2,zero,8005ed4 <__adddf3+0x144>
 800607c:	9024d0fa 	srli	r18,r18,3
 8006080:	2004977a 	slli	r2,r4,29
 8006084:	2010d0fa 	srli	r8,r4,3
 8006088:	880b883a 	mov	r5,r17
 800608c:	9084b03a 	or	r2,r18,r2
 8006090:	28c1ffe0 	cmpeqi	r3,r5,2047
 8006094:	1800251e 	bne	r3,zero,800612c <__adddf3+0x39c>
 8006098:	00c00434 	movhi	r3,16
 800609c:	18ffffc4 	addi	r3,r3,-1
 80060a0:	40c6703a 	and	r3,r8,r3
 80060a4:	2941ffcc 	andi	r5,r5,2047
 80060a8:	003f9f06 	br	8005f28 <__adddf3+0x198>
 80060ac:	4b64b03a 	or	r18,r9,r13
 80060b0:	9024c03a 	cmpne	r18,r18,zero
 80060b4:	93a5883a 	add	r18,r18,r14
 80060b8:	9389803a 	cmpltu	r4,r18,r14
 80060bc:	20c9883a 	add	r4,r4,r3
 80060c0:	2080202c 	andhi	r2,r4,128
 80060c4:	103feb26 	beq	r2,zero,8006074 <__adddf3+0x2e4>
 80060c8:	8c400044 	addi	r17,r17,1
 80060cc:	8881ffe0 	cmpeqi	r2,r17,2047
 80060d0:	10008326 	beq	r2,zero,80062e0 <__adddf3+0x550>
 80060d4:	0141ffc4 	movi	r5,2047
 80060d8:	0007883a 	mov	r3,zero
 80060dc:	0005883a 	mov	r2,zero
 80060e0:	003f9106 	br	8005f28 <__adddf3+0x198>
 80060e4:	4b44b03a 	or	r2,r9,r13
 80060e8:	180a977a 	slli	r5,r3,29
 80060ec:	1810d0fa 	srli	r8,r3,3
 80060f0:	10016c26 	beq	r2,zero,80066a4 <__adddf3+0x914>
 80060f4:	00c80034 	movhi	r3,8192
 80060f8:	18ffffc4 	addi	r3,r3,-1
 80060fc:	20c4703a 	and	r2,r4,r3
 8006100:	4100022c 	andhi	r4,r8,8
 8006104:	1144b03a 	or	r2,r2,r5
 8006108:	20000826 	beq	r4,zero,800612c <__adddf3+0x39c>
 800610c:	4808d0fa 	srli	r4,r9,3
 8006110:	2140022c 	andhi	r5,r4,8
 8006114:	2800051e 	bne	r5,zero,800612c <__adddf3+0x39c>
 8006118:	4804977a 	slli	r2,r9,29
 800611c:	30cc703a 	and	r6,r6,r3
 8006120:	3821883a 	mov	r16,r7
 8006124:	3084b03a 	or	r2,r6,r2
 8006128:	2011883a 	mov	r8,r4
 800612c:	4086b03a 	or	r3,r8,r2
 8006130:	18017126 	beq	r3,zero,80066f8 <__adddf3+0x968>
 8006134:	01000434 	movhi	r4,16
 8006138:	40c00234 	orhi	r3,r8,8
 800613c:	213fffc4 	addi	r4,r4,-1
 8006140:	1906703a 	and	r3,r3,r4
 8006144:	0141ffc4 	movi	r5,2047
 8006148:	003f7706 	br	8005f28 <__adddf3+0x198>
 800614c:	28002926 	beq	r5,zero,80061f4 <__adddf3+0x464>
 8006150:	144bc83a 	sub	r5,r2,r17
 8006154:	88008c26 	beq	r17,zero,8006388 <__adddf3+0x5f8>
 8006158:	1101ffd8 	cmpnei	r4,r2,2047
 800615c:	20011126 	beq	r4,zero,80065a4 <__adddf3+0x814>
 8006160:	18c02034 	orhi	r3,r3,128
 8006164:	29000e48 	cmpgei	r4,r5,57
 8006168:	2000d51e 	bne	r4,zero,80064c0 <__adddf3+0x730>
 800616c:	29000808 	cmpgei	r4,r5,32
 8006170:	2001511e 	bne	r4,zero,80066b8 <__adddf3+0x928>
 8006174:	01000804 	movi	r4,32
 8006178:	2149c83a 	sub	r4,r4,r5
 800617c:	1924983a 	sll	r18,r3,r4
 8006180:	714cd83a 	srl	r6,r14,r5
 8006184:	7108983a 	sll	r4,r14,r4
 8006188:	194ad83a 	srl	r5,r3,r5
 800618c:	91a4b03a 	or	r18,r18,r6
 8006190:	2006c03a 	cmpne	r3,r4,zero
 8006194:	90e4b03a 	or	r18,r18,r3
 8006198:	4953883a 	add	r9,r9,r5
 800619c:	9365883a 	add	r18,r18,r13
 80061a0:	9349803a 	cmpltu	r4,r18,r13
 80061a4:	2249883a 	add	r4,r4,r9
 80061a8:	1023883a 	mov	r17,r2
 80061ac:	003fc406 	br	80060c0 <__adddf3+0x330>
 80061b0:	023fe034 	movhi	r8,65408
 80061b4:	423fffc4 	addi	r8,r8,-1
 80061b8:	8b23c83a 	sub	r17,r17,r12
 80061bc:	2208703a 	and	r4,r4,r8
 80061c0:	003f4206 	br	8005ecc <__adddf3+0x13c>
 80061c4:	9009883a 	mov	r4,r18
 80061c8:	80085180 	call	8008518 <__clzsi2>
 80061cc:	13000604 	addi	r12,r2,24
 80061d0:	60c00808 	cmpgei	r3,r12,32
 80061d4:	183f2826 	beq	r3,zero,8005e78 <__adddf3+0xe8>
 80061d8:	113ffe04 	addi	r4,r2,-8
 80061dc:	9108983a 	sll	r4,r18,r4
 80061e0:	0025883a 	mov	r18,zero
 80061e4:	003f2a06 	br	8005e90 <__adddf3+0x100>
 80061e8:	4b64b03a 	or	r18,r9,r13
 80061ec:	9024c03a 	cmpne	r18,r18,zero
 80061f0:	003f1506 	br	8005e48 <__adddf3+0xb8>
 80061f4:	8a000044 	addi	r8,r17,1
 80061f8:	4081ff8c 	andi	r2,r8,2046
 80061fc:	1000751e 	bne	r2,zero,80063d4 <__adddf3+0x644>
 8006200:	1b84b03a 	or	r2,r3,r14
 8006204:	8800bc1e 	bne	r17,zero,80064f8 <__adddf3+0x768>
 8006208:	10010c26 	beq	r2,zero,800663c <__adddf3+0x8ac>
 800620c:	4b44b03a 	or	r2,r9,r13
 8006210:	1001111e 	bne	r2,zero,8006658 <__adddf3+0x8c8>
 8006214:	180c977a 	slli	r6,r3,29
 8006218:	00880034 	movhi	r2,8192
 800621c:	10bfffc4 	addi	r2,r2,-1
 8006220:	2084703a 	and	r2,r4,r2
 8006224:	1810d0fa 	srli	r8,r3,3
 8006228:	1184b03a 	or	r2,r2,r6
 800622c:	003f9a06 	br	8006098 <__adddf3+0x308>
 8006230:	7365c83a 	sub	r18,r14,r13
 8006234:	1a67c83a 	sub	r19,r3,r9
 8006238:	7489803a 	cmpltu	r4,r14,r18
 800623c:	9927c83a 	sub	r19,r19,r4
 8006240:	9880202c 	andhi	r2,r19,128
 8006244:	10006f1e 	bne	r2,zero,8006404 <__adddf3+0x674>
 8006248:	94c4b03a 	or	r2,r18,r19
 800624c:	103f061e 	bne	r2,zero,8005e68 <__adddf3+0xd8>
 8006250:	0011883a 	mov	r8,zero
 8006254:	0021883a 	mov	r16,zero
 8006258:	003f8f06 	br	8006098 <__adddf3+0x308>
 800625c:	1101ffd8 	cmpnei	r4,r2,2047
 8006260:	20008f26 	beq	r4,zero,80064a0 <__adddf3+0x710>
 8006264:	18c02034 	orhi	r3,r3,128
 8006268:	29000e48 	cmpgei	r4,r5,57
 800626c:	20003e1e 	bne	r4,zero,8006368 <__adddf3+0x5d8>
 8006270:	29000808 	cmpgei	r4,r5,32
 8006274:	2000951e 	bne	r4,zero,80064cc <__adddf3+0x73c>
 8006278:	01000804 	movi	r4,32
 800627c:	2149c83a 	sub	r4,r4,r5
 8006280:	1924983a 	sll	r18,r3,r4
 8006284:	714cd83a 	srl	r6,r14,r5
 8006288:	711c983a 	sll	r14,r14,r4
 800628c:	1946d83a 	srl	r3,r3,r5
 8006290:	91a4b03a 	or	r18,r18,r6
 8006294:	701cc03a 	cmpne	r14,r14,zero
 8006298:	93a4b03a 	or	r18,r18,r14
 800629c:	48d3c83a 	sub	r9,r9,r3
 80062a0:	00003306 	br	8006370 <__adddf3+0x5e0>
 80062a4:	1824977a 	slli	r18,r3,29
 80062a8:	01880034 	movhi	r6,8192
 80062ac:	31bfffc4 	addi	r6,r6,-1
 80062b0:	2184703a 	and	r2,r4,r6
 80062b4:	1810d0fa 	srli	r8,r3,3
 80062b8:	1484b03a 	or	r2,r2,r18
 80062bc:	003f7406 	br	8006090 <__adddf3+0x300>
 80062c0:	1804977a 	slli	r2,r3,29
 80062c4:	01480034 	movhi	r5,8192
 80062c8:	297fffc4 	addi	r5,r5,-1
 80062cc:	2148703a 	and	r4,r4,r5
 80062d0:	1810d0fa 	srli	r8,r3,3
 80062d4:	1104b03a 	or	r2,r2,r4
 80062d8:	003f9406 	br	800612c <__adddf3+0x39c>
 80062dc:	04400084 	movi	r17,2
 80062e0:	00bfe034 	movhi	r2,65408
 80062e4:	10bfffc4 	addi	r2,r2,-1
 80062e8:	9006d07a 	srli	r3,r18,1
 80062ec:	2088703a 	and	r4,r4,r2
 80062f0:	200497fa 	slli	r2,r4,31
 80062f4:	9480004c 	andi	r18,r18,1
 80062f8:	1ca4b03a 	or	r18,r3,r18
 80062fc:	2008d07a 	srli	r4,r4,1
 8006300:	14a4b03a 	or	r18,r2,r18
 8006304:	003ef106 	br	8005ecc <__adddf3+0x13c>
 8006308:	633ff844 	addi	r12,r12,-31
 800630c:	40800820 	cmpeqi	r2,r8,32
 8006310:	2318d83a 	srl	r12,r4,r12
 8006314:	1000041e 	bne	r2,zero,8006328 <__adddf3+0x598>
 8006318:	00801004 	movi	r2,64
 800631c:	1211c83a 	sub	r8,r2,r8
 8006320:	2208983a 	sll	r4,r4,r8
 8006324:	9124b03a 	or	r18,r18,r4
 8006328:	9024c03a 	cmpne	r18,r18,zero
 800632c:	9324b03a 	or	r18,r18,r12
 8006330:	0009883a 	mov	r4,zero
 8006334:	0023883a 	mov	r17,zero
 8006338:	003f4e06 	br	8006074 <__adddf3+0x2e4>
 800633c:	2cbff804 	addi	r18,r5,-32
 8006340:	29000820 	cmpeqi	r4,r5,32
 8006344:	4c84d83a 	srl	r2,r9,r18
 8006348:	2000041e 	bne	r4,zero,800635c <__adddf3+0x5cc>
 800634c:	01001004 	movi	r4,64
 8006350:	214bc83a 	sub	r5,r4,r5
 8006354:	4952983a 	sll	r9,r9,r5
 8006358:	6a5ab03a 	or	r13,r13,r9
 800635c:	6824c03a 	cmpne	r18,r13,zero
 8006360:	90a4b03a 	or	r18,r18,r2
 8006364:	003eb806 	br	8005e48 <__adddf3+0xb8>
 8006368:	1b88b03a 	or	r4,r3,r14
 800636c:	2024c03a 	cmpne	r18,r4,zero
 8006370:	6ca5c83a 	sub	r18,r13,r18
 8006374:	6c89803a 	cmpltu	r4,r13,r18
 8006378:	4909c83a 	sub	r4,r9,r4
 800637c:	3821883a 	mov	r16,r7
 8006380:	1023883a 	mov	r17,r2
 8006384:	003eb306 	br	8005e54 <__adddf3+0xc4>
 8006388:	1b88b03a 	or	r4,r3,r14
 800638c:	20008c26 	beq	r4,zero,80065c0 <__adddf3+0x830>
 8006390:	293fffc4 	addi	r4,r5,-1
 8006394:	2000d326 	beq	r4,zero,80066e4 <__adddf3+0x954>
 8006398:	2941ffd8 	cmpnei	r5,r5,2047
 800639c:	28008126 	beq	r5,zero,80065a4 <__adddf3+0x814>
 80063a0:	200b883a 	mov	r5,r4
 80063a4:	003f6f06 	br	8006164 <__adddf3+0x3d4>
 80063a8:	00800804 	movi	r2,32
 80063ac:	1145c83a 	sub	r2,r2,r5
 80063b0:	6948d83a 	srl	r4,r13,r5
 80063b4:	48a4983a 	sll	r18,r9,r2
 80063b8:	6884983a 	sll	r2,r13,r2
 80063bc:	494ad83a 	srl	r5,r9,r5
 80063c0:	9124b03a 	or	r18,r18,r4
 80063c4:	101ac03a 	cmpne	r13,r2,zero
 80063c8:	9364b03a 	or	r18,r18,r13
 80063cc:	1947883a 	add	r3,r3,r5
 80063d0:	003f3806 	br	80060b4 <__adddf3+0x324>
 80063d4:	4081ffe0 	cmpeqi	r2,r8,2047
 80063d8:	103f3e1e 	bne	r2,zero,80060d4 <__adddf3+0x344>
 80063dc:	7345883a 	add	r2,r14,r13
 80063e0:	139d803a 	cmpltu	r14,r2,r14
 80063e4:	1a49883a 	add	r4,r3,r9
 80063e8:	2389883a 	add	r4,r4,r14
 80063ec:	202497fa 	slli	r18,r4,31
 80063f0:	1004d07a 	srli	r2,r2,1
 80063f4:	2008d07a 	srli	r4,r4,1
 80063f8:	4023883a 	mov	r17,r8
 80063fc:	90a4b03a 	or	r18,r18,r2
 8006400:	003f1c06 	br	8006074 <__adddf3+0x2e4>
 8006404:	6ba5c83a 	sub	r18,r13,r14
 8006408:	48c9c83a 	sub	r4,r9,r3
 800640c:	6c85803a 	cmpltu	r2,r13,r18
 8006410:	20a7c83a 	sub	r19,r4,r2
 8006414:	3821883a 	mov	r16,r7
 8006418:	003e9306 	br	8005e68 <__adddf3+0xd8>
 800641c:	58006f1e 	bne	r11,zero,80065dc <__adddf3+0x84c>
 8006420:	10001f1e 	bne	r2,zero,80064a0 <__adddf3+0x710>
 8006424:	00bfffc4 	movi	r2,-1
 8006428:	0021883a 	mov	r16,zero
 800642c:	003f4106 	br	8006134 <__adddf3+0x3a4>
 8006430:	4808977a 	slli	r4,r9,29
 8006434:	00c80034 	movhi	r3,8192
 8006438:	18ffffc4 	addi	r3,r3,-1
 800643c:	30c4703a 	and	r2,r6,r3
 8006440:	4810d0fa 	srli	r8,r9,3
 8006444:	1104b03a 	or	r2,r2,r4
 8006448:	3821883a 	mov	r16,r7
 800644c:	003f1006 	br	8006090 <__adddf3+0x300>
 8006450:	7365c83a 	sub	r18,r14,r13
 8006454:	1a47c83a 	sub	r3,r3,r9
 8006458:	7489803a 	cmpltu	r4,r14,r18
 800645c:	1909c83a 	sub	r4,r3,r4
 8006460:	04400044 	movi	r17,1
 8006464:	003e7b06 	br	8005e54 <__adddf3+0xc4>
 8006468:	1824977a 	slli	r18,r3,29
 800646c:	01c80034 	movhi	r7,8192
 8006470:	39ffffc4 	addi	r7,r7,-1
 8006474:	21c4703a 	and	r2,r4,r7
 8006478:	1810d0fa 	srli	r8,r3,3
 800647c:	1484b03a 	or	r2,r2,r18
 8006480:	003f0306 	br	8006090 <__adddf3+0x300>
 8006484:	1824977a 	slli	r18,r3,29
 8006488:	01480034 	movhi	r5,8192
 800648c:	297fffc4 	addi	r5,r5,-1
 8006490:	2144703a 	and	r2,r4,r5
 8006494:	1810d0fa 	srli	r8,r3,3
 8006498:	1484b03a 	or	r2,r2,r18
 800649c:	003f2306 	br	800612c <__adddf3+0x39c>
 80064a0:	4806977a 	slli	r3,r9,29
 80064a4:	00880034 	movhi	r2,8192
 80064a8:	10bfffc4 	addi	r2,r2,-1
 80064ac:	3084703a 	and	r2,r6,r2
 80064b0:	4810d0fa 	srli	r8,r9,3
 80064b4:	10c4b03a 	or	r2,r2,r3
 80064b8:	3821883a 	mov	r16,r7
 80064bc:	003f1b06 	br	800612c <__adddf3+0x39c>
 80064c0:	1b88b03a 	or	r4,r3,r14
 80064c4:	2024c03a 	cmpne	r18,r4,zero
 80064c8:	003f3406 	br	800619c <__adddf3+0x40c>
 80064cc:	2cbff804 	addi	r18,r5,-32
 80064d0:	29800820 	cmpeqi	r6,r5,32
 80064d4:	1c88d83a 	srl	r4,r3,r18
 80064d8:	3000041e 	bne	r6,zero,80064ec <__adddf3+0x75c>
 80064dc:	01801004 	movi	r6,64
 80064e0:	314bc83a 	sub	r5,r6,r5
 80064e4:	1946983a 	sll	r3,r3,r5
 80064e8:	70dcb03a 	or	r14,r14,r3
 80064ec:	7024c03a 	cmpne	r18,r14,zero
 80064f0:	9124b03a 	or	r18,r18,r4
 80064f4:	003f9e06 	br	8006370 <__adddf3+0x5e0>
 80064f8:	103efa1e 	bne	r2,zero,80060e4 <__adddf3+0x354>
 80064fc:	4804977a 	slli	r2,r9,29
 8006500:	00c80034 	movhi	r3,8192
 8006504:	18ffffc4 	addi	r3,r3,-1
 8006508:	30cc703a 	and	r6,r6,r3
 800650c:	4810d0fa 	srli	r8,r9,3
 8006510:	1184b03a 	or	r2,r2,r6
 8006514:	003f0506 	br	800612c <__adddf3+0x39c>
 8006518:	10004426 	beq	r2,zero,800662c <__adddf3+0x89c>
 800651c:	4806977a 	slli	r3,r9,29
 8006520:	00880034 	movhi	r2,8192
 8006524:	10bfffc4 	addi	r2,r2,-1
 8006528:	3084703a 	and	r2,r6,r2
 800652c:	4810d0fa 	srli	r8,r9,3
 8006530:	10c4b03a 	or	r2,r2,r3
 8006534:	3821883a 	mov	r16,r7
 8006538:	003ed706 	br	8006098 <__adddf3+0x308>
 800653c:	6ba5c83a 	sub	r18,r13,r14
 8006540:	48c7c83a 	sub	r3,r9,r3
 8006544:	6c85803a 	cmpltu	r2,r13,r18
 8006548:	1889c83a 	sub	r4,r3,r2
 800654c:	3821883a 	mov	r16,r7
 8006550:	04400044 	movi	r17,1
 8006554:	003e3f06 	br	8005e54 <__adddf3+0xc4>
 8006558:	180a977a 	slli	r5,r3,29
 800655c:	00880034 	movhi	r2,8192
 8006560:	10bfffc4 	addi	r2,r2,-1
 8006564:	2084703a 	and	r2,r4,r2
 8006568:	1810d0fa 	srli	r8,r3,3
 800656c:	1144b03a 	or	r2,r2,r5
 8006570:	003eee06 	br	800612c <__adddf3+0x39c>
 8006574:	7365c83a 	sub	r18,r14,r13
 8006578:	7485803a 	cmpltu	r2,r14,r18
 800657c:	1a49c83a 	sub	r4,r3,r9
 8006580:	2089c83a 	sub	r4,r4,r2
 8006584:	2080202c 	andhi	r2,r4,128
 8006588:	10002626 	beq	r2,zero,8006624 <__adddf3+0x894>
 800658c:	6ba5c83a 	sub	r18,r13,r14
 8006590:	48c7c83a 	sub	r3,r9,r3
 8006594:	6c85803a 	cmpltu	r2,r13,r18
 8006598:	1889c83a 	sub	r4,r3,r2
 800659c:	3821883a 	mov	r16,r7
 80065a0:	003e4a06 	br	8005ecc <__adddf3+0x13c>
 80065a4:	4806977a 	slli	r3,r9,29
 80065a8:	00880034 	movhi	r2,8192
 80065ac:	10bfffc4 	addi	r2,r2,-1
 80065b0:	3084703a 	and	r2,r6,r2
 80065b4:	4810d0fa 	srli	r8,r9,3
 80065b8:	10c4b03a 	or	r2,r2,r3
 80065bc:	003edb06 	br	800612c <__adddf3+0x39c>
 80065c0:	4806977a 	slli	r3,r9,29
 80065c4:	00880034 	movhi	r2,8192
 80065c8:	10bfffc4 	addi	r2,r2,-1
 80065cc:	3084703a 	and	r2,r6,r2
 80065d0:	4810d0fa 	srli	r8,r9,3
 80065d4:	10c4b03a 	or	r2,r2,r3
 80065d8:	003ead06 	br	8006090 <__adddf3+0x300>
 80065dc:	180a977a 	slli	r5,r3,29
 80065e0:	1810d0fa 	srli	r8,r3,3
 80065e4:	10002f26 	beq	r2,zero,80066a4 <__adddf3+0x914>
 80065e8:	00c80034 	movhi	r3,8192
 80065ec:	18ffffc4 	addi	r3,r3,-1
 80065f0:	20c4703a 	and	r2,r4,r3
 80065f4:	4100022c 	andhi	r4,r8,8
 80065f8:	1144b03a 	or	r2,r2,r5
 80065fc:	203ecb26 	beq	r4,zero,800612c <__adddf3+0x39c>
 8006600:	4808d0fa 	srli	r4,r9,3
 8006604:	2140022c 	andhi	r5,r4,8
 8006608:	283ec81e 	bne	r5,zero,800612c <__adddf3+0x39c>
 800660c:	4812977a 	slli	r9,r9,29
 8006610:	30c4703a 	and	r2,r6,r3
 8006614:	3821883a 	mov	r16,r7
 8006618:	1244b03a 	or	r2,r2,r9
 800661c:	2011883a 	mov	r8,r4
 8006620:	003ec206 	br	800612c <__adddf3+0x39c>
 8006624:	9104b03a 	or	r2,r18,r4
 8006628:	103e921e 	bne	r2,zero,8006074 <__adddf3+0x2e4>
 800662c:	0011883a 	mov	r8,zero
 8006630:	100b883a 	mov	r5,r2
 8006634:	0021883a 	mov	r16,zero
 8006638:	003e9706 	br	8006098 <__adddf3+0x308>
 800663c:	4804977a 	slli	r2,r9,29
 8006640:	00c80034 	movhi	r3,8192
 8006644:	18ffffc4 	addi	r3,r3,-1
 8006648:	30cc703a 	and	r6,r6,r3
 800664c:	4810d0fa 	srli	r8,r9,3
 8006650:	1184b03a 	or	r2,r2,r6
 8006654:	003e9006 	br	8006098 <__adddf3+0x308>
 8006658:	7365883a 	add	r18,r14,r13
 800665c:	1a47883a 	add	r3,r3,r9
 8006660:	9389803a 	cmpltu	r4,r18,r14
 8006664:	1909883a 	add	r4,r3,r4
 8006668:	2080202c 	andhi	r2,r4,128
 800666c:	103e8126 	beq	r2,zero,8006074 <__adddf3+0x2e4>
 8006670:	00bfe034 	movhi	r2,65408
 8006674:	10bfffc4 	addi	r2,r2,-1
 8006678:	2088703a 	and	r4,r4,r2
 800667c:	04400044 	movi	r17,1
 8006680:	003e7c06 	br	8006074 <__adddf3+0x2e4>
 8006684:	4804977a 	slli	r2,r9,29
 8006688:	00c80034 	movhi	r3,8192
 800668c:	18ffffc4 	addi	r3,r3,-1
 8006690:	30cc703a 	and	r6,r6,r3
 8006694:	4810d0fa 	srli	r8,r9,3
 8006698:	1184b03a 	or	r2,r2,r6
 800669c:	3821883a 	mov	r16,r7
 80066a0:	003ea206 	br	800612c <__adddf3+0x39c>
 80066a4:	00880034 	movhi	r2,8192
 80066a8:	10bfffc4 	addi	r2,r2,-1
 80066ac:	2084703a 	and	r2,r4,r2
 80066b0:	1144b03a 	or	r2,r2,r5
 80066b4:	003e9d06 	br	800612c <__adddf3+0x39c>
 80066b8:	293ff804 	addi	r4,r5,-32
 80066bc:	29800820 	cmpeqi	r6,r5,32
 80066c0:	1908d83a 	srl	r4,r3,r4
 80066c4:	3000041e 	bne	r6,zero,80066d8 <__adddf3+0x948>
 80066c8:	01801004 	movi	r6,64
 80066cc:	314bc83a 	sub	r5,r6,r5
 80066d0:	1946983a 	sll	r3,r3,r5
 80066d4:	70dcb03a 	or	r14,r14,r3
 80066d8:	7024c03a 	cmpne	r18,r14,zero
 80066dc:	9124b03a 	or	r18,r18,r4
 80066e0:	003eae06 	br	800619c <__adddf3+0x40c>
 80066e4:	7365883a 	add	r18,r14,r13
 80066e8:	1a47883a 	add	r3,r3,r9
 80066ec:	9345803a 	cmpltu	r2,r18,r13
 80066f0:	1889883a 	add	r4,r3,r2
 80066f4:	003e5c06 	br	8006068 <__adddf3+0x2d8>
 80066f8:	0005883a 	mov	r2,zero
 80066fc:	0141ffc4 	movi	r5,2047
 8006700:	0007883a 	mov	r3,zero
 8006704:	003e0806 	br	8005f28 <__adddf3+0x198>

08006708 <__divdf3>:
 8006708:	2810d53a 	srli	r8,r5,20
 800670c:	defff004 	addi	sp,sp,-64
 8006710:	dc000615 	stw	r16,24(sp)
 8006714:	04000434 	movhi	r16,16
 8006718:	df000e15 	stw	fp,56(sp)
 800671c:	ddc00d15 	stw	r23,52(sp)
 8006720:	dd800c15 	stw	r22,48(sp)
 8006724:	dd000a15 	stw	r20,40(sp)
 8006728:	843fffc4 	addi	r16,r16,-1
 800672c:	dfc00f15 	stw	ra,60(sp)
 8006730:	dd400b15 	stw	r21,44(sp)
 8006734:	dcc00915 	stw	r19,36(sp)
 8006738:	dc800815 	stw	r18,32(sp)
 800673c:	dc400715 	stw	r17,28(sp)
 8006740:	4201ffcc 	andi	r8,r8,2047
 8006744:	282ed7fa 	srli	r23,r5,31
 8006748:	3039883a 	mov	fp,r6
 800674c:	382d883a 	mov	r22,r7
 8006750:	2029883a 	mov	r20,r4
 8006754:	2c20703a 	and	r16,r5,r16
 8006758:	40005326 	beq	r8,zero,80068a8 <__divdf3+0x1a0>
 800675c:	4081ffe0 	cmpeqi	r2,r8,2047
 8006760:	1000641e 	bne	r2,zero,80068f4 <__divdf3+0x1ec>
 8006764:	2026d77a 	srli	r19,r4,29
 8006768:	800a90fa 	slli	r5,r16,3
 800676c:	202890fa 	slli	r20,r4,3
 8006770:	44bf0044 	addi	r18,r8,-1023
 8006774:	994ab03a 	or	r5,r19,r5
 8006778:	2cc02034 	orhi	r19,r5,128
 800677c:	0021883a 	mov	r16,zero
 8006780:	0023883a 	mov	r17,zero
 8006784:	b010d53a 	srli	r8,r22,20
 8006788:	00c00434 	movhi	r3,16
 800678c:	18ffffc4 	addi	r3,r3,-1
 8006790:	4201ffcc 	andi	r8,r8,2047
 8006794:	b02ad7fa 	srli	r21,r22,31
 8006798:	b0ec703a 	and	r22,r22,r3
 800679c:	40005c26 	beq	r8,zero,8006910 <__divdf3+0x208>
 80067a0:	4081ffe0 	cmpeqi	r2,r8,2047
 80067a4:	1000201e 	bne	r2,zero,8006828 <__divdf3+0x120>
 80067a8:	b00690fa 	slli	r3,r22,3
 80067ac:	e004d77a 	srli	r2,fp,29
 80067b0:	e01490fa 	slli	r10,fp,3
 80067b4:	423f0044 	addi	r8,r8,-1023
 80067b8:	10c6b03a 	or	r3,r2,r3
 80067bc:	1d802034 	orhi	r22,r3,128
 80067c0:	9225c83a 	sub	r18,r18,r8
 80067c4:	0007883a 	mov	r3,zero
 80067c8:	80800428 	cmpgeui	r2,r16,16
 80067cc:	bd52f03a 	xor	r9,r23,r21
 80067d0:	1000a81e 	bne	r2,zero,8006a74 <__divdf3+0x36c>
 80067d4:	800c90ba 	slli	r6,r16,2
 80067d8:	00820034 	movhi	r2,2048
 80067dc:	3085883a 	add	r2,r6,r2
 80067e0:	1099fa17 	ldw	r2,26600(r2)
 80067e4:	1000683a 	jmp	r2
 80067e8:	08006a74 	orhi	zero,at,425
 80067ec:	08006898 	cmpnei	zero,at,418
 80067f0:	08006844 	addi	zero,at,417
 80067f4:	080069bc 	xorhi	zero,at,422
 80067f8:	08006844 	addi	zero,at,417
 80067fc:	08006a18 	cmpnei	zero,at,424
 8006800:	08006844 	addi	zero,at,417
 8006804:	080069bc 	xorhi	zero,at,422
 8006808:	08006898 	cmpnei	zero,at,418
 800680c:	08006898 	cmpnei	zero,at,418
 8006810:	08006a18 	cmpnei	zero,at,424
 8006814:	080069bc 	xorhi	zero,at,422
 8006818:	08006954 	ori	zero,at,421
 800681c:	08006954 	ori	zero,at,421
 8006820:	08006954 	ori	zero,at,421
 8006824:	08006a30 	cmpltui	zero,at,424
 8006828:	b714b03a 	or	r10,r22,fp
 800682c:	94be0044 	addi	r18,r18,-2047
 8006830:	5000671e 	bne	r10,zero,80069d0 <__divdf3+0x2c8>
 8006834:	84000094 	ori	r16,r16,2
 8006838:	002d883a 	mov	r22,zero
 800683c:	00c00084 	movi	r3,2
 8006840:	003fe106 	br	80067c8 <__divdf3+0xc0>
 8006844:	0007883a 	mov	r3,zero
 8006848:	000b883a 	mov	r5,zero
 800684c:	0029883a 	mov	r20,zero
 8006850:	1806953a 	slli	r3,r3,20
 8006854:	4a403fcc 	andi	r9,r9,255
 8006858:	481297fa 	slli	r9,r9,31
 800685c:	1946b03a 	or	r3,r3,r5
 8006860:	a005883a 	mov	r2,r20
 8006864:	1a46b03a 	or	r3,r3,r9
 8006868:	dfc00f17 	ldw	ra,60(sp)
 800686c:	df000e17 	ldw	fp,56(sp)
 8006870:	ddc00d17 	ldw	r23,52(sp)
 8006874:	dd800c17 	ldw	r22,48(sp)
 8006878:	dd400b17 	ldw	r21,44(sp)
 800687c:	dd000a17 	ldw	r20,40(sp)
 8006880:	dcc00917 	ldw	r19,36(sp)
 8006884:	dc800817 	ldw	r18,32(sp)
 8006888:	dc400717 	ldw	r17,28(sp)
 800688c:	dc000617 	ldw	r16,24(sp)
 8006890:	dec01004 	addi	sp,sp,64
 8006894:	f800283a 	ret
 8006898:	00c1ffc4 	movi	r3,2047
 800689c:	000b883a 	mov	r5,zero
 80068a0:	0029883a 	mov	r20,zero
 80068a4:	003fea06 	br	8006850 <__divdf3+0x148>
 80068a8:	2426b03a 	or	r19,r4,r16
 80068ac:	2023883a 	mov	r17,r4
 80068b0:	98004f26 	beq	r19,zero,80069f0 <__divdf3+0x2e8>
 80068b4:	80017b26 	beq	r16,zero,8006ea4 <__divdf3+0x79c>
 80068b8:	8009883a 	mov	r4,r16
 80068bc:	80085180 	call	8008518 <__clzsi2>
 80068c0:	113ffd44 	addi	r4,r2,-11
 80068c4:	00c00744 	movi	r3,29
 80068c8:	14fffe04 	addi	r19,r2,-8
 80068cc:	1907c83a 	sub	r3,r3,r4
 80068d0:	84ca983a 	sll	r5,r16,r19
 80068d4:	88c6d83a 	srl	r3,r17,r3
 80068d8:	8ce8983a 	sll	r20,r17,r19
 80068dc:	1966b03a 	or	r19,r3,r5
 80068e0:	023f0344 	movi	r8,-1011
 80068e4:	40a5c83a 	sub	r18,r8,r2
 80068e8:	0021883a 	mov	r16,zero
 80068ec:	0023883a 	mov	r17,zero
 80068f0:	003fa406 	br	8006784 <__divdf3+0x7c>
 80068f4:	2426b03a 	or	r19,r4,r16
 80068f8:	9800421e 	bne	r19,zero,8006a04 <__divdf3+0x2fc>
 80068fc:	0029883a 	mov	r20,zero
 8006900:	04000204 	movi	r16,8
 8006904:	0481ffc4 	movi	r18,2047
 8006908:	04400084 	movi	r17,2
 800690c:	003f9d06 	br	8006784 <__divdf3+0x7c>
 8006910:	b714b03a 	or	r10,r22,fp
 8006914:	50003226 	beq	r10,zero,80069e0 <__divdf3+0x2d8>
 8006918:	b0016c26 	beq	r22,zero,8006ecc <__divdf3+0x7c4>
 800691c:	b009883a 	mov	r4,r22
 8006920:	80085180 	call	8008518 <__clzsi2>
 8006924:	117ffd44 	addi	r5,r2,-11
 8006928:	01000744 	movi	r4,29
 800692c:	12bffe04 	addi	r10,r2,-8
 8006930:	2149c83a 	sub	r4,r4,r5
 8006934:	b286983a 	sll	r3,r22,r10
 8006938:	e108d83a 	srl	r4,fp,r4
 800693c:	e294983a 	sll	r10,fp,r10
 8006940:	20ecb03a 	or	r22,r4,r3
 8006944:	1491883a 	add	r8,r2,r18
 8006948:	4480fcc4 	addi	r18,r8,1011
 800694c:	0007883a 	mov	r3,zero
 8006950:	003f9d06 	br	80067c8 <__divdf3+0xc0>
 8006954:	b813883a 	mov	r9,r23
 8006958:	888000a0 	cmpeqi	r2,r17,2
 800695c:	103fce1e 	bne	r2,zero,8006898 <__divdf3+0x190>
 8006960:	888000e0 	cmpeqi	r2,r17,3
 8006964:	1001ac1e 	bne	r2,zero,8007018 <__divdf3+0x910>
 8006968:	88800060 	cmpeqi	r2,r17,1
 800696c:	103fb51e 	bne	r2,zero,8006844 <__divdf3+0x13c>
 8006970:	9440ffc4 	addi	r17,r18,1023
 8006974:	04411c0e 	bge	zero,r17,8006de8 <__divdf3+0x6e0>
 8006978:	a08001cc 	andi	r2,r20,7
 800697c:	1001831e 	bne	r2,zero,8006f8c <__divdf3+0x884>
 8006980:	a008d0fa 	srli	r4,r20,3
 8006984:	9880402c 	andhi	r2,r19,256
 8006988:	10000426 	beq	r2,zero,800699c <__divdf3+0x294>
 800698c:	00bfc034 	movhi	r2,65280
 8006990:	10bfffc4 	addi	r2,r2,-1
 8006994:	98a6703a 	and	r19,r19,r2
 8006998:	94410004 	addi	r17,r18,1024
 800699c:	8881ffc8 	cmpgei	r2,r17,2047
 80069a0:	103fbd1e 	bne	r2,zero,8006898 <__divdf3+0x190>
 80069a4:	9828977a 	slli	r20,r19,29
 80069a8:	980a927a 	slli	r5,r19,9
 80069ac:	88c1ffcc 	andi	r3,r17,2047
 80069b0:	a128b03a 	or	r20,r20,r4
 80069b4:	280ad33a 	srli	r5,r5,12
 80069b8:	003fa506 	br	8006850 <__divdf3+0x148>
 80069bc:	a813883a 	mov	r9,r21
 80069c0:	b027883a 	mov	r19,r22
 80069c4:	5029883a 	mov	r20,r10
 80069c8:	1823883a 	mov	r17,r3
 80069cc:	003fe206 	br	8006958 <__divdf3+0x250>
 80069d0:	840000d4 	ori	r16,r16,3
 80069d4:	e015883a 	mov	r10,fp
 80069d8:	00c000c4 	movi	r3,3
 80069dc:	003f7a06 	br	80067c8 <__divdf3+0xc0>
 80069e0:	84000054 	ori	r16,r16,1
 80069e4:	002d883a 	mov	r22,zero
 80069e8:	00c00044 	movi	r3,1
 80069ec:	003f7606 	br	80067c8 <__divdf3+0xc0>
 80069f0:	0029883a 	mov	r20,zero
 80069f4:	04000104 	movi	r16,4
 80069f8:	0025883a 	mov	r18,zero
 80069fc:	04400044 	movi	r17,1
 8006a00:	003f6006 	br	8006784 <__divdf3+0x7c>
 8006a04:	8027883a 	mov	r19,r16
 8006a08:	0481ffc4 	movi	r18,2047
 8006a0c:	04000304 	movi	r16,12
 8006a10:	044000c4 	movi	r17,3
 8006a14:	003f5b06 	br	8006784 <__divdf3+0x7c>
 8006a18:	01400434 	movhi	r5,16
 8006a1c:	0013883a 	mov	r9,zero
 8006a20:	297fffc4 	addi	r5,r5,-1
 8006a24:	053fffc4 	movi	r20,-1
 8006a28:	00c1ffc4 	movi	r3,2047
 8006a2c:	003f8806 	br	8006850 <__divdf3+0x148>
 8006a30:	9880022c 	andhi	r2,r19,8
 8006a34:	10000926 	beq	r2,zero,8006a5c <__divdf3+0x354>
 8006a38:	b080022c 	andhi	r2,r22,8
 8006a3c:	1000071e 	bne	r2,zero,8006a5c <__divdf3+0x354>
 8006a40:	00800434 	movhi	r2,16
 8006a44:	b1400234 	orhi	r5,r22,8
 8006a48:	10bfffc4 	addi	r2,r2,-1
 8006a4c:	288a703a 	and	r5,r5,r2
 8006a50:	a813883a 	mov	r9,r21
 8006a54:	5029883a 	mov	r20,r10
 8006a58:	003ff306 	br	8006a28 <__divdf3+0x320>
 8006a5c:	00800434 	movhi	r2,16
 8006a60:	99400234 	orhi	r5,r19,8
 8006a64:	10bfffc4 	addi	r2,r2,-1
 8006a68:	288a703a 	and	r5,r5,r2
 8006a6c:	b813883a 	mov	r9,r23
 8006a70:	003fed06 	br	8006a28 <__divdf3+0x320>
 8006a74:	b4c10536 	bltu	r22,r19,8006e8c <__divdf3+0x784>
 8006a78:	b4c10326 	beq	r22,r19,8006e88 <__divdf3+0x780>
 8006a7c:	94bfffc4 	addi	r18,r18,-1
 8006a80:	a039883a 	mov	fp,r20
 8006a84:	9821883a 	mov	r16,r19
 8006a88:	0023883a 	mov	r17,zero
 8006a8c:	b006923a 	slli	r3,r22,8
 8006a90:	502cd63a 	srli	r22,r10,24
 8006a94:	8009883a 	mov	r4,r16
 8006a98:	182ed43a 	srli	r23,r3,16
 8006a9c:	b0ecb03a 	or	r22,r22,r3
 8006aa0:	da400015 	stw	r9,0(sp)
 8006aa4:	b80b883a 	mov	r5,r23
 8006aa8:	502a923a 	slli	r21,r10,8
 8006aac:	b53fffcc 	andi	r20,r22,65535
 8006ab0:	80051fc0 	call	80051fc <__udivsi3>
 8006ab4:	100b883a 	mov	r5,r2
 8006ab8:	a009883a 	mov	r4,r20
 8006abc:	1027883a 	mov	r19,r2
 8006ac0:	80052bc0 	call	80052bc <__mulsi3>
 8006ac4:	8009883a 	mov	r4,r16
 8006ac8:	b80b883a 	mov	r5,r23
 8006acc:	1021883a 	mov	r16,r2
 8006ad0:	80052600 	call	8005260 <__umodsi3>
 8006ad4:	1004943a 	slli	r2,r2,16
 8006ad8:	e008d43a 	srli	r4,fp,16
 8006adc:	da400017 	ldw	r9,0(sp)
 8006ae0:	2088b03a 	or	r4,r4,r2
 8006ae4:	2400042e 	bgeu	r4,r16,8006af8 <__divdf3+0x3f0>
 8006ae8:	2589883a 	add	r4,r4,r22
 8006aec:	98bfffc4 	addi	r2,r19,-1
 8006af0:	2581082e 	bgeu	r4,r22,8006f14 <__divdf3+0x80c>
 8006af4:	1027883a 	mov	r19,r2
 8006af8:	2421c83a 	sub	r16,r4,r16
 8006afc:	b80b883a 	mov	r5,r23
 8006b00:	8009883a 	mov	r4,r16
 8006b04:	da400215 	stw	r9,8(sp)
 8006b08:	80051fc0 	call	80051fc <__udivsi3>
 8006b0c:	100b883a 	mov	r5,r2
 8006b10:	a009883a 	mov	r4,r20
 8006b14:	d8800115 	stw	r2,4(sp)
 8006b18:	80052bc0 	call	80052bc <__mulsi3>
 8006b1c:	b80b883a 	mov	r5,r23
 8006b20:	8009883a 	mov	r4,r16
 8006b24:	d8800015 	stw	r2,0(sp)
 8006b28:	80052600 	call	8005260 <__umodsi3>
 8006b2c:	100c943a 	slli	r6,r2,16
 8006b30:	d8c00017 	ldw	r3,0(sp)
 8006b34:	e73fffcc 	andi	fp,fp,65535
 8006b38:	e18cb03a 	or	r6,fp,r6
 8006b3c:	d9c00117 	ldw	r7,4(sp)
 8006b40:	da400217 	ldw	r9,8(sp)
 8006b44:	30c0042e 	bgeu	r6,r3,8006b58 <__divdf3+0x450>
 8006b48:	358d883a 	add	r6,r6,r22
 8006b4c:	38bfffc4 	addi	r2,r7,-1
 8006b50:	3580ec2e 	bgeu	r6,r22,8006f04 <__divdf3+0x7fc>
 8006b54:	100f883a 	mov	r7,r2
 8006b58:	9826943a 	slli	r19,r19,16
 8006b5c:	af3fffcc 	andi	fp,r21,65535
 8006b60:	30c7c83a 	sub	r3,r6,r3
 8006b64:	99e6b03a 	or	r19,r19,r7
 8006b68:	980ed43a 	srli	r7,r19,16
 8006b6c:	9abfffcc 	andi	r10,r19,65535
 8006b70:	5009883a 	mov	r4,r10
 8006b74:	e00b883a 	mov	r5,fp
 8006b78:	da400515 	stw	r9,20(sp)
 8006b7c:	d8c00315 	stw	r3,12(sp)
 8006b80:	da800415 	stw	r10,16(sp)
 8006b84:	d9c00015 	stw	r7,0(sp)
 8006b88:	80052bc0 	call	80052bc <__mulsi3>
 8006b8c:	d9c00017 	ldw	r7,0(sp)
 8006b90:	e00b883a 	mov	r5,fp
 8006b94:	d8800215 	stw	r2,8(sp)
 8006b98:	3809883a 	mov	r4,r7
 8006b9c:	80052bc0 	call	80052bc <__mulsi3>
 8006ba0:	d9c00017 	ldw	r7,0(sp)
 8006ba4:	a820d43a 	srli	r16,r21,16
 8006ba8:	d8800115 	stw	r2,4(sp)
 8006bac:	3809883a 	mov	r4,r7
 8006bb0:	800b883a 	mov	r5,r16
 8006bb4:	80052bc0 	call	80052bc <__mulsi3>
 8006bb8:	da800417 	ldw	r10,16(sp)
 8006bbc:	8009883a 	mov	r4,r16
 8006bc0:	d8800015 	stw	r2,0(sp)
 8006bc4:	500b883a 	mov	r5,r10
 8006bc8:	80052bc0 	call	80052bc <__mulsi3>
 8006bcc:	d9800217 	ldw	r6,8(sp)
 8006bd0:	d9c00117 	ldw	r7,4(sp)
 8006bd4:	da000017 	ldw	r8,0(sp)
 8006bd8:	3008d43a 	srli	r4,r6,16
 8006bdc:	11c5883a 	add	r2,r2,r7
 8006be0:	d8c00317 	ldw	r3,12(sp)
 8006be4:	2089883a 	add	r4,r4,r2
 8006be8:	da400517 	ldw	r9,20(sp)
 8006bec:	21c0022e 	bgeu	r4,r7,8006bf8 <__divdf3+0x4f0>
 8006bf0:	00800074 	movhi	r2,1
 8006bf4:	4091883a 	add	r8,r8,r2
 8006bf8:	200ad43a 	srli	r5,r4,16
 8006bfc:	2008943a 	slli	r4,r4,16
 8006c00:	31bfffcc 	andi	r6,r6,65535
 8006c04:	2a0b883a 	add	r5,r5,r8
 8006c08:	218d883a 	add	r6,r4,r6
 8006c0c:	19409436 	bltu	r3,r5,8006e60 <__divdf3+0x758>
 8006c10:	19409226 	beq	r3,r5,8006e5c <__divdf3+0x754>
 8006c14:	898dc83a 	sub	r6,r17,r6
 8006c18:	89a3803a 	cmpltu	r17,r17,r6
 8006c1c:	1947c83a 	sub	r3,r3,r5
 8006c20:	1c47c83a 	sub	r3,r3,r17
 8006c24:	9440ffc4 	addi	r17,r18,1023
 8006c28:	b0c0d326 	beq	r22,r3,8006f78 <__divdf3+0x870>
 8006c2c:	1809883a 	mov	r4,r3
 8006c30:	b80b883a 	mov	r5,r23
 8006c34:	d9800315 	stw	r6,12(sp)
 8006c38:	da400215 	stw	r9,8(sp)
 8006c3c:	d8c00015 	stw	r3,0(sp)
 8006c40:	80051fc0 	call	80051fc <__udivsi3>
 8006c44:	100b883a 	mov	r5,r2
 8006c48:	a009883a 	mov	r4,r20
 8006c4c:	d8800115 	stw	r2,4(sp)
 8006c50:	80052bc0 	call	80052bc <__mulsi3>
 8006c54:	d8c00017 	ldw	r3,0(sp)
 8006c58:	b80b883a 	mov	r5,r23
 8006c5c:	d8800015 	stw	r2,0(sp)
 8006c60:	1809883a 	mov	r4,r3
 8006c64:	80052600 	call	8005260 <__umodsi3>
 8006c68:	d9800317 	ldw	r6,12(sp)
 8006c6c:	1006943a 	slli	r3,r2,16
 8006c70:	da000017 	ldw	r8,0(sp)
 8006c74:	3008d43a 	srli	r4,r6,16
 8006c78:	d9c00117 	ldw	r7,4(sp)
 8006c7c:	da400217 	ldw	r9,8(sp)
 8006c80:	20c6b03a 	or	r3,r4,r3
 8006c84:	1a00062e 	bgeu	r3,r8,8006ca0 <__divdf3+0x598>
 8006c88:	1d87883a 	add	r3,r3,r22
 8006c8c:	38bfffc4 	addi	r2,r7,-1
 8006c90:	1d80c836 	bltu	r3,r22,8006fb4 <__divdf3+0x8ac>
 8006c94:	1a00c72e 	bgeu	r3,r8,8006fb4 <__divdf3+0x8ac>
 8006c98:	39ffff84 	addi	r7,r7,-2
 8006c9c:	1d87883a 	add	r3,r3,r22
 8006ca0:	1a07c83a 	sub	r3,r3,r8
 8006ca4:	1809883a 	mov	r4,r3
 8006ca8:	b80b883a 	mov	r5,r23
 8006cac:	d9800415 	stw	r6,16(sp)
 8006cb0:	da400315 	stw	r9,12(sp)
 8006cb4:	d9c00215 	stw	r7,8(sp)
 8006cb8:	d8c00115 	stw	r3,4(sp)
 8006cbc:	80051fc0 	call	80051fc <__udivsi3>
 8006cc0:	100b883a 	mov	r5,r2
 8006cc4:	a009883a 	mov	r4,r20
 8006cc8:	d8800015 	stw	r2,0(sp)
 8006ccc:	80052bc0 	call	80052bc <__mulsi3>
 8006cd0:	d8c00117 	ldw	r3,4(sp)
 8006cd4:	b80b883a 	mov	r5,r23
 8006cd8:	102f883a 	mov	r23,r2
 8006cdc:	1809883a 	mov	r4,r3
 8006ce0:	80052600 	call	8005260 <__umodsi3>
 8006ce4:	d9800417 	ldw	r6,16(sp)
 8006ce8:	1004943a 	slli	r2,r2,16
 8006cec:	da000017 	ldw	r8,0(sp)
 8006cf0:	31bfffcc 	andi	r6,r6,65535
 8006cf4:	308cb03a 	or	r6,r6,r2
 8006cf8:	d9c00217 	ldw	r7,8(sp)
 8006cfc:	da400317 	ldw	r9,12(sp)
 8006d00:	35c0062e 	bgeu	r6,r23,8006d1c <__divdf3+0x614>
 8006d04:	358d883a 	add	r6,r6,r22
 8006d08:	40bfffc4 	addi	r2,r8,-1
 8006d0c:	3580a736 	bltu	r6,r22,8006fac <__divdf3+0x8a4>
 8006d10:	35c0a62e 	bgeu	r6,r23,8006fac <__divdf3+0x8a4>
 8006d14:	423fff84 	addi	r8,r8,-2
 8006d18:	358d883a 	add	r6,r6,r22
 8006d1c:	3828943a 	slli	r20,r7,16
 8006d20:	35d5c83a 	sub	r10,r6,r23
 8006d24:	e009883a 	mov	r4,fp
 8006d28:	a228b03a 	or	r20,r20,r8
 8006d2c:	a1ffffcc 	andi	r7,r20,65535
 8006d30:	a02ed43a 	srli	r23,r20,16
 8006d34:	380b883a 	mov	r5,r7
 8006d38:	da400315 	stw	r9,12(sp)
 8006d3c:	da800215 	stw	r10,8(sp)
 8006d40:	d9c00115 	stw	r7,4(sp)
 8006d44:	80052bc0 	call	80052bc <__mulsi3>
 8006d48:	e00b883a 	mov	r5,fp
 8006d4c:	b809883a 	mov	r4,r23
 8006d50:	1039883a 	mov	fp,r2
 8006d54:	80052bc0 	call	80052bc <__mulsi3>
 8006d58:	8009883a 	mov	r4,r16
 8006d5c:	b80b883a 	mov	r5,r23
 8006d60:	d8800015 	stw	r2,0(sp)
 8006d64:	80052bc0 	call	80052bc <__mulsi3>
 8006d68:	d9c00117 	ldw	r7,4(sp)
 8006d6c:	8009883a 	mov	r4,r16
 8006d70:	1021883a 	mov	r16,r2
 8006d74:	380b883a 	mov	r5,r7
 8006d78:	80052bc0 	call	80052bc <__mulsi3>
 8006d7c:	d9800017 	ldw	r6,0(sp)
 8006d80:	e006d43a 	srli	r3,fp,16
 8006d84:	da800217 	ldw	r10,8(sp)
 8006d88:	1185883a 	add	r2,r2,r6
 8006d8c:	1887883a 	add	r3,r3,r2
 8006d90:	da400317 	ldw	r9,12(sp)
 8006d94:	1980022e 	bgeu	r3,r6,8006da0 <__divdf3+0x698>
 8006d98:	00800074 	movhi	r2,1
 8006d9c:	80a1883a 	add	r16,r16,r2
 8006da0:	1808d43a 	srli	r4,r3,16
 8006da4:	1806943a 	slli	r3,r3,16
 8006da8:	e73fffcc 	andi	fp,fp,65535
 8006dac:	2409883a 	add	r4,r4,r16
 8006db0:	1f07883a 	add	r3,r3,fp
 8006db4:	51000436 	bltu	r10,r4,8006dc8 <__divdf3+0x6c0>
 8006db8:	51000226 	beq	r10,r4,8006dc4 <__divdf3+0x6bc>
 8006dbc:	a5000054 	ori	r20,r20,1
 8006dc0:	003eec06 	br	8006974 <__divdf3+0x26c>
 8006dc4:	183eeb26 	beq	r3,zero,8006974 <__divdf3+0x26c>
 8006dc8:	b28d883a 	add	r6,r22,r10
 8006dcc:	a0bfffc4 	addi	r2,r20,-1
 8006dd0:	35806536 	bltu	r6,r22,8006f68 <__divdf3+0x860>
 8006dd4:	31008036 	bltu	r6,r4,8006fd8 <__divdf3+0x8d0>
 8006dd8:	31009426 	beq	r6,r4,800702c <__divdf3+0x924>
 8006ddc:	1029883a 	mov	r20,r2
 8006de0:	003ff606 	br	8006dbc <__divdf3+0x6b4>
 8006de4:	053fffc4 	movi	r20,-1
 8006de8:	01400044 	movi	r5,1
 8006dec:	2c4bc83a 	sub	r5,r5,r17
 8006df0:	28800e48 	cmpgei	r2,r5,57
 8006df4:	103e931e 	bne	r2,zero,8006844 <__divdf3+0x13c>
 8006df8:	28800808 	cmpgei	r2,r5,32
 8006dfc:	1000491e 	bne	r2,zero,8006f24 <__divdf3+0x81c>
 8006e00:	92010784 	addi	r8,r18,1054
 8006e04:	9a04983a 	sll	r2,r19,r8
 8006e08:	a146d83a 	srl	r3,r20,r5
 8006e0c:	a210983a 	sll	r8,r20,r8
 8006e10:	994ad83a 	srl	r5,r19,r5
 8006e14:	10e8b03a 	or	r20,r2,r3
 8006e18:	4010c03a 	cmpne	r8,r8,zero
 8006e1c:	a228b03a 	or	r20,r20,r8
 8006e20:	a08001cc 	andi	r2,r20,7
 8006e24:	10000726 	beq	r2,zero,8006e44 <__divdf3+0x73c>
 8006e28:	a08003cc 	andi	r2,r20,15
 8006e2c:	10800120 	cmpeqi	r2,r2,4
 8006e30:	1000041e 	bne	r2,zero,8006e44 <__divdf3+0x73c>
 8006e34:	a0800104 	addi	r2,r20,4
 8006e38:	1529803a 	cmpltu	r20,r2,r20
 8006e3c:	2d0b883a 	add	r5,r5,r20
 8006e40:	1029883a 	mov	r20,r2
 8006e44:	2880202c 	andhi	r2,r5,128
 8006e48:	10006f26 	beq	r2,zero,8007008 <__divdf3+0x900>
 8006e4c:	00c00044 	movi	r3,1
 8006e50:	000b883a 	mov	r5,zero
 8006e54:	0029883a 	mov	r20,zero
 8006e58:	003e7d06 	br	8006850 <__divdf3+0x148>
 8006e5c:	89bf6d2e 	bgeu	r17,r6,8006c14 <__divdf3+0x50c>
 8006e60:	8d63883a 	add	r17,r17,r21
 8006e64:	8d45803a 	cmpltu	r2,r17,r21
 8006e68:	1585883a 	add	r2,r2,r22
 8006e6c:	1887883a 	add	r3,r3,r2
 8006e70:	98bfffc4 	addi	r2,r19,-1
 8006e74:	b0c0202e 	bgeu	r22,r3,8006ef8 <__divdf3+0x7f0>
 8006e78:	19405136 	bltu	r3,r5,8006fc0 <__divdf3+0x8b8>
 8006e7c:	28c04f26 	beq	r5,r3,8006fbc <__divdf3+0x8b4>
 8006e80:	1027883a 	mov	r19,r2
 8006e84:	003f6306 	br	8006c14 <__divdf3+0x50c>
 8006e88:	a2befc36 	bltu	r20,r10,8006a7c <__divdf3+0x374>
 8006e8c:	983897fa 	slli	fp,r19,31
 8006e90:	a004d07a 	srli	r2,r20,1
 8006e94:	9820d07a 	srli	r16,r19,1
 8006e98:	a02297fa 	slli	r17,r20,31
 8006e9c:	e0b8b03a 	or	fp,fp,r2
 8006ea0:	003efa06 	br	8006a8c <__divdf3+0x384>
 8006ea4:	80085180 	call	8008518 <__clzsi2>
 8006ea8:	11000544 	addi	r4,r2,21
 8006eac:	20c00748 	cmpgei	r3,r4,29
 8006eb0:	100b883a 	mov	r5,r2
 8006eb4:	10800804 	addi	r2,r2,32
 8006eb8:	183e8226 	beq	r3,zero,80068c4 <__divdf3+0x1bc>
 8006ebc:	297ffe04 	addi	r5,r5,-8
 8006ec0:	a166983a 	sll	r19,r20,r5
 8006ec4:	0029883a 	mov	r20,zero
 8006ec8:	003e8506 	br	80068e0 <__divdf3+0x1d8>
 8006ecc:	e009883a 	mov	r4,fp
 8006ed0:	80085180 	call	8008518 <__clzsi2>
 8006ed4:	11400544 	addi	r5,r2,21
 8006ed8:	29000748 	cmpgei	r4,r5,29
 8006edc:	1007883a 	mov	r3,r2
 8006ee0:	10800804 	addi	r2,r2,32
 8006ee4:	203e9026 	beq	r4,zero,8006928 <__divdf3+0x220>
 8006ee8:	18fffe04 	addi	r3,r3,-8
 8006eec:	e0ec983a 	sll	r22,fp,r3
 8006ef0:	0015883a 	mov	r10,zero
 8006ef4:	003e9306 	br	8006944 <__divdf3+0x23c>
 8006ef8:	b0ffe11e 	bne	r22,r3,8006e80 <__divdf3+0x778>
 8006efc:	8d7fe036 	bltu	r17,r21,8006e80 <__divdf3+0x778>
 8006f00:	003fdd06 	br	8006e78 <__divdf3+0x770>
 8006f04:	30ff132e 	bgeu	r6,r3,8006b54 <__divdf3+0x44c>
 8006f08:	39ffff84 	addi	r7,r7,-2
 8006f0c:	358d883a 	add	r6,r6,r22
 8006f10:	003f1106 	br	8006b58 <__divdf3+0x450>
 8006f14:	243ef72e 	bgeu	r4,r16,8006af4 <__divdf3+0x3ec>
 8006f18:	9cffff84 	addi	r19,r19,-2
 8006f1c:	2589883a 	add	r4,r4,r22
 8006f20:	003ef506 	br	8006af8 <__divdf3+0x3f0>
 8006f24:	00fff844 	movi	r3,-31
 8006f28:	1c47c83a 	sub	r3,r3,r17
 8006f2c:	29400820 	cmpeqi	r5,r5,32
 8006f30:	98c6d83a 	srl	r3,r19,r3
 8006f34:	2800031e 	bne	r5,zero,8006f44 <__divdf3+0x83c>
 8006f38:	91410f84 	addi	r5,r18,1086
 8006f3c:	994a983a 	sll	r5,r19,r5
 8006f40:	a168b03a 	or	r20,r20,r5
 8006f44:	a028c03a 	cmpne	r20,r20,zero
 8006f48:	a0e8b03a 	or	r20,r20,r3
 8006f4c:	a4c001cc 	andi	r19,r20,7
 8006f50:	9800291e 	bne	r19,zero,8006ff8 <__divdf3+0x8f0>
 8006f54:	000b883a 	mov	r5,zero
 8006f58:	a028d0fa 	srli	r20,r20,3
 8006f5c:	0007883a 	mov	r3,zero
 8006f60:	a4e8b03a 	or	r20,r20,r19
 8006f64:	003e3a06 	br	8006850 <__divdf3+0x148>
 8006f68:	1029883a 	mov	r20,r2
 8006f6c:	313f931e 	bne	r6,r4,8006dbc <__divdf3+0x6b4>
 8006f70:	1d7f921e 	bne	r3,r21,8006dbc <__divdf3+0x6b4>
 8006f74:	003e7f06 	br	8006974 <__divdf3+0x26c>
 8006f78:	047f9a0e 	bge	zero,r17,8006de4 <__divdf3+0x6dc>
 8006f7c:	0009883a 	mov	r4,zero
 8006f80:	05000044 	movi	r20,1
 8006f84:	9d27883a 	add	r19,r19,r20
 8006f88:	003e7e06 	br	8006984 <__divdf3+0x27c>
 8006f8c:	a08003cc 	andi	r2,r20,15
 8006f90:	10800118 	cmpnei	r2,r2,4
 8006f94:	103e7a26 	beq	r2,zero,8006980 <__divdf3+0x278>
 8006f98:	a1000104 	addi	r4,r20,4
 8006f9c:	00bffec4 	movi	r2,-5
 8006fa0:	2008d0fa 	srli	r4,r4,3
 8006fa4:	1529803a 	cmpltu	r20,r2,r20
 8006fa8:	003ff606 	br	8006f84 <__divdf3+0x87c>
 8006fac:	1011883a 	mov	r8,r2
 8006fb0:	003f5a06 	br	8006d1c <__divdf3+0x614>
 8006fb4:	100f883a 	mov	r7,r2
 8006fb8:	003f3906 	br	8006ca0 <__divdf3+0x598>
 8006fbc:	89bfb02e 	bgeu	r17,r6,8006e80 <__divdf3+0x778>
 8006fc0:	8d63883a 	add	r17,r17,r21
 8006fc4:	8d45803a 	cmpltu	r2,r17,r21
 8006fc8:	1585883a 	add	r2,r2,r22
 8006fcc:	9cffff84 	addi	r19,r19,-2
 8006fd0:	1887883a 	add	r3,r3,r2
 8006fd4:	003f0f06 	br	8006c14 <__divdf3+0x50c>
 8006fd8:	ad45883a 	add	r2,r21,r21
 8006fdc:	156b803a 	cmpltu	r21,r2,r21
 8006fe0:	adad883a 	add	r22,r21,r22
 8006fe4:	358d883a 	add	r6,r6,r22
 8006fe8:	a53fff84 	addi	r20,r20,-2
 8006fec:	102b883a 	mov	r21,r2
 8006ff0:	313fdf26 	beq	r6,r4,8006f70 <__divdf3+0x868>
 8006ff4:	003f7106 	br	8006dbc <__divdf3+0x6b4>
 8006ff8:	a08003cc 	andi	r2,r20,15
 8006ffc:	10800118 	cmpnei	r2,r2,4
 8007000:	000b883a 	mov	r5,zero
 8007004:	103f8b1e 	bne	r2,zero,8006e34 <__divdf3+0x72c>
 8007008:	2804927a 	slli	r2,r5,9
 800700c:	2826977a 	slli	r19,r5,29
 8007010:	100ad33a 	srli	r5,r2,12
 8007014:	003fd006 	br	8006f58 <__divdf3+0x850>
 8007018:	00800434 	movhi	r2,16
 800701c:	99400234 	orhi	r5,r19,8
 8007020:	10bfffc4 	addi	r2,r2,-1
 8007024:	288a703a 	and	r5,r5,r2
 8007028:	003e7f06 	br	8006a28 <__divdf3+0x320>
 800702c:	a8ffea36 	bltu	r21,r3,8006fd8 <__divdf3+0x8d0>
 8007030:	1029883a 	mov	r20,r2
 8007034:	1d7f611e 	bne	r3,r21,8006dbc <__divdf3+0x6b4>
 8007038:	003e4e06 	br	8006974 <__divdf3+0x26c>

0800703c <__eqdf2>:
 800703c:	2810d53a 	srli	r8,r5,20
 8007040:	3806d53a 	srli	r3,r7,20
 8007044:	00800434 	movhi	r2,16
 8007048:	4201ffcc 	andi	r8,r8,2047
 800704c:	10bfffc4 	addi	r2,r2,-1
 8007050:	4241ffd8 	cmpnei	r9,r8,2047
 8007054:	2814d7fa 	srli	r10,r5,31
 8007058:	3816d7fa 	srli	r11,r7,31
 800705c:	288a703a 	and	r5,r5,r2
 8007060:	388e703a 	and	r7,r7,r2
 8007064:	1881ffcc 	andi	r2,r3,2047
 8007068:	48000626 	beq	r9,zero,8007084 <__eqdf2+0x48>
 800706c:	10c1ffe0 	cmpeqi	r3,r2,2047
 8007070:	1800021e 	bne	r3,zero,800707c <__eqdf2+0x40>
 8007074:	4080011e 	bne	r8,r2,800707c <__eqdf2+0x40>
 8007078:	29c00826 	beq	r5,r7,800709c <__eqdf2+0x60>
 800707c:	00800044 	movi	r2,1
 8007080:	f800283a 	ret
 8007084:	2906b03a 	or	r3,r5,r4
 8007088:	183ffc1e 	bne	r3,zero,800707c <__eqdf2+0x40>
 800708c:	1081ffd8 	cmpnei	r2,r2,2047
 8007090:	103ffa1e 	bne	r2,zero,800707c <__eqdf2+0x40>
 8007094:	398eb03a 	or	r7,r7,r6
 8007098:	383ff81e 	bne	r7,zero,800707c <__eqdf2+0x40>
 800709c:	21bff71e 	bne	r4,r6,800707c <__eqdf2+0x40>
 80070a0:	52c00426 	beq	r10,r11,80070b4 <__eqdf2+0x78>
 80070a4:	403ff51e 	bne	r8,zero,800707c <__eqdf2+0x40>
 80070a8:	290ab03a 	or	r5,r5,r4
 80070ac:	2804c03a 	cmpne	r2,r5,zero
 80070b0:	f800283a 	ret
 80070b4:	0005883a 	mov	r2,zero
 80070b8:	f800283a 	ret

080070bc <__gedf2>:
 80070bc:	2810d53a 	srli	r8,r5,20
 80070c0:	3812d53a 	srli	r9,r7,20
 80070c4:	00c00434 	movhi	r3,16
 80070c8:	4201ffcc 	andi	r8,r8,2047
 80070cc:	18ffffc4 	addi	r3,r3,-1
 80070d0:	4281ffd8 	cmpnei	r10,r8,2047
 80070d4:	2816d7fa 	srli	r11,r5,31
 80070d8:	3804d7fa 	srli	r2,r7,31
 80070dc:	28ca703a 	and	r5,r5,r3
 80070e0:	38ce703a 	and	r7,r7,r3
 80070e4:	48c1ffcc 	andi	r3,r9,2047
 80070e8:	50000b26 	beq	r10,zero,8007118 <__gedf2+0x5c>
 80070ec:	1a41ffd8 	cmpnei	r9,r3,2047
 80070f0:	48000d26 	beq	r9,zero,8007128 <__gedf2+0x6c>
 80070f4:	4000191e 	bne	r8,zero,800715c <__gedf2+0xa0>
 80070f8:	2914b03a 	or	r10,r5,r4
 80070fc:	5013003a 	cmpeq	r9,r10,zero
 8007100:	1800131e 	bne	r3,zero,8007150 <__gedf2+0x94>
 8007104:	3998b03a 	or	r12,r7,r6
 8007108:	6000111e 	bne	r12,zero,8007150 <__gedf2+0x94>
 800710c:	50000a1e 	bne	r10,zero,8007138 <__gedf2+0x7c>
 8007110:	0005883a 	mov	r2,zero
 8007114:	f800283a 	ret
 8007118:	2912b03a 	or	r9,r5,r4
 800711c:	48001e1e 	bne	r9,zero,8007198 <__gedf2+0xdc>
 8007120:	1a41ffe0 	cmpeqi	r9,r3,2047
 8007124:	48000d26 	beq	r9,zero,800715c <__gedf2+0xa0>
 8007128:	3992b03a 	or	r9,r7,r6
 800712c:	48001a1e 	bne	r9,zero,8007198 <__gedf2+0xdc>
 8007130:	40000526 	beq	r8,zero,8007148 <__gedf2+0x8c>
 8007134:	58800d26 	beq	r11,r2,800716c <__gedf2+0xb0>
 8007138:	00800044 	movi	r2,1
 800713c:	58000626 	beq	r11,zero,8007158 <__gedf2+0x9c>
 8007140:	00bfffc4 	movi	r2,-1
 8007144:	f800283a 	ret
 8007148:	2912b03a 	or	r9,r5,r4
 800714c:	4813003a 	cmpeq	r9,r9,zero
 8007150:	483ff826 	beq	r9,zero,8007134 <__gedf2+0x78>
 8007154:	103ffa26 	beq	r2,zero,8007140 <__gedf2+0x84>
 8007158:	f800283a 	ret
 800715c:	183ff51e 	bne	r3,zero,8007134 <__gedf2+0x78>
 8007160:	3992b03a 	or	r9,r7,r6
 8007164:	483ff31e 	bne	r9,zero,8007134 <__gedf2+0x78>
 8007168:	003ff306 	br	8007138 <__gedf2+0x7c>
 800716c:	1a000716 	blt	r3,r8,800718c <__gedf2+0xd0>
 8007170:	40fff816 	blt	r8,r3,8007154 <__gedf2+0x98>
 8007174:	397ff036 	bltu	r7,r5,8007138 <__gedf2+0x7c>
 8007178:	29c00926 	beq	r5,r7,80071a0 <__gedf2+0xe4>
 800717c:	29ffe42e 	bgeu	r5,r7,8007110 <__gedf2+0x54>
 8007180:	583fef26 	beq	r11,zero,8007140 <__gedf2+0x84>
 8007184:	5805883a 	mov	r2,r11
 8007188:	f800283a 	ret
 800718c:	103fec1e 	bne	r2,zero,8007140 <__gedf2+0x84>
 8007190:	00800044 	movi	r2,1
 8007194:	f800283a 	ret
 8007198:	00bfff84 	movi	r2,-2
 800719c:	f800283a 	ret
 80071a0:	313fe536 	bltu	r6,r4,8007138 <__gedf2+0x7c>
 80071a4:	21bfda2e 	bgeu	r4,r6,8007110 <__gedf2+0x54>
 80071a8:	003ff506 	br	8007180 <__gedf2+0xc4>

080071ac <__ledf2>:
 80071ac:	2810d53a 	srli	r8,r5,20
 80071b0:	3812d53a 	srli	r9,r7,20
 80071b4:	00c00434 	movhi	r3,16
 80071b8:	4201ffcc 	andi	r8,r8,2047
 80071bc:	18ffffc4 	addi	r3,r3,-1
 80071c0:	4281ffd8 	cmpnei	r10,r8,2047
 80071c4:	2816d7fa 	srli	r11,r5,31
 80071c8:	3804d7fa 	srli	r2,r7,31
 80071cc:	28ca703a 	and	r5,r5,r3
 80071d0:	38ce703a 	and	r7,r7,r3
 80071d4:	48c1ffcc 	andi	r3,r9,2047
 80071d8:	50000b26 	beq	r10,zero,8007208 <__ledf2+0x5c>
 80071dc:	1a41ffd8 	cmpnei	r9,r3,2047
 80071e0:	48000d26 	beq	r9,zero,8007218 <__ledf2+0x6c>
 80071e4:	40001b1e 	bne	r8,zero,8007254 <__ledf2+0xa8>
 80071e8:	2914b03a 	or	r10,r5,r4
 80071ec:	5013003a 	cmpeq	r9,r10,zero
 80071f0:	18000e1e 	bne	r3,zero,800722c <__ledf2+0x80>
 80071f4:	3998b03a 	or	r12,r7,r6
 80071f8:	60000c1e 	bne	r12,zero,800722c <__ledf2+0x80>
 80071fc:	50000d1e 	bne	r10,zero,8007234 <__ledf2+0x88>
 8007200:	0005883a 	mov	r2,zero
 8007204:	f800283a 	ret
 8007208:	2912b03a 	or	r9,r5,r4
 800720c:	48000d1e 	bne	r9,zero,8007244 <__ledf2+0x98>
 8007210:	1a41ffe0 	cmpeqi	r9,r3,2047
 8007214:	48000f26 	beq	r9,zero,8007254 <__ledf2+0xa8>
 8007218:	3992b03a 	or	r9,r7,r6
 800721c:	4800091e 	bne	r9,zero,8007244 <__ledf2+0x98>
 8007220:	4000031e 	bne	r8,zero,8007230 <__ledf2+0x84>
 8007224:	2912b03a 	or	r9,r5,r4
 8007228:	4813003a 	cmpeq	r9,r9,zero
 800722c:	4800071e 	bne	r9,zero,800724c <__ledf2+0xa0>
 8007230:	58800c26 	beq	r11,r2,8007264 <__ledf2+0xb8>
 8007234:	00800044 	movi	r2,1
 8007238:	58000526 	beq	r11,zero,8007250 <__ledf2+0xa4>
 800723c:	00bfffc4 	movi	r2,-1
 8007240:	f800283a 	ret
 8007244:	00800084 	movi	r2,2
 8007248:	f800283a 	ret
 800724c:	103ffb26 	beq	r2,zero,800723c <__ledf2+0x90>
 8007250:	f800283a 	ret
 8007254:	183ff61e 	bne	r3,zero,8007230 <__ledf2+0x84>
 8007258:	3992b03a 	or	r9,r7,r6
 800725c:	483ff41e 	bne	r9,zero,8007230 <__ledf2+0x84>
 8007260:	003ff406 	br	8007234 <__ledf2+0x88>
 8007264:	1a00030e 	bge	r3,r8,8007274 <__ledf2+0xc8>
 8007268:	103ff41e 	bne	r2,zero,800723c <__ledf2+0x90>
 800726c:	00800044 	movi	r2,1
 8007270:	f800283a 	ret
 8007274:	40fff516 	blt	r8,r3,800724c <__ledf2+0xa0>
 8007278:	397fee36 	bltu	r7,r5,8007234 <__ledf2+0x88>
 800727c:	29c00426 	beq	r5,r7,8007290 <__ledf2+0xe4>
 8007280:	29ffdf2e 	bgeu	r5,r7,8007200 <__ledf2+0x54>
 8007284:	583fed26 	beq	r11,zero,800723c <__ledf2+0x90>
 8007288:	5805883a 	mov	r2,r11
 800728c:	f800283a 	ret
 8007290:	313fe836 	bltu	r6,r4,8007234 <__ledf2+0x88>
 8007294:	21bfda2e 	bgeu	r4,r6,8007200 <__ledf2+0x54>
 8007298:	003ffa06 	br	8007284 <__ledf2+0xd8>

0800729c <__muldf3>:
 800729c:	2810d53a 	srli	r8,r5,20
 80072a0:	defff004 	addi	sp,sp,-64
 80072a4:	00800434 	movhi	r2,16
 80072a8:	df000e15 	stw	fp,56(sp)
 80072ac:	dd000a15 	stw	r20,40(sp)
 80072b0:	dcc00915 	stw	r19,36(sp)
 80072b4:	dc400715 	stw	r17,28(sp)
 80072b8:	10bfffc4 	addi	r2,r2,-1
 80072bc:	dfc00f15 	stw	ra,60(sp)
 80072c0:	ddc00d15 	stw	r23,52(sp)
 80072c4:	dd800c15 	stw	r22,48(sp)
 80072c8:	dd400b15 	stw	r21,44(sp)
 80072cc:	dc800815 	stw	r18,32(sp)
 80072d0:	dc000615 	stw	r16,24(sp)
 80072d4:	4201ffcc 	andi	r8,r8,2047
 80072d8:	2828d7fa 	srli	r20,r5,31
 80072dc:	2023883a 	mov	r17,r4
 80072e0:	3039883a 	mov	fp,r6
 80072e4:	28a6703a 	and	r19,r5,r2
 80072e8:	40005a26 	beq	r8,zero,8007454 <__muldf3+0x1b8>
 80072ec:	4081ffe0 	cmpeqi	r2,r8,2047
 80072f0:	10006c1e 	bne	r2,zero,80074a4 <__muldf3+0x208>
 80072f4:	980a90fa 	slli	r5,r19,3
 80072f8:	2026d77a 	srli	r19,r4,29
 80072fc:	202490fa 	slli	r18,r4,3
 8007300:	423f0044 	addi	r8,r8,-1023
 8007304:	9966b03a 	or	r19,r19,r5
 8007308:	9cc02034 	orhi	r19,r19,128
 800730c:	002b883a 	mov	r21,zero
 8007310:	002d883a 	mov	r22,zero
 8007314:	3804d53a 	srli	r2,r7,20
 8007318:	00c00434 	movhi	r3,16
 800731c:	18ffffc4 	addi	r3,r3,-1
 8007320:	1081ffcc 	andi	r2,r2,2047
 8007324:	382ed7fa 	srli	r23,r7,31
 8007328:	38e0703a 	and	r16,r7,r3
 800732c:	10006426 	beq	r2,zero,80074c0 <__muldf3+0x224>
 8007330:	10c1ffe0 	cmpeqi	r3,r2,2047
 8007334:	1800211e 	bne	r3,zero,80073bc <__muldf3+0x120>
 8007338:	e008d77a 	srli	r4,fp,29
 800733c:	802090fa 	slli	r16,r16,3
 8007340:	e02290fa 	slli	r17,fp,3
 8007344:	10bf0044 	addi	r2,r2,-1023
 8007348:	2420b03a 	or	r16,r4,r16
 800734c:	84002034 	orhi	r16,r16,128
 8007350:	4091883a 	add	r8,r8,r2
 8007354:	0009883a 	mov	r4,zero
 8007358:	a8800428 	cmpgeui	r2,r21,16
 800735c:	a5ccf03a 	xor	r6,r20,r23
 8007360:	41c00044 	addi	r7,r8,1
 8007364:	10006d1e 	bne	r2,zero,800751c <__muldf3+0x280>
 8007368:	a80490ba 	slli	r2,r21,2
 800736c:	00c20034 	movhi	r3,2048
 8007370:	10c7883a 	add	r3,r2,r3
 8007374:	189cdf17 	ldw	r2,29564(r3)
 8007378:	1000683a 	jmp	r2
 800737c:	0800751c 	xori	zero,at,468
 8007380:	080073dc 	xori	zero,at,463
 8007384:	080073dc 	xori	zero,at,463
 8007388:	080073d8 	cmpnei	zero,at,463
 800738c:	080073e8 	cmpgeui	zero,at,463
 8007390:	080073e8 	cmpgeui	zero,at,463
 8007394:	08007898 	cmpnei	zero,at,482
 8007398:	080073d8 	cmpnei	zero,at,463
 800739c:	080073e8 	cmpgeui	zero,at,463
 80073a0:	08007898 	cmpnei	zero,at,482
 80073a4:	080073e8 	cmpgeui	zero,at,463
 80073a8:	080073d8 	cmpnei	zero,at,463
 80073ac:	08007848 	cmpgei	zero,at,481
 80073b0:	08007848 	cmpgei	zero,at,481
 80073b4:	08007848 	cmpgei	zero,at,481
 80073b8:	08007924 	muli	zero,at,484
 80073bc:	e422b03a 	or	r17,fp,r16
 80073c0:	4201ffc4 	addi	r8,r8,2047
 80073c4:	8801221e 	bne	r17,zero,8007850 <__muldf3+0x5b4>
 80073c8:	ad400094 	ori	r21,r21,2
 80073cc:	0021883a 	mov	r16,zero
 80073d0:	01000084 	movi	r4,2
 80073d4:	003fe006 	br	8007358 <__muldf3+0xbc>
 80073d8:	b80d883a 	mov	r6,r23
 80073dc:	8027883a 	mov	r19,r16
 80073e0:	8825883a 	mov	r18,r17
 80073e4:	202d883a 	mov	r22,r4
 80073e8:	b08000a0 	cmpeqi	r2,r22,2
 80073ec:	1000471e 	bne	r2,zero,800750c <__muldf3+0x270>
 80073f0:	b08000e0 	cmpeqi	r2,r22,3
 80073f4:	10018e1e 	bne	r2,zero,8007a30 <__muldf3+0x794>
 80073f8:	b0800060 	cmpeqi	r2,r22,1
 80073fc:	1000f826 	beq	r2,zero,80077e0 <__muldf3+0x544>
 8007400:	0007883a 	mov	r3,zero
 8007404:	0027883a 	mov	r19,zero
 8007408:	0025883a 	mov	r18,zero
 800740c:	1806953a 	slli	r3,r3,20
 8007410:	31803fcc 	andi	r6,r6,255
 8007414:	300c97fa 	slli	r6,r6,31
 8007418:	1cc6b03a 	or	r3,r3,r19
 800741c:	9005883a 	mov	r2,r18
 8007420:	1986b03a 	or	r3,r3,r6
 8007424:	dfc00f17 	ldw	ra,60(sp)
 8007428:	df000e17 	ldw	fp,56(sp)
 800742c:	ddc00d17 	ldw	r23,52(sp)
 8007430:	dd800c17 	ldw	r22,48(sp)
 8007434:	dd400b17 	ldw	r21,44(sp)
 8007438:	dd000a17 	ldw	r20,40(sp)
 800743c:	dcc00917 	ldw	r19,36(sp)
 8007440:	dc800817 	ldw	r18,32(sp)
 8007444:	dc400717 	ldw	r17,28(sp)
 8007448:	dc000617 	ldw	r16,24(sp)
 800744c:	dec01004 	addi	sp,sp,64
 8007450:	f800283a 	ret
 8007454:	9924b03a 	or	r18,r19,r4
 8007458:	90010a26 	beq	r18,zero,8007884 <__muldf3+0x5e8>
 800745c:	d9c00015 	stw	r7,0(sp)
 8007460:	98014d26 	beq	r19,zero,8007998 <__muldf3+0x6fc>
 8007464:	9809883a 	mov	r4,r19
 8007468:	80085180 	call	8008518 <__clzsi2>
 800746c:	d9c00017 	ldw	r7,0(sp)
 8007470:	113ffd44 	addi	r4,r2,-11
 8007474:	00c00744 	movi	r3,29
 8007478:	14bffe04 	addi	r18,r2,-8
 800747c:	1907c83a 	sub	r3,r3,r4
 8007480:	9ca6983a 	sll	r19,r19,r18
 8007484:	88c6d83a 	srl	r3,r17,r3
 8007488:	8ca4983a 	sll	r18,r17,r18
 800748c:	1ce6b03a 	or	r19,r3,r19
 8007490:	023f0344 	movi	r8,-1011
 8007494:	4091c83a 	sub	r8,r8,r2
 8007498:	002b883a 	mov	r21,zero
 800749c:	002d883a 	mov	r22,zero
 80074a0:	003f9c06 	br	8007314 <__muldf3+0x78>
 80074a4:	9924b03a 	or	r18,r19,r4
 80074a8:	9000f11e 	bne	r18,zero,8007870 <__muldf3+0x5d4>
 80074ac:	0027883a 	mov	r19,zero
 80074b0:	05400204 	movi	r21,8
 80074b4:	0201ffc4 	movi	r8,2047
 80074b8:	05800084 	movi	r22,2
 80074bc:	003f9506 	br	8007314 <__muldf3+0x78>
 80074c0:	e422b03a 	or	r17,fp,r16
 80074c4:	8800e626 	beq	r17,zero,8007860 <__muldf3+0x5c4>
 80074c8:	da000015 	stw	r8,0(sp)
 80074cc:	80012626 	beq	r16,zero,8007968 <__muldf3+0x6cc>
 80074d0:	8009883a 	mov	r4,r16
 80074d4:	80085180 	call	8008518 <__clzsi2>
 80074d8:	da000017 	ldw	r8,0(sp)
 80074dc:	117ffd44 	addi	r5,r2,-11
 80074e0:	01000744 	movi	r4,29
 80074e4:	147ffe04 	addi	r17,r2,-8
 80074e8:	2149c83a 	sub	r4,r4,r5
 80074ec:	8460983a 	sll	r16,r16,r17
 80074f0:	e108d83a 	srl	r4,fp,r4
 80074f4:	e462983a 	sll	r17,fp,r17
 80074f8:	2420b03a 	or	r16,r4,r16
 80074fc:	4091c83a 	sub	r8,r8,r2
 8007500:	423f0344 	addi	r8,r8,-1011
 8007504:	0009883a 	mov	r4,zero
 8007508:	003f9306 	br	8007358 <__muldf3+0xbc>
 800750c:	00c1ffc4 	movi	r3,2047
 8007510:	0027883a 	mov	r19,zero
 8007514:	0025883a 	mov	r18,zero
 8007518:	003fbc06 	br	800740c <__muldf3+0x170>
 800751c:	9028d43a 	srli	r20,r18,16
 8007520:	8f3fffcc 	andi	fp,r17,65535
 8007524:	957fffcc 	andi	r21,r18,65535
 8007528:	a80b883a 	mov	r5,r21
 800752c:	e009883a 	mov	r4,fp
 8007530:	d9800315 	stw	r6,12(sp)
 8007534:	da000215 	stw	r8,8(sp)
 8007538:	d9c00115 	stw	r7,4(sp)
 800753c:	8822d43a 	srli	r17,r17,16
 8007540:	80052bc0 	call	80052bc <__mulsi3>
 8007544:	e00b883a 	mov	r5,fp
 8007548:	a009883a 	mov	r4,r20
 800754c:	102d883a 	mov	r22,r2
 8007550:	80052bc0 	call	80052bc <__mulsi3>
 8007554:	880b883a 	mov	r5,r17
 8007558:	a009883a 	mov	r4,r20
 800755c:	102f883a 	mov	r23,r2
 8007560:	80052bc0 	call	80052bc <__mulsi3>
 8007564:	a80b883a 	mov	r5,r21
 8007568:	8809883a 	mov	r4,r17
 800756c:	d8800015 	stw	r2,0(sp)
 8007570:	80052bc0 	call	80052bc <__mulsi3>
 8007574:	b006d43a 	srli	r3,r22,16
 8007578:	15e5883a 	add	r18,r2,r23
 800757c:	d9c00117 	ldw	r7,4(sp)
 8007580:	1c87883a 	add	r3,r3,r18
 8007584:	da000217 	ldw	r8,8(sp)
 8007588:	d9800317 	ldw	r6,12(sp)
 800758c:	1dc0042e 	bgeu	r3,r23,80075a0 <__muldf3+0x304>
 8007590:	d9000017 	ldw	r4,0(sp)
 8007594:	00800074 	movhi	r2,1
 8007598:	2085883a 	add	r2,r4,r2
 800759c:	d8800015 	stw	r2,0(sp)
 80075a0:	1804943a 	slli	r2,r3,16
 80075a4:	85ffffcc 	andi	r23,r16,65535
 80075a8:	b5bfffcc 	andi	r22,r22,65535
 80075ac:	1585883a 	add	r2,r2,r22
 80075b0:	a80b883a 	mov	r5,r21
 80075b4:	b809883a 	mov	r4,r23
 80075b8:	1824d43a 	srli	r18,r3,16
 80075bc:	d9800515 	stw	r6,20(sp)
 80075c0:	da000415 	stw	r8,16(sp)
 80075c4:	d9c00315 	stw	r7,12(sp)
 80075c8:	8020d43a 	srli	r16,r16,16
 80075cc:	d8800115 	stw	r2,4(sp)
 80075d0:	80052bc0 	call	80052bc <__mulsi3>
 80075d4:	a009883a 	mov	r4,r20
 80075d8:	b80b883a 	mov	r5,r23
 80075dc:	d8800215 	stw	r2,8(sp)
 80075e0:	80052bc0 	call	80052bc <__mulsi3>
 80075e4:	a009883a 	mov	r4,r20
 80075e8:	800b883a 	mov	r5,r16
 80075ec:	102d883a 	mov	r22,r2
 80075f0:	80052bc0 	call	80052bc <__mulsi3>
 80075f4:	a80b883a 	mov	r5,r21
 80075f8:	8009883a 	mov	r4,r16
 80075fc:	1029883a 	mov	r20,r2
 8007600:	80052bc0 	call	80052bc <__mulsi3>
 8007604:	da800217 	ldw	r10,8(sp)
 8007608:	1585883a 	add	r2,r2,r22
 800760c:	d9c00317 	ldw	r7,12(sp)
 8007610:	5006d43a 	srli	r3,r10,16
 8007614:	da000417 	ldw	r8,16(sp)
 8007618:	d9800517 	ldw	r6,20(sp)
 800761c:	1887883a 	add	r3,r3,r2
 8007620:	1d80022e 	bgeu	r3,r22,800762c <__muldf3+0x390>
 8007624:	00800074 	movhi	r2,1
 8007628:	a0a9883a 	add	r20,r20,r2
 800762c:	1804d43a 	srli	r2,r3,16
 8007630:	1806943a 	slli	r3,r3,16
 8007634:	982cd43a 	srli	r22,r19,16
 8007638:	9d7fffcc 	andi	r21,r19,65535
 800763c:	e009883a 	mov	r4,fp
 8007640:	54ffffcc 	andi	r19,r10,65535
 8007644:	a80b883a 	mov	r5,r21
 8007648:	1ce7883a 	add	r19,r3,r19
 800764c:	d9800515 	stw	r6,20(sp)
 8007650:	da000415 	stw	r8,16(sp)
 8007654:	d9c00315 	stw	r7,12(sp)
 8007658:	1529883a 	add	r20,r2,r20
 800765c:	80052bc0 	call	80052bc <__mulsi3>
 8007660:	e00b883a 	mov	r5,fp
 8007664:	b009883a 	mov	r4,r22
 8007668:	d8800215 	stw	r2,8(sp)
 800766c:	80052bc0 	call	80052bc <__mulsi3>
 8007670:	8809883a 	mov	r4,r17
 8007674:	b00b883a 	mov	r5,r22
 8007678:	1039883a 	mov	fp,r2
 800767c:	80052bc0 	call	80052bc <__mulsi3>
 8007680:	8809883a 	mov	r4,r17
 8007684:	a80b883a 	mov	r5,r21
 8007688:	1023883a 	mov	r17,r2
 800768c:	80052bc0 	call	80052bc <__mulsi3>
 8007690:	d8c00217 	ldw	r3,8(sp)
 8007694:	1705883a 	add	r2,r2,fp
 8007698:	d9c00317 	ldw	r7,12(sp)
 800769c:	1808d43a 	srli	r4,r3,16
 80076a0:	da000417 	ldw	r8,16(sp)
 80076a4:	d9800517 	ldw	r6,20(sp)
 80076a8:	2089883a 	add	r4,r4,r2
 80076ac:	94e5883a 	add	r18,r18,r19
 80076b0:	2700022e 	bgeu	r4,fp,80076bc <__muldf3+0x420>
 80076b4:	00800074 	movhi	r2,1
 80076b8:	88a3883a 	add	r17,r17,r2
 80076bc:	2004d43a 	srli	r2,r4,16
 80076c0:	2038943a 	slli	fp,r4,16
 80076c4:	18ffffcc 	andi	r3,r3,65535
 80076c8:	b809883a 	mov	r4,r23
 80076cc:	a80b883a 	mov	r5,r21
 80076d0:	d9800415 	stw	r6,16(sp)
 80076d4:	da000315 	stw	r8,12(sp)
 80076d8:	d9c00215 	stw	r7,8(sp)
 80076dc:	e0f9883a 	add	fp,fp,r3
 80076e0:	1463883a 	add	r17,r2,r17
 80076e4:	80052bc0 	call	80052bc <__mulsi3>
 80076e8:	b80b883a 	mov	r5,r23
 80076ec:	b009883a 	mov	r4,r22
 80076f0:	102f883a 	mov	r23,r2
 80076f4:	80052bc0 	call	80052bc <__mulsi3>
 80076f8:	b00b883a 	mov	r5,r22
 80076fc:	8009883a 	mov	r4,r16
 8007700:	102d883a 	mov	r22,r2
 8007704:	80052bc0 	call	80052bc <__mulsi3>
 8007708:	a80b883a 	mov	r5,r21
 800770c:	8009883a 	mov	r4,r16
 8007710:	1021883a 	mov	r16,r2
 8007714:	80052bc0 	call	80052bc <__mulsi3>
 8007718:	b80ad43a 	srli	r5,r23,16
 800771c:	1585883a 	add	r2,r2,r22
 8007720:	d9c00217 	ldw	r7,8(sp)
 8007724:	288b883a 	add	r5,r5,r2
 8007728:	da000317 	ldw	r8,12(sp)
 800772c:	d9800417 	ldw	r6,16(sp)
 8007730:	2d80022e 	bgeu	r5,r22,800773c <__muldf3+0x4a0>
 8007734:	00800074 	movhi	r2,1
 8007738:	80a1883a 	add	r16,r16,r2
 800773c:	2806943a 	slli	r3,r5,16
 8007740:	d8800017 	ldw	r2,0(sp)
 8007744:	bdffffcc 	andi	r23,r23,65535
 8007748:	1dc7883a 	add	r3,r3,r23
 800774c:	90ab883a 	add	r21,r18,r2
 8007750:	acd5803a 	cmpltu	r10,r21,r19
 8007754:	1d07883a 	add	r3,r3,r20
 8007758:	af2b883a 	add	r21,r21,fp
 800775c:	1a97883a 	add	r11,r3,r10
 8007760:	af09803a 	cmpltu	r4,r21,fp
 8007764:	2826d43a 	srli	r19,r5,16
 8007768:	5c53883a 	add	r9,r11,r17
 800776c:	4905883a 	add	r2,r9,r4
 8007770:	1d29803a 	cmpltu	r20,r3,r20
 8007774:	5a95803a 	cmpltu	r10,r11,r10
 8007778:	1109803a 	cmpltu	r4,r2,r4
 800777c:	a2a8b03a 	or	r20,r20,r10
 8007780:	4c63803a 	cmpltu	r17,r9,r17
 8007784:	a4e7883a 	add	r19,r20,r19
 8007788:	8908b03a 	or	r4,r17,r4
 800778c:	a824927a 	slli	r18,r21,9
 8007790:	d8c00117 	ldw	r3,4(sp)
 8007794:	9927883a 	add	r19,r19,r4
 8007798:	9c27883a 	add	r19,r19,r16
 800779c:	9826927a 	slli	r19,r19,9
 80077a0:	a82ad5fa 	srli	r21,r21,23
 80077a4:	100ad5fa 	srli	r5,r2,23
 80077a8:	90e4b03a 	or	r18,r18,r3
 80077ac:	1004927a 	slli	r2,r2,9
 80077b0:	9024c03a 	cmpne	r18,r18,zero
 80077b4:	9564b03a 	or	r18,r18,r21
 80077b8:	98c0402c 	andhi	r3,r19,256
 80077bc:	90a4b03a 	or	r18,r18,r2
 80077c0:	9966b03a 	or	r19,r19,r5
 80077c4:	18007f26 	beq	r3,zero,80079c4 <__muldf3+0x728>
 80077c8:	9006d07a 	srli	r3,r18,1
 80077cc:	980497fa 	slli	r2,r19,31
 80077d0:	9480004c 	andi	r18,r18,1
 80077d4:	9826d07a 	srli	r19,r19,1
 80077d8:	1c86b03a 	or	r3,r3,r18
 80077dc:	18a4b03a 	or	r18,r3,r2
 80077e0:	3900ffc4 	addi	r4,r7,1023
 80077e4:	0100320e 	bge	zero,r4,80078b0 <__muldf3+0x614>
 80077e8:	908001cc 	andi	r2,r18,7
 80077ec:	10000726 	beq	r2,zero,800780c <__muldf3+0x570>
 80077f0:	908003cc 	andi	r2,r18,15
 80077f4:	10800120 	cmpeqi	r2,r2,4
 80077f8:	1000041e 	bne	r2,zero,800780c <__muldf3+0x570>
 80077fc:	90800104 	addi	r2,r18,4
 8007800:	14a5803a 	cmpltu	r18,r2,r18
 8007804:	9ca7883a 	add	r19,r19,r18
 8007808:	1025883a 	mov	r18,r2
 800780c:	9880402c 	andhi	r2,r19,256
 8007810:	10000426 	beq	r2,zero,8007824 <__muldf3+0x588>
 8007814:	00bfc034 	movhi	r2,65280
 8007818:	10bfffc4 	addi	r2,r2,-1
 800781c:	98a6703a 	and	r19,r19,r2
 8007820:	39010004 	addi	r4,r7,1024
 8007824:	2081ffc8 	cmpgei	r2,r4,2047
 8007828:	103f381e 	bne	r2,zero,800750c <__muldf3+0x270>
 800782c:	9804977a 	slli	r2,r19,29
 8007830:	9024d0fa 	srli	r18,r18,3
 8007834:	9826927a 	slli	r19,r19,9
 8007838:	20c1ffcc 	andi	r3,r4,2047
 800783c:	14a4b03a 	or	r18,r2,r18
 8007840:	9826d33a 	srli	r19,r19,12
 8007844:	003ef106 	br	800740c <__muldf3+0x170>
 8007848:	a00d883a 	mov	r6,r20
 800784c:	003ee606 	br	80073e8 <__muldf3+0x14c>
 8007850:	ad4000d4 	ori	r21,r21,3
 8007854:	e023883a 	mov	r17,fp
 8007858:	010000c4 	movi	r4,3
 800785c:	003ebe06 	br	8007358 <__muldf3+0xbc>
 8007860:	ad400054 	ori	r21,r21,1
 8007864:	0021883a 	mov	r16,zero
 8007868:	01000044 	movi	r4,1
 800786c:	003eba06 	br	8007358 <__muldf3+0xbc>
 8007870:	2025883a 	mov	r18,r4
 8007874:	05400304 	movi	r21,12
 8007878:	0201ffc4 	movi	r8,2047
 800787c:	058000c4 	movi	r22,3
 8007880:	003ea406 	br	8007314 <__muldf3+0x78>
 8007884:	0027883a 	mov	r19,zero
 8007888:	05400104 	movi	r21,4
 800788c:	0011883a 	mov	r8,zero
 8007890:	05800044 	movi	r22,1
 8007894:	003e9f06 	br	8007314 <__muldf3+0x78>
 8007898:	04c00434 	movhi	r19,16
 800789c:	000d883a 	mov	r6,zero
 80078a0:	9cffffc4 	addi	r19,r19,-1
 80078a4:	04bfffc4 	movi	r18,-1
 80078a8:	00c1ffc4 	movi	r3,2047
 80078ac:	003ed706 	br	800740c <__muldf3+0x170>
 80078b0:	00800044 	movi	r2,1
 80078b4:	1105c83a 	sub	r2,r2,r4
 80078b8:	10c00e48 	cmpgei	r3,r2,57
 80078bc:	183ed01e 	bne	r3,zero,8007400 <__muldf3+0x164>
 80078c0:	10c00808 	cmpgei	r3,r2,32
 80078c4:	1800411e 	bne	r3,zero,80079cc <__muldf3+0x730>
 80078c8:	39c10784 	addi	r7,r7,1054
 80078cc:	99c6983a 	sll	r3,r19,r7
 80078d0:	9088d83a 	srl	r4,r18,r2
 80078d4:	91ce983a 	sll	r7,r18,r7
 80078d8:	98a6d83a 	srl	r19,r19,r2
 80078dc:	1904b03a 	or	r2,r3,r4
 80078e0:	3824c03a 	cmpne	r18,r7,zero
 80078e4:	1484b03a 	or	r2,r2,r18
 80078e8:	10c001cc 	andi	r3,r2,7
 80078ec:	18000726 	beq	r3,zero,800790c <__muldf3+0x670>
 80078f0:	10c003cc 	andi	r3,r2,15
 80078f4:	18c00120 	cmpeqi	r3,r3,4
 80078f8:	1800041e 	bne	r3,zero,800790c <__muldf3+0x670>
 80078fc:	10c00104 	addi	r3,r2,4
 8007900:	1885803a 	cmpltu	r2,r3,r2
 8007904:	98a7883a 	add	r19,r19,r2
 8007908:	1805883a 	mov	r2,r3
 800790c:	98c0202c 	andhi	r3,r19,128
 8007910:	18004326 	beq	r3,zero,8007a20 <__muldf3+0x784>
 8007914:	00c00044 	movi	r3,1
 8007918:	0027883a 	mov	r19,zero
 800791c:	0025883a 	mov	r18,zero
 8007920:	003eba06 	br	800740c <__muldf3+0x170>
 8007924:	9880022c 	andhi	r2,r19,8
 8007928:	10000926 	beq	r2,zero,8007950 <__muldf3+0x6b4>
 800792c:	8080022c 	andhi	r2,r16,8
 8007930:	1000071e 	bne	r2,zero,8007950 <__muldf3+0x6b4>
 8007934:	00800434 	movhi	r2,16
 8007938:	84c00234 	orhi	r19,r16,8
 800793c:	10bfffc4 	addi	r2,r2,-1
 8007940:	98a6703a 	and	r19,r19,r2
 8007944:	b80d883a 	mov	r6,r23
 8007948:	8825883a 	mov	r18,r17
 800794c:	003fd606 	br	80078a8 <__muldf3+0x60c>
 8007950:	00800434 	movhi	r2,16
 8007954:	9cc00234 	orhi	r19,r19,8
 8007958:	10bfffc4 	addi	r2,r2,-1
 800795c:	98a6703a 	and	r19,r19,r2
 8007960:	a00d883a 	mov	r6,r20
 8007964:	003fd006 	br	80078a8 <__muldf3+0x60c>
 8007968:	e009883a 	mov	r4,fp
 800796c:	80085180 	call	8008518 <__clzsi2>
 8007970:	11400544 	addi	r5,r2,21
 8007974:	29000748 	cmpgei	r4,r5,29
 8007978:	1007883a 	mov	r3,r2
 800797c:	da000017 	ldw	r8,0(sp)
 8007980:	10800804 	addi	r2,r2,32
 8007984:	203ed626 	beq	r4,zero,80074e0 <__muldf3+0x244>
 8007988:	1c3ffe04 	addi	r16,r3,-8
 800798c:	e420983a 	sll	r16,fp,r16
 8007990:	0023883a 	mov	r17,zero
 8007994:	003ed906 	br	80074fc <__muldf3+0x260>
 8007998:	80085180 	call	8008518 <__clzsi2>
 800799c:	11000544 	addi	r4,r2,21
 80079a0:	21400748 	cmpgei	r5,r4,29
 80079a4:	1007883a 	mov	r3,r2
 80079a8:	d9c00017 	ldw	r7,0(sp)
 80079ac:	10800804 	addi	r2,r2,32
 80079b0:	283eb026 	beq	r5,zero,8007474 <__muldf3+0x1d8>
 80079b4:	1cfffe04 	addi	r19,r3,-8
 80079b8:	8ce6983a 	sll	r19,r17,r19
 80079bc:	0025883a 	mov	r18,zero
 80079c0:	003eb306 	br	8007490 <__muldf3+0x1f4>
 80079c4:	400f883a 	mov	r7,r8
 80079c8:	003f8506 	br	80077e0 <__muldf3+0x544>
 80079cc:	00fff844 	movi	r3,-31
 80079d0:	1907c83a 	sub	r3,r3,r4
 80079d4:	10800820 	cmpeqi	r2,r2,32
 80079d8:	98c6d83a 	srl	r3,r19,r3
 80079dc:	1000031e 	bne	r2,zero,80079ec <__muldf3+0x750>
 80079e0:	39c10f84 	addi	r7,r7,1086
 80079e4:	99e6983a 	sll	r19,r19,r7
 80079e8:	94e4b03a 	or	r18,r18,r19
 80079ec:	9024c03a 	cmpne	r18,r18,zero
 80079f0:	90c4b03a 	or	r2,r18,r3
 80079f4:	148001cc 	andi	r18,r2,7
 80079f8:	9000051e 	bne	r18,zero,8007a10 <__muldf3+0x774>
 80079fc:	0027883a 	mov	r19,zero
 8007a00:	1004d0fa 	srli	r2,r2,3
 8007a04:	0007883a 	mov	r3,zero
 8007a08:	14a4b03a 	or	r18,r2,r18
 8007a0c:	003e7f06 	br	800740c <__muldf3+0x170>
 8007a10:	10c003cc 	andi	r3,r2,15
 8007a14:	18c00118 	cmpnei	r3,r3,4
 8007a18:	0027883a 	mov	r19,zero
 8007a1c:	183fb71e 	bne	r3,zero,80078fc <__muldf3+0x660>
 8007a20:	9806927a 	slli	r3,r19,9
 8007a24:	9824977a 	slli	r18,r19,29
 8007a28:	1826d33a 	srli	r19,r3,12
 8007a2c:	003ff406 	br	8007a00 <__muldf3+0x764>
 8007a30:	00800434 	movhi	r2,16
 8007a34:	9cc00234 	orhi	r19,r19,8
 8007a38:	10bfffc4 	addi	r2,r2,-1
 8007a3c:	98a6703a 	and	r19,r19,r2
 8007a40:	003f9906 	br	80078a8 <__muldf3+0x60c>

08007a44 <__subdf3>:
 8007a44:	00c00434 	movhi	r3,16
 8007a48:	3812d53a 	srli	r9,r7,20
 8007a4c:	18ffffc4 	addi	r3,r3,-1
 8007a50:	defffb04 	addi	sp,sp,-20
 8007a54:	28d0703a 	and	r8,r5,r3
 8007a58:	38c6703a 	and	r3,r7,r3
 8007a5c:	2804d7fa 	srli	r2,r5,31
 8007a60:	401090fa 	slli	r8,r8,3
 8007a64:	280ad53a 	srli	r5,r5,20
 8007a68:	180690fa 	slli	r3,r3,3
 8007a6c:	dcc00315 	stw	r19,12(sp)
 8007a70:	dc400115 	stw	r17,4(sp)
 8007a74:	2026d77a 	srli	r19,r4,29
 8007a78:	3022d77a 	srli	r17,r6,29
 8007a7c:	4b41ffcc 	andi	r13,r9,2047
 8007a80:	dc800215 	stw	r18,8(sp)
 8007a84:	dc000015 	stw	r16,0(sp)
 8007a88:	dfc00415 	stw	ra,16(sp)
 8007a8c:	6a41ffe0 	cmpeqi	r9,r13,2047
 8007a90:	1025883a 	mov	r18,r2
 8007a94:	201690fa 	slli	r11,r4,3
 8007a98:	380ed7fa 	srli	r7,r7,31
 8007a9c:	301490fa 	slli	r10,r6,3
 8007aa0:	2c01ffcc 	andi	r16,r5,2047
 8007aa4:	10803fcc 	andi	r2,r2,255
 8007aa8:	9a10b03a 	or	r8,r19,r8
 8007aac:	88c6b03a 	or	r3,r17,r3
 8007ab0:	48006e1e 	bne	r9,zero,8007c6c <__subdf3+0x228>
 8007ab4:	3a40005c 	xori	r9,r7,1
 8007ab8:	834bc83a 	sub	r5,r16,r13
 8007abc:	12405726 	beq	r2,r9,8007c1c <__subdf3+0x1d8>
 8007ac0:	01406f0e 	bge	zero,r5,8007c80 <__subdf3+0x23c>
 8007ac4:	68007a26 	beq	r13,zero,8007cb0 <__subdf3+0x26c>
 8007ac8:	8081ffd8 	cmpnei	r2,r16,2047
 8007acc:	10019f26 	beq	r2,zero,800814c <__subdf3+0x708>
 8007ad0:	18c02034 	orhi	r3,r3,128
 8007ad4:	28800e48 	cmpgei	r2,r5,57
 8007ad8:	1000f91e 	bne	r2,zero,8007ec0 <__subdf3+0x47c>
 8007adc:	28800808 	cmpgei	r2,r5,32
 8007ae0:	1001451e 	bne	r2,zero,8007ff8 <__subdf3+0x5b4>
 8007ae4:	00800804 	movi	r2,32
 8007ae8:	1145c83a 	sub	r2,r2,r5
 8007aec:	18a2983a 	sll	r17,r3,r2
 8007af0:	5148d83a 	srl	r4,r10,r5
 8007af4:	5084983a 	sll	r2,r10,r2
 8007af8:	1946d83a 	srl	r3,r3,r5
 8007afc:	8922b03a 	or	r17,r17,r4
 8007b00:	1004c03a 	cmpne	r2,r2,zero
 8007b04:	88a2b03a 	or	r17,r17,r2
 8007b08:	40d1c83a 	sub	r8,r8,r3
 8007b0c:	5c63c83a 	sub	r17,r11,r17
 8007b10:	5c49803a 	cmpltu	r4,r11,r17
 8007b14:	4109c83a 	sub	r4,r8,r4
 8007b18:	2080202c 	andhi	r2,r4,128
 8007b1c:	1000a526 	beq	r2,zero,8007db4 <__subdf3+0x370>
 8007b20:	04c02034 	movhi	r19,128
 8007b24:	9cffffc4 	addi	r19,r19,-1
 8007b28:	24e6703a 	and	r19,r4,r19
 8007b2c:	9800db26 	beq	r19,zero,8007e9c <__subdf3+0x458>
 8007b30:	9809883a 	mov	r4,r19
 8007b34:	80085180 	call	8008518 <__clzsi2>
 8007b38:	117ffe04 	addi	r5,r2,-8
 8007b3c:	01000804 	movi	r4,32
 8007b40:	2149c83a 	sub	r4,r4,r5
 8007b44:	8906d83a 	srl	r3,r17,r4
 8007b48:	9948983a 	sll	r4,r19,r5
 8007b4c:	8962983a 	sll	r17,r17,r5
 8007b50:	1908b03a 	or	r4,r3,r4
 8007b54:	2c00cc16 	blt	r5,r16,8007e88 <__subdf3+0x444>
 8007b58:	2c0bc83a 	sub	r5,r5,r16
 8007b5c:	28c00044 	addi	r3,r5,1
 8007b60:	18800808 	cmpgei	r2,r3,32
 8007b64:	1001171e 	bne	r2,zero,8007fc4 <__subdf3+0x580>
 8007b68:	00800804 	movi	r2,32
 8007b6c:	10c5c83a 	sub	r2,r2,r3
 8007b70:	88cad83a 	srl	r5,r17,r3
 8007b74:	88a2983a 	sll	r17,r17,r2
 8007b78:	2084983a 	sll	r2,r4,r2
 8007b7c:	20c8d83a 	srl	r4,r4,r3
 8007b80:	8822c03a 	cmpne	r17,r17,zero
 8007b84:	1144b03a 	or	r2,r2,r5
 8007b88:	1462b03a 	or	r17,r2,r17
 8007b8c:	0021883a 	mov	r16,zero
 8007b90:	888001cc 	andi	r2,r17,7
 8007b94:	10000726 	beq	r2,zero,8007bb4 <__subdf3+0x170>
 8007b98:	888003cc 	andi	r2,r17,15
 8007b9c:	10800120 	cmpeqi	r2,r2,4
 8007ba0:	1000041e 	bne	r2,zero,8007bb4 <__subdf3+0x170>
 8007ba4:	88c00104 	addi	r3,r17,4
 8007ba8:	1c63803a 	cmpltu	r17,r3,r17
 8007bac:	2449883a 	add	r4,r4,r17
 8007bb0:	1823883a 	mov	r17,r3
 8007bb4:	2080202c 	andhi	r2,r4,128
 8007bb8:	10008026 	beq	r2,zero,8007dbc <__subdf3+0x378>
 8007bbc:	81400044 	addi	r5,r16,1
 8007bc0:	2881ffe0 	cmpeqi	r2,r5,2047
 8007bc4:	2941ffcc 	andi	r5,r5,2047
 8007bc8:	1000921e 	bne	r2,zero,8007e14 <__subdf3+0x3d0>
 8007bcc:	00bfe034 	movhi	r2,65408
 8007bd0:	10bfffc4 	addi	r2,r2,-1
 8007bd4:	2088703a 	and	r4,r4,r2
 8007bd8:	2006927a 	slli	r3,r4,9
 8007bdc:	8822d0fa 	srli	r17,r17,3
 8007be0:	2004977a 	slli	r2,r4,29
 8007be4:	1806d33a 	srli	r3,r3,12
 8007be8:	1444b03a 	or	r2,r2,r17
 8007bec:	280a953a 	slli	r5,r5,20
 8007bf0:	94803fcc 	andi	r18,r18,255
 8007bf4:	902497fa 	slli	r18,r18,31
 8007bf8:	28c6b03a 	or	r3,r5,r3
 8007bfc:	1c86b03a 	or	r3,r3,r18
 8007c00:	dfc00417 	ldw	ra,16(sp)
 8007c04:	dcc00317 	ldw	r19,12(sp)
 8007c08:	dc800217 	ldw	r18,8(sp)
 8007c0c:	dc400117 	ldw	r17,4(sp)
 8007c10:	dc000017 	ldw	r16,0(sp)
 8007c14:	dec00504 	addi	sp,sp,20
 8007c18:	f800283a 	ret
 8007c1c:	01402e0e 	bge	zero,r5,8007cd8 <__subdf3+0x294>
 8007c20:	68005526 	beq	r13,zero,8007d78 <__subdf3+0x334>
 8007c24:	8081ffd8 	cmpnei	r2,r16,2047
 8007c28:	10013b26 	beq	r2,zero,8008118 <__subdf3+0x6d4>
 8007c2c:	18c02034 	orhi	r3,r3,128
 8007c30:	28800e48 	cmpgei	r2,r5,57
 8007c34:	10006d1e 	bne	r2,zero,8007dec <__subdf3+0x3a8>
 8007c38:	28800808 	cmpgei	r2,r5,32
 8007c3c:	10010826 	beq	r2,zero,8008060 <__subdf3+0x61c>
 8007c40:	2c7ff804 	addi	r17,r5,-32
 8007c44:	29000820 	cmpeqi	r4,r5,32
 8007c48:	1c44d83a 	srl	r2,r3,r17
 8007c4c:	2000041e 	bne	r4,zero,8007c60 <__subdf3+0x21c>
 8007c50:	01001004 	movi	r4,64
 8007c54:	214bc83a 	sub	r5,r4,r5
 8007c58:	1946983a 	sll	r3,r3,r5
 8007c5c:	50d4b03a 	or	r10,r10,r3
 8007c60:	5022c03a 	cmpne	r17,r10,zero
 8007c64:	88a2b03a 	or	r17,r17,r2
 8007c68:	00006206 	br	8007df4 <__subdf3+0x3b0>
 8007c6c:	1a98b03a 	or	r12,r3,r10
 8007c70:	817e0044 	addi	r5,r16,-2047
 8007c74:	6000161e 	bne	r12,zero,8007cd0 <__subdf3+0x28c>
 8007c78:	3a40005c 	xori	r9,r7,1
 8007c7c:	12401626 	beq	r2,r9,8007cd8 <__subdf3+0x294>
 8007c80:	28002e26 	beq	r5,zero,8007d3c <__subdf3+0x2f8>
 8007c84:	6c0bc83a 	sub	r5,r13,r16
 8007c88:	4825883a 	mov	r18,r9
 8007c8c:	80009e1e 	bne	r16,zero,8007f08 <__subdf3+0x4c4>
 8007c90:	42c4b03a 	or	r2,r8,r11
 8007c94:	10010926 	beq	r2,zero,80080bc <__subdf3+0x678>
 8007c98:	28bfffc4 	addi	r2,r5,-1
 8007c9c:	10016826 	beq	r2,zero,8008240 <__subdf3+0x7fc>
 8007ca0:	2941ffd8 	cmpnei	r5,r5,2047
 8007ca4:	28015f26 	beq	r5,zero,8008224 <__subdf3+0x7e0>
 8007ca8:	100b883a 	mov	r5,r2
 8007cac:	00009906 	br	8007f14 <__subdf3+0x4d0>
 8007cb0:	1a84b03a 	or	r2,r3,r10
 8007cb4:	1000b126 	beq	r2,zero,8007f7c <__subdf3+0x538>
 8007cb8:	28bfffc4 	addi	r2,r5,-1
 8007cbc:	10011d26 	beq	r2,zero,8008134 <__subdf3+0x6f0>
 8007cc0:	2941ffd8 	cmpnei	r5,r5,2047
 8007cc4:	28011426 	beq	r5,zero,8008118 <__subdf3+0x6d4>
 8007cc8:	100b883a 	mov	r5,r2
 8007ccc:	003f8106 	br	8007ad4 <__subdf3+0x90>
 8007cd0:	3a403fcc 	andi	r9,r7,255
 8007cd4:	11ffea1e 	bne	r2,r7,8007c80 <__subdf3+0x23c>
 8007cd8:	28007c26 	beq	r5,zero,8007ecc <__subdf3+0x488>
 8007cdc:	6c0bc83a 	sub	r5,r13,r16
 8007ce0:	8000d726 	beq	r16,zero,8008040 <__subdf3+0x5fc>
 8007ce4:	6881ffd8 	cmpnei	r2,r13,2047
 8007ce8:	10012626 	beq	r2,zero,8008184 <__subdf3+0x740>
 8007cec:	42002034 	orhi	r8,r8,128
 8007cf0:	28800e48 	cmpgei	r2,r5,57
 8007cf4:	10012a1e 	bne	r2,zero,80081a0 <__subdf3+0x75c>
 8007cf8:	28800808 	cmpgei	r2,r5,32
 8007cfc:	1001821e 	bne	r2,zero,8008308 <__subdf3+0x8c4>
 8007d00:	00800804 	movi	r2,32
 8007d04:	1145c83a 	sub	r2,r2,r5
 8007d08:	40a2983a 	sll	r17,r8,r2
 8007d0c:	5948d83a 	srl	r4,r11,r5
 8007d10:	5884983a 	sll	r2,r11,r2
 8007d14:	4150d83a 	srl	r8,r8,r5
 8007d18:	8922b03a 	or	r17,r17,r4
 8007d1c:	1004c03a 	cmpne	r2,r2,zero
 8007d20:	88a2b03a 	or	r17,r17,r2
 8007d24:	1a07883a 	add	r3,r3,r8
 8007d28:	8aa3883a 	add	r17,r17,r10
 8007d2c:	8a89803a 	cmpltu	r4,r17,r10
 8007d30:	20c9883a 	add	r4,r4,r3
 8007d34:	6821883a 	mov	r16,r13
 8007d38:	00003106 	br	8007e00 <__subdf3+0x3bc>
 8007d3c:	80800044 	addi	r2,r16,1
 8007d40:	1081ff8c 	andi	r2,r2,2046
 8007d44:	1000821e 	bne	r2,zero,8007f50 <__subdf3+0x50c>
 8007d48:	42ceb03a 	or	r7,r8,r11
 8007d4c:	1a84b03a 	or	r2,r3,r10
 8007d50:	8000e11e 	bne	r16,zero,80080d8 <__subdf3+0x694>
 8007d54:	38012a26 	beq	r7,zero,8008200 <__subdf3+0x7bc>
 8007d58:	1001461e 	bne	r2,zero,8008274 <__subdf3+0x830>
 8007d5c:	4004977a 	slli	r2,r8,29
 8007d60:	00c80034 	movhi	r3,8192
 8007d64:	18ffffc4 	addi	r3,r3,-1
 8007d68:	20c8703a 	and	r4,r4,r3
 8007d6c:	4010d0fa 	srli	r8,r8,3
 8007d70:	1104b03a 	or	r2,r2,r4
 8007d74:	00001806 	br	8007dd8 <__subdf3+0x394>
 8007d78:	1a84b03a 	or	r2,r3,r10
 8007d7c:	1000fa26 	beq	r2,zero,8008168 <__subdf3+0x724>
 8007d80:	28bfffc4 	addi	r2,r5,-1
 8007d84:	10000426 	beq	r2,zero,8007d98 <__subdf3+0x354>
 8007d88:	2941ffd8 	cmpnei	r5,r5,2047
 8007d8c:	28013226 	beq	r5,zero,8008258 <__subdf3+0x814>
 8007d90:	100b883a 	mov	r5,r2
 8007d94:	003fa606 	br	8007c30 <__subdf3+0x1ec>
 8007d98:	5aa3883a 	add	r17,r11,r10
 8007d9c:	40c9883a 	add	r4,r8,r3
 8007da0:	8ad7803a 	cmpltu	r11,r17,r11
 8007da4:	22c9883a 	add	r4,r4,r11
 8007da8:	2080202c 	andhi	r2,r4,128
 8007dac:	10007a1e 	bne	r2,zero,8007f98 <__subdf3+0x554>
 8007db0:	04000044 	movi	r16,1
 8007db4:	888001cc 	andi	r2,r17,7
 8007db8:	103f771e 	bne	r2,zero,8007b98 <__subdf3+0x154>
 8007dbc:	8822d0fa 	srli	r17,r17,3
 8007dc0:	2004977a 	slli	r2,r4,29
 8007dc4:	2010d0fa 	srli	r8,r4,3
 8007dc8:	800b883a 	mov	r5,r16
 8007dcc:	8884b03a 	or	r2,r17,r2
 8007dd0:	28c1ffe0 	cmpeqi	r3,r5,2047
 8007dd4:	1800241e 	bne	r3,zero,8007e68 <__subdf3+0x424>
 8007dd8:	00c00434 	movhi	r3,16
 8007ddc:	18ffffc4 	addi	r3,r3,-1
 8007de0:	40c6703a 	and	r3,r8,r3
 8007de4:	2941ffcc 	andi	r5,r5,2047
 8007de8:	003f8006 	br	8007bec <__subdf3+0x1a8>
 8007dec:	1aa2b03a 	or	r17,r3,r10
 8007df0:	8822c03a 	cmpne	r17,r17,zero
 8007df4:	8ae3883a 	add	r17,r17,r11
 8007df8:	8ac9803a 	cmpltu	r4,r17,r11
 8007dfc:	2209883a 	add	r4,r4,r8
 8007e00:	2080202c 	andhi	r2,r4,128
 8007e04:	103feb26 	beq	r2,zero,8007db4 <__subdf3+0x370>
 8007e08:	84000044 	addi	r16,r16,1
 8007e0c:	8081ffe0 	cmpeqi	r2,r16,2047
 8007e10:	10006226 	beq	r2,zero,8007f9c <__subdf3+0x558>
 8007e14:	0141ffc4 	movi	r5,2047
 8007e18:	0007883a 	mov	r3,zero
 8007e1c:	0005883a 	mov	r2,zero
 8007e20:	003f7206 	br	8007bec <__subdf3+0x1a8>
 8007e24:	400e977a 	slli	r7,r8,29
 8007e28:	4010d0fa 	srli	r8,r8,3
 8007e2c:	1000ef26 	beq	r2,zero,80081ec <__subdf3+0x7a8>
 8007e30:	01480034 	movhi	r5,8192
 8007e34:	297fffc4 	addi	r5,r5,-1
 8007e38:	2144703a 	and	r2,r4,r5
 8007e3c:	4100022c 	andhi	r4,r8,8
 8007e40:	11c4b03a 	or	r2,r2,r7
 8007e44:	20000826 	beq	r4,zero,8007e68 <__subdf3+0x424>
 8007e48:	1808d0fa 	srli	r4,r3,3
 8007e4c:	21c0022c 	andhi	r7,r4,8
 8007e50:	3800051e 	bne	r7,zero,8007e68 <__subdf3+0x424>
 8007e54:	1804977a 	slli	r2,r3,29
 8007e58:	314c703a 	and	r6,r6,r5
 8007e5c:	4825883a 	mov	r18,r9
 8007e60:	3084b03a 	or	r2,r6,r2
 8007e64:	2011883a 	mov	r8,r4
 8007e68:	1206b03a 	or	r3,r2,r8
 8007e6c:	18013e26 	beq	r3,zero,8008368 <__subdf3+0x924>
 8007e70:	01000434 	movhi	r4,16
 8007e74:	40c00234 	orhi	r3,r8,8
 8007e78:	213fffc4 	addi	r4,r4,-1
 8007e7c:	1906703a 	and	r3,r3,r4
 8007e80:	0141ffc4 	movi	r5,2047
 8007e84:	003f5906 	br	8007bec <__subdf3+0x1a8>
 8007e88:	00ffe034 	movhi	r3,65408
 8007e8c:	18ffffc4 	addi	r3,r3,-1
 8007e90:	8161c83a 	sub	r16,r16,r5
 8007e94:	20c8703a 	and	r4,r4,r3
 8007e98:	003f3d06 	br	8007b90 <__subdf3+0x14c>
 8007e9c:	8809883a 	mov	r4,r17
 8007ea0:	80085180 	call	8008518 <__clzsi2>
 8007ea4:	11400604 	addi	r5,r2,24
 8007ea8:	28c00808 	cmpgei	r3,r5,32
 8007eac:	183f2326 	beq	r3,zero,8007b3c <__subdf3+0xf8>
 8007eb0:	113ffe04 	addi	r4,r2,-8
 8007eb4:	8908983a 	sll	r4,r17,r4
 8007eb8:	0023883a 	mov	r17,zero
 8007ebc:	003f2506 	br	8007b54 <__subdf3+0x110>
 8007ec0:	1aa2b03a 	or	r17,r3,r10
 8007ec4:	8822c03a 	cmpne	r17,r17,zero
 8007ec8:	003f1006 	br	8007b0c <__subdf3+0xc8>
 8007ecc:	80800044 	addi	r2,r16,1
 8007ed0:	11c1ff8c 	andi	r7,r2,2046
 8007ed4:	38006d1e 	bne	r7,zero,800808c <__subdf3+0x648>
 8007ed8:	42c4b03a 	or	r2,r8,r11
 8007edc:	8000be1e 	bne	r16,zero,80081d8 <__subdf3+0x794>
 8007ee0:	1000f726 	beq	r2,zero,80082c0 <__subdf3+0x87c>
 8007ee4:	1a84b03a 	or	r2,r3,r10
 8007ee8:	1000fc1e 	bne	r2,zero,80082dc <__subdf3+0x898>
 8007eec:	4006977a 	slli	r3,r8,29
 8007ef0:	00880034 	movhi	r2,8192
 8007ef4:	10bfffc4 	addi	r2,r2,-1
 8007ef8:	2084703a 	and	r2,r4,r2
 8007efc:	4010d0fa 	srli	r8,r8,3
 8007f00:	10c4b03a 	or	r2,r2,r3
 8007f04:	003fb406 	br	8007dd8 <__subdf3+0x394>
 8007f08:	6881ffd8 	cmpnei	r2,r13,2047
 8007f0c:	10009d26 	beq	r2,zero,8008184 <__subdf3+0x740>
 8007f10:	42002034 	orhi	r8,r8,128
 8007f14:	28800e48 	cmpgei	r2,r5,57
 8007f18:	1000421e 	bne	r2,zero,8008024 <__subdf3+0x5e0>
 8007f1c:	28800808 	cmpgei	r2,r5,32
 8007f20:	1000a21e 	bne	r2,zero,80081ac <__subdf3+0x768>
 8007f24:	00800804 	movi	r2,32
 8007f28:	1145c83a 	sub	r2,r2,r5
 8007f2c:	40a2983a 	sll	r17,r8,r2
 8007f30:	5948d83a 	srl	r4,r11,r5
 8007f34:	5896983a 	sll	r11,r11,r2
 8007f38:	4150d83a 	srl	r8,r8,r5
 8007f3c:	8922b03a 	or	r17,r17,r4
 8007f40:	5816c03a 	cmpne	r11,r11,zero
 8007f44:	8ae2b03a 	or	r17,r17,r11
 8007f48:	1a07c83a 	sub	r3,r3,r8
 8007f4c:	00003706 	br	800802c <__subdf3+0x5e8>
 8007f50:	5aa3c83a 	sub	r17,r11,r10
 8007f54:	40e7c83a 	sub	r19,r8,r3
 8007f58:	5c49803a 	cmpltu	r4,r11,r17
 8007f5c:	9927c83a 	sub	r19,r19,r4
 8007f60:	9880202c 	andhi	r2,r19,128
 8007f64:	1000661e 	bne	r2,zero,8008100 <__subdf3+0x6bc>
 8007f68:	8cc4b03a 	or	r2,r17,r19
 8007f6c:	103eef1e 	bne	r2,zero,8007b2c <__subdf3+0xe8>
 8007f70:	0011883a 	mov	r8,zero
 8007f74:	0025883a 	mov	r18,zero
 8007f78:	003f9706 	br	8007dd8 <__subdf3+0x394>
 8007f7c:	4022977a 	slli	r17,r8,29
 8007f80:	00880034 	movhi	r2,8192
 8007f84:	10bfffc4 	addi	r2,r2,-1
 8007f88:	2088703a 	and	r4,r4,r2
 8007f8c:	4010d0fa 	srli	r8,r8,3
 8007f90:	2444b03a 	or	r2,r4,r17
 8007f94:	003f8e06 	br	8007dd0 <__subdf3+0x38c>
 8007f98:	04000084 	movi	r16,2
 8007f9c:	00bfe034 	movhi	r2,65408
 8007fa0:	10bfffc4 	addi	r2,r2,-1
 8007fa4:	8806d07a 	srli	r3,r17,1
 8007fa8:	2088703a 	and	r4,r4,r2
 8007fac:	200497fa 	slli	r2,r4,31
 8007fb0:	8c40004c 	andi	r17,r17,1
 8007fb4:	1c62b03a 	or	r17,r3,r17
 8007fb8:	2008d07a 	srli	r4,r4,1
 8007fbc:	1462b03a 	or	r17,r2,r17
 8007fc0:	003ef306 	br	8007b90 <__subdf3+0x14c>
 8007fc4:	297ff844 	addi	r5,r5,-31
 8007fc8:	18800820 	cmpeqi	r2,r3,32
 8007fcc:	214ad83a 	srl	r5,r4,r5
 8007fd0:	1000041e 	bne	r2,zero,8007fe4 <__subdf3+0x5a0>
 8007fd4:	00801004 	movi	r2,64
 8007fd8:	10c7c83a 	sub	r3,r2,r3
 8007fdc:	20c8983a 	sll	r4,r4,r3
 8007fe0:	8922b03a 	or	r17,r17,r4
 8007fe4:	8822c03a 	cmpne	r17,r17,zero
 8007fe8:	8962b03a 	or	r17,r17,r5
 8007fec:	0009883a 	mov	r4,zero
 8007ff0:	0021883a 	mov	r16,zero
 8007ff4:	003f6f06 	br	8007db4 <__subdf3+0x370>
 8007ff8:	2c7ff804 	addi	r17,r5,-32
 8007ffc:	29000820 	cmpeqi	r4,r5,32
 8008000:	1c44d83a 	srl	r2,r3,r17
 8008004:	2000041e 	bne	r4,zero,8008018 <__subdf3+0x5d4>
 8008008:	01001004 	movi	r4,64
 800800c:	214bc83a 	sub	r5,r4,r5
 8008010:	1946983a 	sll	r3,r3,r5
 8008014:	50d4b03a 	or	r10,r10,r3
 8008018:	5022c03a 	cmpne	r17,r10,zero
 800801c:	88a2b03a 	or	r17,r17,r2
 8008020:	003eba06 	br	8007b0c <__subdf3+0xc8>
 8008024:	42d0b03a 	or	r8,r8,r11
 8008028:	4022c03a 	cmpne	r17,r8,zero
 800802c:	5463c83a 	sub	r17,r10,r17
 8008030:	5449803a 	cmpltu	r4,r10,r17
 8008034:	1909c83a 	sub	r4,r3,r4
 8008038:	6821883a 	mov	r16,r13
 800803c:	003eb606 	br	8007b18 <__subdf3+0xd4>
 8008040:	42c4b03a 	or	r2,r8,r11
 8008044:	10009726 	beq	r2,zero,80082a4 <__subdf3+0x860>
 8008048:	28bfffc4 	addi	r2,r5,-1
 800804c:	1000b926 	beq	r2,zero,8008334 <__subdf3+0x8f0>
 8008050:	2941ffd8 	cmpnei	r5,r5,2047
 8008054:	28007326 	beq	r5,zero,8008224 <__subdf3+0x7e0>
 8008058:	100b883a 	mov	r5,r2
 800805c:	003f2406 	br	8007cf0 <__subdf3+0x2ac>
 8008060:	00800804 	movi	r2,32
 8008064:	1145c83a 	sub	r2,r2,r5
 8008068:	18a2983a 	sll	r17,r3,r2
 800806c:	5148d83a 	srl	r4,r10,r5
 8008070:	5084983a 	sll	r2,r10,r2
 8008074:	1946d83a 	srl	r3,r3,r5
 8008078:	8922b03a 	or	r17,r17,r4
 800807c:	1004c03a 	cmpne	r2,r2,zero
 8008080:	88a2b03a 	or	r17,r17,r2
 8008084:	40d1883a 	add	r8,r8,r3
 8008088:	003f5a06 	br	8007df4 <__subdf3+0x3b0>
 800808c:	1101ffe0 	cmpeqi	r4,r2,2047
 8008090:	203f601e 	bne	r4,zero,8007e14 <__subdf3+0x3d0>
 8008094:	5a95883a 	add	r10,r11,r10
 8008098:	52d7803a 	cmpltu	r11,r10,r11
 800809c:	40c9883a 	add	r4,r8,r3
 80080a0:	22c9883a 	add	r4,r4,r11
 80080a4:	202297fa 	slli	r17,r4,31
 80080a8:	5014d07a 	srli	r10,r10,1
 80080ac:	2008d07a 	srli	r4,r4,1
 80080b0:	1021883a 	mov	r16,r2
 80080b4:	8aa2b03a 	or	r17,r17,r10
 80080b8:	003f3e06 	br	8007db4 <__subdf3+0x370>
 80080bc:	1808977a 	slli	r4,r3,29
 80080c0:	00880034 	movhi	r2,8192
 80080c4:	10bfffc4 	addi	r2,r2,-1
 80080c8:	308c703a 	and	r6,r6,r2
 80080cc:	1810d0fa 	srli	r8,r3,3
 80080d0:	3104b03a 	or	r2,r6,r4
 80080d4:	003f3e06 	br	8007dd0 <__subdf3+0x38c>
 80080d8:	383f521e 	bne	r7,zero,8007e24 <__subdf3+0x3e0>
 80080dc:	10009d26 	beq	r2,zero,8008354 <__subdf3+0x910>
 80080e0:	1808977a 	slli	r4,r3,29
 80080e4:	00880034 	movhi	r2,8192
 80080e8:	10bfffc4 	addi	r2,r2,-1
 80080ec:	3084703a 	and	r2,r6,r2
 80080f0:	1810d0fa 	srli	r8,r3,3
 80080f4:	1104b03a 	or	r2,r2,r4
 80080f8:	4825883a 	mov	r18,r9
 80080fc:	003f5a06 	br	8007e68 <__subdf3+0x424>
 8008100:	52e3c83a 	sub	r17,r10,r11
 8008104:	1a09c83a 	sub	r4,r3,r8
 8008108:	5467803a 	cmpltu	r19,r10,r17
 800810c:	24e7c83a 	sub	r19,r4,r19
 8008110:	4825883a 	mov	r18,r9
 8008114:	003e8506 	br	8007b2c <__subdf3+0xe8>
 8008118:	4022977a 	slli	r17,r8,29
 800811c:	00880034 	movhi	r2,8192
 8008120:	10bfffc4 	addi	r2,r2,-1
 8008124:	2088703a 	and	r4,r4,r2
 8008128:	4010d0fa 	srli	r8,r8,3
 800812c:	2444b03a 	or	r2,r4,r17
 8008130:	003f4d06 	br	8007e68 <__subdf3+0x424>
 8008134:	5aa3c83a 	sub	r17,r11,r10
 8008138:	40c9c83a 	sub	r4,r8,r3
 800813c:	5c57803a 	cmpltu	r11,r11,r17
 8008140:	22c9c83a 	sub	r4,r4,r11
 8008144:	04000044 	movi	r16,1
 8008148:	003e7306 	br	8007b18 <__subdf3+0xd4>
 800814c:	4004977a 	slli	r2,r8,29
 8008150:	00c80034 	movhi	r3,8192
 8008154:	18ffffc4 	addi	r3,r3,-1
 8008158:	20c8703a 	and	r4,r4,r3
 800815c:	4010d0fa 	srli	r8,r8,3
 8008160:	1104b03a 	or	r2,r2,r4
 8008164:	003f4006 	br	8007e68 <__subdf3+0x424>
 8008168:	4004977a 	slli	r2,r8,29
 800816c:	00c80034 	movhi	r3,8192
 8008170:	18ffffc4 	addi	r3,r3,-1
 8008174:	20c8703a 	and	r4,r4,r3
 8008178:	4010d0fa 	srli	r8,r8,3
 800817c:	1104b03a 	or	r2,r2,r4
 8008180:	003f1306 	br	8007dd0 <__subdf3+0x38c>
 8008184:	1804977a 	slli	r2,r3,29
 8008188:	01080034 	movhi	r4,8192
 800818c:	213fffc4 	addi	r4,r4,-1
 8008190:	310c703a 	and	r6,r6,r4
 8008194:	1810d0fa 	srli	r8,r3,3
 8008198:	1184b03a 	or	r2,r2,r6
 800819c:	003f3206 	br	8007e68 <__subdf3+0x424>
 80081a0:	42d0b03a 	or	r8,r8,r11
 80081a4:	4022c03a 	cmpne	r17,r8,zero
 80081a8:	003edf06 	br	8007d28 <__subdf3+0x2e4>
 80081ac:	2c7ff804 	addi	r17,r5,-32
 80081b0:	29000820 	cmpeqi	r4,r5,32
 80081b4:	4444d83a 	srl	r2,r8,r17
 80081b8:	2000041e 	bne	r4,zero,80081cc <__subdf3+0x788>
 80081bc:	01001004 	movi	r4,64
 80081c0:	214bc83a 	sub	r5,r4,r5
 80081c4:	4150983a 	sll	r8,r8,r5
 80081c8:	5a16b03a 	or	r11,r11,r8
 80081cc:	5822c03a 	cmpne	r17,r11,zero
 80081d0:	88a2b03a 	or	r17,r17,r2
 80081d4:	003f9506 	br	800802c <__subdf3+0x5e8>
 80081d8:	103fea26 	beq	r2,zero,8008184 <__subdf3+0x740>
 80081dc:	1a94b03a 	or	r10,r3,r10
 80081e0:	400e977a 	slli	r7,r8,29
 80081e4:	4010d0fa 	srli	r8,r8,3
 80081e8:	503f111e 	bne	r10,zero,8007e30 <__subdf3+0x3ec>
 80081ec:	00880034 	movhi	r2,8192
 80081f0:	10bfffc4 	addi	r2,r2,-1
 80081f4:	2084703a 	and	r2,r4,r2
 80081f8:	11c4b03a 	or	r2,r2,r7
 80081fc:	003f1a06 	br	8007e68 <__subdf3+0x424>
 8008200:	103f5b26 	beq	r2,zero,8007f70 <__subdf3+0x52c>
 8008204:	1804977a 	slli	r2,r3,29
 8008208:	01080034 	movhi	r4,8192
 800820c:	213fffc4 	addi	r4,r4,-1
 8008210:	310c703a 	and	r6,r6,r4
 8008214:	1810d0fa 	srli	r8,r3,3
 8008218:	1184b03a 	or	r2,r2,r6
 800821c:	4825883a 	mov	r18,r9
 8008220:	003eed06 	br	8007dd8 <__subdf3+0x394>
 8008224:	1808977a 	slli	r4,r3,29
 8008228:	00880034 	movhi	r2,8192
 800822c:	10bfffc4 	addi	r2,r2,-1
 8008230:	3084703a 	and	r2,r6,r2
 8008234:	1810d0fa 	srli	r8,r3,3
 8008238:	1104b03a 	or	r2,r2,r4
 800823c:	003f0a06 	br	8007e68 <__subdf3+0x424>
 8008240:	52e3c83a 	sub	r17,r10,r11
 8008244:	1a09c83a 	sub	r4,r3,r8
 8008248:	5455803a 	cmpltu	r10,r10,r17
 800824c:	2289c83a 	sub	r4,r4,r10
 8008250:	04000044 	movi	r16,1
 8008254:	003e3006 	br	8007b18 <__subdf3+0xd4>
 8008258:	4006977a 	slli	r3,r8,29
 800825c:	00880034 	movhi	r2,8192
 8008260:	10bfffc4 	addi	r2,r2,-1
 8008264:	2084703a 	and	r2,r4,r2
 8008268:	4010d0fa 	srli	r8,r8,3
 800826c:	10c4b03a 	or	r2,r2,r3
 8008270:	003efd06 	br	8007e68 <__subdf3+0x424>
 8008274:	5aa3c83a 	sub	r17,r11,r10
 8008278:	5c45803a 	cmpltu	r2,r11,r17
 800827c:	40c9c83a 	sub	r4,r8,r3
 8008280:	2089c83a 	sub	r4,r4,r2
 8008284:	2080202c 	andhi	r2,r4,128
 8008288:	10002f26 	beq	r2,zero,8008348 <__subdf3+0x904>
 800828c:	52e3c83a 	sub	r17,r10,r11
 8008290:	1a09c83a 	sub	r4,r3,r8
 8008294:	5455803a 	cmpltu	r10,r10,r17
 8008298:	2289c83a 	sub	r4,r4,r10
 800829c:	4825883a 	mov	r18,r9
 80082a0:	003e3b06 	br	8007b90 <__subdf3+0x14c>
 80082a4:	1808977a 	slli	r4,r3,29
 80082a8:	00880034 	movhi	r2,8192
 80082ac:	10bfffc4 	addi	r2,r2,-1
 80082b0:	3084703a 	and	r2,r6,r2
 80082b4:	1810d0fa 	srli	r8,r3,3
 80082b8:	1104b03a 	or	r2,r2,r4
 80082bc:	003ec406 	br	8007dd0 <__subdf3+0x38c>
 80082c0:	1808977a 	slli	r4,r3,29
 80082c4:	00880034 	movhi	r2,8192
 80082c8:	10bfffc4 	addi	r2,r2,-1
 80082cc:	3084703a 	and	r2,r6,r2
 80082d0:	1810d0fa 	srli	r8,r3,3
 80082d4:	1104b03a 	or	r2,r2,r4
 80082d8:	003ebf06 	br	8007dd8 <__subdf3+0x394>
 80082dc:	5aa3883a 	add	r17,r11,r10
 80082e0:	40c9883a 	add	r4,r8,r3
 80082e4:	8ad7803a 	cmpltu	r11,r17,r11
 80082e8:	22c9883a 	add	r4,r4,r11
 80082ec:	2080202c 	andhi	r2,r4,128
 80082f0:	103eb026 	beq	r2,zero,8007db4 <__subdf3+0x370>
 80082f4:	00bfe034 	movhi	r2,65408
 80082f8:	10bfffc4 	addi	r2,r2,-1
 80082fc:	2088703a 	and	r4,r4,r2
 8008300:	04000044 	movi	r16,1
 8008304:	003eab06 	br	8007db4 <__subdf3+0x370>
 8008308:	28bff804 	addi	r2,r5,-32
 800830c:	29000820 	cmpeqi	r4,r5,32
 8008310:	4084d83a 	srl	r2,r8,r2
 8008314:	2000041e 	bne	r4,zero,8008328 <__subdf3+0x8e4>
 8008318:	01001004 	movi	r4,64
 800831c:	214bc83a 	sub	r5,r4,r5
 8008320:	4150983a 	sll	r8,r8,r5
 8008324:	5a16b03a 	or	r11,r11,r8
 8008328:	5822c03a 	cmpne	r17,r11,zero
 800832c:	88a2b03a 	or	r17,r17,r2
 8008330:	003e7d06 	br	8007d28 <__subdf3+0x2e4>
 8008334:	5aa3883a 	add	r17,r11,r10
 8008338:	40c9883a 	add	r4,r8,r3
 800833c:	8a95803a 	cmpltu	r10,r17,r10
 8008340:	2289883a 	add	r4,r4,r10
 8008344:	003e9806 	br	8007da8 <__subdf3+0x364>
 8008348:	8904b03a 	or	r2,r17,r4
 800834c:	103f0826 	beq	r2,zero,8007f70 <__subdf3+0x52c>
 8008350:	003e9806 	br	8007db4 <__subdf3+0x370>
 8008354:	02000434 	movhi	r8,16
 8008358:	423fffc4 	addi	r8,r8,-1
 800835c:	0025883a 	mov	r18,zero
 8008360:	00bfffc4 	movi	r2,-1
 8008364:	003ec206 	br	8007e70 <__subdf3+0x42c>
 8008368:	0005883a 	mov	r2,zero
 800836c:	0141ffc4 	movi	r5,2047
 8008370:	0007883a 	mov	r3,zero
 8008374:	003e1d06 	br	8007bec <__subdf3+0x1a8>

08008378 <__unorddf2>:
 8008378:	2806d53a 	srli	r3,r5,20
 800837c:	3810d53a 	srli	r8,r7,20
 8008380:	02400434 	movhi	r9,16
 8008384:	18c1ffcc 	andi	r3,r3,2047
 8008388:	4a7fffc4 	addi	r9,r9,-1
 800838c:	18c1ffd8 	cmpnei	r3,r3,2047
 8008390:	2a4a703a 	and	r5,r5,r9
 8008394:	3a4e703a 	and	r7,r7,r9
 8008398:	4201ffcc 	andi	r8,r8,2047
 800839c:	18000426 	beq	r3,zero,80083b0 <__unorddf2+0x38>
 80083a0:	4201ffd8 	cmpnei	r8,r8,2047
 80083a4:	40000626 	beq	r8,zero,80083c0 <__unorddf2+0x48>
 80083a8:	0005883a 	mov	r2,zero
 80083ac:	f800283a 	ret
 80083b0:	214ab03a 	or	r5,r4,r5
 80083b4:	283ffa26 	beq	r5,zero,80083a0 <__unorddf2+0x28>
 80083b8:	00800044 	movi	r2,1
 80083bc:	f800283a 	ret
 80083c0:	398eb03a 	or	r7,r7,r6
 80083c4:	3804c03a 	cmpne	r2,r7,zero
 80083c8:	f800283a 	ret

080083cc <__floatsidf>:
 80083cc:	defffd04 	addi	sp,sp,-12
 80083d0:	dfc00215 	stw	ra,8(sp)
 80083d4:	dc400115 	stw	r17,4(sp)
 80083d8:	dc000015 	stw	r16,0(sp)
 80083dc:	20001326 	beq	r4,zero,800842c <__floatsidf+0x60>
 80083e0:	2022d7fa 	srli	r17,r4,31
 80083e4:	2021883a 	mov	r16,r4
 80083e8:	20002516 	blt	r4,zero,8008480 <__floatsidf+0xb4>
 80083ec:	8009883a 	mov	r4,r16
 80083f0:	80085180 	call	8008518 <__clzsi2>
 80083f4:	01410784 	movi	r5,1054
 80083f8:	288bc83a 	sub	r5,r5,r2
 80083fc:	10c002c8 	cmpgei	r3,r2,11
 8008400:	2941ffcc 	andi	r5,r5,2047
 8008404:	1800171e 	bne	r3,zero,8008464 <__floatsidf+0x98>
 8008408:	00c002c4 	movi	r3,11
 800840c:	1887c83a 	sub	r3,r3,r2
 8008410:	80c6d83a 	srl	r3,r16,r3
 8008414:	01000434 	movhi	r4,16
 8008418:	10800544 	addi	r2,r2,21
 800841c:	213fffc4 	addi	r4,r4,-1
 8008420:	8084983a 	sll	r2,r16,r2
 8008424:	1906703a 	and	r3,r3,r4
 8008428:	00000406 	br	800843c <__floatsidf+0x70>
 800842c:	0023883a 	mov	r17,zero
 8008430:	000b883a 	mov	r5,zero
 8008434:	0007883a 	mov	r3,zero
 8008438:	0005883a 	mov	r2,zero
 800843c:	280a953a 	slli	r5,r5,20
 8008440:	8c403fcc 	andi	r17,r17,255
 8008444:	882297fa 	slli	r17,r17,31
 8008448:	28c6b03a 	or	r3,r5,r3
 800844c:	1c46b03a 	or	r3,r3,r17
 8008450:	dfc00217 	ldw	ra,8(sp)
 8008454:	dc400117 	ldw	r17,4(sp)
 8008458:	dc000017 	ldw	r16,0(sp)
 800845c:	dec00304 	addi	sp,sp,12
 8008460:	f800283a 	ret
 8008464:	10bffd44 	addi	r2,r2,-11
 8008468:	8086983a 	sll	r3,r16,r2
 800846c:	00800434 	movhi	r2,16
 8008470:	10bfffc4 	addi	r2,r2,-1
 8008474:	1886703a 	and	r3,r3,r2
 8008478:	0005883a 	mov	r2,zero
 800847c:	003fef06 	br	800843c <__floatsidf+0x70>
 8008480:	0121c83a 	sub	r16,zero,r4
 8008484:	003fd906 	br	80083ec <__floatsidf+0x20>

08008488 <__floatunsidf>:
 8008488:	defffe04 	addi	sp,sp,-8
 800848c:	dc000015 	stw	r16,0(sp)
 8008490:	dfc00115 	stw	ra,4(sp)
 8008494:	2021883a 	mov	r16,r4
 8008498:	20000f26 	beq	r4,zero,80084d8 <__floatunsidf+0x50>
 800849c:	80085180 	call	8008518 <__clzsi2>
 80084a0:	00c10784 	movi	r3,1054
 80084a4:	1887c83a 	sub	r3,r3,r2
 80084a8:	110002c8 	cmpgei	r4,r2,11
 80084ac:	18c1ffcc 	andi	r3,r3,2047
 80084b0:	2000121e 	bne	r4,zero,80084fc <__floatunsidf+0x74>
 80084b4:	014002c4 	movi	r5,11
 80084b8:	288bc83a 	sub	r5,r5,r2
 80084bc:	814ad83a 	srl	r5,r16,r5
 80084c0:	01000434 	movhi	r4,16
 80084c4:	10800544 	addi	r2,r2,21
 80084c8:	213fffc4 	addi	r4,r4,-1
 80084cc:	80a0983a 	sll	r16,r16,r2
 80084d0:	290a703a 	and	r5,r5,r4
 80084d4:	00000206 	br	80084e0 <__floatunsidf+0x58>
 80084d8:	0007883a 	mov	r3,zero
 80084dc:	000b883a 	mov	r5,zero
 80084e0:	1806953a 	slli	r3,r3,20
 80084e4:	8005883a 	mov	r2,r16
 80084e8:	1946b03a 	or	r3,r3,r5
 80084ec:	dfc00117 	ldw	ra,4(sp)
 80084f0:	dc000017 	ldw	r16,0(sp)
 80084f4:	dec00204 	addi	sp,sp,8
 80084f8:	f800283a 	ret
 80084fc:	10bffd44 	addi	r2,r2,-11
 8008500:	808a983a 	sll	r5,r16,r2
 8008504:	00800434 	movhi	r2,16
 8008508:	10bfffc4 	addi	r2,r2,-1
 800850c:	288a703a 	and	r5,r5,r2
 8008510:	0021883a 	mov	r16,zero
 8008514:	003ff206 	br	80084e0 <__floatunsidf+0x58>

08008518 <__clzsi2>:
 8008518:	00bfffd4 	movui	r2,65535
 800851c:	11000436 	bltu	r2,r4,8008530 <__clzsi2+0x18>
 8008520:	20804030 	cmpltui	r2,r4,256
 8008524:	10000e26 	beq	r2,zero,8008560 <__clzsi2+0x48>
 8008528:	01400804 	movi	r5,32
 800852c:	00000406 	br	8008540 <__clzsi2+0x28>
 8008530:	00804034 	movhi	r2,256
 8008534:	20800736 	bltu	r4,r2,8008554 <__clzsi2+0x3c>
 8008538:	2008d63a 	srli	r4,r4,24
 800853c:	01400204 	movi	r5,8
 8008540:	00c20074 	movhi	r3,2049
 8008544:	20c7883a 	add	r3,r4,r3
 8008548:	189f1303 	ldbu	r2,31820(r3)
 800854c:	2885c83a 	sub	r2,r5,r2
 8008550:	f800283a 	ret
 8008554:	2008d43a 	srli	r4,r4,16
 8008558:	01400404 	movi	r5,16
 800855c:	003ff806 	br	8008540 <__clzsi2+0x28>
 8008560:	2008d23a 	srli	r4,r4,8
 8008564:	01400604 	movi	r5,24
 8008568:	003ff506 	br	8008540 <__clzsi2+0x28>

0800856c <__fixunsdfsi>:
 800856c:	defffd04 	addi	sp,sp,-12
 8008570:	000d883a 	mov	r6,zero
 8008574:	01d07834 	movhi	r7,16864
 8008578:	dc400115 	stw	r17,4(sp)
 800857c:	dc000015 	stw	r16,0(sp)
 8008580:	dfc00215 	stw	ra,8(sp)
 8008584:	2023883a 	mov	r17,r4
 8008588:	2821883a 	mov	r16,r5
 800858c:	80070bc0 	call	80070bc <__gedf2>
 8008590:	1000080e 	bge	r2,zero,80085b4 <__fixunsdfsi+0x48>
 8008594:	8809883a 	mov	r4,r17
 8008598:	800b883a 	mov	r5,r16
 800859c:	80085e00 	call	80085e0 <__fixdfsi>
 80085a0:	dfc00217 	ldw	ra,8(sp)
 80085a4:	dc400117 	ldw	r17,4(sp)
 80085a8:	dc000017 	ldw	r16,0(sp)
 80085ac:	dec00304 	addi	sp,sp,12
 80085b0:	f800283a 	ret
 80085b4:	000d883a 	mov	r6,zero
 80085b8:	01d07834 	movhi	r7,16864
 80085bc:	8809883a 	mov	r4,r17
 80085c0:	800b883a 	mov	r5,r16
 80085c4:	8007a440 	call	8007a44 <__subdf3>
 80085c8:	180b883a 	mov	r5,r3
 80085cc:	1009883a 	mov	r4,r2
 80085d0:	80085e00 	call	80085e0 <__fixdfsi>
 80085d4:	00e00034 	movhi	r3,32768
 80085d8:	10c5883a 	add	r2,r2,r3
 80085dc:	003ff006 	br	80085a0 <__fixunsdfsi+0x34>

080085e0 <__fixdfsi>:
 80085e0:	2806d53a 	srli	r3,r5,20
 80085e4:	01800434 	movhi	r6,16
 80085e8:	31bfffc4 	addi	r6,r6,-1
 80085ec:	18c1ffcc 	andi	r3,r3,2047
 80085f0:	19c0ffd0 	cmplti	r7,r3,1023
 80085f4:	2810d7fa 	srli	r8,r5,31
 80085f8:	298a703a 	and	r5,r5,r6
 80085fc:	3800061e 	bne	r7,zero,8008618 <__fixdfsi+0x38>
 8008600:	18810790 	cmplti	r2,r3,1054
 8008604:	1000061e 	bne	r2,zero,8008620 <__fixdfsi+0x40>
 8008608:	00a00034 	movhi	r2,32768
 800860c:	10bfffc4 	addi	r2,r2,-1
 8008610:	4085883a 	add	r2,r8,r2
 8008614:	f800283a 	ret
 8008618:	0005883a 	mov	r2,zero
 800861c:	f800283a 	ret
 8008620:	01810cc4 	movi	r6,1075
 8008624:	30cdc83a 	sub	r6,r6,r3
 8008628:	30800808 	cmpgei	r2,r6,32
 800862c:	29400434 	orhi	r5,r5,16
 8008630:	1000071e 	bne	r2,zero,8008650 <__fixdfsi+0x70>
 8008634:	18befb44 	addi	r2,r3,-1043
 8008638:	2884983a 	sll	r2,r5,r2
 800863c:	2188d83a 	srl	r4,r4,r6
 8008640:	1104b03a 	or	r2,r2,r4
 8008644:	403ff526 	beq	r8,zero,800861c <__fixdfsi+0x3c>
 8008648:	0085c83a 	sub	r2,zero,r2
 800864c:	f800283a 	ret
 8008650:	008104c4 	movi	r2,1043
 8008654:	10c5c83a 	sub	r2,r2,r3
 8008658:	2884d83a 	srl	r2,r5,r2
 800865c:	003ff906 	br	8008644 <__fixdfsi+0x64>

08008660 <__errno>:
 8008660:	008200b4 	movhi	r2,2050
 8008664:	10a7bf17 	ldw	r2,-24836(r2)
 8008668:	f800283a 	ret

0800866c <_printf_r>:
 800866c:	defffd04 	addi	sp,sp,-12
 8008670:	2805883a 	mov	r2,r5
 8008674:	dfc00015 	stw	ra,0(sp)
 8008678:	d9800115 	stw	r6,4(sp)
 800867c:	d9c00215 	stw	r7,8(sp)
 8008680:	21400217 	ldw	r5,8(r4)
 8008684:	d9c00104 	addi	r7,sp,4
 8008688:	100d883a 	mov	r6,r2
 800868c:	80088680 	call	8008868 <___vfprintf_internal_r>
 8008690:	dfc00017 	ldw	ra,0(sp)
 8008694:	dec00304 	addi	sp,sp,12
 8008698:	f800283a 	ret

0800869c <printf>:
 800869c:	defffc04 	addi	sp,sp,-16
 80086a0:	dfc00015 	stw	ra,0(sp)
 80086a4:	d9400115 	stw	r5,4(sp)
 80086a8:	d9800215 	stw	r6,8(sp)
 80086ac:	d9c00315 	stw	r7,12(sp)
 80086b0:	008200b4 	movhi	r2,2050
 80086b4:	10a7bf17 	ldw	r2,-24836(r2)
 80086b8:	200b883a 	mov	r5,r4
 80086bc:	d9800104 	addi	r6,sp,4
 80086c0:	11000217 	ldw	r4,8(r2)
 80086c4:	800a9540 	call	800a954 <__vfprintf_internal>
 80086c8:	dfc00017 	ldw	ra,0(sp)
 80086cc:	dec00404 	addi	sp,sp,16
 80086d0:	f800283a 	ret

080086d4 <_putchar_r>:
 80086d4:	21800217 	ldw	r6,8(r4)
 80086d8:	800f4241 	jmpi	800f424 <_putc_r>

080086dc <putchar>:
 80086dc:	008200b4 	movhi	r2,2050
 80086e0:	10a7bf17 	ldw	r2,-24836(r2)
 80086e4:	200b883a 	mov	r5,r4
 80086e8:	11800217 	ldw	r6,8(r2)
 80086ec:	1009883a 	mov	r4,r2
 80086f0:	800f4241 	jmpi	800f424 <_putc_r>

080086f4 <_puts_r>:
 80086f4:	defff504 	addi	sp,sp,-44
 80086f8:	dc000815 	stw	r16,32(sp)
 80086fc:	2021883a 	mov	r16,r4
 8008700:	2809883a 	mov	r4,r5
 8008704:	dc400915 	stw	r17,36(sp)
 8008708:	dfc00a15 	stw	ra,40(sp)
 800870c:	2823883a 	mov	r17,r5
 8008710:	80087d00 	call	80087d0 <strlen>
 8008714:	11000044 	addi	r4,r2,1
 8008718:	d8800515 	stw	r2,20(sp)
 800871c:	00800044 	movi	r2,1
 8008720:	00c20074 	movhi	r3,2049
 8008724:	d8800715 	stw	r2,28(sp)
 8008728:	d8800404 	addi	r2,sp,16
 800872c:	18df5304 	addi	r3,r3,32076
 8008730:	d8800115 	stw	r2,4(sp)
 8008734:	00800084 	movi	r2,2
 8008738:	dc400415 	stw	r17,16(sp)
 800873c:	d8c00615 	stw	r3,24(sp)
 8008740:	d9000315 	stw	r4,12(sp)
 8008744:	d8800215 	stw	r2,8(sp)
 8008748:	81400217 	ldw	r5,8(r16)
 800874c:	80000226 	beq	r16,zero,8008758 <_puts_r+0x64>
 8008750:	80800e17 	ldw	r2,56(r16)
 8008754:	10001326 	beq	r2,zero,80087a4 <_puts_r+0xb0>
 8008758:	2880030b 	ldhu	r2,12(r5)
 800875c:	10c8000c 	andi	r3,r2,8192
 8008760:	1800061e 	bne	r3,zero,800877c <_puts_r+0x88>
 8008764:	28c01917 	ldw	r3,100(r5)
 8008768:	0137ffc4 	movi	r4,-8193
 800876c:	10880014 	ori	r2,r2,8192
 8008770:	1906703a 	and	r3,r3,r4
 8008774:	2880030d 	sth	r2,12(r5)
 8008778:	28c01915 	stw	r3,100(r5)
 800877c:	d9800104 	addi	r6,sp,4
 8008780:	8009883a 	mov	r4,r16
 8008784:	800cf180 	call	800cf18 <__sfvwrite_r>
 8008788:	10000b1e 	bne	r2,zero,80087b8 <_puts_r+0xc4>
 800878c:	00800284 	movi	r2,10
 8008790:	dfc00a17 	ldw	ra,40(sp)
 8008794:	dc400917 	ldw	r17,36(sp)
 8008798:	dc000817 	ldw	r16,32(sp)
 800879c:	dec00b04 	addi	sp,sp,44
 80087a0:	f800283a 	ret
 80087a4:	8009883a 	mov	r4,r16
 80087a8:	d9400015 	stw	r5,0(sp)
 80087ac:	800cab80 	call	800cab8 <__sinit>
 80087b0:	d9400017 	ldw	r5,0(sp)
 80087b4:	003fe806 	br	8008758 <_puts_r+0x64>
 80087b8:	00bfffc4 	movi	r2,-1
 80087bc:	003ff406 	br	8008790 <_puts_r+0x9c>

080087c0 <puts>:
 80087c0:	008200b4 	movhi	r2,2050
 80087c4:	200b883a 	mov	r5,r4
 80087c8:	1127bf17 	ldw	r4,-24836(r2)
 80087cc:	80086f41 	jmpi	80086f4 <_puts_r>

080087d0 <strlen>:
 80087d0:	208000cc 	andi	r2,r4,3
 80087d4:	10000926 	beq	r2,zero,80087fc <strlen+0x2c>
 80087d8:	2005883a 	mov	r2,r4
 80087dc:	00000306 	br	80087ec <strlen+0x1c>
 80087e0:	10800044 	addi	r2,r2,1
 80087e4:	10c000cc 	andi	r3,r2,3
 80087e8:	18000526 	beq	r3,zero,8008800 <strlen+0x30>
 80087ec:	10c00007 	ldb	r3,0(r2)
 80087f0:	183ffb1e 	bne	r3,zero,80087e0 <strlen+0x10>
 80087f4:	1105c83a 	sub	r2,r2,r4
 80087f8:	f800283a 	ret
 80087fc:	2005883a 	mov	r2,r4
 8008800:	11400017 	ldw	r5,0(r2)
 8008804:	01ffbff4 	movhi	r7,65279
 8008808:	39ffbfc4 	addi	r7,r7,-257
 800880c:	29c7883a 	add	r3,r5,r7
 8008810:	01a02074 	movhi	r6,32897
 8008814:	014a303a 	nor	r5,zero,r5
 8008818:	1946703a 	and	r3,r3,r5
 800881c:	31a02004 	addi	r6,r6,-32640
 8008820:	1986703a 	and	r3,r3,r6
 8008824:	1800071e 	bne	r3,zero,8008844 <strlen+0x74>
 8008828:	11400117 	ldw	r5,4(r2)
 800882c:	10800104 	addi	r2,r2,4
 8008830:	29c7883a 	add	r3,r5,r7
 8008834:	014a303a 	nor	r5,zero,r5
 8008838:	1946703a 	and	r3,r3,r5
 800883c:	1986703a 	and	r3,r3,r6
 8008840:	183ff926 	beq	r3,zero,8008828 <strlen+0x58>
 8008844:	10c00007 	ldb	r3,0(r2)
 8008848:	183fea26 	beq	r3,zero,80087f4 <strlen+0x24>
 800884c:	10c00047 	ldb	r3,1(r2)
 8008850:	10800044 	addi	r2,r2,1
 8008854:	183fe726 	beq	r3,zero,80087f4 <strlen+0x24>
 8008858:	10c00047 	ldb	r3,1(r2)
 800885c:	10800044 	addi	r2,r2,1
 8008860:	183ffa1e 	bne	r3,zero,800884c <strlen+0x7c>
 8008864:	003fe306 	br	80087f4 <strlen+0x24>

08008868 <___vfprintf_internal_r>:
 8008868:	deffbf04 	addi	sp,sp,-260
 800886c:	dfc04015 	stw	ra,256(sp)
 8008870:	dd803d15 	stw	r22,244(sp)
 8008874:	dcc03a15 	stw	r19,232(sp)
 8008878:	dc803915 	stw	r18,228(sp)
 800887c:	2027883a 	mov	r19,r4
 8008880:	2825883a 	mov	r18,r5
 8008884:	302d883a 	mov	r22,r6
 8008888:	d9c00615 	stw	r7,24(sp)
 800888c:	df003f15 	stw	fp,252(sp)
 8008890:	ddc03e15 	stw	r23,248(sp)
 8008894:	dd403c15 	stw	r21,240(sp)
 8008898:	dd003b15 	stw	r20,236(sp)
 800889c:	dc403815 	stw	r17,224(sp)
 80088a0:	dc003715 	stw	r16,220(sp)
 80088a4:	800d52c0 	call	800d52c <_localeconv_r>
 80088a8:	10800017 	ldw	r2,0(r2)
 80088ac:	1009883a 	mov	r4,r2
 80088b0:	d8800d15 	stw	r2,52(sp)
 80088b4:	80087d00 	call	80087d0 <strlen>
 80088b8:	d8800b15 	stw	r2,44(sp)
 80088bc:	98000226 	beq	r19,zero,80088c8 <___vfprintf_internal_r+0x60>
 80088c0:	98800e17 	ldw	r2,56(r19)
 80088c4:	1001d726 	beq	r2,zero,8009024 <___vfprintf_internal_r+0x7bc>
 80088c8:	9080030b 	ldhu	r2,12(r18)
 80088cc:	10c8000c 	andi	r3,r2,8192
 80088d0:	1800061e 	bne	r3,zero,80088ec <___vfprintf_internal_r+0x84>
 80088d4:	90c01917 	ldw	r3,100(r18)
 80088d8:	0137ffc4 	movi	r4,-8193
 80088dc:	10880014 	ori	r2,r2,8192
 80088e0:	1906703a 	and	r3,r3,r4
 80088e4:	9080030d 	sth	r2,12(r18)
 80088e8:	90c01915 	stw	r3,100(r18)
 80088ec:	10c0020c 	andi	r3,r2,8
 80088f0:	1800fc26 	beq	r3,zero,8008ce4 <___vfprintf_internal_r+0x47c>
 80088f4:	90c00417 	ldw	r3,16(r18)
 80088f8:	1800fa26 	beq	r3,zero,8008ce4 <___vfprintf_internal_r+0x47c>
 80088fc:	1080068c 	andi	r2,r2,26
 8008900:	10800298 	cmpnei	r2,r2,10
 8008904:	1000ff26 	beq	r2,zero,8008d04 <___vfprintf_internal_r+0x49c>
 8008908:	d8802704 	addi	r2,sp,156
 800890c:	b02f883a 	mov	r23,r22
 8008910:	d8801a15 	stw	r2,104(sp)
 8008914:	d8001c15 	stw	zero,112(sp)
 8008918:	d8001b15 	stw	zero,108(sp)
 800891c:	d8000815 	stw	zero,32(sp)
 8008920:	d8000915 	stw	zero,36(sp)
 8008924:	d8000a15 	stw	zero,40(sp)
 8008928:	d8000c15 	stw	zero,48(sp)
 800892c:	d8001015 	stw	zero,64(sp)
 8008930:	d8000515 	stw	zero,20(sp)
 8008934:	102d883a 	mov	r22,r2
 8008938:	b8800007 	ldb	r2,0(r23)
 800893c:	1000d726 	beq	r2,zero,8008c9c <___vfprintf_internal_r+0x434>
 8008940:	b821883a 	mov	r16,r23
 8008944:	00000306 	br	8008954 <___vfprintf_internal_r+0xec>
 8008948:	80800047 	ldb	r2,1(r16)
 800894c:	84000044 	addi	r16,r16,1
 8008950:	10011926 	beq	r2,zero,8008db8 <___vfprintf_internal_r+0x550>
 8008954:	10800958 	cmpnei	r2,r2,37
 8008958:	103ffb1e 	bne	r2,zero,8008948 <___vfprintf_internal_r+0xe0>
 800895c:	85e3c83a 	sub	r17,r16,r23
 8008960:	85c1171e 	bne	r16,r23,8008dc0 <___vfprintf_internal_r+0x558>
 8008964:	80800003 	ldbu	r2,0(r16)
 8008968:	10803fcc 	andi	r2,r2,255
 800896c:	1080201c 	xori	r2,r2,128
 8008970:	10bfe004 	addi	r2,r2,-128
 8008974:	1000c926 	beq	r2,zero,8008c9c <___vfprintf_internal_r+0x434>
 8008978:	82c00047 	ldb	r11,1(r16)
 800897c:	85c00044 	addi	r23,r16,1
 8008980:	d8001345 	stb	zero,77(sp)
 8008984:	0009883a 	mov	r4,zero
 8008988:	000b883a 	mov	r5,zero
 800898c:	023fffc4 	movi	r8,-1
 8008990:	0021883a 	mov	r16,zero
 8008994:	0019883a 	mov	r12,zero
 8008998:	bdc00044 	addi	r23,r23,1
 800899c:	5839883a 	mov	fp,r11
 80089a0:	e0bff804 	addi	r2,fp,-32
 80089a4:	10c01668 	cmpgeui	r3,r2,89
 80089a8:	18006c1e 	bne	r3,zero,8008b5c <___vfprintf_internal_r+0x2f4>
 80089ac:	100490ba 	slli	r2,r2,2
 80089b0:	00c20074 	movhi	r3,2049
 80089b4:	10c7883a 	add	r3,r2,r3
 80089b8:	18a27017 	ldw	r2,-30272(r3)
 80089bc:	1000683a 	jmp	r2
 80089c0:	080093ac 	andhi	zero,at,590
 80089c4:	08008b5c 	xori	zero,at,557
 80089c8:	08008b5c 	xori	zero,at,557
 80089cc:	080093a0 	cmpeqi	zero,at,590
 80089d0:	08008b5c 	xori	zero,at,557
 80089d4:	08008b5c 	xori	zero,at,557
 80089d8:	08008b5c 	xori	zero,at,557
 80089dc:	08008b5c 	xori	zero,at,557
 80089e0:	08008b5c 	xori	zero,at,557
 80089e4:	08008b5c 	xori	zero,at,557
 80089e8:	08009378 	rdprs	zero,at,589
 80089ec:	08009368 	cmpgeui	zero,at,589
 80089f0:	08008b5c 	xori	zero,at,557
 80089f4:	08009350 	cmplti	zero,at,589
 80089f8:	08009304 	addi	zero,at,588
 80089fc:	08008b5c 	xori	zero,at,557
 8008a00:	080092f8 	rdprs	zero,at,587
 8008a04:	08008b24 	muli	zero,at,556
 8008a08:	08008b24 	muli	zero,at,556
 8008a0c:	08008b24 	muli	zero,at,556
 8008a10:	08008b24 	muli	zero,at,556
 8008a14:	08008b24 	muli	zero,at,556
 8008a18:	08008b24 	muli	zero,at,556
 8008a1c:	08008b24 	muli	zero,at,556
 8008a20:	08008b24 	muli	zero,at,556
 8008a24:	08008b24 	muli	zero,at,556
 8008a28:	08008b5c 	xori	zero,at,557
 8008a2c:	08008b5c 	xori	zero,at,557
 8008a30:	08008b5c 	xori	zero,at,557
 8008a34:	08008b5c 	xori	zero,at,557
 8008a38:	08008b5c 	xori	zero,at,557
 8008a3c:	08008b5c 	xori	zero,at,557
 8008a40:	08008b5c 	xori	zero,at,557
 8008a44:	08008b5c 	xori	zero,at,557
 8008a48:	08008b5c 	xori	zero,at,557
 8008a4c:	08008b5c 	xori	zero,at,557
 8008a50:	080091ec 	andhi	zero,at,583
 8008a54:	08008e1c 	xori	zero,at,568
 8008a58:	08008b5c 	xori	zero,at,557
 8008a5c:	08008e1c 	xori	zero,at,568
 8008a60:	08008b5c 	xori	zero,at,557
 8008a64:	08008b5c 	xori	zero,at,557
 8008a68:	08008b5c 	xori	zero,at,557
 8008a6c:	08008b5c 	xori	zero,at,557
 8008a70:	080093d8 	cmpnei	zero,at,591
 8008a74:	08008b5c 	xori	zero,at,557
 8008a78:	08008b5c 	xori	zero,at,557
 8008a7c:	08008d50 	cmplti	zero,at,565
 8008a80:	08008b5c 	xori	zero,at,557
 8008a84:	08008b5c 	xori	zero,at,557
 8008a88:	08008b5c 	xori	zero,at,557
 8008a8c:	08008b5c 	xori	zero,at,557
 8008a90:	08008b5c 	xori	zero,at,557
 8008a94:	08008d28 	cmpgeui	zero,at,564
 8008a98:	08008b5c 	xori	zero,at,557
 8008a9c:	08008b5c 	xori	zero,at,557
 8008aa0:	0800940c 	andi	zero,at,592
 8008aa4:	08008b5c 	xori	zero,at,557
 8008aa8:	08008b5c 	xori	zero,at,557
 8008aac:	08008b5c 	xori	zero,at,557
 8008ab0:	08008b5c 	xori	zero,at,557
 8008ab4:	08008b5c 	xori	zero,at,557
 8008ab8:	08008b5c 	xori	zero,at,557
 8008abc:	08008b5c 	xori	zero,at,557
 8008ac0:	08008b5c 	xori	zero,at,557
 8008ac4:	08008b5c 	xori	zero,at,557
 8008ac8:	08008b5c 	xori	zero,at,557
 8008acc:	080093e4 	muli	zero,at,591
 8008ad0:	08009030 	cmpltui	zero,at,576
 8008ad4:	08008e1c 	xori	zero,at,568
 8008ad8:	08008e1c 	xori	zero,at,568
 8008adc:	08008e1c 	xori	zero,at,568
 8008ae0:	080090a4 	muli	zero,at,578
 8008ae4:	08009030 	cmpltui	zero,at,576
 8008ae8:	08008b5c 	xori	zero,at,557
 8008aec:	08008b5c 	xori	zero,at,557
 8008af0:	080091d8 	cmpnei	zero,at,583
 8008af4:	08008b5c 	xori	zero,at,557
 8008af8:	0800919c 	xori	zero,at,582
 8008afc:	08008d54 	ori	zero,at,565
 8008b00:	0800915c 	xori	zero,at,581
 8008b04:	08009150 	cmplti	zero,at,581
 8008b08:	08008b5c 	xori	zero,at,557
 8008b0c:	080090f8 	rdprs	zero,at,579
 8008b10:	08008b5c 	xori	zero,at,557
 8008b14:	08008d2c 	andhi	zero,at,564
 8008b18:	08008b5c 	xori	zero,at,557
 8008b1c:	08008b5c 	xori	zero,at,557
 8008b20:	080090b0 	cmpltui	zero,at,578
 8008b24:	0021883a 	mov	r16,zero
 8008b28:	e0fff404 	addi	r3,fp,-48
 8008b2c:	800490ba 	slli	r2,r16,2
 8008b30:	bf000007 	ldb	fp,0(r23)
 8008b34:	bdc00044 	addi	r23,r23,1
 8008b38:	1421883a 	add	r16,r2,r16
 8008b3c:	8421883a 	add	r16,r16,r16
 8008b40:	1c21883a 	add	r16,r3,r16
 8008b44:	e0fff404 	addi	r3,fp,-48
 8008b48:	188002b0 	cmpltui	r2,r3,10
 8008b4c:	103ff71e 	bne	r2,zero,8008b2c <___vfprintf_internal_r+0x2c4>
 8008b50:	e0bff804 	addi	r2,fp,-32
 8008b54:	10c01668 	cmpgeui	r3,r2,89
 8008b58:	183f9426 	beq	r3,zero,80089ac <___vfprintf_internal_r+0x144>
 8008b5c:	21003fcc 	andi	r4,r4,255
 8008b60:	20068f1e 	bne	r4,zero,800a5a0 <___vfprintf_internal_r+0x1d38>
 8008b64:	e0004d26 	beq	fp,zero,8008c9c <___vfprintf_internal_r+0x434>
 8008b68:	df001d05 	stb	fp,116(sp)
 8008b6c:	d8001345 	stb	zero,77(sp)
 8008b70:	05000044 	movi	r20,1
 8008b74:	05400044 	movi	r21,1
 8008b78:	dc401d04 	addi	r17,sp,116
 8008b7c:	db000415 	stw	r12,16(sp)
 8008b80:	0011883a 	mov	r8,zero
 8008b84:	d8000715 	stw	zero,28(sp)
 8008b88:	d8800417 	ldw	r2,16(sp)
 8008b8c:	1380008c 	andi	r14,r2,2
 8008b90:	70000126 	beq	r14,zero,8008b98 <___vfprintf_internal_r+0x330>
 8008b94:	a5000084 	addi	r20,r20,2
 8008b98:	d8800417 	ldw	r2,16(sp)
 8008b9c:	d8c01c17 	ldw	r3,112(sp)
 8008ba0:	1340210c 	andi	r13,r2,132
 8008ba4:	6800021e 	bne	r13,zero,8008bb0 <___vfprintf_internal_r+0x348>
 8008ba8:	850fc83a 	sub	r7,r16,r20
 8008bac:	01c36016 	blt	zero,r7,8009930 <___vfprintf_internal_r+0x10c8>
 8008bb0:	d8801347 	ldb	r2,77(sp)
 8008bb4:	10000c26 	beq	r2,zero,8008be8 <___vfprintf_internal_r+0x380>
 8008bb8:	d8801b17 	ldw	r2,108(sp)
 8008bbc:	d9001344 	addi	r4,sp,77
 8008bc0:	18c00044 	addi	r3,r3,1
 8008bc4:	10800044 	addi	r2,r2,1
 8008bc8:	b1000015 	stw	r4,0(r22)
 8008bcc:	01000044 	movi	r4,1
 8008bd0:	d8801b15 	stw	r2,108(sp)
 8008bd4:	b1000115 	stw	r4,4(r22)
 8008bd8:	d8c01c15 	stw	r3,112(sp)
 8008bdc:	10800208 	cmpgei	r2,r2,8
 8008be0:	1003a01e 	bne	r2,zero,8009a64 <___vfprintf_internal_r+0x11fc>
 8008be4:	b5800204 	addi	r22,r22,8
 8008be8:	70000c26 	beq	r14,zero,8008c1c <___vfprintf_internal_r+0x3b4>
 8008bec:	d8801b17 	ldw	r2,108(sp)
 8008bf0:	d9001384 	addi	r4,sp,78
 8008bf4:	18c00084 	addi	r3,r3,2
 8008bf8:	10800044 	addi	r2,r2,1
 8008bfc:	b1000015 	stw	r4,0(r22)
 8008c00:	01000084 	movi	r4,2
 8008c04:	d8801b15 	stw	r2,108(sp)
 8008c08:	b1000115 	stw	r4,4(r22)
 8008c0c:	d8c01c15 	stw	r3,112(sp)
 8008c10:	10800208 	cmpgei	r2,r2,8
 8008c14:	1003871e 	bne	r2,zero,8009a34 <___vfprintf_internal_r+0x11cc>
 8008c18:	b5800204 	addi	r22,r22,8
 8008c1c:	6b402018 	cmpnei	r13,r13,128
 8008c20:	68025226 	beq	r13,zero,800956c <___vfprintf_internal_r+0xd04>
 8008c24:	4551c83a 	sub	r8,r8,r21
 8008c28:	02028a16 	blt	zero,r8,8009654 <___vfprintf_internal_r+0xdec>
 8008c2c:	d8800417 	ldw	r2,16(sp)
 8008c30:	1080400c 	andi	r2,r2,256
 8008c34:	1002071e 	bne	r2,zero,8009454 <___vfprintf_internal_r+0xbec>
 8008c38:	d8801b17 	ldw	r2,108(sp)
 8008c3c:	1d47883a 	add	r3,r3,r21
 8008c40:	b4400015 	stw	r17,0(r22)
 8008c44:	10800044 	addi	r2,r2,1
 8008c48:	b5400115 	stw	r21,4(r22)
 8008c4c:	d8801b15 	stw	r2,108(sp)
 8008c50:	d8c01c15 	stw	r3,112(sp)
 8008c54:	10800208 	cmpgei	r2,r2,8
 8008c58:	1002ee1e 	bne	r2,zero,8009814 <___vfprintf_internal_r+0xfac>
 8008c5c:	b5800204 	addi	r22,r22,8
 8008c60:	d8800417 	ldw	r2,16(sp)
 8008c64:	1440010c 	andi	r17,r2,4
 8008c68:	88000226 	beq	r17,zero,8008c74 <___vfprintf_internal_r+0x40c>
 8008c6c:	8523c83a 	sub	r17,r16,r20
 8008c70:	0440bd16 	blt	zero,r17,8008f68 <___vfprintf_internal_r+0x700>
 8008c74:	8500010e 	bge	r16,r20,8008c7c <___vfprintf_internal_r+0x414>
 8008c78:	a021883a 	mov	r16,r20
 8008c7c:	d8800517 	ldw	r2,20(sp)
 8008c80:	1405883a 	add	r2,r2,r16
 8008c84:	d8800515 	stw	r2,20(sp)
 8008c88:	1802b91e 	bne	r3,zero,8009770 <___vfprintf_internal_r+0xf08>
 8008c8c:	b8800007 	ldb	r2,0(r23)
 8008c90:	d8001b15 	stw	zero,108(sp)
 8008c94:	dd802704 	addi	r22,sp,156
 8008c98:	103f291e 	bne	r2,zero,8008940 <___vfprintf_internal_r+0xd8>
 8008c9c:	d8801c17 	ldw	r2,112(sp)
 8008ca0:	10063a1e 	bne	r2,zero,800a58c <___vfprintf_internal_r+0x1d24>
 8008ca4:	9080030b 	ldhu	r2,12(r18)
 8008ca8:	1080100c 	andi	r2,r2,64
 8008cac:	1006c91e 	bne	r2,zero,800a7d4 <___vfprintf_internal_r+0x1f6c>
 8008cb0:	d8800517 	ldw	r2,20(sp)
 8008cb4:	dfc04017 	ldw	ra,256(sp)
 8008cb8:	df003f17 	ldw	fp,252(sp)
 8008cbc:	ddc03e17 	ldw	r23,248(sp)
 8008cc0:	dd803d17 	ldw	r22,244(sp)
 8008cc4:	dd403c17 	ldw	r21,240(sp)
 8008cc8:	dd003b17 	ldw	r20,236(sp)
 8008ccc:	dcc03a17 	ldw	r19,232(sp)
 8008cd0:	dc803917 	ldw	r18,228(sp)
 8008cd4:	dc403817 	ldw	r17,224(sp)
 8008cd8:	dc003717 	ldw	r16,220(sp)
 8008cdc:	dec04104 	addi	sp,sp,260
 8008ce0:	f800283a 	ret
 8008ce4:	900b883a 	mov	r5,r18
 8008ce8:	9809883a 	mov	r4,r19
 8008cec:	800aa300 	call	800aa30 <__swsetup_r>
 8008cf0:	1006b81e 	bne	r2,zero,800a7d4 <___vfprintf_internal_r+0x1f6c>
 8008cf4:	9080030b 	ldhu	r2,12(r18)
 8008cf8:	1080068c 	andi	r2,r2,26
 8008cfc:	10800298 	cmpnei	r2,r2,10
 8008d00:	103f011e 	bne	r2,zero,8008908 <___vfprintf_internal_r+0xa0>
 8008d04:	9080038f 	ldh	r2,14(r18)
 8008d08:	103eff16 	blt	r2,zero,8008908 <___vfprintf_internal_r+0xa0>
 8008d0c:	d9c00617 	ldw	r7,24(sp)
 8008d10:	b00d883a 	mov	r6,r22
 8008d14:	900b883a 	mov	r5,r18
 8008d18:	9809883a 	mov	r4,r19
 8008d1c:	800a9700 	call	800a970 <__sbprintf>
 8008d20:	d8800515 	stw	r2,20(sp)
 8008d24:	003fe206 	br	8008cb0 <___vfprintf_internal_r+0x448>
 8008d28:	63000414 	ori	r12,r12,16
 8008d2c:	6080080c 	andi	r2,r12,32
 8008d30:	10008126 	beq	r2,zero,8008f38 <___vfprintf_internal_r+0x6d0>
 8008d34:	d8c00617 	ldw	r3,24(sp)
 8008d38:	00800044 	movi	r2,1
 8008d3c:	1d000017 	ldw	r20,0(r3)
 8008d40:	1d400117 	ldw	r21,4(r3)
 8008d44:	18c00204 	addi	r3,r3,8
 8008d48:	d8c00615 	stw	r3,24(sp)
 8008d4c:	00000906 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8008d50:	63000414 	ori	r12,r12,16
 8008d54:	6080080c 	andi	r2,r12,32
 8008d58:	10006b26 	beq	r2,zero,8008f08 <___vfprintf_internal_r+0x6a0>
 8008d5c:	d8c00617 	ldw	r3,24(sp)
 8008d60:	0005883a 	mov	r2,zero
 8008d64:	1d000017 	ldw	r20,0(r3)
 8008d68:	1d400117 	ldw	r21,4(r3)
 8008d6c:	18c00204 	addi	r3,r3,8
 8008d70:	d8c00615 	stw	r3,24(sp)
 8008d74:	d8001345 	stb	zero,77(sp)
 8008d78:	40ffffe0 	cmpeqi	r3,r8,-1
 8008d7c:	001b883a 	mov	r13,zero
 8008d80:	1801351e 	bne	r3,zero,8009258 <___vfprintf_internal_r+0x9f0>
 8008d84:	047fdfc4 	movi	r17,-129
 8008d88:	6448703a 	and	r4,r12,r17
 8008d8c:	a546b03a 	or	r3,r20,r21
 8008d90:	d9000415 	stw	r4,16(sp)
 8008d94:	1802e41e 	bne	r3,zero,8009928 <___vfprintf_internal_r+0x10c0>
 8008d98:	40025f1e 	bne	r8,zero,8009718 <___vfprintf_internal_r+0xeb0>
 8008d9c:	1003a61e 	bne	r2,zero,8009c38 <___vfprintf_internal_r+0x13d0>
 8008da0:	6540004c 	andi	r21,r12,1
 8008da4:	a803d426 	beq	r21,zero,8009cf8 <___vfprintf_internal_r+0x1490>
 8008da8:	00800c04 	movi	r2,48
 8008dac:	d88026c5 	stb	r2,155(sp)
 8008db0:	dc4026c4 	addi	r17,sp,155
 8008db4:	00014606 	br	80092d0 <___vfprintf_internal_r+0xa68>
 8008db8:	85e3c83a 	sub	r17,r16,r23
 8008dbc:	85ffb726 	beq	r16,r23,8008c9c <___vfprintf_internal_r+0x434>
 8008dc0:	d8c01c17 	ldw	r3,112(sp)
 8008dc4:	d8801b17 	ldw	r2,108(sp)
 8008dc8:	b5c00015 	stw	r23,0(r22)
 8008dcc:	1c47883a 	add	r3,r3,r17
 8008dd0:	10800044 	addi	r2,r2,1
 8008dd4:	d8801b15 	stw	r2,108(sp)
 8008dd8:	b4400115 	stw	r17,4(r22)
 8008ddc:	d8c01c15 	stw	r3,112(sp)
 8008de0:	10800208 	cmpgei	r2,r2,8
 8008de4:	1000061e 	bne	r2,zero,8008e00 <___vfprintf_internal_r+0x598>
 8008de8:	b5800204 	addi	r22,r22,8
 8008dec:	d8c00517 	ldw	r3,20(sp)
 8008df0:	80800003 	ldbu	r2,0(r16)
 8008df4:	1c47883a 	add	r3,r3,r17
 8008df8:	d8c00515 	stw	r3,20(sp)
 8008dfc:	003eda06 	br	8008968 <___vfprintf_internal_r+0x100>
 8008e00:	d9801a04 	addi	r6,sp,104
 8008e04:	900b883a 	mov	r5,r18
 8008e08:	9809883a 	mov	r4,r19
 8008e0c:	800fdc00 	call	800fdc0 <__sprint_r>
 8008e10:	103fa41e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8008e14:	dd802704 	addi	r22,sp,156
 8008e18:	003ff406 	br	8008dec <___vfprintf_internal_r+0x584>
 8008e1c:	21003fcc 	andi	r4,r4,255
 8008e20:	20066a1e 	bne	r4,zero,800a7cc <___vfprintf_internal_r+0x1f64>
 8008e24:	d8c00617 	ldw	r3,24(sp)
 8008e28:	6080020c 	andi	r2,r12,8
 8008e2c:	19000204 	addi	r4,r3,8
 8008e30:	d9000e15 	stw	r4,56(sp)
 8008e34:	1003d01e 	bne	r2,zero,8009d78 <___vfprintf_internal_r+0x1510>
 8008e38:	d8800617 	ldw	r2,24(sp)
 8008e3c:	10c00017 	ldw	r3,0(r2)
 8008e40:	10800117 	ldw	r2,4(r2)
 8008e44:	d8c00915 	stw	r3,36(sp)
 8008e48:	d8800a15 	stw	r2,40(sp)
 8008e4c:	dd400a17 	ldw	r21,40(sp)
 8008e50:	dd000917 	ldw	r20,36(sp)
 8008e54:	00a00034 	movhi	r2,32768
 8008e58:	10bfffc4 	addi	r2,r2,-1
 8008e5c:	a8a2703a 	and	r17,r21,r2
 8008e60:	01dffc34 	movhi	r7,32752
 8008e64:	01bfffc4 	movi	r6,-1
 8008e68:	39ffffc4 	addi	r7,r7,-1
 8008e6c:	a009883a 	mov	r4,r20
 8008e70:	880b883a 	mov	r5,r17
 8008e74:	da000615 	stw	r8,24(sp)
 8008e78:	db000415 	stw	r12,16(sp)
 8008e7c:	80083780 	call	8008378 <__unorddf2>
 8008e80:	db000417 	ldw	r12,16(sp)
 8008e84:	da000617 	ldw	r8,24(sp)
 8008e88:	1004701e 	bne	r2,zero,800a04c <___vfprintf_internal_r+0x17e4>
 8008e8c:	01dffc34 	movhi	r7,32752
 8008e90:	01bfffc4 	movi	r6,-1
 8008e94:	39ffffc4 	addi	r7,r7,-1
 8008e98:	a009883a 	mov	r4,r20
 8008e9c:	880b883a 	mov	r5,r17
 8008ea0:	80071ac0 	call	80071ac <__ledf2>
 8008ea4:	db000417 	ldw	r12,16(sp)
 8008ea8:	da000617 	ldw	r8,24(sp)
 8008eac:	0084670e 	bge	zero,r2,800a04c <___vfprintf_internal_r+0x17e4>
 8008eb0:	000d883a 	mov	r6,zero
 8008eb4:	000f883a 	mov	r7,zero
 8008eb8:	a009883a 	mov	r4,r20
 8008ebc:	a80b883a 	mov	r5,r21
 8008ec0:	80071ac0 	call	80071ac <__ledf2>
 8008ec4:	db000417 	ldw	r12,16(sp)
 8008ec8:	10059d16 	blt	r2,zero,800a540 <___vfprintf_internal_r+0x1cd8>
 8008ecc:	db401343 	ldbu	r13,77(sp)
 8008ed0:	e0801210 	cmplti	r2,fp,72
 8008ed4:	1005741e 	bne	r2,zero,800a4a8 <___vfprintf_internal_r+0x1c40>
 8008ed8:	04420074 	movhi	r17,2049
 8008edc:	8c5f5504 	addi	r17,r17,32084
 8008ee0:	00bfdfc4 	movi	r2,-129
 8008ee4:	6084703a 	and	r2,r12,r2
 8008ee8:	d8800415 	stw	r2,16(sp)
 8008eec:	d8800e17 	ldw	r2,56(sp)
 8008ef0:	050000c4 	movi	r20,3
 8008ef4:	054000c4 	movi	r21,3
 8008ef8:	d8800615 	stw	r2,24(sp)
 8008efc:	0011883a 	mov	r8,zero
 8008f00:	d8000715 	stw	zero,28(sp)
 8008f04:	0000f606 	br	80092e0 <___vfprintf_internal_r+0xa78>
 8008f08:	d9000617 	ldw	r4,24(sp)
 8008f0c:	6080040c 	andi	r2,r12,16
 8008f10:	20c00104 	addi	r3,r4,4
 8008f14:	1003891e 	bne	r2,zero,8009d3c <___vfprintf_internal_r+0x14d4>
 8008f18:	6080100c 	andi	r2,r12,64
 8008f1c:	10056b26 	beq	r2,zero,800a4cc <___vfprintf_internal_r+0x1c64>
 8008f20:	d8800617 	ldw	r2,24(sp)
 8008f24:	002b883a 	mov	r21,zero
 8008f28:	d8c00615 	stw	r3,24(sp)
 8008f2c:	1500000b 	ldhu	r20,0(r2)
 8008f30:	0005883a 	mov	r2,zero
 8008f34:	003f8f06 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8008f38:	d9000617 	ldw	r4,24(sp)
 8008f3c:	6080040c 	andi	r2,r12,16
 8008f40:	20c00104 	addi	r3,r4,4
 8008f44:	1003821e 	bne	r2,zero,8009d50 <___vfprintf_internal_r+0x14e8>
 8008f48:	6080100c 	andi	r2,r12,64
 8008f4c:	10056526 	beq	r2,zero,800a4e4 <___vfprintf_internal_r+0x1c7c>
 8008f50:	d8800617 	ldw	r2,24(sp)
 8008f54:	002b883a 	mov	r21,zero
 8008f58:	d8c00615 	stw	r3,24(sp)
 8008f5c:	1500000b 	ldhu	r20,0(r2)
 8008f60:	00800044 	movi	r2,1
 8008f64:	003f8306 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8008f68:	03020074 	movhi	r12,2049
 8008f6c:	89000450 	cmplti	r4,r17,17
 8008f70:	d8801b17 	ldw	r2,108(sp)
 8008f74:	631f6904 	addi	r12,r12,32164
 8008f78:	20001b1e 	bne	r4,zero,8008fe8 <___vfprintf_internal_r+0x780>
 8008f7c:	05400404 	movi	r21,16
 8008f80:	6039883a 	mov	fp,r12
 8008f84:	00000406 	br	8008f98 <___vfprintf_internal_r+0x730>
 8008f88:	8c7ffc04 	addi	r17,r17,-16
 8008f8c:	89000448 	cmpgei	r4,r17,17
 8008f90:	b5800204 	addi	r22,r22,8
 8008f94:	20001326 	beq	r4,zero,8008fe4 <___vfprintf_internal_r+0x77c>
 8008f98:	10800044 	addi	r2,r2,1
 8008f9c:	18c00404 	addi	r3,r3,16
 8008fa0:	b7000015 	stw	fp,0(r22)
 8008fa4:	b5400115 	stw	r21,4(r22)
 8008fa8:	d8c01c15 	stw	r3,112(sp)
 8008fac:	d8801b15 	stw	r2,108(sp)
 8008fb0:	11000208 	cmpgei	r4,r2,8
 8008fb4:	203ff426 	beq	r4,zero,8008f88 <___vfprintf_internal_r+0x720>
 8008fb8:	d9801a04 	addi	r6,sp,104
 8008fbc:	900b883a 	mov	r5,r18
 8008fc0:	9809883a 	mov	r4,r19
 8008fc4:	800fdc00 	call	800fdc0 <__sprint_r>
 8008fc8:	103f361e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8008fcc:	8c7ffc04 	addi	r17,r17,-16
 8008fd0:	89000448 	cmpgei	r4,r17,17
 8008fd4:	d8c01c17 	ldw	r3,112(sp)
 8008fd8:	d8801b17 	ldw	r2,108(sp)
 8008fdc:	dd802704 	addi	r22,sp,156
 8008fe0:	203fed1e 	bne	r4,zero,8008f98 <___vfprintf_internal_r+0x730>
 8008fe4:	e019883a 	mov	r12,fp
 8008fe8:	10800044 	addi	r2,r2,1
 8008fec:	1c47883a 	add	r3,r3,r17
 8008ff0:	d8801b15 	stw	r2,108(sp)
 8008ff4:	b3000015 	stw	r12,0(r22)
 8008ff8:	b4400115 	stw	r17,4(r22)
 8008ffc:	d8c01c15 	stw	r3,112(sp)
 8009000:	10800210 	cmplti	r2,r2,8
 8009004:	103f1b1e 	bne	r2,zero,8008c74 <___vfprintf_internal_r+0x40c>
 8009008:	d9801a04 	addi	r6,sp,104
 800900c:	900b883a 	mov	r5,r18
 8009010:	9809883a 	mov	r4,r19
 8009014:	800fdc00 	call	800fdc0 <__sprint_r>
 8009018:	103f221e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800901c:	d8c01c17 	ldw	r3,112(sp)
 8009020:	003f1406 	br	8008c74 <___vfprintf_internal_r+0x40c>
 8009024:	9809883a 	mov	r4,r19
 8009028:	800cab80 	call	800cab8 <__sinit>
 800902c:	003e2606 	br	80088c8 <___vfprintf_internal_r+0x60>
 8009030:	21003fcc 	andi	r4,r4,255
 8009034:	2005db1e 	bne	r4,zero,800a7a4 <___vfprintf_internal_r+0x1f3c>
 8009038:	6080080c 	andi	r2,r12,32
 800903c:	10007026 	beq	r2,zero,8009200 <___vfprintf_internal_r+0x998>
 8009040:	d8c00617 	ldw	r3,24(sp)
 8009044:	18800117 	ldw	r2,4(r3)
 8009048:	1d000017 	ldw	r20,0(r3)
 800904c:	18c00204 	addi	r3,r3,8
 8009050:	d8c00615 	stw	r3,24(sp)
 8009054:	102b883a 	mov	r21,r2
 8009058:	10007516 	blt	r2,zero,8009230 <___vfprintf_internal_r+0x9c8>
 800905c:	40bfffd8 	cmpnei	r2,r8,-1
 8009060:	10034a26 	beq	r2,zero,8009d8c <___vfprintf_internal_r+0x1524>
 8009064:	047fdfc4 	movi	r17,-129
 8009068:	6446703a 	and	r3,r12,r17
 800906c:	a544b03a 	or	r2,r20,r21
 8009070:	d8c00415 	stw	r3,16(sp)
 8009074:	db401343 	ldbu	r13,77(sp)
 8009078:	1002ee26 	beq	r2,zero,8009c34 <___vfprintf_internal_r+0x13cc>
 800907c:	db000417 	ldw	r12,16(sp)
 8009080:	a803441e 	bne	r21,zero,8009d94 <___vfprintf_internal_r+0x152c>
 8009084:	a08002a8 	cmpgeui	r2,r20,10
 8009088:	1003421e 	bne	r2,zero,8009d94 <___vfprintf_internal_r+0x152c>
 800908c:	a5000c04 	addi	r20,r20,48
 8009090:	dd0026c5 	stb	r20,155(sp)
 8009094:	db000415 	stw	r12,16(sp)
 8009098:	05400044 	movi	r21,1
 800909c:	dc4026c4 	addi	r17,sp,155
 80090a0:	00008b06 	br	80092d0 <___vfprintf_internal_r+0xa68>
 80090a4:	bac00007 	ldb	r11,0(r23)
 80090a8:	63001014 	ori	r12,r12,64
 80090ac:	003e3a06 	br	8008998 <___vfprintf_internal_r+0x130>
 80090b0:	21003fcc 	andi	r4,r4,255
 80090b4:	2005c11e 	bne	r4,zero,800a7bc <___vfprintf_internal_r+0x1f54>
 80090b8:	00820074 	movhi	r2,2049
 80090bc:	109f5d04 	addi	r2,r2,32116
 80090c0:	d8800c15 	stw	r2,48(sp)
 80090c4:	6080080c 	andi	r2,r12,32
 80090c8:	1000d726 	beq	r2,zero,8009428 <___vfprintf_internal_r+0xbc0>
 80090cc:	d8800617 	ldw	r2,24(sp)
 80090d0:	15000017 	ldw	r20,0(r2)
 80090d4:	15400117 	ldw	r21,4(r2)
 80090d8:	10800204 	addi	r2,r2,8
 80090dc:	d8800615 	stw	r2,24(sp)
 80090e0:	6080004c 	andi	r2,r12,1
 80090e4:	10000226 	beq	r2,zero,80090f0 <___vfprintf_internal_r+0x888>
 80090e8:	a544b03a 	or	r2,r20,r21
 80090ec:	1003091e 	bne	r2,zero,8009d14 <___vfprintf_internal_r+0x14ac>
 80090f0:	00800084 	movi	r2,2
 80090f4:	003f1f06 	br	8008d74 <___vfprintf_internal_r+0x50c>
 80090f8:	d8800617 	ldw	r2,24(sp)
 80090fc:	d8001345 	stb	zero,77(sp)
 8009100:	14400017 	ldw	r17,0(r2)
 8009104:	10c00104 	addi	r3,r2,4
 8009108:	88037726 	beq	r17,zero,8009ee8 <___vfprintf_internal_r+0x1680>
 800910c:	40bfffe0 	cmpeqi	r2,r8,-1
 8009110:	1004661e 	bne	r2,zero,800a2ac <___vfprintf_internal_r+0x1a44>
 8009114:	400d883a 	mov	r6,r8
 8009118:	000b883a 	mov	r5,zero
 800911c:	8809883a 	mov	r4,r17
 8009120:	d8c00715 	stw	r3,28(sp)
 8009124:	db000615 	stw	r12,24(sp)
 8009128:	da000415 	stw	r8,16(sp)
 800912c:	800defc0 	call	800defc <memchr>
 8009130:	da000417 	ldw	r8,16(sp)
 8009134:	db000617 	ldw	r12,24(sp)
 8009138:	d8c00717 	ldw	r3,28(sp)
 800913c:	10058926 	beq	r2,zero,800a764 <___vfprintf_internal_r+0x1efc>
 8009140:	146bc83a 	sub	r21,r2,r17
 8009144:	a829883a 	mov	r20,r21
 8009148:	d8c00615 	stw	r3,24(sp)
 800914c:	003e8b06 	br	8008b7c <___vfprintf_internal_r+0x314>
 8009150:	bac00007 	ldb	r11,0(r23)
 8009154:	63000814 	ori	r12,r12,32
 8009158:	003e0f06 	br	8008998 <___vfprintf_internal_r+0x130>
 800915c:	d8c00617 	ldw	r3,24(sp)
 8009160:	00800c04 	movi	r2,48
 8009164:	d8801385 	stb	r2,78(sp)
 8009168:	00801e04 	movi	r2,120
 800916c:	01020074 	movhi	r4,2049
 8009170:	d88013c5 	stb	r2,79(sp)
 8009174:	18800104 	addi	r2,r3,4
 8009178:	d8800615 	stw	r2,24(sp)
 800917c:	209f5d04 	addi	r2,r4,32116
 8009180:	d8800c15 	stw	r2,48(sp)
 8009184:	1d000017 	ldw	r20,0(r3)
 8009188:	002b883a 	mov	r21,zero
 800918c:	63000094 	ori	r12,r12,2
 8009190:	00800084 	movi	r2,2
 8009194:	07001e04 	movi	fp,120
 8009198:	003ef606 	br	8008d74 <___vfprintf_internal_r+0x50c>
 800919c:	21003fcc 	andi	r4,r4,255
 80091a0:	2005881e 	bne	r4,zero,800a7c4 <___vfprintf_internal_r+0x1f5c>
 80091a4:	d9000617 	ldw	r4,24(sp)
 80091a8:	6080080c 	andi	r2,r12,32
 80091ac:	20c00017 	ldw	r3,0(r4)
 80091b0:	21000104 	addi	r4,r4,4
 80091b4:	d9000615 	stw	r4,24(sp)
 80091b8:	1002d11e 	bne	r2,zero,8009d00 <___vfprintf_internal_r+0x1498>
 80091bc:	6080040c 	andi	r2,r12,16
 80091c0:	10036f1e 	bne	r2,zero,8009f80 <___vfprintf_internal_r+0x1718>
 80091c4:	6300100c 	andi	r12,r12,64
 80091c8:	60036d26 	beq	r12,zero,8009f80 <___vfprintf_internal_r+0x1718>
 80091cc:	d8800517 	ldw	r2,20(sp)
 80091d0:	1880000d 	sth	r2,0(r3)
 80091d4:	003dd806 	br	8008938 <___vfprintf_internal_r+0xd0>
 80091d8:	bac00007 	ldb	r11,0(r23)
 80091dc:	58801b18 	cmpnei	r2,r11,108
 80091e0:	10033026 	beq	r2,zero,8009ea4 <___vfprintf_internal_r+0x163c>
 80091e4:	63000414 	ori	r12,r12,16
 80091e8:	003deb06 	br	8008998 <___vfprintf_internal_r+0x130>
 80091ec:	21003fcc 	andi	r4,r4,255
 80091f0:	2005701e 	bne	r4,zero,800a7b4 <___vfprintf_internal_r+0x1f4c>
 80091f4:	63000414 	ori	r12,r12,16
 80091f8:	6080080c 	andi	r2,r12,32
 80091fc:	103f901e 	bne	r2,zero,8009040 <___vfprintf_internal_r+0x7d8>
 8009200:	d9000617 	ldw	r4,24(sp)
 8009204:	6080040c 	andi	r2,r12,16
 8009208:	20c00104 	addi	r3,r4,4
 800920c:	1002d51e 	bne	r2,zero,8009d64 <___vfprintf_internal_r+0x14fc>
 8009210:	6080100c 	andi	r2,r12,64
 8009214:	1004a726 	beq	r2,zero,800a4b4 <___vfprintf_internal_r+0x1c4c>
 8009218:	d8800617 	ldw	r2,24(sp)
 800921c:	d8c00615 	stw	r3,24(sp)
 8009220:	1500000f 	ldh	r20,0(r2)
 8009224:	a02bd7fa 	srai	r21,r20,31
 8009228:	a805883a 	mov	r2,r21
 800922c:	103f8b0e 	bge	r2,zero,800905c <___vfprintf_internal_r+0x7f4>
 8009230:	a004c03a 	cmpne	r2,r20,zero
 8009234:	056bc83a 	sub	r21,zero,r21
 8009238:	a8abc83a 	sub	r21,r21,r2
 800923c:	00800b44 	movi	r2,45
 8009240:	d8801345 	stb	r2,77(sp)
 8009244:	40ffffe0 	cmpeqi	r3,r8,-1
 8009248:	0529c83a 	sub	r20,zero,r20
 800924c:	03400b44 	movi	r13,45
 8009250:	00800044 	movi	r2,1
 8009254:	183ecb26 	beq	r3,zero,8008d84 <___vfprintf_internal_r+0x51c>
 8009258:	10c00060 	cmpeqi	r3,r2,1
 800925c:	183f881e 	bne	r3,zero,8009080 <___vfprintf_internal_r+0x818>
 8009260:	108000a0 	cmpeqi	r2,r2,2
 8009264:	1001311e 	bne	r2,zero,800972c <___vfprintf_internal_r+0xec4>
 8009268:	dc402704 	addi	r17,sp,156
 800926c:	a004d0fa 	srli	r2,r20,3
 8009270:	a806977a 	slli	r3,r21,29
 8009274:	a82ad0fa 	srli	r21,r21,3
 8009278:	a50001cc 	andi	r20,r20,7
 800927c:	a1000c04 	addi	r4,r20,48
 8009280:	18a8b03a 	or	r20,r3,r2
 8009284:	893fffc5 	stb	r4,-1(r17)
 8009288:	a544b03a 	or	r2,r20,r21
 800928c:	880b883a 	mov	r5,r17
 8009290:	8c7fffc4 	addi	r17,r17,-1
 8009294:	103ff51e 	bne	r2,zero,800926c <___vfprintf_internal_r+0xa04>
 8009298:	6080004c 	andi	r2,r12,1
 800929c:	10013026 	beq	r2,zero,8009760 <___vfprintf_internal_r+0xef8>
 80092a0:	21003fcc 	andi	r4,r4,255
 80092a4:	2100201c 	xori	r4,r4,128
 80092a8:	213fe004 	addi	r4,r4,-128
 80092ac:	20800c18 	cmpnei	r2,r4,48
 80092b0:	10012b26 	beq	r2,zero,8009760 <___vfprintf_internal_r+0xef8>
 80092b4:	00800c04 	movi	r2,48
 80092b8:	297fff84 	addi	r5,r5,-2
 80092bc:	88bfffc5 	stb	r2,-1(r17)
 80092c0:	d8802704 	addi	r2,sp,156
 80092c4:	116bc83a 	sub	r21,r2,r5
 80092c8:	db000415 	stw	r12,16(sp)
 80092cc:	2823883a 	mov	r17,r5
 80092d0:	4029883a 	mov	r20,r8
 80092d4:	4540010e 	bge	r8,r21,80092dc <___vfprintf_internal_r+0xa74>
 80092d8:	a829883a 	mov	r20,r21
 80092dc:	d8000715 	stw	zero,28(sp)
 80092e0:	6b403fcc 	andi	r13,r13,255
 80092e4:	6b40201c 	xori	r13,r13,128
 80092e8:	6b7fe004 	addi	r13,r13,-128
 80092ec:	683e2626 	beq	r13,zero,8008b88 <___vfprintf_internal_r+0x320>
 80092f0:	a5000044 	addi	r20,r20,1
 80092f4:	003e2406 	br	8008b88 <___vfprintf_internal_r+0x320>
 80092f8:	bac00007 	ldb	r11,0(r23)
 80092fc:	63002014 	ori	r12,r12,128
 8009300:	003da506 	br	8008998 <___vfprintf_internal_r+0x130>
 8009304:	bf000007 	ldb	fp,0(r23)
 8009308:	b8800044 	addi	r2,r23,1
 800930c:	e0c00aa0 	cmpeqi	r3,fp,42
 8009310:	1805841e 	bne	r3,zero,800a924 <___vfprintf_internal_r+0x20bc>
 8009314:	e0fff404 	addi	r3,fp,-48
 8009318:	198002b0 	cmpltui	r6,r3,10
 800931c:	102f883a 	mov	r23,r2
 8009320:	0011883a 	mov	r8,zero
 8009324:	303d9e26 	beq	r6,zero,80089a0 <___vfprintf_internal_r+0x138>
 8009328:	400490ba 	slli	r2,r8,2
 800932c:	bf000007 	ldb	fp,0(r23)
 8009330:	bdc00044 	addi	r23,r23,1
 8009334:	1211883a 	add	r8,r2,r8
 8009338:	4211883a 	add	r8,r8,r8
 800933c:	40d1883a 	add	r8,r8,r3
 8009340:	e0fff404 	addi	r3,fp,-48
 8009344:	188002b0 	cmpltui	r2,r3,10
 8009348:	103ff71e 	bne	r2,zero,8009328 <___vfprintf_internal_r+0xac0>
 800934c:	003d9406 	br	80089a0 <___vfprintf_internal_r+0x138>
 8009350:	bf000003 	ldbu	fp,0(r23)
 8009354:	e2c03fcc 	andi	r11,fp,255
 8009358:	5ac0201c 	xori	r11,r11,128
 800935c:	63000114 	ori	r12,r12,4
 8009360:	5affe004 	addi	r11,r11,-128
 8009364:	003d8c06 	br	8008998 <___vfprintf_internal_r+0x130>
 8009368:	bac00007 	ldb	r11,0(r23)
 800936c:	01000044 	movi	r4,1
 8009370:	01400ac4 	movi	r5,43
 8009374:	003d8806 	br	8008998 <___vfprintf_internal_r+0x130>
 8009378:	d8800617 	ldw	r2,24(sp)
 800937c:	bf000003 	ldbu	fp,0(r23)
 8009380:	14000017 	ldw	r16,0(r2)
 8009384:	10800104 	addi	r2,r2,4
 8009388:	8002aa16 	blt	r16,zero,8009e34 <___vfprintf_internal_r+0x15cc>
 800938c:	d8800615 	stw	r2,24(sp)
 8009390:	e2c03fcc 	andi	r11,fp,255
 8009394:	5ac0201c 	xori	r11,r11,128
 8009398:	5affe004 	addi	r11,r11,-128
 800939c:	003d7e06 	br	8008998 <___vfprintf_internal_r+0x130>
 80093a0:	bac00007 	ldb	r11,0(r23)
 80093a4:	63000054 	ori	r12,r12,1
 80093a8:	003d7b06 	br	8008998 <___vfprintf_internal_r+0x130>
 80093ac:	28803fcc 	andi	r2,r5,255
 80093b0:	1080201c 	xori	r2,r2,128
 80093b4:	10bfe004 	addi	r2,r2,-128
 80093b8:	bf000003 	ldbu	fp,0(r23)
 80093bc:	103ff41e 	bne	r2,zero,8009390 <___vfprintf_internal_r+0xb28>
 80093c0:	e2c03fcc 	andi	r11,fp,255
 80093c4:	5ac0201c 	xori	r11,r11,128
 80093c8:	01000044 	movi	r4,1
 80093cc:	01400804 	movi	r5,32
 80093d0:	5affe004 	addi	r11,r11,-128
 80093d4:	003d7006 	br	8008998 <___vfprintf_internal_r+0x130>
 80093d8:	bac00007 	ldb	r11,0(r23)
 80093dc:	63000214 	ori	r12,r12,8
 80093e0:	003d6d06 	br	8008998 <___vfprintf_internal_r+0x130>
 80093e4:	d8c00617 	ldw	r3,24(sp)
 80093e8:	d8001345 	stb	zero,77(sp)
 80093ec:	05000044 	movi	r20,1
 80093f0:	18800017 	ldw	r2,0(r3)
 80093f4:	18c00104 	addi	r3,r3,4
 80093f8:	d8c00615 	stw	r3,24(sp)
 80093fc:	d8801d05 	stb	r2,116(sp)
 8009400:	05400044 	movi	r21,1
 8009404:	dc401d04 	addi	r17,sp,116
 8009408:	003ddc06 	br	8008b7c <___vfprintf_internal_r+0x314>
 800940c:	21003fcc 	andi	r4,r4,255
 8009410:	2004e61e 	bne	r4,zero,800a7ac <___vfprintf_internal_r+0x1f44>
 8009414:	00820074 	movhi	r2,2049
 8009418:	109f5804 	addi	r2,r2,32096
 800941c:	d8800c15 	stw	r2,48(sp)
 8009420:	6080080c 	andi	r2,r12,32
 8009424:	103f291e 	bne	r2,zero,80090cc <___vfprintf_internal_r+0x864>
 8009428:	d9000617 	ldw	r4,24(sp)
 800942c:	6080040c 	andi	r2,r12,16
 8009430:	20c00104 	addi	r3,r4,4
 8009434:	10023d1e 	bne	r2,zero,8009d2c <___vfprintf_internal_r+0x14c4>
 8009438:	6080100c 	andi	r2,r12,64
 800943c:	10042f26 	beq	r2,zero,800a4fc <___vfprintf_internal_r+0x1c94>
 8009440:	d8800617 	ldw	r2,24(sp)
 8009444:	002b883a 	mov	r21,zero
 8009448:	d8c00615 	stw	r3,24(sp)
 800944c:	1500000b 	ldhu	r20,0(r2)
 8009450:	003f2306 	br	80090e0 <___vfprintf_internal_r+0x878>
 8009454:	e2c01990 	cmplti	r11,fp,102
 8009458:	5800f61e 	bne	r11,zero,8009834 <___vfprintf_internal_r+0xfcc>
 800945c:	d9000917 	ldw	r4,36(sp)
 8009460:	d9400a17 	ldw	r5,40(sp)
 8009464:	000d883a 	mov	r6,zero
 8009468:	000f883a 	mov	r7,zero
 800946c:	d8c00e15 	stw	r3,56(sp)
 8009470:	800703c0 	call	800703c <__eqdf2>
 8009474:	d8c00e17 	ldw	r3,56(sp)
 8009478:	1001881e 	bne	r2,zero,8009a9c <___vfprintf_internal_r+0x1234>
 800947c:	d8801b17 	ldw	r2,108(sp)
 8009480:	01020074 	movhi	r4,2049
 8009484:	211f6404 	addi	r4,r4,32144
 8009488:	10800044 	addi	r2,r2,1
 800948c:	18c00044 	addi	r3,r3,1
 8009490:	b1000015 	stw	r4,0(r22)
 8009494:	01000044 	movi	r4,1
 8009498:	d8801b15 	stw	r2,108(sp)
 800949c:	b1000115 	stw	r4,4(r22)
 80094a0:	d8c01c15 	stw	r3,112(sp)
 80094a4:	10800208 	cmpgei	r2,r2,8
 80094a8:	10036e1e 	bne	r2,zero,800a264 <___vfprintf_internal_r+0x19fc>
 80094ac:	b5800204 	addi	r22,r22,8
 80094b0:	d8801417 	ldw	r2,80(sp)
 80094b4:	d9000817 	ldw	r4,32(sp)
 80094b8:	11020b0e 	bge	r2,r4,8009ce8 <___vfprintf_internal_r+0x1480>
 80094bc:	d8800d17 	ldw	r2,52(sp)
 80094c0:	d9000b17 	ldw	r4,44(sp)
 80094c4:	b0800015 	stw	r2,0(r22)
 80094c8:	d8801b17 	ldw	r2,108(sp)
 80094cc:	1907883a 	add	r3,r3,r4
 80094d0:	b1000115 	stw	r4,4(r22)
 80094d4:	10800044 	addi	r2,r2,1
 80094d8:	d8801b15 	stw	r2,108(sp)
 80094dc:	d8c01c15 	stw	r3,112(sp)
 80094e0:	10800208 	cmpgei	r2,r2,8
 80094e4:	1002761e 	bne	r2,zero,8009ec0 <___vfprintf_internal_r+0x1658>
 80094e8:	b5800204 	addi	r22,r22,8
 80094ec:	d8800817 	ldw	r2,32(sp)
 80094f0:	157fffc4 	addi	r21,r2,-1
 80094f4:	057dda0e 	bge	zero,r21,8008c60 <___vfprintf_internal_r+0x3f8>
 80094f8:	01c20074 	movhi	r7,2049
 80094fc:	a9000450 	cmplti	r4,r21,17
 8009500:	d8801b17 	ldw	r2,108(sp)
 8009504:	39df6504 	addi	r7,r7,32148
 8009508:	2003521e 	bne	r4,zero,800a254 <___vfprintf_internal_r+0x19ec>
 800950c:	07000404 	movi	fp,16
 8009510:	3823883a 	mov	r17,r7
 8009514:	00000406 	br	8009528 <___vfprintf_internal_r+0xcc0>
 8009518:	b5800204 	addi	r22,r22,8
 800951c:	ad7ffc04 	addi	r21,r21,-16
 8009520:	a9000448 	cmpgei	r4,r21,17
 8009524:	20034a26 	beq	r4,zero,800a250 <___vfprintf_internal_r+0x19e8>
 8009528:	10800044 	addi	r2,r2,1
 800952c:	18c00404 	addi	r3,r3,16
 8009530:	b4400015 	stw	r17,0(r22)
 8009534:	b7000115 	stw	fp,4(r22)
 8009538:	d8c01c15 	stw	r3,112(sp)
 800953c:	d8801b15 	stw	r2,108(sp)
 8009540:	11000208 	cmpgei	r4,r2,8
 8009544:	203ff426 	beq	r4,zero,8009518 <___vfprintf_internal_r+0xcb0>
 8009548:	d9801a04 	addi	r6,sp,104
 800954c:	900b883a 	mov	r5,r18
 8009550:	9809883a 	mov	r4,r19
 8009554:	800fdc00 	call	800fdc0 <__sprint_r>
 8009558:	103dd21e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800955c:	d8c01c17 	ldw	r3,112(sp)
 8009560:	d8801b17 	ldw	r2,108(sp)
 8009564:	dd802704 	addi	r22,sp,156
 8009568:	003fec06 	br	800951c <___vfprintf_internal_r+0xcb4>
 800956c:	8519c83a 	sub	r12,r16,r20
 8009570:	033dac0e 	bge	zero,r12,8008c24 <___vfprintf_internal_r+0x3bc>
 8009574:	01c20074 	movhi	r7,2049
 8009578:	61000450 	cmplti	r4,r12,17
 800957c:	d8801b17 	ldw	r2,108(sp)
 8009580:	39df6504 	addi	r7,r7,32148
 8009584:	2000281e 	bne	r4,zero,8009628 <___vfprintf_internal_r+0xdc0>
 8009588:	dc400e15 	stw	r17,56(sp)
 800958c:	dc000f15 	stw	r16,60(sp)
 8009590:	b009883a 	mov	r4,r22
 8009594:	03400404 	movi	r13,16
 8009598:	a02d883a 	mov	r22,r20
 800959c:	6021883a 	mov	r16,r12
 80095a0:	4029883a 	mov	r20,r8
 80095a4:	3823883a 	mov	r17,r7
 80095a8:	00000406 	br	80095bc <___vfprintf_internal_r+0xd54>
 80095ac:	843ffc04 	addi	r16,r16,-16
 80095b0:	81400448 	cmpgei	r5,r16,17
 80095b4:	21000204 	addi	r4,r4,8
 80095b8:	28001426 	beq	r5,zero,800960c <___vfprintf_internal_r+0xda4>
 80095bc:	10800044 	addi	r2,r2,1
 80095c0:	18c00404 	addi	r3,r3,16
 80095c4:	24400015 	stw	r17,0(r4)
 80095c8:	23400115 	stw	r13,4(r4)
 80095cc:	d8c01c15 	stw	r3,112(sp)
 80095d0:	d8801b15 	stw	r2,108(sp)
 80095d4:	11400208 	cmpgei	r5,r2,8
 80095d8:	283ff426 	beq	r5,zero,80095ac <___vfprintf_internal_r+0xd44>
 80095dc:	d9801a04 	addi	r6,sp,104
 80095e0:	900b883a 	mov	r5,r18
 80095e4:	9809883a 	mov	r4,r19
 80095e8:	800fdc00 	call	800fdc0 <__sprint_r>
 80095ec:	103dad1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 80095f0:	843ffc04 	addi	r16,r16,-16
 80095f4:	81400448 	cmpgei	r5,r16,17
 80095f8:	d8c01c17 	ldw	r3,112(sp)
 80095fc:	d8801b17 	ldw	r2,108(sp)
 8009600:	d9002704 	addi	r4,sp,156
 8009604:	03400404 	movi	r13,16
 8009608:	283fec1e 	bne	r5,zero,80095bc <___vfprintf_internal_r+0xd54>
 800960c:	8019883a 	mov	r12,r16
 8009610:	880f883a 	mov	r7,r17
 8009614:	dc000f17 	ldw	r16,60(sp)
 8009618:	dc400e17 	ldw	r17,56(sp)
 800961c:	a011883a 	mov	r8,r20
 8009620:	b029883a 	mov	r20,r22
 8009624:	202d883a 	mov	r22,r4
 8009628:	10800044 	addi	r2,r2,1
 800962c:	1b07883a 	add	r3,r3,r12
 8009630:	d8801b15 	stw	r2,108(sp)
 8009634:	b1c00015 	stw	r7,0(r22)
 8009638:	b3000115 	stw	r12,4(r22)
 800963c:	d8c01c15 	stw	r3,112(sp)
 8009640:	10800208 	cmpgei	r2,r2,8
 8009644:	10030f1e 	bne	r2,zero,800a284 <___vfprintf_internal_r+0x1a1c>
 8009648:	4551c83a 	sub	r8,r8,r21
 800964c:	b5800204 	addi	r22,r22,8
 8009650:	023d760e 	bge	zero,r8,8008c2c <___vfprintf_internal_r+0x3c4>
 8009654:	01c20074 	movhi	r7,2049
 8009658:	41000450 	cmplti	r4,r8,17
 800965c:	d8801b17 	ldw	r2,108(sp)
 8009660:	39df6504 	addi	r7,r7,32148
 8009664:	2000221e 	bne	r4,zero,80096f0 <___vfprintf_internal_r+0xe88>
 8009668:	dc400e15 	stw	r17,56(sp)
 800966c:	dc000f15 	stw	r16,60(sp)
 8009670:	03000404 	movi	r12,16
 8009674:	4021883a 	mov	r16,r8
 8009678:	3823883a 	mov	r17,r7
 800967c:	00000406 	br	8009690 <___vfprintf_internal_r+0xe28>
 8009680:	843ffc04 	addi	r16,r16,-16
 8009684:	81000448 	cmpgei	r4,r16,17
 8009688:	b5800204 	addi	r22,r22,8
 800968c:	20001426 	beq	r4,zero,80096e0 <___vfprintf_internal_r+0xe78>
 8009690:	10800044 	addi	r2,r2,1
 8009694:	18c00404 	addi	r3,r3,16
 8009698:	b4400015 	stw	r17,0(r22)
 800969c:	b3000115 	stw	r12,4(r22)
 80096a0:	d8c01c15 	stw	r3,112(sp)
 80096a4:	d8801b15 	stw	r2,108(sp)
 80096a8:	11000208 	cmpgei	r4,r2,8
 80096ac:	203ff426 	beq	r4,zero,8009680 <___vfprintf_internal_r+0xe18>
 80096b0:	d9801a04 	addi	r6,sp,104
 80096b4:	900b883a 	mov	r5,r18
 80096b8:	9809883a 	mov	r4,r19
 80096bc:	800fdc00 	call	800fdc0 <__sprint_r>
 80096c0:	103d781e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 80096c4:	843ffc04 	addi	r16,r16,-16
 80096c8:	81000448 	cmpgei	r4,r16,17
 80096cc:	d8c01c17 	ldw	r3,112(sp)
 80096d0:	d8801b17 	ldw	r2,108(sp)
 80096d4:	dd802704 	addi	r22,sp,156
 80096d8:	03000404 	movi	r12,16
 80096dc:	203fec1e 	bne	r4,zero,8009690 <___vfprintf_internal_r+0xe28>
 80096e0:	8011883a 	mov	r8,r16
 80096e4:	880f883a 	mov	r7,r17
 80096e8:	dc000f17 	ldw	r16,60(sp)
 80096ec:	dc400e17 	ldw	r17,56(sp)
 80096f0:	10800044 	addi	r2,r2,1
 80096f4:	1a07883a 	add	r3,r3,r8
 80096f8:	d8801b15 	stw	r2,108(sp)
 80096fc:	b1c00015 	stw	r7,0(r22)
 8009700:	b2000115 	stw	r8,4(r22)
 8009704:	d8c01c15 	stw	r3,112(sp)
 8009708:	10800208 	cmpgei	r2,r2,8
 800970c:	10016e1e 	bne	r2,zero,8009cc8 <___vfprintf_internal_r+0x1460>
 8009710:	b5800204 	addi	r22,r22,8
 8009714:	003d4506 	br	8008c2c <___vfprintf_internal_r+0x3c4>
 8009718:	10c00060 	cmpeqi	r3,r2,1
 800971c:	1803c81e 	bne	r3,zero,800a640 <___vfprintf_internal_r+0x1dd8>
 8009720:	108000a0 	cmpeqi	r2,r2,2
 8009724:	db000417 	ldw	r12,16(sp)
 8009728:	103ecf26 	beq	r2,zero,8009268 <___vfprintf_internal_r+0xa00>
 800972c:	d9000c17 	ldw	r4,48(sp)
 8009730:	dc402704 	addi	r17,sp,156
 8009734:	a08003cc 	andi	r2,r20,15
 8009738:	a806973a 	slli	r3,r21,28
 800973c:	a028d13a 	srli	r20,r20,4
 8009740:	2085883a 	add	r2,r4,r2
 8009744:	10800003 	ldbu	r2,0(r2)
 8009748:	a82ad13a 	srli	r21,r21,4
 800974c:	1d28b03a 	or	r20,r3,r20
 8009750:	88bfffc5 	stb	r2,-1(r17)
 8009754:	a544b03a 	or	r2,r20,r21
 8009758:	8c7fffc4 	addi	r17,r17,-1
 800975c:	103ff51e 	bne	r2,zero,8009734 <___vfprintf_internal_r+0xecc>
 8009760:	d8802704 	addi	r2,sp,156
 8009764:	146bc83a 	sub	r21,r2,r17
 8009768:	db000415 	stw	r12,16(sp)
 800976c:	003ed806 	br	80092d0 <___vfprintf_internal_r+0xa68>
 8009770:	d9801a04 	addi	r6,sp,104
 8009774:	900b883a 	mov	r5,r18
 8009778:	9809883a 	mov	r4,r19
 800977c:	800fdc00 	call	800fdc0 <__sprint_r>
 8009780:	103d4226 	beq	r2,zero,8008c8c <___vfprintf_internal_r+0x424>
 8009784:	003d4706 	br	8008ca4 <___vfprintf_internal_r+0x43c>
 8009788:	d9801a04 	addi	r6,sp,104
 800978c:	900b883a 	mov	r5,r18
 8009790:	9809883a 	mov	r4,r19
 8009794:	800fdc00 	call	800fdc0 <__sprint_r>
 8009798:	103d421e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800979c:	d9401417 	ldw	r5,80(sp)
 80097a0:	d8c01c17 	ldw	r3,112(sp)
 80097a4:	dd802704 	addi	r22,sp,156
 80097a8:	2802c81e 	bne	r5,zero,800a2cc <___vfprintf_internal_r+0x1a64>
 80097ac:	d8800417 	ldw	r2,16(sp)
 80097b0:	d9000817 	ldw	r4,32(sp)
 80097b4:	1080004c 	andi	r2,r2,1
 80097b8:	1104b03a 	or	r2,r2,r4
 80097bc:	103d2826 	beq	r2,zero,8008c60 <___vfprintf_internal_r+0x3f8>
 80097c0:	d8800d17 	ldw	r2,52(sp)
 80097c4:	d9000b17 	ldw	r4,44(sp)
 80097c8:	b0800015 	stw	r2,0(r22)
 80097cc:	d8801b17 	ldw	r2,108(sp)
 80097d0:	20c7883a 	add	r3,r4,r3
 80097d4:	b1000115 	stw	r4,4(r22)
 80097d8:	10800044 	addi	r2,r2,1
 80097dc:	d8c01c15 	stw	r3,112(sp)
 80097e0:	d8801b15 	stw	r2,108(sp)
 80097e4:	11000208 	cmpgei	r4,r2,8
 80097e8:	2003821e 	bne	r4,zero,800a5f4 <___vfprintf_internal_r+0x1d8c>
 80097ec:	b5800204 	addi	r22,r22,8
 80097f0:	d9000817 	ldw	r4,32(sp)
 80097f4:	10800044 	addi	r2,r2,1
 80097f8:	d8801b15 	stw	r2,108(sp)
 80097fc:	20c7883a 	add	r3,r4,r3
 8009800:	b4400015 	stw	r17,0(r22)
 8009804:	b1000115 	stw	r4,4(r22)
 8009808:	d8c01c15 	stw	r3,112(sp)
 800980c:	10800208 	cmpgei	r2,r2,8
 8009810:	103d1226 	beq	r2,zero,8008c5c <___vfprintf_internal_r+0x3f4>
 8009814:	d9801a04 	addi	r6,sp,104
 8009818:	900b883a 	mov	r5,r18
 800981c:	9809883a 	mov	r4,r19
 8009820:	800fdc00 	call	800fdc0 <__sprint_r>
 8009824:	103d1f1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009828:	d8c01c17 	ldw	r3,112(sp)
 800982c:	dd802704 	addi	r22,sp,156
 8009830:	003d0b06 	br	8008c60 <___vfprintf_internal_r+0x3f8>
 8009834:	d8800817 	ldw	r2,32(sp)
 8009838:	da001b17 	ldw	r8,108(sp)
 800983c:	18c00044 	addi	r3,r3,1
 8009840:	10800088 	cmpgei	r2,r2,2
 8009844:	45400044 	addi	r21,r8,1
 8009848:	b7000204 	addi	fp,r22,8
 800984c:	1000ec26 	beq	r2,zero,8009c00 <___vfprintf_internal_r+0x1398>
 8009850:	00800044 	movi	r2,1
 8009854:	b0800115 	stw	r2,4(r22)
 8009858:	b4400015 	stw	r17,0(r22)
 800985c:	d8c01c15 	stw	r3,112(sp)
 8009860:	dd401b15 	stw	r21,108(sp)
 8009864:	a8800210 	cmplti	r2,r21,8
 8009868:	1001d126 	beq	r2,zero,8009fb0 <___vfprintf_internal_r+0x1748>
 800986c:	d8800b17 	ldw	r2,44(sp)
 8009870:	d9000d17 	ldw	r4,52(sp)
 8009874:	ad400044 	addi	r21,r21,1
 8009878:	1887883a 	add	r3,r3,r2
 800987c:	e0800115 	stw	r2,4(fp)
 8009880:	e1000015 	stw	r4,0(fp)
 8009884:	d8c01c15 	stw	r3,112(sp)
 8009888:	dd401b15 	stw	r21,108(sp)
 800988c:	a8800208 	cmpgei	r2,r21,8
 8009890:	1001be1e 	bne	r2,zero,8009f8c <___vfprintf_internal_r+0x1724>
 8009894:	e7000204 	addi	fp,fp,8
 8009898:	d9000917 	ldw	r4,36(sp)
 800989c:	d9400a17 	ldw	r5,40(sp)
 80098a0:	aa000044 	addi	r8,r21,1
 80098a4:	000d883a 	mov	r6,zero
 80098a8:	000f883a 	mov	r7,zero
 80098ac:	d8c00e15 	stw	r3,56(sp)
 80098b0:	da000715 	stw	r8,28(sp)
 80098b4:	800703c0 	call	800703c <__eqdf2>
 80098b8:	d8c00817 	ldw	r3,32(sp)
 80098bc:	da000717 	ldw	r8,28(sp)
 80098c0:	e5800204 	addi	r22,fp,8
 80098c4:	1affffc4 	addi	r11,r3,-1
 80098c8:	d8c00e17 	ldw	r3,56(sp)
 80098cc:	1000de26 	beq	r2,zero,8009c48 <___vfprintf_internal_r+0x13e0>
 80098d0:	8a400044 	addi	r9,r17,1
 80098d4:	1ac7883a 	add	r3,r3,r11
 80098d8:	da001b15 	stw	r8,108(sp)
 80098dc:	e2400015 	stw	r9,0(fp)
 80098e0:	e2c00115 	stw	r11,4(fp)
 80098e4:	d8c01c15 	stw	r3,112(sp)
 80098e8:	42000208 	cmpgei	r8,r8,8
 80098ec:	4001621e 	bne	r8,zero,8009e78 <___vfprintf_internal_r+0x1610>
 80098f0:	e0800404 	addi	r2,fp,16
 80098f4:	aa000084 	addi	r8,r21,2
 80098f8:	b039883a 	mov	fp,r22
 80098fc:	102d883a 	mov	r22,r2
 8009900:	d9001017 	ldw	r4,64(sp)
 8009904:	d8801644 	addi	r2,sp,89
 8009908:	da001b15 	stw	r8,108(sp)
 800990c:	20c7883a 	add	r3,r4,r3
 8009910:	e0800015 	stw	r2,0(fp)
 8009914:	e1000115 	stw	r4,4(fp)
 8009918:	d8c01c15 	stw	r3,112(sp)
 800991c:	42000210 	cmplti	r8,r8,8
 8009920:	403ccf1e 	bne	r8,zero,8008c60 <___vfprintf_internal_r+0x3f8>
 8009924:	003fbb06 	br	8009814 <___vfprintf_internal_r+0xfac>
 8009928:	db000417 	ldw	r12,16(sp)
 800992c:	003e4a06 	br	8009258 <___vfprintf_internal_r+0x9f0>
 8009930:	03020074 	movhi	r12,2049
 8009934:	39000450 	cmplti	r4,r7,17
 8009938:	d8801b17 	ldw	r2,108(sp)
 800993c:	631f6904 	addi	r12,r12,32164
 8009940:	2000321e 	bne	r4,zero,8009a0c <___vfprintf_internal_r+0x11a4>
 8009944:	dc401115 	stw	r17,68(sp)
 8009948:	b009883a 	mov	r4,r22
 800994c:	9023883a 	mov	r17,r18
 8009950:	a82d883a 	mov	r22,r21
 8009954:	ddc01215 	stw	r23,72(sp)
 8009958:	03c00404 	movi	r15,16
 800995c:	a02f883a 	mov	r23,r20
 8009960:	db800e15 	stw	r14,56(sp)
 8009964:	8029883a 	mov	r20,r16
 8009968:	db400f15 	stw	r13,60(sp)
 800996c:	402b883a 	mov	r21,r8
 8009970:	3821883a 	mov	r16,r7
 8009974:	6025883a 	mov	r18,r12
 8009978:	00000406 	br	800998c <___vfprintf_internal_r+0x1124>
 800997c:	843ffc04 	addi	r16,r16,-16
 8009980:	81800448 	cmpgei	r6,r16,17
 8009984:	21000204 	addi	r4,r4,8
 8009988:	30001426 	beq	r6,zero,80099dc <___vfprintf_internal_r+0x1174>
 800998c:	10800044 	addi	r2,r2,1
 8009990:	18c00404 	addi	r3,r3,16
 8009994:	24800015 	stw	r18,0(r4)
 8009998:	23c00115 	stw	r15,4(r4)
 800999c:	d8c01c15 	stw	r3,112(sp)
 80099a0:	d8801b15 	stw	r2,108(sp)
 80099a4:	11800208 	cmpgei	r6,r2,8
 80099a8:	303ff426 	beq	r6,zero,800997c <___vfprintf_internal_r+0x1114>
 80099ac:	d9801a04 	addi	r6,sp,104
 80099b0:	880b883a 	mov	r5,r17
 80099b4:	9809883a 	mov	r4,r19
 80099b8:	800fdc00 	call	800fdc0 <__sprint_r>
 80099bc:	1001a11e 	bne	r2,zero,800a044 <___vfprintf_internal_r+0x17dc>
 80099c0:	843ffc04 	addi	r16,r16,-16
 80099c4:	81800448 	cmpgei	r6,r16,17
 80099c8:	d8c01c17 	ldw	r3,112(sp)
 80099cc:	d8801b17 	ldw	r2,108(sp)
 80099d0:	d9002704 	addi	r4,sp,156
 80099d4:	03c00404 	movi	r15,16
 80099d8:	303fec1e 	bne	r6,zero,800998c <___vfprintf_internal_r+0x1124>
 80099dc:	800f883a 	mov	r7,r16
 80099e0:	9019883a 	mov	r12,r18
 80099e4:	a021883a 	mov	r16,r20
 80099e8:	8825883a 	mov	r18,r17
 80099ec:	b829883a 	mov	r20,r23
 80099f0:	db800e17 	ldw	r14,56(sp)
 80099f4:	db400f17 	ldw	r13,60(sp)
 80099f8:	ddc01217 	ldw	r23,72(sp)
 80099fc:	dc401117 	ldw	r17,68(sp)
 8009a00:	a811883a 	mov	r8,r21
 8009a04:	b02b883a 	mov	r21,r22
 8009a08:	202d883a 	mov	r22,r4
 8009a0c:	10800044 	addi	r2,r2,1
 8009a10:	19c7883a 	add	r3,r3,r7
 8009a14:	d8801b15 	stw	r2,108(sp)
 8009a18:	b3000015 	stw	r12,0(r22)
 8009a1c:	b1c00115 	stw	r7,4(r22)
 8009a20:	d8c01c15 	stw	r3,112(sp)
 8009a24:	10800208 	cmpgei	r2,r2,8
 8009a28:	1001781e 	bne	r2,zero,800a00c <___vfprintf_internal_r+0x17a4>
 8009a2c:	b5800204 	addi	r22,r22,8
 8009a30:	003c5f06 	br	8008bb0 <___vfprintf_internal_r+0x348>
 8009a34:	d9801a04 	addi	r6,sp,104
 8009a38:	900b883a 	mov	r5,r18
 8009a3c:	9809883a 	mov	r4,r19
 8009a40:	da000f15 	stw	r8,60(sp)
 8009a44:	db400e15 	stw	r13,56(sp)
 8009a48:	800fdc00 	call	800fdc0 <__sprint_r>
 8009a4c:	103c951e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009a50:	d8c01c17 	ldw	r3,112(sp)
 8009a54:	da000f17 	ldw	r8,60(sp)
 8009a58:	db400e17 	ldw	r13,56(sp)
 8009a5c:	dd802704 	addi	r22,sp,156
 8009a60:	003c6e06 	br	8008c1c <___vfprintf_internal_r+0x3b4>
 8009a64:	d9801a04 	addi	r6,sp,104
 8009a68:	900b883a 	mov	r5,r18
 8009a6c:	9809883a 	mov	r4,r19
 8009a70:	da001115 	stw	r8,68(sp)
 8009a74:	db400f15 	stw	r13,60(sp)
 8009a78:	db800e15 	stw	r14,56(sp)
 8009a7c:	800fdc00 	call	800fdc0 <__sprint_r>
 8009a80:	103c881e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009a84:	d8c01c17 	ldw	r3,112(sp)
 8009a88:	da001117 	ldw	r8,68(sp)
 8009a8c:	db400f17 	ldw	r13,60(sp)
 8009a90:	db800e17 	ldw	r14,56(sp)
 8009a94:	dd802704 	addi	r22,sp,156
 8009a98:	003c5306 	br	8008be8 <___vfprintf_internal_r+0x380>
 8009a9c:	d9401417 	ldw	r5,80(sp)
 8009aa0:	01414c0e 	bge	zero,r5,8009fd4 <___vfprintf_internal_r+0x176c>
 8009aa4:	d8800717 	ldw	r2,28(sp)
 8009aa8:	d9000817 	ldw	r4,32(sp)
 8009aac:	102b883a 	mov	r21,r2
 8009ab0:	2080e316 	blt	r4,r2,8009e40 <___vfprintf_internal_r+0x15d8>
 8009ab4:	05400a0e 	bge	zero,r21,8009ae0 <___vfprintf_internal_r+0x1278>
 8009ab8:	d8801b17 	ldw	r2,108(sp)
 8009abc:	1d47883a 	add	r3,r3,r21
 8009ac0:	b4400015 	stw	r17,0(r22)
 8009ac4:	10800044 	addi	r2,r2,1
 8009ac8:	d8801b15 	stw	r2,108(sp)
 8009acc:	b5400115 	stw	r21,4(r22)
 8009ad0:	d8c01c15 	stw	r3,112(sp)
 8009ad4:	10800208 	cmpgei	r2,r2,8
 8009ad8:	10030c1e 	bne	r2,zero,800a70c <___vfprintf_internal_r+0x1ea4>
 8009adc:	b5800204 	addi	r22,r22,8
 8009ae0:	a800ff16 	blt	r21,zero,8009ee0 <___vfprintf_internal_r+0x1678>
 8009ae4:	d8800717 	ldw	r2,28(sp)
 8009ae8:	156bc83a 	sub	r21,r2,r21
 8009aec:	05410616 	blt	zero,r21,8009f08 <___vfprintf_internal_r+0x16a0>
 8009af0:	dd401417 	ldw	r21,80(sp)
 8009af4:	d8800817 	ldw	r2,32(sp)
 8009af8:	a880d40e 	bge	r21,r2,8009e4c <___vfprintf_internal_r+0x15e4>
 8009afc:	d8800d17 	ldw	r2,52(sp)
 8009b00:	d9000b17 	ldw	r4,44(sp)
 8009b04:	b0800015 	stw	r2,0(r22)
 8009b08:	d8801b17 	ldw	r2,108(sp)
 8009b0c:	1907883a 	add	r3,r3,r4
 8009b10:	b1000115 	stw	r4,4(r22)
 8009b14:	10800044 	addi	r2,r2,1
 8009b18:	d8801b15 	stw	r2,108(sp)
 8009b1c:	d8c01c15 	stw	r3,112(sp)
 8009b20:	10800208 	cmpgei	r2,r2,8
 8009b24:	10028e1e 	bne	r2,zero,800a560 <___vfprintf_internal_r+0x1cf8>
 8009b28:	b5800204 	addi	r22,r22,8
 8009b2c:	d9000817 	ldw	r4,32(sp)
 8009b30:	d9400717 	ldw	r5,28(sp)
 8009b34:	2545c83a 	sub	r2,r4,r21
 8009b38:	2149c83a 	sub	r4,r4,r5
 8009b3c:	102b883a 	mov	r21,r2
 8009b40:	2080010e 	bge	r4,r2,8009b48 <___vfprintf_internal_r+0x12e0>
 8009b44:	202b883a 	mov	r21,r4
 8009b48:	05400c0e 	bge	zero,r21,8009b7c <___vfprintf_internal_r+0x1314>
 8009b4c:	d9000717 	ldw	r4,28(sp)
 8009b50:	1d47883a 	add	r3,r3,r21
 8009b54:	b5400115 	stw	r21,4(r22)
 8009b58:	8913883a 	add	r9,r17,r4
 8009b5c:	d9001b17 	ldw	r4,108(sp)
 8009b60:	b2400015 	stw	r9,0(r22)
 8009b64:	d8c01c15 	stw	r3,112(sp)
 8009b68:	21000044 	addi	r4,r4,1
 8009b6c:	d9001b15 	stw	r4,108(sp)
 8009b70:	21000208 	cmpgei	r4,r4,8
 8009b74:	2002f01e 	bne	r4,zero,800a738 <___vfprintf_internal_r+0x1ed0>
 8009b78:	b5800204 	addi	r22,r22,8
 8009b7c:	a800010e 	bge	r21,zero,8009b84 <___vfprintf_internal_r+0x131c>
 8009b80:	002b883a 	mov	r21,zero
 8009b84:	156bc83a 	sub	r21,r2,r21
 8009b88:	057c350e 	bge	zero,r21,8008c60 <___vfprintf_internal_r+0x3f8>
 8009b8c:	01c20074 	movhi	r7,2049
 8009b90:	a9000450 	cmplti	r4,r21,17
 8009b94:	d8801b17 	ldw	r2,108(sp)
 8009b98:	39df6504 	addi	r7,r7,32148
 8009b9c:	2001ad1e 	bne	r4,zero,800a254 <___vfprintf_internal_r+0x19ec>
 8009ba0:	07000404 	movi	fp,16
 8009ba4:	3823883a 	mov	r17,r7
 8009ba8:	00000406 	br	8009bbc <___vfprintf_internal_r+0x1354>
 8009bac:	b5800204 	addi	r22,r22,8
 8009bb0:	ad7ffc04 	addi	r21,r21,-16
 8009bb4:	a9000448 	cmpgei	r4,r21,17
 8009bb8:	2001a526 	beq	r4,zero,800a250 <___vfprintf_internal_r+0x19e8>
 8009bbc:	10800044 	addi	r2,r2,1
 8009bc0:	18c00404 	addi	r3,r3,16
 8009bc4:	b4400015 	stw	r17,0(r22)
 8009bc8:	b7000115 	stw	fp,4(r22)
 8009bcc:	d8c01c15 	stw	r3,112(sp)
 8009bd0:	d8801b15 	stw	r2,108(sp)
 8009bd4:	11000208 	cmpgei	r4,r2,8
 8009bd8:	203ff426 	beq	r4,zero,8009bac <___vfprintf_internal_r+0x1344>
 8009bdc:	d9801a04 	addi	r6,sp,104
 8009be0:	900b883a 	mov	r5,r18
 8009be4:	9809883a 	mov	r4,r19
 8009be8:	800fdc00 	call	800fdc0 <__sprint_r>
 8009bec:	103c2d1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009bf0:	d8c01c17 	ldw	r3,112(sp)
 8009bf4:	d8801b17 	ldw	r2,108(sp)
 8009bf8:	dd802704 	addi	r22,sp,156
 8009bfc:	003fec06 	br	8009bb0 <___vfprintf_internal_r+0x1348>
 8009c00:	d8800417 	ldw	r2,16(sp)
 8009c04:	1080004c 	andi	r2,r2,1
 8009c08:	103f111e 	bne	r2,zero,8009850 <___vfprintf_internal_r+0xfe8>
 8009c0c:	00800044 	movi	r2,1
 8009c10:	dd401b15 	stw	r21,108(sp)
 8009c14:	b4400015 	stw	r17,0(r22)
 8009c18:	b0800115 	stw	r2,4(r22)
 8009c1c:	d8c01c15 	stw	r3,112(sp)
 8009c20:	ad400208 	cmpgei	r21,r21,8
 8009c24:	a800941e 	bne	r21,zero,8009e78 <___vfprintf_internal_r+0x1610>
 8009c28:	42000084 	addi	r8,r8,2
 8009c2c:	b5800404 	addi	r22,r22,16
 8009c30:	003f3306 	br	8009900 <___vfprintf_internal_r+0x1098>
 8009c34:	4002821e 	bne	r8,zero,800a640 <___vfprintf_internal_r+0x1dd8>
 8009c38:	0011883a 	mov	r8,zero
 8009c3c:	002b883a 	mov	r21,zero
 8009c40:	dc402704 	addi	r17,sp,156
 8009c44:	003da206 	br	80092d0 <___vfprintf_internal_r+0xa68>
 8009c48:	02ff2d0e 	bge	zero,r11,8009900 <___vfprintf_internal_r+0x1098>
 8009c4c:	58800450 	cmplti	r2,r11,17
 8009c50:	01c20074 	movhi	r7,2049
 8009c54:	1003261e 	bne	r2,zero,800a8f0 <___vfprintf_internal_r+0x2088>
 8009c58:	39df6504 	addi	r7,r7,32148
 8009c5c:	dc000715 	stw	r16,28(sp)
 8009c60:	05800404 	movi	r22,16
 8009c64:	5823883a 	mov	r17,r11
 8009c68:	402b883a 	mov	r21,r8
 8009c6c:	3821883a 	mov	r16,r7
 8009c70:	00000506 	br	8009c88 <___vfprintf_internal_r+0x1420>
 8009c74:	e7000204 	addi	fp,fp,8
 8009c78:	8c7ffc04 	addi	r17,r17,-16
 8009c7c:	88800448 	cmpgei	r2,r17,17
 8009c80:	1001be26 	beq	r2,zero,800a37c <___vfprintf_internal_r+0x1b14>
 8009c84:	ad400044 	addi	r21,r21,1
 8009c88:	18c00404 	addi	r3,r3,16
 8009c8c:	e4000015 	stw	r16,0(fp)
 8009c90:	e5800115 	stw	r22,4(fp)
 8009c94:	d8c01c15 	stw	r3,112(sp)
 8009c98:	dd401b15 	stw	r21,108(sp)
 8009c9c:	a8800208 	cmpgei	r2,r21,8
 8009ca0:	103ff426 	beq	r2,zero,8009c74 <___vfprintf_internal_r+0x140c>
 8009ca4:	d9801a04 	addi	r6,sp,104
 8009ca8:	900b883a 	mov	r5,r18
 8009cac:	9809883a 	mov	r4,r19
 8009cb0:	800fdc00 	call	800fdc0 <__sprint_r>
 8009cb4:	103bfb1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009cb8:	dd401b17 	ldw	r21,108(sp)
 8009cbc:	d8c01c17 	ldw	r3,112(sp)
 8009cc0:	df002704 	addi	fp,sp,156
 8009cc4:	003fec06 	br	8009c78 <___vfprintf_internal_r+0x1410>
 8009cc8:	d9801a04 	addi	r6,sp,104
 8009ccc:	900b883a 	mov	r5,r18
 8009cd0:	9809883a 	mov	r4,r19
 8009cd4:	800fdc00 	call	800fdc0 <__sprint_r>
 8009cd8:	103bf21e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009cdc:	d8c01c17 	ldw	r3,112(sp)
 8009ce0:	dd802704 	addi	r22,sp,156
 8009ce4:	003bd106 	br	8008c2c <___vfprintf_internal_r+0x3c4>
 8009ce8:	d8800417 	ldw	r2,16(sp)
 8009cec:	1080004c 	andi	r2,r2,1
 8009cf0:	103bdb26 	beq	r2,zero,8008c60 <___vfprintf_internal_r+0x3f8>
 8009cf4:	003df106 	br	80094bc <___vfprintf_internal_r+0xc54>
 8009cf8:	dc402704 	addi	r17,sp,156
 8009cfc:	003d7406 	br	80092d0 <___vfprintf_internal_r+0xa68>
 8009d00:	d9000517 	ldw	r4,20(sp)
 8009d04:	2005d7fa 	srai	r2,r4,31
 8009d08:	19000015 	stw	r4,0(r3)
 8009d0c:	18800115 	stw	r2,4(r3)
 8009d10:	003b0906 	br	8008938 <___vfprintf_internal_r+0xd0>
 8009d14:	00800c04 	movi	r2,48
 8009d18:	d8801385 	stb	r2,78(sp)
 8009d1c:	df0013c5 	stb	fp,79(sp)
 8009d20:	63000094 	ori	r12,r12,2
 8009d24:	00800084 	movi	r2,2
 8009d28:	003c1206 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8009d2c:	25000017 	ldw	r20,0(r4)
 8009d30:	002b883a 	mov	r21,zero
 8009d34:	d8c00615 	stw	r3,24(sp)
 8009d38:	003ce906 	br	80090e0 <___vfprintf_internal_r+0x878>
 8009d3c:	25000017 	ldw	r20,0(r4)
 8009d40:	002b883a 	mov	r21,zero
 8009d44:	d8c00615 	stw	r3,24(sp)
 8009d48:	0005883a 	mov	r2,zero
 8009d4c:	003c0906 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8009d50:	25000017 	ldw	r20,0(r4)
 8009d54:	002b883a 	mov	r21,zero
 8009d58:	d8c00615 	stw	r3,24(sp)
 8009d5c:	00800044 	movi	r2,1
 8009d60:	003c0406 	br	8008d74 <___vfprintf_internal_r+0x50c>
 8009d64:	25000017 	ldw	r20,0(r4)
 8009d68:	d8c00615 	stw	r3,24(sp)
 8009d6c:	a02bd7fa 	srai	r21,r20,31
 8009d70:	a805883a 	mov	r2,r21
 8009d74:	003cb806 	br	8009058 <___vfprintf_internal_r+0x7f0>
 8009d78:	18800017 	ldw	r2,0(r3)
 8009d7c:	d8800915 	stw	r2,36(sp)
 8009d80:	18800117 	ldw	r2,4(r3)
 8009d84:	d8800a15 	stw	r2,40(sp)
 8009d88:	003c3006 	br	8008e4c <___vfprintf_internal_r+0x5e4>
 8009d8c:	db401343 	ldbu	r13,77(sp)
 8009d90:	a83cbc26 	beq	r21,zero,8009084 <___vfprintf_internal_r+0x81c>
 8009d94:	dc402704 	addi	r17,sp,156
 8009d98:	a805883a 	mov	r2,r21
 8009d9c:	dc000715 	stw	r16,28(sp)
 8009da0:	902b883a 	mov	r21,r18
 8009da4:	8821883a 	mov	r16,r17
 8009da8:	db000415 	stw	r12,16(sp)
 8009dac:	a023883a 	mov	r17,r20
 8009db0:	da000e15 	stw	r8,56(sp)
 8009db4:	9829883a 	mov	r20,r19
 8009db8:	1025883a 	mov	r18,r2
 8009dbc:	6827883a 	mov	r19,r13
 8009dc0:	8809883a 	mov	r4,r17
 8009dc4:	900b883a 	mov	r5,r18
 8009dc8:	01800284 	movi	r6,10
 8009dcc:	000f883a 	mov	r7,zero
 8009dd0:	80126200 	call	8012620 <__umoddi3>
 8009dd4:	10800c04 	addi	r2,r2,48
 8009dd8:	8809883a 	mov	r4,r17
 8009ddc:	900b883a 	mov	r5,r18
 8009de0:	01800284 	movi	r6,10
 8009de4:	000f883a 	mov	r7,zero
 8009de8:	80bfffc5 	stb	r2,-1(r16)
 8009dec:	80120040 	call	8012004 <__udivdi3>
 8009df0:	900d883a 	mov	r6,r18
 8009df4:	880f883a 	mov	r7,r17
 8009df8:	843fffc4 	addi	r16,r16,-1
 8009dfc:	1023883a 	mov	r17,r2
 8009e00:	1825883a 	mov	r18,r3
 8009e04:	303fee1e 	bne	r6,zero,8009dc0 <___vfprintf_internal_r+0x1558>
 8009e08:	39c002a8 	cmpgeui	r7,r7,10
 8009e0c:	383fec1e 	bne	r7,zero,8009dc0 <___vfprintf_internal_r+0x1558>
 8009e10:	8023883a 	mov	r17,r16
 8009e14:	d8802704 	addi	r2,sp,156
 8009e18:	981b883a 	mov	r13,r19
 8009e1c:	a825883a 	mov	r18,r21
 8009e20:	dc000717 	ldw	r16,28(sp)
 8009e24:	da000e17 	ldw	r8,56(sp)
 8009e28:	a027883a 	mov	r19,r20
 8009e2c:	146bc83a 	sub	r21,r2,r17
 8009e30:	003d2706 	br	80092d0 <___vfprintf_internal_r+0xa68>
 8009e34:	0421c83a 	sub	r16,zero,r16
 8009e38:	d8800615 	stw	r2,24(sp)
 8009e3c:	003d4506 	br	8009354 <___vfprintf_internal_r+0xaec>
 8009e40:	202b883a 	mov	r21,r4
 8009e44:	057f1c16 	blt	zero,r21,8009ab8 <___vfprintf_internal_r+0x1250>
 8009e48:	003f2506 	br	8009ae0 <___vfprintf_internal_r+0x1278>
 8009e4c:	d8800417 	ldw	r2,16(sp)
 8009e50:	1080004c 	andi	r2,r2,1
 8009e54:	103f291e 	bne	r2,zero,8009afc <___vfprintf_internal_r+0x1294>
 8009e58:	d9000817 	ldw	r4,32(sp)
 8009e5c:	d9400717 	ldw	r5,28(sp)
 8009e60:	2545c83a 	sub	r2,r4,r21
 8009e64:	2179c83a 	sub	fp,r4,r5
 8009e68:	102b883a 	mov	r21,r2
 8009e6c:	e0bf430e 	bge	fp,r2,8009b7c <___vfprintf_internal_r+0x1314>
 8009e70:	e02b883a 	mov	r21,fp
 8009e74:	003f4106 	br	8009b7c <___vfprintf_internal_r+0x1314>
 8009e78:	d9801a04 	addi	r6,sp,104
 8009e7c:	900b883a 	mov	r5,r18
 8009e80:	9809883a 	mov	r4,r19
 8009e84:	800fdc00 	call	800fdc0 <__sprint_r>
 8009e88:	103b861e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009e8c:	da001b17 	ldw	r8,108(sp)
 8009e90:	d8c01c17 	ldw	r3,112(sp)
 8009e94:	dd802904 	addi	r22,sp,164
 8009e98:	42000044 	addi	r8,r8,1
 8009e9c:	df002704 	addi	fp,sp,156
 8009ea0:	003e9706 	br	8009900 <___vfprintf_internal_r+0x1098>
 8009ea4:	bf000043 	ldbu	fp,1(r23)
 8009ea8:	63000814 	ori	r12,r12,32
 8009eac:	bdc00044 	addi	r23,r23,1
 8009eb0:	e2c03fcc 	andi	r11,fp,255
 8009eb4:	5ac0201c 	xori	r11,r11,128
 8009eb8:	5affe004 	addi	r11,r11,-128
 8009ebc:	003ab606 	br	8008998 <___vfprintf_internal_r+0x130>
 8009ec0:	d9801a04 	addi	r6,sp,104
 8009ec4:	900b883a 	mov	r5,r18
 8009ec8:	9809883a 	mov	r4,r19
 8009ecc:	800fdc00 	call	800fdc0 <__sprint_r>
 8009ed0:	103b741e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009ed4:	d8c01c17 	ldw	r3,112(sp)
 8009ed8:	dd802704 	addi	r22,sp,156
 8009edc:	003d8306 	br	80094ec <___vfprintf_internal_r+0xc84>
 8009ee0:	002b883a 	mov	r21,zero
 8009ee4:	003eff06 	br	8009ae4 <___vfprintf_internal_r+0x127c>
 8009ee8:	408001f0 	cmpltui	r2,r8,7
 8009eec:	402b883a 	mov	r21,r8
 8009ef0:	1001a426 	beq	r2,zero,800a584 <___vfprintf_internal_r+0x1d1c>
 8009ef4:	04420074 	movhi	r17,2049
 8009ef8:	a829883a 	mov	r20,r21
 8009efc:	d8c00615 	stw	r3,24(sp)
 8009f00:	8c5f6204 	addi	r17,r17,32136
 8009f04:	003b1d06 	br	8008b7c <___vfprintf_internal_r+0x314>
 8009f08:	01c20074 	movhi	r7,2049
 8009f0c:	a9000450 	cmplti	r4,r21,17
 8009f10:	d8801b17 	ldw	r2,108(sp)
 8009f14:	39df6504 	addi	r7,r7,32148
 8009f18:	20017f1e 	bne	r4,zero,800a518 <___vfprintf_internal_r+0x1cb0>
 8009f1c:	dc000e15 	stw	r16,56(sp)
 8009f20:	07000404 	movi	fp,16
 8009f24:	3821883a 	mov	r16,r7
 8009f28:	00000406 	br	8009f3c <___vfprintf_internal_r+0x16d4>
 8009f2c:	b5800204 	addi	r22,r22,8
 8009f30:	ad7ffc04 	addi	r21,r21,-16
 8009f34:	a9000448 	cmpgei	r4,r21,17
 8009f38:	20017526 	beq	r4,zero,800a510 <___vfprintf_internal_r+0x1ca8>
 8009f3c:	10800044 	addi	r2,r2,1
 8009f40:	18c00404 	addi	r3,r3,16
 8009f44:	b4000015 	stw	r16,0(r22)
 8009f48:	b7000115 	stw	fp,4(r22)
 8009f4c:	d8c01c15 	stw	r3,112(sp)
 8009f50:	d8801b15 	stw	r2,108(sp)
 8009f54:	11000208 	cmpgei	r4,r2,8
 8009f58:	203ff426 	beq	r4,zero,8009f2c <___vfprintf_internal_r+0x16c4>
 8009f5c:	d9801a04 	addi	r6,sp,104
 8009f60:	900b883a 	mov	r5,r18
 8009f64:	9809883a 	mov	r4,r19
 8009f68:	800fdc00 	call	800fdc0 <__sprint_r>
 8009f6c:	103b4d1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009f70:	d8c01c17 	ldw	r3,112(sp)
 8009f74:	d8801b17 	ldw	r2,108(sp)
 8009f78:	dd802704 	addi	r22,sp,156
 8009f7c:	003fec06 	br	8009f30 <___vfprintf_internal_r+0x16c8>
 8009f80:	d8800517 	ldw	r2,20(sp)
 8009f84:	18800015 	stw	r2,0(r3)
 8009f88:	003a6b06 	br	8008938 <___vfprintf_internal_r+0xd0>
 8009f8c:	d9801a04 	addi	r6,sp,104
 8009f90:	900b883a 	mov	r5,r18
 8009f94:	9809883a 	mov	r4,r19
 8009f98:	800fdc00 	call	800fdc0 <__sprint_r>
 8009f9c:	103b411e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009fa0:	d8c01c17 	ldw	r3,112(sp)
 8009fa4:	dd401b17 	ldw	r21,108(sp)
 8009fa8:	df002704 	addi	fp,sp,156
 8009fac:	003e3a06 	br	8009898 <___vfprintf_internal_r+0x1030>
 8009fb0:	d9801a04 	addi	r6,sp,104
 8009fb4:	900b883a 	mov	r5,r18
 8009fb8:	9809883a 	mov	r4,r19
 8009fbc:	800fdc00 	call	800fdc0 <__sprint_r>
 8009fc0:	103b381e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 8009fc4:	d8c01c17 	ldw	r3,112(sp)
 8009fc8:	dd401b17 	ldw	r21,108(sp)
 8009fcc:	df002704 	addi	fp,sp,156
 8009fd0:	003e2606 	br	800986c <___vfprintf_internal_r+0x1004>
 8009fd4:	d8801b17 	ldw	r2,108(sp)
 8009fd8:	01020074 	movhi	r4,2049
 8009fdc:	211f6404 	addi	r4,r4,32144
 8009fe0:	10800044 	addi	r2,r2,1
 8009fe4:	18c00044 	addi	r3,r3,1
 8009fe8:	b1000015 	stw	r4,0(r22)
 8009fec:	01000044 	movi	r4,1
 8009ff0:	d8801b15 	stw	r2,108(sp)
 8009ff4:	b1000115 	stw	r4,4(r22)
 8009ff8:	d8c01c15 	stw	r3,112(sp)
 8009ffc:	10800208 	cmpgei	r2,r2,8
 800a000:	103de11e 	bne	r2,zero,8009788 <___vfprintf_internal_r+0xf20>
 800a004:	b5800204 	addi	r22,r22,8
 800a008:	003de706 	br	80097a8 <___vfprintf_internal_r+0xf40>
 800a00c:	d9801a04 	addi	r6,sp,104
 800a010:	900b883a 	mov	r5,r18
 800a014:	9809883a 	mov	r4,r19
 800a018:	da001115 	stw	r8,68(sp)
 800a01c:	db400f15 	stw	r13,60(sp)
 800a020:	db800e15 	stw	r14,56(sp)
 800a024:	800fdc00 	call	800fdc0 <__sprint_r>
 800a028:	103b1e1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a02c:	d8c01c17 	ldw	r3,112(sp)
 800a030:	da001117 	ldw	r8,68(sp)
 800a034:	db400f17 	ldw	r13,60(sp)
 800a038:	db800e17 	ldw	r14,56(sp)
 800a03c:	dd802704 	addi	r22,sp,156
 800a040:	003adb06 	br	8008bb0 <___vfprintf_internal_r+0x348>
 800a044:	8825883a 	mov	r18,r17
 800a048:	003b1606 	br	8008ca4 <___vfprintf_internal_r+0x43c>
 800a04c:	d9000917 	ldw	r4,36(sp)
 800a050:	d9400a17 	ldw	r5,40(sp)
 800a054:	da000615 	stw	r8,24(sp)
 800a058:	200d883a 	mov	r6,r4
 800a05c:	280f883a 	mov	r7,r5
 800a060:	db000415 	stw	r12,16(sp)
 800a064:	80083780 	call	8008378 <__unorddf2>
 800a068:	db000417 	ldw	r12,16(sp)
 800a06c:	da000617 	ldw	r8,24(sp)
 800a070:	1002091e 	bne	r2,zero,800a898 <___vfprintf_internal_r+0x2030>
 800a074:	057ff7c4 	movi	r21,-33
 800a078:	40bfffe0 	cmpeqi	r2,r8,-1
 800a07c:	e56a703a 	and	r21,fp,r21
 800a080:	1001ab1e 	bne	r2,zero,800a730 <___vfprintf_internal_r+0x1ec8>
 800a084:	a88011d8 	cmpnei	r2,r21,71
 800a088:	10015726 	beq	r2,zero,800a5e8 <___vfprintf_internal_r+0x1d80>
 800a08c:	60804014 	ori	r2,r12,256
 800a090:	d8800415 	stw	r2,16(sp)
 800a094:	d8800a17 	ldw	r2,40(sp)
 800a098:	10012d16 	blt	r2,zero,800a550 <___vfprintf_internal_r+0x1ce8>
 800a09c:	dd000a17 	ldw	r20,40(sp)
 800a0a0:	d8000605 	stb	zero,24(sp)
 800a0a4:	e08019a0 	cmpeqi	r2,fp,102
 800a0a8:	d8800f15 	stw	r2,60(sp)
 800a0ac:	1000c31e 	bne	r2,zero,800a3bc <___vfprintf_internal_r+0x1b54>
 800a0b0:	e08011a0 	cmpeqi	r2,fp,70
 800a0b4:	1000c11e 	bne	r2,zero,800a3bc <___vfprintf_internal_r+0x1b54>
 800a0b8:	a8801158 	cmpnei	r2,r21,69
 800a0bc:	10016226 	beq	r2,zero,800a648 <___vfprintf_internal_r+0x1de0>
 800a0c0:	d8801804 	addi	r2,sp,96
 800a0c4:	d8800315 	stw	r2,12(sp)
 800a0c8:	d9400917 	ldw	r5,36(sp)
 800a0cc:	d8801504 	addi	r2,sp,84
 800a0d0:	d8800215 	stw	r2,8(sp)
 800a0d4:	d8801404 	addi	r2,sp,80
 800a0d8:	da000015 	stw	r8,0(sp)
 800a0dc:	9809883a 	mov	r4,r19
 800a0e0:	d8800115 	stw	r2,4(sp)
 800a0e4:	01c00084 	movi	r7,2
 800a0e8:	a00d883a 	mov	r6,r20
 800a0ec:	db000815 	stw	r12,32(sp)
 800a0f0:	da000715 	stw	r8,28(sp)
 800a0f4:	800adac0 	call	800adac <_dtoa_r>
 800a0f8:	da000717 	ldw	r8,28(sp)
 800a0fc:	e10019d8 	cmpnei	r4,fp,103
 800a100:	db000817 	ldw	r12,32(sp)
 800a104:	1023883a 	mov	r17,r2
 800a108:	4007883a 	mov	r3,r8
 800a10c:	2001621e 	bne	r4,zero,800a698 <___vfprintf_internal_r+0x1e30>
 800a110:	6080004c 	andi	r2,r12,1
 800a114:	1001621e 	bne	r2,zero,800a6a0 <___vfprintf_internal_r+0x1e38>
 800a118:	d8801417 	ldw	r2,80(sp)
 800a11c:	ad4011e0 	cmpeqi	r21,r21,71
 800a120:	d8800715 	stw	r2,28(sp)
 800a124:	d8801817 	ldw	r2,96(sp)
 800a128:	1445c83a 	sub	r2,r2,r17
 800a12c:	d8800815 	stw	r2,32(sp)
 800a130:	a8000526 	beq	r21,zero,800a148 <___vfprintf_internal_r+0x18e0>
 800a134:	d8c00717 	ldw	r3,28(sp)
 800a138:	18bfff50 	cmplti	r2,r3,-3
 800a13c:	1000011e 	bne	r2,zero,800a144 <___vfprintf_internal_r+0x18dc>
 800a140:	40c1670e 	bge	r8,r3,800a6e0 <___vfprintf_internal_r+0x1e78>
 800a144:	e73fff84 	addi	fp,fp,-2
 800a148:	d8800717 	ldw	r2,28(sp)
 800a14c:	df001645 	stb	fp,89(sp)
 800a150:	157fffc4 	addi	r21,r2,-1
 800a154:	dd401415 	stw	r21,80(sp)
 800a158:	a801c316 	blt	r21,zero,800a868 <___vfprintf_internal_r+0x2000>
 800a15c:	00800ac4 	movi	r2,43
 800a160:	d8801685 	stb	r2,90(sp)
 800a164:	a8800290 	cmplti	r2,r21,10
 800a168:	1001b81e 	bne	r2,zero,800a84c <___vfprintf_internal_r+0x1fe4>
 800a16c:	d98019c4 	addi	r6,sp,103
 800a170:	9029883a 	mov	r20,r18
 800a174:	dc400715 	stw	r17,28(sp)
 800a178:	8025883a 	mov	r18,r16
 800a17c:	db000f15 	stw	r12,60(sp)
 800a180:	3021883a 	mov	r16,r6
 800a184:	a809883a 	mov	r4,r21
 800a188:	01400284 	movi	r5,10
 800a18c:	80051880 	call	8005188 <__modsi3>
 800a190:	10800c04 	addi	r2,r2,48
 800a194:	a809883a 	mov	r4,r21
 800a198:	80bfffc5 	stb	r2,-1(r16)
 800a19c:	01400284 	movi	r5,10
 800a1a0:	80051080 	call	8005108 <__divsi3>
 800a1a4:	a9001908 	cmpgei	r4,r21,100
 800a1a8:	8023883a 	mov	r17,r16
 800a1ac:	102b883a 	mov	r21,r2
 800a1b0:	843fffc4 	addi	r16,r16,-1
 800a1b4:	203ff31e 	bne	r4,zero,800a184 <___vfprintf_internal_r+0x191c>
 800a1b8:	800d883a 	mov	r6,r16
 800a1bc:	11000c04 	addi	r4,r2,48
 800a1c0:	9021883a 	mov	r16,r18
 800a1c4:	a025883a 	mov	r18,r20
 800a1c8:	8829883a 	mov	r20,r17
 800a1cc:	a0bfff84 	addi	r2,r20,-2
 800a1d0:	313fffc5 	stb	r4,-1(r6)
 800a1d4:	d8c019c4 	addi	r3,sp,103
 800a1d8:	db000f17 	ldw	r12,60(sp)
 800a1dc:	dc400717 	ldw	r17,28(sp)
 800a1e0:	10c1cd2e 	bgeu	r2,r3,800a918 <___vfprintf_internal_r+0x20b0>
 800a1e4:	d8c016c4 	addi	r3,sp,91
 800a1e8:	00000106 	br	800a1f0 <___vfprintf_internal_r+0x1988>
 800a1ec:	11000003 	ldbu	r4,0(r2)
 800a1f0:	19000005 	stb	r4,0(r3)
 800a1f4:	10800044 	addi	r2,r2,1
 800a1f8:	d90019c4 	addi	r4,sp,103
 800a1fc:	18c00044 	addi	r3,r3,1
 800a200:	113ffa1e 	bne	r2,r4,800a1ec <___vfprintf_internal_r+0x1984>
 800a204:	d8801a44 	addi	r2,sp,105
 800a208:	d8c016c4 	addi	r3,sp,91
 800a20c:	1505c83a 	sub	r2,r2,r20
 800a210:	1885883a 	add	r2,r3,r2
 800a214:	d8c01644 	addi	r3,sp,89
 800a218:	10c5c83a 	sub	r2,r2,r3
 800a21c:	d8801015 	stw	r2,64(sp)
 800a220:	d8c00817 	ldw	r3,32(sp)
 800a224:	d9001017 	ldw	r4,64(sp)
 800a228:	18800088 	cmpgei	r2,r3,2
 800a22c:	20eb883a 	add	r21,r4,r3
 800a230:	10019226 	beq	r2,zero,800a87c <___vfprintf_internal_r+0x2014>
 800a234:	d8800b17 	ldw	r2,44(sp)
 800a238:	a8ab883a 	add	r21,r21,r2
 800a23c:	a829883a 	mov	r20,r21
 800a240:	a800010e 	bge	r21,zero,800a248 <___vfprintf_internal_r+0x19e0>
 800a244:	0029883a 	mov	r20,zero
 800a248:	d8000715 	stw	zero,28(sp)
 800a24c:	00008e06 	br	800a488 <___vfprintf_internal_r+0x1c20>
 800a250:	880f883a 	mov	r7,r17
 800a254:	10800044 	addi	r2,r2,1
 800a258:	1d47883a 	add	r3,r3,r21
 800a25c:	b1c00015 	stw	r7,0(r22)
 800a260:	003a7906 	br	8008c48 <___vfprintf_internal_r+0x3e0>
 800a264:	d9801a04 	addi	r6,sp,104
 800a268:	900b883a 	mov	r5,r18
 800a26c:	9809883a 	mov	r4,r19
 800a270:	800fdc00 	call	800fdc0 <__sprint_r>
 800a274:	103a8b1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a278:	d8c01c17 	ldw	r3,112(sp)
 800a27c:	dd802704 	addi	r22,sp,156
 800a280:	003c8b06 	br	80094b0 <___vfprintf_internal_r+0xc48>
 800a284:	d9801a04 	addi	r6,sp,104
 800a288:	900b883a 	mov	r5,r18
 800a28c:	9809883a 	mov	r4,r19
 800a290:	da000e15 	stw	r8,56(sp)
 800a294:	800fdc00 	call	800fdc0 <__sprint_r>
 800a298:	103a821e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a29c:	d8c01c17 	ldw	r3,112(sp)
 800a2a0:	da000e17 	ldw	r8,56(sp)
 800a2a4:	dd802704 	addi	r22,sp,156
 800a2a8:	003a5e06 	br	8008c24 <___vfprintf_internal_r+0x3bc>
 800a2ac:	8809883a 	mov	r4,r17
 800a2b0:	db000415 	stw	r12,16(sp)
 800a2b4:	d8c00615 	stw	r3,24(sp)
 800a2b8:	80087d00 	call	80087d0 <strlen>
 800a2bc:	db000417 	ldw	r12,16(sp)
 800a2c0:	102b883a 	mov	r21,r2
 800a2c4:	1029883a 	mov	r20,r2
 800a2c8:	003a2c06 	br	8008b7c <___vfprintf_internal_r+0x314>
 800a2cc:	d8800d17 	ldw	r2,52(sp)
 800a2d0:	d9000b17 	ldw	r4,44(sp)
 800a2d4:	b0800015 	stw	r2,0(r22)
 800a2d8:	d8801b17 	ldw	r2,108(sp)
 800a2dc:	20c7883a 	add	r3,r4,r3
 800a2e0:	b1000115 	stw	r4,4(r22)
 800a2e4:	10800044 	addi	r2,r2,1
 800a2e8:	d8c01c15 	stw	r3,112(sp)
 800a2ec:	d8801b15 	stw	r2,108(sp)
 800a2f0:	11000208 	cmpgei	r4,r2,8
 800a2f4:	2000bf1e 	bne	r4,zero,800a5f4 <___vfprintf_internal_r+0x1d8c>
 800a2f8:	b5800204 	addi	r22,r22,8
 800a2fc:	283d3c0e 	bge	r5,zero,80097f0 <___vfprintf_internal_r+0xf88>
 800a300:	01c20074 	movhi	r7,2049
 800a304:	293ffc08 	cmpgei	r4,r5,-16
 800a308:	39df6504 	addi	r7,r7,32148
 800a30c:	0179c83a 	sub	fp,zero,r5
 800a310:	2001361e 	bne	r4,zero,800a7ec <___vfprintf_internal_r+0x1f84>
 800a314:	dc000715 	stw	r16,28(sp)
 800a318:	05400404 	movi	r21,16
 800a31c:	9021883a 	mov	r16,r18
 800a320:	3825883a 	mov	r18,r7
 800a324:	00000406 	br	800a338 <___vfprintf_internal_r+0x1ad0>
 800a328:	b5800204 	addi	r22,r22,8
 800a32c:	e73ffc04 	addi	fp,fp,-16
 800a330:	e1800448 	cmpgei	r6,fp,17
 800a334:	30012a26 	beq	r6,zero,800a7e0 <___vfprintf_internal_r+0x1f78>
 800a338:	10800044 	addi	r2,r2,1
 800a33c:	18c00404 	addi	r3,r3,16
 800a340:	b4800015 	stw	r18,0(r22)
 800a344:	b5400115 	stw	r21,4(r22)
 800a348:	d8c01c15 	stw	r3,112(sp)
 800a34c:	d8801b15 	stw	r2,108(sp)
 800a350:	11800208 	cmpgei	r6,r2,8
 800a354:	303ff426 	beq	r6,zero,800a328 <___vfprintf_internal_r+0x1ac0>
 800a358:	d9801a04 	addi	r6,sp,104
 800a35c:	800b883a 	mov	r5,r16
 800a360:	9809883a 	mov	r4,r19
 800a364:	800fdc00 	call	800fdc0 <__sprint_r>
 800a368:	10015f1e 	bne	r2,zero,800a8e8 <___vfprintf_internal_r+0x2080>
 800a36c:	d8c01c17 	ldw	r3,112(sp)
 800a370:	d8801b17 	ldw	r2,108(sp)
 800a374:	dd802704 	addi	r22,sp,156
 800a378:	003fec06 	br	800a32c <___vfprintf_internal_r+0x1ac4>
 800a37c:	800f883a 	mov	r7,r16
 800a380:	dc000717 	ldw	r16,28(sp)
 800a384:	8817883a 	mov	r11,r17
 800a388:	aa000044 	addi	r8,r21,1
 800a38c:	e0800204 	addi	r2,fp,8
 800a390:	1ac7883a 	add	r3,r3,r11
 800a394:	e1c00015 	stw	r7,0(fp)
 800a398:	e2c00115 	stw	r11,4(fp)
 800a39c:	d8c01c15 	stw	r3,112(sp)
 800a3a0:	da001b15 	stw	r8,108(sp)
 800a3a4:	41000208 	cmpgei	r4,r8,8
 800a3a8:	203eb31e 	bne	r4,zero,8009e78 <___vfprintf_internal_r+0x1610>
 800a3ac:	42000044 	addi	r8,r8,1
 800a3b0:	15800204 	addi	r22,r2,8
 800a3b4:	1039883a 	mov	fp,r2
 800a3b8:	003d5106 	br	8009900 <___vfprintf_internal_r+0x1098>
 800a3bc:	d8801804 	addi	r2,sp,96
 800a3c0:	d8800315 	stw	r2,12(sp)
 800a3c4:	d9400917 	ldw	r5,36(sp)
 800a3c8:	d8801504 	addi	r2,sp,84
 800a3cc:	d8800215 	stw	r2,8(sp)
 800a3d0:	d8801404 	addi	r2,sp,80
 800a3d4:	da000015 	stw	r8,0(sp)
 800a3d8:	d8800115 	stw	r2,4(sp)
 800a3dc:	01c000c4 	movi	r7,3
 800a3e0:	a00d883a 	mov	r6,r20
 800a3e4:	9809883a 	mov	r4,r19
 800a3e8:	db000815 	stw	r12,32(sp)
 800a3ec:	da000715 	stw	r8,28(sp)
 800a3f0:	800adac0 	call	800adac <_dtoa_r>
 800a3f4:	da000717 	ldw	r8,28(sp)
 800a3f8:	1023883a 	mov	r17,r2
 800a3fc:	db000817 	ldw	r12,32(sp)
 800a400:	1207883a 	add	r3,r2,r8
 800a404:	88800007 	ldb	r2,0(r17)
 800a408:	10800c20 	cmpeqi	r2,r2,48
 800a40c:	1000661e 	bne	r2,zero,800a5a8 <___vfprintf_internal_r+0x1d40>
 800a410:	d8801417 	ldw	r2,80(sp)
 800a414:	1893883a 	add	r9,r3,r2
 800a418:	d9000917 	ldw	r4,36(sp)
 800a41c:	000d883a 	mov	r6,zero
 800a420:	000f883a 	mov	r7,zero
 800a424:	a00b883a 	mov	r5,r20
 800a428:	da401115 	stw	r9,68(sp)
 800a42c:	da000815 	stw	r8,32(sp)
 800a430:	db000715 	stw	r12,28(sp)
 800a434:	800703c0 	call	800703c <__eqdf2>
 800a438:	db000717 	ldw	r12,28(sp)
 800a43c:	da000817 	ldw	r8,32(sp)
 800a440:	da401117 	ldw	r9,68(sp)
 800a444:	1000981e 	bne	r2,zero,800a6a8 <___vfprintf_internal_r+0x1e40>
 800a448:	4805883a 	mov	r2,r9
 800a44c:	d8c01417 	ldw	r3,80(sp)
 800a450:	1445c83a 	sub	r2,r2,r17
 800a454:	ad4011d8 	cmpnei	r21,r21,71
 800a458:	d8c00715 	stw	r3,28(sp)
 800a45c:	d8800815 	stw	r2,32(sp)
 800a460:	a83f3426 	beq	r21,zero,800a134 <___vfprintf_internal_r+0x18cc>
 800a464:	d8800f17 	ldw	r2,60(sp)
 800a468:	103f3726 	beq	r2,zero,800a148 <___vfprintf_internal_r+0x18e0>
 800a46c:	d8c00717 	ldw	r3,28(sp)
 800a470:	6080004c 	andi	r2,r12,1
 800a474:	1204b03a 	or	r2,r2,r8
 800a478:	00c1130e 	bge	zero,r3,800a8c8 <___vfprintf_internal_r+0x2060>
 800a47c:	10010e1e 	bne	r2,zero,800a8b8 <___vfprintf_internal_r+0x2050>
 800a480:	dd400717 	ldw	r21,28(sp)
 800a484:	a829883a 	mov	r20,r21
 800a488:	d8800607 	ldb	r2,24(sp)
 800a48c:	10008f26 	beq	r2,zero,800a6cc <___vfprintf_internal_r+0x1e64>
 800a490:	00800b44 	movi	r2,45
 800a494:	d8801345 	stb	r2,77(sp)
 800a498:	d8800e17 	ldw	r2,56(sp)
 800a49c:	0011883a 	mov	r8,zero
 800a4a0:	d8800615 	stw	r2,24(sp)
 800a4a4:	003b9206 	br	80092f0 <___vfprintf_internal_r+0xa88>
 800a4a8:	04420074 	movhi	r17,2049
 800a4ac:	8c5f5404 	addi	r17,r17,32080
 800a4b0:	003a8b06 	br	8008ee0 <___vfprintf_internal_r+0x678>
 800a4b4:	d8800617 	ldw	r2,24(sp)
 800a4b8:	d8c00615 	stw	r3,24(sp)
 800a4bc:	15000017 	ldw	r20,0(r2)
 800a4c0:	a02bd7fa 	srai	r21,r20,31
 800a4c4:	a805883a 	mov	r2,r21
 800a4c8:	003ae306 	br	8009058 <___vfprintf_internal_r+0x7f0>
 800a4cc:	d8800617 	ldw	r2,24(sp)
 800a4d0:	002b883a 	mov	r21,zero
 800a4d4:	d8c00615 	stw	r3,24(sp)
 800a4d8:	15000017 	ldw	r20,0(r2)
 800a4dc:	0005883a 	mov	r2,zero
 800a4e0:	003a2406 	br	8008d74 <___vfprintf_internal_r+0x50c>
 800a4e4:	d8800617 	ldw	r2,24(sp)
 800a4e8:	002b883a 	mov	r21,zero
 800a4ec:	d8c00615 	stw	r3,24(sp)
 800a4f0:	15000017 	ldw	r20,0(r2)
 800a4f4:	00800044 	movi	r2,1
 800a4f8:	003a1e06 	br	8008d74 <___vfprintf_internal_r+0x50c>
 800a4fc:	d8800617 	ldw	r2,24(sp)
 800a500:	002b883a 	mov	r21,zero
 800a504:	d8c00615 	stw	r3,24(sp)
 800a508:	15000017 	ldw	r20,0(r2)
 800a50c:	003af406 	br	80090e0 <___vfprintf_internal_r+0x878>
 800a510:	800f883a 	mov	r7,r16
 800a514:	dc000e17 	ldw	r16,56(sp)
 800a518:	10800044 	addi	r2,r2,1
 800a51c:	1d47883a 	add	r3,r3,r21
 800a520:	d8801b15 	stw	r2,108(sp)
 800a524:	b1c00015 	stw	r7,0(r22)
 800a528:	b5400115 	stw	r21,4(r22)
 800a52c:	d8c01c15 	stw	r3,112(sp)
 800a530:	10800208 	cmpgei	r2,r2,8
 800a534:	10003a1e 	bne	r2,zero,800a620 <___vfprintf_internal_r+0x1db8>
 800a538:	b5800204 	addi	r22,r22,8
 800a53c:	003d6c06 	br	8009af0 <___vfprintf_internal_r+0x1288>
 800a540:	00800b44 	movi	r2,45
 800a544:	d8801345 	stb	r2,77(sp)
 800a548:	03400b44 	movi	r13,45
 800a54c:	003a6006 	br	8008ed0 <___vfprintf_internal_r+0x668>
 800a550:	1520003c 	xorhi	r20,r2,32768
 800a554:	00800b44 	movi	r2,45
 800a558:	d8800605 	stb	r2,24(sp)
 800a55c:	003ed106 	br	800a0a4 <___vfprintf_internal_r+0x183c>
 800a560:	d9801a04 	addi	r6,sp,104
 800a564:	900b883a 	mov	r5,r18
 800a568:	9809883a 	mov	r4,r19
 800a56c:	800fdc00 	call	800fdc0 <__sprint_r>
 800a570:	1039cc1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a574:	dd401417 	ldw	r21,80(sp)
 800a578:	d8c01c17 	ldw	r3,112(sp)
 800a57c:	dd802704 	addi	r22,sp,156
 800a580:	003d6a06 	br	8009b2c <___vfprintf_internal_r+0x12c4>
 800a584:	05400184 	movi	r21,6
 800a588:	003e5a06 	br	8009ef4 <___vfprintf_internal_r+0x168c>
 800a58c:	d9801a04 	addi	r6,sp,104
 800a590:	900b883a 	mov	r5,r18
 800a594:	9809883a 	mov	r4,r19
 800a598:	800fdc00 	call	800fdc0 <__sprint_r>
 800a59c:	0039c106 	br	8008ca4 <___vfprintf_internal_r+0x43c>
 800a5a0:	d9401345 	stb	r5,77(sp)
 800a5a4:	00396f06 	br	8008b64 <___vfprintf_internal_r+0x2fc>
 800a5a8:	d9000917 	ldw	r4,36(sp)
 800a5ac:	000d883a 	mov	r6,zero
 800a5b0:	000f883a 	mov	r7,zero
 800a5b4:	a00b883a 	mov	r5,r20
 800a5b8:	d8c01115 	stw	r3,68(sp)
 800a5bc:	da000815 	stw	r8,32(sp)
 800a5c0:	db000715 	stw	r12,28(sp)
 800a5c4:	800703c0 	call	800703c <__eqdf2>
 800a5c8:	db000717 	ldw	r12,28(sp)
 800a5cc:	da000817 	ldw	r8,32(sp)
 800a5d0:	d8c01117 	ldw	r3,68(sp)
 800a5d4:	103f8e26 	beq	r2,zero,800a410 <___vfprintf_internal_r+0x1ba8>
 800a5d8:	00800044 	movi	r2,1
 800a5dc:	1205c83a 	sub	r2,r2,r8
 800a5e0:	d8801415 	stw	r2,80(sp)
 800a5e4:	003f8b06 	br	800a414 <___vfprintf_internal_r+0x1bac>
 800a5e8:	403ea81e 	bne	r8,zero,800a08c <___vfprintf_internal_r+0x1824>
 800a5ec:	02000044 	movi	r8,1
 800a5f0:	003ea606 	br	800a08c <___vfprintf_internal_r+0x1824>
 800a5f4:	d9801a04 	addi	r6,sp,104
 800a5f8:	900b883a 	mov	r5,r18
 800a5fc:	9809883a 	mov	r4,r19
 800a600:	800fdc00 	call	800fdc0 <__sprint_r>
 800a604:	1039a71e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a608:	d9401417 	ldw	r5,80(sp)
 800a60c:	d8c01c17 	ldw	r3,112(sp)
 800a610:	d8801b17 	ldw	r2,108(sp)
 800a614:	dd802704 	addi	r22,sp,156
 800a618:	283c750e 	bge	r5,zero,80097f0 <___vfprintf_internal_r+0xf88>
 800a61c:	003f3806 	br	800a300 <___vfprintf_internal_r+0x1a98>
 800a620:	d9801a04 	addi	r6,sp,104
 800a624:	900b883a 	mov	r5,r18
 800a628:	9809883a 	mov	r4,r19
 800a62c:	800fdc00 	call	800fdc0 <__sprint_r>
 800a630:	10399c1e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a634:	d8c01c17 	ldw	r3,112(sp)
 800a638:	dd802704 	addi	r22,sp,156
 800a63c:	003d2c06 	br	8009af0 <___vfprintf_internal_r+0x1288>
 800a640:	db000417 	ldw	r12,16(sp)
 800a644:	003a9106 	br	800908c <___vfprintf_internal_r+0x824>
 800a648:	d8801804 	addi	r2,sp,96
 800a64c:	d8800315 	stw	r2,12(sp)
 800a650:	d9400917 	ldw	r5,36(sp)
 800a654:	d8801504 	addi	r2,sp,84
 800a658:	40c00044 	addi	r3,r8,1
 800a65c:	d8800215 	stw	r2,8(sp)
 800a660:	d8801404 	addi	r2,sp,80
 800a664:	d8c00015 	stw	r3,0(sp)
 800a668:	d8800115 	stw	r2,4(sp)
 800a66c:	01c00084 	movi	r7,2
 800a670:	a00d883a 	mov	r6,r20
 800a674:	9809883a 	mov	r4,r19
 800a678:	db001115 	stw	r12,68(sp)
 800a67c:	da000815 	stw	r8,32(sp)
 800a680:	d8c00715 	stw	r3,28(sp)
 800a684:	800adac0 	call	800adac <_dtoa_r>
 800a688:	d8c00717 	ldw	r3,28(sp)
 800a68c:	da000817 	ldw	r8,32(sp)
 800a690:	db001117 	ldw	r12,68(sp)
 800a694:	1023883a 	mov	r17,r2
 800a698:	e08011d8 	cmpnei	r2,fp,71
 800a69c:	103e9c26 	beq	r2,zero,800a110 <___vfprintf_internal_r+0x18a8>
 800a6a0:	88d3883a 	add	r9,r17,r3
 800a6a4:	003f5c06 	br	800a418 <___vfprintf_internal_r+0x1bb0>
 800a6a8:	d8801817 	ldw	r2,96(sp)
 800a6ac:	127f672e 	bgeu	r2,r9,800a44c <___vfprintf_internal_r+0x1be4>
 800a6b0:	01000c04 	movi	r4,48
 800a6b4:	10c00044 	addi	r3,r2,1
 800a6b8:	d8c01815 	stw	r3,96(sp)
 800a6bc:	11000005 	stb	r4,0(r2)
 800a6c0:	d8801817 	ldw	r2,96(sp)
 800a6c4:	127ffb36 	bltu	r2,r9,800a6b4 <___vfprintf_internal_r+0x1e4c>
 800a6c8:	003f6006 	br	800a44c <___vfprintf_internal_r+0x1be4>
 800a6cc:	d8800e17 	ldw	r2,56(sp)
 800a6d0:	db401343 	ldbu	r13,77(sp)
 800a6d4:	0011883a 	mov	r8,zero
 800a6d8:	d8800615 	stw	r2,24(sp)
 800a6dc:	003b0006 	br	80092e0 <___vfprintf_internal_r+0xa78>
 800a6e0:	d8800717 	ldw	r2,28(sp)
 800a6e4:	d8c00817 	ldw	r3,32(sp)
 800a6e8:	10c02216 	blt	r2,r3,800a774 <___vfprintf_internal_r+0x1f0c>
 800a6ec:	6300004c 	andi	r12,r12,1
 800a6f0:	60004f1e 	bne	r12,zero,800a830 <___vfprintf_internal_r+0x1fc8>
 800a6f4:	1029883a 	mov	r20,r2
 800a6f8:	1000010e 	bge	r2,zero,800a700 <___vfprintf_internal_r+0x1e98>
 800a6fc:	0029883a 	mov	r20,zero
 800a700:	dd400717 	ldw	r21,28(sp)
 800a704:	070019c4 	movi	fp,103
 800a708:	003f5f06 	br	800a488 <___vfprintf_internal_r+0x1c20>
 800a70c:	d9801a04 	addi	r6,sp,104
 800a710:	900b883a 	mov	r5,r18
 800a714:	9809883a 	mov	r4,r19
 800a718:	800fdc00 	call	800fdc0 <__sprint_r>
 800a71c:	1039611e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a720:	d8c01c17 	ldw	r3,112(sp)
 800a724:	dd802704 	addi	r22,sp,156
 800a728:	a83cee0e 	bge	r21,zero,8009ae4 <___vfprintf_internal_r+0x127c>
 800a72c:	003dec06 	br	8009ee0 <___vfprintf_internal_r+0x1678>
 800a730:	02000184 	movi	r8,6
 800a734:	003e5506 	br	800a08c <___vfprintf_internal_r+0x1824>
 800a738:	d9801a04 	addi	r6,sp,104
 800a73c:	900b883a 	mov	r5,r18
 800a740:	9809883a 	mov	r4,r19
 800a744:	800fdc00 	call	800fdc0 <__sprint_r>
 800a748:	1039561e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a74c:	d8801417 	ldw	r2,80(sp)
 800a750:	d9000817 	ldw	r4,32(sp)
 800a754:	d8c01c17 	ldw	r3,112(sp)
 800a758:	dd802704 	addi	r22,sp,156
 800a75c:	2085c83a 	sub	r2,r4,r2
 800a760:	003d0606 	br	8009b7c <___vfprintf_internal_r+0x1314>
 800a764:	4029883a 	mov	r20,r8
 800a768:	d8c00615 	stw	r3,24(sp)
 800a76c:	402b883a 	mov	r21,r8
 800a770:	00390206 	br	8008b7c <___vfprintf_internal_r+0x314>
 800a774:	d8800817 	ldw	r2,32(sp)
 800a778:	d8c00b17 	ldw	r3,44(sp)
 800a77c:	10eb883a 	add	r21,r2,r3
 800a780:	d8800717 	ldw	r2,28(sp)
 800a784:	00800316 	blt	zero,r2,800a794 <___vfprintf_internal_r+0x1f2c>
 800a788:	d8800717 	ldw	r2,28(sp)
 800a78c:	a8abc83a 	sub	r21,r21,r2
 800a790:	ad400044 	addi	r21,r21,1
 800a794:	a829883a 	mov	r20,r21
 800a798:	a8002a16 	blt	r21,zero,800a844 <___vfprintf_internal_r+0x1fdc>
 800a79c:	070019c4 	movi	fp,103
 800a7a0:	003f3906 	br	800a488 <___vfprintf_internal_r+0x1c20>
 800a7a4:	d9401345 	stb	r5,77(sp)
 800a7a8:	003a2306 	br	8009038 <___vfprintf_internal_r+0x7d0>
 800a7ac:	d9401345 	stb	r5,77(sp)
 800a7b0:	003b1806 	br	8009414 <___vfprintf_internal_r+0xbac>
 800a7b4:	d9401345 	stb	r5,77(sp)
 800a7b8:	003a8e06 	br	80091f4 <___vfprintf_internal_r+0x98c>
 800a7bc:	d9401345 	stb	r5,77(sp)
 800a7c0:	003a3d06 	br	80090b8 <___vfprintf_internal_r+0x850>
 800a7c4:	d9401345 	stb	r5,77(sp)
 800a7c8:	003a7606 	br	80091a4 <___vfprintf_internal_r+0x93c>
 800a7cc:	d9401345 	stb	r5,77(sp)
 800a7d0:	00399406 	br	8008e24 <___vfprintf_internal_r+0x5bc>
 800a7d4:	00bfffc4 	movi	r2,-1
 800a7d8:	d8800515 	stw	r2,20(sp)
 800a7dc:	00393406 	br	8008cb0 <___vfprintf_internal_r+0x448>
 800a7e0:	900f883a 	mov	r7,r18
 800a7e4:	8025883a 	mov	r18,r16
 800a7e8:	dc000717 	ldw	r16,28(sp)
 800a7ec:	10800044 	addi	r2,r2,1
 800a7f0:	1f07883a 	add	r3,r3,fp
 800a7f4:	b1c00015 	stw	r7,0(r22)
 800a7f8:	b7000115 	stw	fp,4(r22)
 800a7fc:	d8c01c15 	stw	r3,112(sp)
 800a800:	d8801b15 	stw	r2,108(sp)
 800a804:	11000208 	cmpgei	r4,r2,8
 800a808:	203bf826 	beq	r4,zero,80097ec <___vfprintf_internal_r+0xf84>
 800a80c:	d9801a04 	addi	r6,sp,104
 800a810:	900b883a 	mov	r5,r18
 800a814:	9809883a 	mov	r4,r19
 800a818:	800fdc00 	call	800fdc0 <__sprint_r>
 800a81c:	1039211e 	bne	r2,zero,8008ca4 <___vfprintf_internal_r+0x43c>
 800a820:	d8c01c17 	ldw	r3,112(sp)
 800a824:	d8801b17 	ldw	r2,108(sp)
 800a828:	dd802704 	addi	r22,sp,156
 800a82c:	003bf006 	br	80097f0 <___vfprintf_internal_r+0xf88>
 800a830:	d8800717 	ldw	r2,28(sp)
 800a834:	d8c00b17 	ldw	r3,44(sp)
 800a838:	10eb883a 	add	r21,r2,r3
 800a83c:	a829883a 	mov	r20,r21
 800a840:	a83fd60e 	bge	r21,zero,800a79c <___vfprintf_internal_r+0x1f34>
 800a844:	0029883a 	mov	r20,zero
 800a848:	003fd406 	br	800a79c <___vfprintf_internal_r+0x1f34>
 800a84c:	00800c04 	movi	r2,48
 800a850:	ad400c04 	addi	r21,r21,48
 800a854:	d88016c5 	stb	r2,91(sp)
 800a858:	00800104 	movi	r2,4
 800a85c:	dd401705 	stb	r21,92(sp)
 800a860:	d8801015 	stw	r2,64(sp)
 800a864:	003e6e06 	br	800a220 <___vfprintf_internal_r+0x19b8>
 800a868:	05400044 	movi	r21,1
 800a86c:	a8abc83a 	sub	r21,r21,r2
 800a870:	00800b44 	movi	r2,45
 800a874:	d8801685 	stb	r2,90(sp)
 800a878:	003e3a06 	br	800a164 <___vfprintf_internal_r+0x18fc>
 800a87c:	6080004c 	andi	r2,r12,1
 800a880:	d8800715 	stw	r2,28(sp)
 800a884:	103e6b1e 	bne	r2,zero,800a234 <___vfprintf_internal_r+0x19cc>
 800a888:	a829883a 	mov	r20,r21
 800a88c:	a83efe0e 	bge	r21,zero,800a488 <___vfprintf_internal_r+0x1c20>
 800a890:	0029883a 	mov	r20,zero
 800a894:	003efc06 	br	800a488 <___vfprintf_internal_r+0x1c20>
 800a898:	d8800a17 	ldw	r2,40(sp)
 800a89c:	10001a16 	blt	r2,zero,800a908 <___vfprintf_internal_r+0x20a0>
 800a8a0:	db401343 	ldbu	r13,77(sp)
 800a8a4:	e0801210 	cmplti	r2,fp,72
 800a8a8:	1000141e 	bne	r2,zero,800a8fc <___vfprintf_internal_r+0x2094>
 800a8ac:	04420074 	movhi	r17,2049
 800a8b0:	8c5f5704 	addi	r17,r17,32092
 800a8b4:	00398a06 	br	8008ee0 <___vfprintf_internal_r+0x678>
 800a8b8:	d8800b17 	ldw	r2,44(sp)
 800a8bc:	18ab883a 	add	r21,r3,r2
 800a8c0:	aa2b883a 	add	r21,r21,r8
 800a8c4:	003ff006 	br	800a888 <___vfprintf_internal_r+0x2020>
 800a8c8:	1000031e 	bne	r2,zero,800a8d8 <___vfprintf_internal_r+0x2070>
 800a8cc:	05000044 	movi	r20,1
 800a8d0:	05400044 	movi	r21,1
 800a8d4:	003eec06 	br	800a488 <___vfprintf_internal_r+0x1c20>
 800a8d8:	d8800b17 	ldw	r2,44(sp)
 800a8dc:	15400044 	addi	r21,r2,1
 800a8e0:	aa2b883a 	add	r21,r21,r8
 800a8e4:	003fe806 	br	800a888 <___vfprintf_internal_r+0x2020>
 800a8e8:	8025883a 	mov	r18,r16
 800a8ec:	0038ed06 	br	8008ca4 <___vfprintf_internal_r+0x43c>
 800a8f0:	b005883a 	mov	r2,r22
 800a8f4:	39df6504 	addi	r7,r7,32148
 800a8f8:	003ea506 	br	800a390 <___vfprintf_internal_r+0x1b28>
 800a8fc:	04420074 	movhi	r17,2049
 800a900:	8c5f5604 	addi	r17,r17,32088
 800a904:	00397606 	br	8008ee0 <___vfprintf_internal_r+0x678>
 800a908:	00800b44 	movi	r2,45
 800a90c:	d8801345 	stb	r2,77(sp)
 800a910:	03400b44 	movi	r13,45
 800a914:	003fe306 	br	800a8a4 <___vfprintf_internal_r+0x203c>
 800a918:	00800084 	movi	r2,2
 800a91c:	d8801015 	stw	r2,64(sp)
 800a920:	003e3f06 	br	800a220 <___vfprintf_internal_r+0x19b8>
 800a924:	d8c00617 	ldw	r3,24(sp)
 800a928:	1a000017 	ldw	r8,0(r3)
 800a92c:	18c00104 	addi	r3,r3,4
 800a930:	4000010e 	bge	r8,zero,800a938 <___vfprintf_internal_r+0x20d0>
 800a934:	023fffc4 	movi	r8,-1
 800a938:	bf000043 	ldbu	fp,1(r23)
 800a93c:	d8c00615 	stw	r3,24(sp)
 800a940:	102f883a 	mov	r23,r2
 800a944:	e2c03fcc 	andi	r11,fp,255
 800a948:	5ac0201c 	xori	r11,r11,128
 800a94c:	5affe004 	addi	r11,r11,-128
 800a950:	00381106 	br	8008998 <___vfprintf_internal_r+0x130>

0800a954 <__vfprintf_internal>:
 800a954:	00c200b4 	movhi	r3,2050
 800a958:	2005883a 	mov	r2,r4
 800a95c:	1927bf17 	ldw	r4,-24836(r3)
 800a960:	300f883a 	mov	r7,r6
 800a964:	280d883a 	mov	r6,r5
 800a968:	100b883a 	mov	r5,r2
 800a96c:	80088681 	jmpi	8008868 <___vfprintf_internal_r>

0800a970 <__sbprintf>:
 800a970:	2880030b 	ldhu	r2,12(r5)
 800a974:	2b001917 	ldw	r12,100(r5)
 800a978:	2ac0038b 	ldhu	r11,14(r5)
 800a97c:	2a800717 	ldw	r10,28(r5)
 800a980:	2a400917 	ldw	r9,36(r5)
 800a984:	defee204 	addi	sp,sp,-1144
 800a988:	da001a04 	addi	r8,sp,104
 800a98c:	00c10004 	movi	r3,1024
 800a990:	dc011a15 	stw	r16,1128(sp)
 800a994:	10bfff4c 	andi	r2,r2,65533
 800a998:	2821883a 	mov	r16,r5
 800a99c:	d80b883a 	mov	r5,sp
 800a9a0:	dc811c15 	stw	r18,1136(sp)
 800a9a4:	dc411b15 	stw	r17,1132(sp)
 800a9a8:	dfc11d15 	stw	ra,1140(sp)
 800a9ac:	2025883a 	mov	r18,r4
 800a9b0:	d880030d 	sth	r2,12(sp)
 800a9b4:	db001915 	stw	r12,100(sp)
 800a9b8:	dac0038d 	sth	r11,14(sp)
 800a9bc:	da800715 	stw	r10,28(sp)
 800a9c0:	da400915 	stw	r9,36(sp)
 800a9c4:	da000015 	stw	r8,0(sp)
 800a9c8:	da000415 	stw	r8,16(sp)
 800a9cc:	d8c00215 	stw	r3,8(sp)
 800a9d0:	d8c00515 	stw	r3,20(sp)
 800a9d4:	d8000615 	stw	zero,24(sp)
 800a9d8:	80088680 	call	8008868 <___vfprintf_internal_r>
 800a9dc:	1023883a 	mov	r17,r2
 800a9e0:	10000d0e 	bge	r2,zero,800aa18 <__sbprintf+0xa8>
 800a9e4:	d880030b 	ldhu	r2,12(sp)
 800a9e8:	1080100c 	andi	r2,r2,64
 800a9ec:	10000326 	beq	r2,zero,800a9fc <__sbprintf+0x8c>
 800a9f0:	8080030b 	ldhu	r2,12(r16)
 800a9f4:	10801014 	ori	r2,r2,64
 800a9f8:	8080030d 	sth	r2,12(r16)
 800a9fc:	8805883a 	mov	r2,r17
 800aa00:	dfc11d17 	ldw	ra,1140(sp)
 800aa04:	dc811c17 	ldw	r18,1136(sp)
 800aa08:	dc411b17 	ldw	r17,1132(sp)
 800aa0c:	dc011a17 	ldw	r16,1128(sp)
 800aa10:	dec11e04 	addi	sp,sp,1144
 800aa14:	f800283a 	ret
 800aa18:	d80b883a 	mov	r5,sp
 800aa1c:	9009883a 	mov	r4,r18
 800aa20:	800c7240 	call	800c724 <_fflush_r>
 800aa24:	103fef26 	beq	r2,zero,800a9e4 <__sbprintf+0x74>
 800aa28:	047fffc4 	movi	r17,-1
 800aa2c:	003fed06 	br	800a9e4 <__sbprintf+0x74>

0800aa30 <__swsetup_r>:
 800aa30:	008200b4 	movhi	r2,2050
 800aa34:	10a7bf17 	ldw	r2,-24836(r2)
 800aa38:	defffd04 	addi	sp,sp,-12
 800aa3c:	dc400115 	stw	r17,4(sp)
 800aa40:	dc000015 	stw	r16,0(sp)
 800aa44:	dfc00215 	stw	ra,8(sp)
 800aa48:	2023883a 	mov	r17,r4
 800aa4c:	2821883a 	mov	r16,r5
 800aa50:	10000226 	beq	r2,zero,800aa5c <__swsetup_r+0x2c>
 800aa54:	10c00e17 	ldw	r3,56(r2)
 800aa58:	18003326 	beq	r3,zero,800ab28 <__swsetup_r+0xf8>
 800aa5c:	8180030b 	ldhu	r6,12(r16)
 800aa60:	30c0020c 	andi	r3,r6,8
 800aa64:	3005883a 	mov	r2,r6
 800aa68:	18000f26 	beq	r3,zero,800aaa8 <__swsetup_r+0x78>
 800aa6c:	80c00417 	ldw	r3,16(r16)
 800aa70:	18001626 	beq	r3,zero,800aacc <__swsetup_r+0x9c>
 800aa74:	1100004c 	andi	r4,r2,1
 800aa78:	20001f1e 	bne	r4,zero,800aaf8 <__swsetup_r+0xc8>
 800aa7c:	1100008c 	andi	r4,r2,2
 800aa80:	20002c1e 	bne	r4,zero,800ab34 <__swsetup_r+0x104>
 800aa84:	81000517 	ldw	r4,20(r16)
 800aa88:	81000215 	stw	r4,8(r16)
 800aa8c:	18001f26 	beq	r3,zero,800ab0c <__swsetup_r+0xdc>
 800aa90:	0005883a 	mov	r2,zero
 800aa94:	dfc00217 	ldw	ra,8(sp)
 800aa98:	dc400117 	ldw	r17,4(sp)
 800aa9c:	dc000017 	ldw	r16,0(sp)
 800aaa0:	dec00304 	addi	sp,sp,12
 800aaa4:	f800283a 	ret
 800aaa8:	3080040c 	andi	r2,r6,16
 800aaac:	10003126 	beq	r2,zero,800ab74 <__swsetup_r+0x144>
 800aab0:	3080010c 	andi	r2,r6,4
 800aab4:	1000211e 	bne	r2,zero,800ab3c <__swsetup_r+0x10c>
 800aab8:	80c00417 	ldw	r3,16(r16)
 800aabc:	30800214 	ori	r2,r6,8
 800aac0:	8080030d 	sth	r2,12(r16)
 800aac4:	100d883a 	mov	r6,r2
 800aac8:	183fea1e 	bne	r3,zero,800aa74 <__swsetup_r+0x44>
 800aacc:	1100a00c 	andi	r4,r2,640
 800aad0:	21008020 	cmpeqi	r4,r4,512
 800aad4:	203fe71e 	bne	r4,zero,800aa74 <__swsetup_r+0x44>
 800aad8:	8809883a 	mov	r4,r17
 800aadc:	800b883a 	mov	r5,r16
 800aae0:	800d5dc0 	call	800d5dc <__smakebuf_r>
 800aae4:	8180030b 	ldhu	r6,12(r16)
 800aae8:	80c00417 	ldw	r3,16(r16)
 800aaec:	3005883a 	mov	r2,r6
 800aaf0:	1100004c 	andi	r4,r2,1
 800aaf4:	203fe126 	beq	r4,zero,800aa7c <__swsetup_r+0x4c>
 800aaf8:	81000517 	ldw	r4,20(r16)
 800aafc:	80000215 	stw	zero,8(r16)
 800ab00:	0109c83a 	sub	r4,zero,r4
 800ab04:	81000615 	stw	r4,24(r16)
 800ab08:	183fe11e 	bne	r3,zero,800aa90 <__swsetup_r+0x60>
 800ab0c:	10c0200c 	andi	r3,r2,128
 800ab10:	0005883a 	mov	r2,zero
 800ab14:	183fdf26 	beq	r3,zero,800aa94 <__swsetup_r+0x64>
 800ab18:	31801014 	ori	r6,r6,64
 800ab1c:	8180030d 	sth	r6,12(r16)
 800ab20:	00bfffc4 	movi	r2,-1
 800ab24:	003fdb06 	br	800aa94 <__swsetup_r+0x64>
 800ab28:	1009883a 	mov	r4,r2
 800ab2c:	800cab80 	call	800cab8 <__sinit>
 800ab30:	003fca06 	br	800aa5c <__swsetup_r+0x2c>
 800ab34:	0009883a 	mov	r4,zero
 800ab38:	003fd306 	br	800aa88 <__swsetup_r+0x58>
 800ab3c:	81400c17 	ldw	r5,48(r16)
 800ab40:	28000626 	beq	r5,zero,800ab5c <__swsetup_r+0x12c>
 800ab44:	80801004 	addi	r2,r16,64
 800ab48:	28800326 	beq	r5,r2,800ab58 <__swsetup_r+0x128>
 800ab4c:	8809883a 	mov	r4,r17
 800ab50:	800cc1c0 	call	800cc1c <_free_r>
 800ab54:	8180030b 	ldhu	r6,12(r16)
 800ab58:	80000c15 	stw	zero,48(r16)
 800ab5c:	80c00417 	ldw	r3,16(r16)
 800ab60:	00bff6c4 	movi	r2,-37
 800ab64:	118c703a 	and	r6,r2,r6
 800ab68:	80000115 	stw	zero,4(r16)
 800ab6c:	80c00015 	stw	r3,0(r16)
 800ab70:	003fd206 	br	800aabc <__swsetup_r+0x8c>
 800ab74:	00800244 	movi	r2,9
 800ab78:	88800015 	stw	r2,0(r17)
 800ab7c:	31801014 	ori	r6,r6,64
 800ab80:	8180030d 	sth	r6,12(r16)
 800ab84:	00bfffc4 	movi	r2,-1
 800ab88:	003fc206 	br	800aa94 <__swsetup_r+0x64>

0800ab8c <quorem>:
 800ab8c:	defff204 	addi	sp,sp,-56
 800ab90:	dc400515 	stw	r17,20(sp)
 800ab94:	20800417 	ldw	r2,16(r4)
 800ab98:	2c400417 	ldw	r17,16(r5)
 800ab9c:	dfc00d15 	stw	ra,52(sp)
 800aba0:	df000c15 	stw	fp,48(sp)
 800aba4:	ddc00b15 	stw	r23,44(sp)
 800aba8:	dd800a15 	stw	r22,40(sp)
 800abac:	dd400915 	stw	r21,36(sp)
 800abb0:	dd000815 	stw	r20,32(sp)
 800abb4:	dcc00715 	stw	r19,28(sp)
 800abb8:	dc800615 	stw	r18,24(sp)
 800abbc:	dc000415 	stw	r16,16(sp)
 800abc0:	d9000115 	stw	r4,4(sp)
 800abc4:	d9400215 	stw	r5,8(sp)
 800abc8:	14407616 	blt	r2,r17,800ada4 <quorem+0x218>
 800abcc:	8c7fffc4 	addi	r17,r17,-1
 800abd0:	882a90ba 	slli	r21,r17,2
 800abd4:	2f000504 	addi	fp,r5,20
 800abd8:	25800504 	addi	r22,r4,20
 800abdc:	e565883a 	add	r18,fp,r21
 800abe0:	b545883a 	add	r2,r22,r21
 800abe4:	95c00017 	ldw	r23,0(r18)
 800abe8:	15000017 	ldw	r20,0(r2)
 800abec:	dd800015 	stw	r22,0(sp)
 800abf0:	bdc00044 	addi	r23,r23,1
 800abf4:	b80b883a 	mov	r5,r23
 800abf8:	a009883a 	mov	r4,r20
 800abfc:	d8800315 	stw	r2,12(sp)
 800ac00:	80051fc0 	call	80051fc <__udivsi3>
 800ac04:	1021883a 	mov	r16,r2
 800ac08:	a5c02f36 	bltu	r20,r23,800acc8 <quorem+0x13c>
 800ac0c:	e029883a 	mov	r20,fp
 800ac10:	002b883a 	mov	r21,zero
 800ac14:	002f883a 	mov	r23,zero
 800ac18:	a4c00017 	ldw	r19,0(r20)
 800ac1c:	800b883a 	mov	r5,r16
 800ac20:	b5800104 	addi	r22,r22,4
 800ac24:	993fffcc 	andi	r4,r19,65535
 800ac28:	80052bc0 	call	80052bc <__mulsi3>
 800ac2c:	9808d43a 	srli	r4,r19,16
 800ac30:	800b883a 	mov	r5,r16
 800ac34:	156b883a 	add	r21,r2,r21
 800ac38:	80052bc0 	call	80052bc <__mulsi3>
 800ac3c:	b0ffff17 	ldw	r3,-4(r22)
 800ac40:	a80ad43a 	srli	r5,r21,16
 800ac44:	a93fffcc 	andi	r4,r21,65535
 800ac48:	19bfffcc 	andi	r6,r3,65535
 800ac4c:	b909c83a 	sub	r4,r23,r4
 800ac50:	2189883a 	add	r4,r4,r6
 800ac54:	1806d43a 	srli	r3,r3,16
 800ac58:	1145883a 	add	r2,r2,r5
 800ac5c:	200bd43a 	srai	r5,r4,16
 800ac60:	11bfffcc 	andi	r6,r2,65535
 800ac64:	1987c83a 	sub	r3,r3,r6
 800ac68:	1947883a 	add	r3,r3,r5
 800ac6c:	180a943a 	slli	r5,r3,16
 800ac70:	213fffcc 	andi	r4,r4,65535
 800ac74:	a5000104 	addi	r20,r20,4
 800ac78:	2908b03a 	or	r4,r5,r4
 800ac7c:	b13fff15 	stw	r4,-4(r22)
 800ac80:	102ad43a 	srli	r21,r2,16
 800ac84:	182fd43a 	srai	r23,r3,16
 800ac88:	953fe32e 	bgeu	r18,r20,800ac18 <quorem+0x8c>
 800ac8c:	d8c00317 	ldw	r3,12(sp)
 800ac90:	18800017 	ldw	r2,0(r3)
 800ac94:	10000c1e 	bne	r2,zero,800acc8 <quorem+0x13c>
 800ac98:	d8800017 	ldw	r2,0(sp)
 800ac9c:	1d7fff04 	addi	r21,r3,-4
 800aca0:	15400436 	bltu	r2,r21,800acb4 <quorem+0x128>
 800aca4:	00000606 	br	800acc0 <quorem+0x134>
 800aca8:	d8800017 	ldw	r2,0(sp)
 800acac:	8c7fffc4 	addi	r17,r17,-1
 800acb0:	1540032e 	bgeu	r2,r21,800acc0 <quorem+0x134>
 800acb4:	a8800017 	ldw	r2,0(r21)
 800acb8:	ad7fff04 	addi	r21,r21,-4
 800acbc:	103ffa26 	beq	r2,zero,800aca8 <quorem+0x11c>
 800acc0:	d8800117 	ldw	r2,4(sp)
 800acc4:	14400415 	stw	r17,16(r2)
 800acc8:	d9400217 	ldw	r5,8(sp)
 800accc:	d9000117 	ldw	r4,4(sp)
 800acd0:	800ecfc0 	call	800ecfc <__mcmp>
 800acd4:	10002616 	blt	r2,zero,800ad70 <quorem+0x1e4>
 800acd8:	d9800017 	ldw	r6,0(sp)
 800acdc:	84000044 	addi	r16,r16,1
 800ace0:	0007883a 	mov	r3,zero
 800ace4:	e1000017 	ldw	r4,0(fp)
 800ace8:	31400017 	ldw	r5,0(r6)
 800acec:	31800104 	addi	r6,r6,4
 800acf0:	20bfffcc 	andi	r2,r4,65535
 800acf4:	1887c83a 	sub	r3,r3,r2
 800acf8:	28bfffcc 	andi	r2,r5,65535
 800acfc:	1885883a 	add	r2,r3,r2
 800ad00:	2008d43a 	srli	r4,r4,16
 800ad04:	2806d43a 	srli	r3,r5,16
 800ad08:	100fd43a 	srai	r7,r2,16
 800ad0c:	117fffcc 	andi	r5,r2,65535
 800ad10:	1907c83a 	sub	r3,r3,r4
 800ad14:	19c7883a 	add	r3,r3,r7
 800ad18:	1804943a 	slli	r2,r3,16
 800ad1c:	e7000104 	addi	fp,fp,4
 800ad20:	1807d43a 	srai	r3,r3,16
 800ad24:	1144b03a 	or	r2,r2,r5
 800ad28:	30bfff15 	stw	r2,-4(r6)
 800ad2c:	973fed2e 	bgeu	r18,fp,800ace4 <quorem+0x158>
 800ad30:	880490ba 	slli	r2,r17,2
 800ad34:	d9000017 	ldw	r4,0(sp)
 800ad38:	2085883a 	add	r2,r4,r2
 800ad3c:	10c00017 	ldw	r3,0(r2)
 800ad40:	18000b1e 	bne	r3,zero,800ad70 <quorem+0x1e4>
 800ad44:	10bfff04 	addi	r2,r2,-4
 800ad48:	20800436 	bltu	r4,r2,800ad5c <quorem+0x1d0>
 800ad4c:	00000606 	br	800ad68 <quorem+0x1dc>
 800ad50:	d8c00017 	ldw	r3,0(sp)
 800ad54:	8c7fffc4 	addi	r17,r17,-1
 800ad58:	1880032e 	bgeu	r3,r2,800ad68 <quorem+0x1dc>
 800ad5c:	10c00017 	ldw	r3,0(r2)
 800ad60:	10bfff04 	addi	r2,r2,-4
 800ad64:	183ffa26 	beq	r3,zero,800ad50 <quorem+0x1c4>
 800ad68:	d8800117 	ldw	r2,4(sp)
 800ad6c:	14400415 	stw	r17,16(r2)
 800ad70:	8005883a 	mov	r2,r16
 800ad74:	dfc00d17 	ldw	ra,52(sp)
 800ad78:	df000c17 	ldw	fp,48(sp)
 800ad7c:	ddc00b17 	ldw	r23,44(sp)
 800ad80:	dd800a17 	ldw	r22,40(sp)
 800ad84:	dd400917 	ldw	r21,36(sp)
 800ad88:	dd000817 	ldw	r20,32(sp)
 800ad8c:	dcc00717 	ldw	r19,28(sp)
 800ad90:	dc800617 	ldw	r18,24(sp)
 800ad94:	dc400517 	ldw	r17,20(sp)
 800ad98:	dc000417 	ldw	r16,16(sp)
 800ad9c:	dec00e04 	addi	sp,sp,56
 800ada0:	f800283a 	ret
 800ada4:	0005883a 	mov	r2,zero
 800ada8:	003ff206 	br	800ad74 <quorem+0x1e8>

0800adac <_dtoa_r>:
 800adac:	20801017 	ldw	r2,64(r4)
 800adb0:	deffe204 	addi	sp,sp,-120
 800adb4:	ddc01b15 	stw	r23,108(sp)
 800adb8:	dd001815 	stw	r20,96(sp)
 800adbc:	dc801615 	stw	r18,88(sp)
 800adc0:	dc401515 	stw	r17,84(sp)
 800adc4:	dc001415 	stw	r16,80(sp)
 800adc8:	dfc01d15 	stw	ra,116(sp)
 800adcc:	df001c15 	stw	fp,112(sp)
 800add0:	dd801a15 	stw	r22,104(sp)
 800add4:	dd401915 	stw	r21,100(sp)
 800add8:	dcc01715 	stw	r19,92(sp)
 800addc:	d9c00115 	stw	r7,4(sp)
 800ade0:	dc002017 	ldw	r16,128(sp)
 800ade4:	202f883a 	mov	r23,r4
 800ade8:	3025883a 	mov	r18,r6
 800adec:	2829883a 	mov	r20,r5
 800adf0:	3023883a 	mov	r17,r6
 800adf4:	10000826 	beq	r2,zero,800ae18 <_dtoa_r+0x6c>
 800adf8:	21801117 	ldw	r6,68(r4)
 800adfc:	00c00044 	movi	r3,1
 800ae00:	100b883a 	mov	r5,r2
 800ae04:	1986983a 	sll	r3,r3,r6
 800ae08:	11800115 	stw	r6,4(r2)
 800ae0c:	10c00215 	stw	r3,8(r2)
 800ae10:	800e3900 	call	800e390 <_Bfree>
 800ae14:	b8001015 	stw	zero,64(r23)
 800ae18:	90018616 	blt	r18,zero,800b434 <_dtoa_r+0x688>
 800ae1c:	80000015 	stw	zero,0(r16)
 800ae20:	909ffc2c 	andhi	r2,r18,32752
 800ae24:	00dffc34 	movhi	r3,32752
 800ae28:	10c18b26 	beq	r2,r3,800b458 <_dtoa_r+0x6ac>
 800ae2c:	000d883a 	mov	r6,zero
 800ae30:	000f883a 	mov	r7,zero
 800ae34:	a009883a 	mov	r4,r20
 800ae38:	880b883a 	mov	r5,r17
 800ae3c:	800703c0 	call	800703c <__eqdf2>
 800ae40:	1000181e 	bne	r2,zero,800aea4 <_dtoa_r+0xf8>
 800ae44:	d8c01f17 	ldw	r3,124(sp)
 800ae48:	00800044 	movi	r2,1
 800ae4c:	18800015 	stw	r2,0(r3)
 800ae50:	d8802117 	ldw	r2,132(sp)
 800ae54:	10030b26 	beq	r2,zero,800ba84 <_dtoa_r+0xcd8>
 800ae58:	d8c02117 	ldw	r3,132(sp)
 800ae5c:	00820074 	movhi	r2,2049
 800ae60:	109f6444 	addi	r2,r2,32145
 800ae64:	07020074 	movhi	fp,2049
 800ae68:	18800015 	stw	r2,0(r3)
 800ae6c:	e71f6404 	addi	fp,fp,32144
 800ae70:	e005883a 	mov	r2,fp
 800ae74:	dfc01d17 	ldw	ra,116(sp)
 800ae78:	df001c17 	ldw	fp,112(sp)
 800ae7c:	ddc01b17 	ldw	r23,108(sp)
 800ae80:	dd801a17 	ldw	r22,104(sp)
 800ae84:	dd401917 	ldw	r21,100(sp)
 800ae88:	dd001817 	ldw	r20,96(sp)
 800ae8c:	dcc01717 	ldw	r19,92(sp)
 800ae90:	dc801617 	ldw	r18,88(sp)
 800ae94:	dc401517 	ldw	r17,84(sp)
 800ae98:	dc001417 	ldw	r16,80(sp)
 800ae9c:	dec01e04 	addi	sp,sp,120
 800aea0:	f800283a 	ret
 800aea4:	d8801204 	addi	r2,sp,72
 800aea8:	9020d53a 	srli	r16,r18,20
 800aeac:	d8800015 	stw	r2,0(sp)
 800aeb0:	d9c01304 	addi	r7,sp,76
 800aeb4:	a00b883a 	mov	r5,r20
 800aeb8:	880d883a 	mov	r6,r17
 800aebc:	b809883a 	mov	r4,r23
 800aec0:	800f0e00 	call	800f0e0 <__d2b>
 800aec4:	102d883a 	mov	r22,r2
 800aec8:	8001741e 	bne	r16,zero,800b49c <_dtoa_r+0x6f0>
 800aecc:	df001217 	ldw	fp,72(sp)
 800aed0:	dc001317 	ldw	r16,76(sp)
 800aed4:	e421883a 	add	r16,fp,r16
 800aed8:	80810c84 	addi	r2,r16,1074
 800aedc:	10c00850 	cmplti	r3,r2,33
 800aee0:	1802f81e 	bne	r3,zero,800bac4 <_dtoa_r+0xd18>
 800aee4:	01001004 	movi	r4,64
 800aee8:	2085c83a 	sub	r2,r4,r2
 800aeec:	81010484 	addi	r4,r16,1042
 800aef0:	90a4983a 	sll	r18,r18,r2
 800aef4:	a108d83a 	srl	r4,r20,r4
 800aef8:	9108b03a 	or	r4,r18,r4
 800aefc:	80084880 	call	8008488 <__floatunsidf>
 800af00:	1009883a 	mov	r4,r2
 800af04:	017f8434 	movhi	r5,65040
 800af08:	00800044 	movi	r2,1
 800af0c:	194b883a 	add	r5,r3,r5
 800af10:	843fffc4 	addi	r16,r16,-1
 800af14:	d8800915 	stw	r2,36(sp)
 800af18:	000d883a 	mov	r6,zero
 800af1c:	01cffe34 	movhi	r7,16376
 800af20:	8007a440 	call	8007a44 <__subdf3>
 800af24:	0198dbf4 	movhi	r6,25455
 800af28:	01cff4f4 	movhi	r7,16339
 800af2c:	3190d844 	addi	r6,r6,17249
 800af30:	39e1e9c4 	addi	r7,r7,-30809
 800af34:	1009883a 	mov	r4,r2
 800af38:	180b883a 	mov	r5,r3
 800af3c:	800729c0 	call	800729c <__muldf3>
 800af40:	01a2d874 	movhi	r6,35681
 800af44:	01cff1f4 	movhi	r7,16327
 800af48:	31b22cc4 	addi	r6,r6,-14157
 800af4c:	39e28a04 	addi	r7,r7,-30168
 800af50:	180b883a 	mov	r5,r3
 800af54:	1009883a 	mov	r4,r2
 800af58:	8005d900 	call	8005d90 <__adddf3>
 800af5c:	8009883a 	mov	r4,r16
 800af60:	1027883a 	mov	r19,r2
 800af64:	1825883a 	mov	r18,r3
 800af68:	80083cc0 	call	80083cc <__floatsidf>
 800af6c:	019427f4 	movhi	r6,20639
 800af70:	01cff4f4 	movhi	r7,16339
 800af74:	319e7ec4 	addi	r6,r6,31227
 800af78:	39d104c4 	addi	r7,r7,17427
 800af7c:	1009883a 	mov	r4,r2
 800af80:	180b883a 	mov	r5,r3
 800af84:	800729c0 	call	800729c <__muldf3>
 800af88:	100d883a 	mov	r6,r2
 800af8c:	180f883a 	mov	r7,r3
 800af90:	9809883a 	mov	r4,r19
 800af94:	900b883a 	mov	r5,r18
 800af98:	8005d900 	call	8005d90 <__adddf3>
 800af9c:	1009883a 	mov	r4,r2
 800afa0:	180b883a 	mov	r5,r3
 800afa4:	1025883a 	mov	r18,r2
 800afa8:	182b883a 	mov	r21,r3
 800afac:	80085e00 	call	80085e0 <__fixdfsi>
 800afb0:	000d883a 	mov	r6,zero
 800afb4:	000f883a 	mov	r7,zero
 800afb8:	9009883a 	mov	r4,r18
 800afbc:	a80b883a 	mov	r5,r21
 800afc0:	1027883a 	mov	r19,r2
 800afc4:	80071ac0 	call	80071ac <__ledf2>
 800afc8:	1002a416 	blt	r2,zero,800ba5c <_dtoa_r+0xcb0>
 800afcc:	e439c83a 	sub	fp,fp,r16
 800afd0:	e0ffffc4 	addi	r3,fp,-1
 800afd4:	988005e8 	cmpgeui	r2,r19,23
 800afd8:	d8c00215 	stw	r3,8(sp)
 800afdc:	1002961e 	bne	r2,zero,800ba38 <_dtoa_r+0xc8c>
 800afe0:	980690fa 	slli	r3,r19,3
 800afe4:	00820074 	movhi	r2,2049
 800afe8:	109fad04 	addi	r2,r2,32436
 800afec:	10c5883a 	add	r2,r2,r3
 800aff0:	11800017 	ldw	r6,0(r2)
 800aff4:	11c00117 	ldw	r7,4(r2)
 800aff8:	a009883a 	mov	r4,r20
 800affc:	880b883a 	mov	r5,r17
 800b000:	80071ac0 	call	80071ac <__ledf2>
 800b004:	1002670e 	bge	r2,zero,800b9a4 <_dtoa_r+0xbf8>
 800b008:	d8000815 	stw	zero,32(sp)
 800b00c:	e0bfffc4 	addi	r2,fp,-1
 800b010:	9cffffc4 	addi	r19,r19,-1
 800b014:	10028c16 	blt	r2,zero,800ba48 <_dtoa_r+0xc9c>
 800b018:	d8000515 	stw	zero,20(sp)
 800b01c:	9802650e 	bge	r19,zero,800b9b4 <_dtoa_r+0xc08>
 800b020:	d8800517 	ldw	r2,20(sp)
 800b024:	d8c00117 	ldw	r3,4(sp)
 800b028:	dcc00315 	stw	r19,12(sp)
 800b02c:	14c5c83a 	sub	r2,r2,r19
 800b030:	d8800515 	stw	r2,20(sp)
 800b034:	04c5c83a 	sub	r2,zero,r19
 800b038:	d8800715 	stw	r2,28(sp)
 800b03c:	188002a8 	cmpgeui	r2,r3,10
 800b040:	0027883a 	mov	r19,zero
 800b044:	1002631e 	bne	r2,zero,800b9d4 <_dtoa_r+0xc28>
 800b048:	18800190 	cmplti	r2,r3,6
 800b04c:	1002a11e 	bne	r2,zero,800bad4 <_dtoa_r+0xd28>
 800b050:	18bfff04 	addi	r2,r3,-4
 800b054:	d8800115 	stw	r2,4(sp)
 800b058:	0021883a 	mov	r16,zero
 800b05c:	d8c00117 	ldw	r3,4(sp)
 800b060:	18800120 	cmpeqi	r2,r3,4
 800b064:	1003721e 	bne	r2,zero,800be30 <_dtoa_r+0x1084>
 800b068:	18800160 	cmpeqi	r2,r3,5
 800b06c:	10032f1e 	bne	r2,zero,800bd2c <_dtoa_r+0xf80>
 800b070:	188000a0 	cmpeqi	r2,r3,2
 800b074:	10026326 	beq	r2,zero,800ba04 <_dtoa_r+0xc58>
 800b078:	d8000615 	stw	zero,24(sp)
 800b07c:	d8801e17 	ldw	r2,120(sp)
 800b080:	00833c0e 	bge	zero,r2,800bd74 <_dtoa_r+0xfc8>
 800b084:	d8800b15 	stw	r2,44(sp)
 800b088:	d8800415 	stw	r2,16(sp)
 800b08c:	100d883a 	mov	r6,r2
 800b090:	b8001115 	stw	zero,68(r23)
 800b094:	30800610 	cmplti	r2,r6,24
 800b098:	1005161e 	bne	r2,zero,800c4f4 <_dtoa_r+0x1748>
 800b09c:	00c00044 	movi	r3,1
 800b0a0:	00800104 	movi	r2,4
 800b0a4:	1085883a 	add	r2,r2,r2
 800b0a8:	11000504 	addi	r4,r2,20
 800b0ac:	180b883a 	mov	r5,r3
 800b0b0:	18c00044 	addi	r3,r3,1
 800b0b4:	313ffb2e 	bgeu	r6,r4,800b0a4 <_dtoa_r+0x2f8>
 800b0b8:	b9401115 	stw	r5,68(r23)
 800b0bc:	b809883a 	mov	r4,r23
 800b0c0:	800e2ec0 	call	800e2ec <_Balloc>
 800b0c4:	1039883a 	mov	fp,r2
 800b0c8:	1004f526 	beq	r2,zero,800c4a0 <_dtoa_r+0x16f4>
 800b0cc:	b8801015 	stw	r2,64(r23)
 800b0d0:	d8800417 	ldw	r2,16(sp)
 800b0d4:	108003e8 	cmpgeui	r2,r2,15
 800b0d8:	10010b1e 	bne	r2,zero,800b508 <_dtoa_r+0x75c>
 800b0dc:	80010a26 	beq	r16,zero,800b508 <_dtoa_r+0x75c>
 800b0e0:	d9000317 	ldw	r4,12(sp)
 800b0e4:	0103a30e 	bge	zero,r4,800bf74 <_dtoa_r+0x11c8>
 800b0e8:	208003cc 	andi	r2,r4,15
 800b0ec:	100690fa 	slli	r3,r2,3
 800b0f0:	202bd13a 	srai	r21,r4,4
 800b0f4:	00820074 	movhi	r2,2049
 800b0f8:	109fad04 	addi	r2,r2,32436
 800b0fc:	10c5883a 	add	r2,r2,r3
 800b100:	a8c0040c 	andi	r3,r21,16
 800b104:	12800017 	ldw	r10,0(r2)
 800b108:	12400117 	ldw	r9,4(r2)
 800b10c:	18034226 	beq	r3,zero,800be18 <_dtoa_r+0x106c>
 800b110:	00820074 	movhi	r2,2049
 800b114:	109fa304 	addi	r2,r2,32396
 800b118:	11800817 	ldw	r6,32(r2)
 800b11c:	11c00917 	ldw	r7,36(r2)
 800b120:	a009883a 	mov	r4,r20
 800b124:	880b883a 	mov	r5,r17
 800b128:	da400e15 	stw	r9,56(sp)
 800b12c:	da800d15 	stw	r10,52(sp)
 800b130:	80067080 	call	8006708 <__divdf3>
 800b134:	da800d17 	ldw	r10,52(sp)
 800b138:	da400e17 	ldw	r9,56(sp)
 800b13c:	ad4003cc 	andi	r21,r21,15
 800b140:	d8800a15 	stw	r2,40(sp)
 800b144:	d8c00c15 	stw	r3,48(sp)
 800b148:	040000c4 	movi	r16,3
 800b14c:	a8001126 	beq	r21,zero,800b194 <_dtoa_r+0x3e8>
 800b150:	04820074 	movhi	r18,2049
 800b154:	949fa304 	addi	r18,r18,32396
 800b158:	5009883a 	mov	r4,r10
 800b15c:	480b883a 	mov	r5,r9
 800b160:	a980004c 	andi	r6,r21,1
 800b164:	30000626 	beq	r6,zero,800b180 <_dtoa_r+0x3d4>
 800b168:	91800017 	ldw	r6,0(r18)
 800b16c:	91c00117 	ldw	r7,4(r18)
 800b170:	84000044 	addi	r16,r16,1
 800b174:	800729c0 	call	800729c <__muldf3>
 800b178:	1009883a 	mov	r4,r2
 800b17c:	180b883a 	mov	r5,r3
 800b180:	a82bd07a 	srai	r21,r21,1
 800b184:	94800204 	addi	r18,r18,8
 800b188:	a83ff51e 	bne	r21,zero,800b160 <_dtoa_r+0x3b4>
 800b18c:	2015883a 	mov	r10,r4
 800b190:	2813883a 	mov	r9,r5
 800b194:	d9000a17 	ldw	r4,40(sp)
 800b198:	d9400c17 	ldw	r5,48(sp)
 800b19c:	500d883a 	mov	r6,r10
 800b1a0:	480f883a 	mov	r7,r9
 800b1a4:	80067080 	call	8006708 <__divdf3>
 800b1a8:	1025883a 	mov	r18,r2
 800b1ac:	d8c00a15 	stw	r3,40(sp)
 800b1b0:	d8800817 	ldw	r2,32(sp)
 800b1b4:	10000726 	beq	r2,zero,800b1d4 <_dtoa_r+0x428>
 800b1b8:	dd400a17 	ldw	r21,40(sp)
 800b1bc:	000d883a 	mov	r6,zero
 800b1c0:	01cffc34 	movhi	r7,16368
 800b1c4:	9009883a 	mov	r4,r18
 800b1c8:	a80b883a 	mov	r5,r21
 800b1cc:	80071ac0 	call	80071ac <__ledf2>
 800b1d0:	10045516 	blt	r2,zero,800c328 <_dtoa_r+0x157c>
 800b1d4:	8009883a 	mov	r4,r16
 800b1d8:	80083cc0 	call	80083cc <__floatsidf>
 800b1dc:	d9c00a17 	ldw	r7,40(sp)
 800b1e0:	900d883a 	mov	r6,r18
 800b1e4:	1009883a 	mov	r4,r2
 800b1e8:	180b883a 	mov	r5,r3
 800b1ec:	800729c0 	call	800729c <__muldf3>
 800b1f0:	000d883a 	mov	r6,zero
 800b1f4:	01d00734 	movhi	r7,16412
 800b1f8:	1009883a 	mov	r4,r2
 800b1fc:	180b883a 	mov	r5,r3
 800b200:	8005d900 	call	8005d90 <__adddf3>
 800b204:	d8800c15 	stw	r2,48(sp)
 800b208:	00bf3034 	movhi	r2,64704
 800b20c:	1885883a 	add	r2,r3,r2
 800b210:	d8800d15 	stw	r2,52(sp)
 800b214:	d8800417 	ldw	r2,16(sp)
 800b218:	10033926 	beq	r2,zero,800bf00 <_dtoa_r+0x1154>
 800b21c:	d8800317 	ldw	r2,12(sp)
 800b220:	d8801115 	stw	r2,68(sp)
 800b224:	d8800417 	ldw	r2,16(sp)
 800b228:	d8800e15 	stw	r2,56(sp)
 800b22c:	dc000a17 	ldw	r16,40(sp)
 800b230:	9009883a 	mov	r4,r18
 800b234:	800b883a 	mov	r5,r16
 800b238:	80085e00 	call	80085e0 <__fixdfsi>
 800b23c:	d8c00e17 	ldw	r3,56(sp)
 800b240:	d8801015 	stw	r2,64(sp)
 800b244:	18ffffc4 	addi	r3,r3,-1
 800b248:	180890fa 	slli	r4,r3,3
 800b24c:	00c20074 	movhi	r3,2049
 800b250:	18dfad04 	addi	r3,r3,32436
 800b254:	1907883a 	add	r3,r3,r4
 800b258:	1b000017 	ldw	r12,0(r3)
 800b25c:	1b400117 	ldw	r13,4(r3)
 800b260:	1009883a 	mov	r4,r2
 800b264:	db000f15 	stw	r12,60(sp)
 800b268:	db400a15 	stw	r13,40(sp)
 800b26c:	80083cc0 	call	80083cc <__floatsidf>
 800b270:	9009883a 	mov	r4,r18
 800b274:	800b883a 	mov	r5,r16
 800b278:	100d883a 	mov	r6,r2
 800b27c:	180f883a 	mov	r7,r3
 800b280:	8007a440 	call	8007a44 <__subdf3>
 800b284:	dac01017 	ldw	r11,64(sp)
 800b288:	102b883a 	mov	r21,r2
 800b28c:	d8800617 	ldw	r2,24(sp)
 800b290:	db400a17 	ldw	r13,40(sp)
 800b294:	db000f17 	ldw	r12,60(sp)
 800b298:	e4000044 	addi	r16,fp,1
 800b29c:	1825883a 	mov	r18,r3
 800b2a0:	5ac00c04 	addi	r11,r11,48
 800b2a4:	1003c626 	beq	r2,zero,800c1c0 <_dtoa_r+0x1414>
 800b2a8:	600d883a 	mov	r6,r12
 800b2ac:	680f883a 	mov	r7,r13
 800b2b0:	0009883a 	mov	r4,zero
 800b2b4:	014ff834 	movhi	r5,16352
 800b2b8:	dac00f15 	stw	r11,60(sp)
 800b2bc:	80067080 	call	8006708 <__divdf3>
 800b2c0:	d9800c17 	ldw	r6,48(sp)
 800b2c4:	d9c00d17 	ldw	r7,52(sp)
 800b2c8:	1009883a 	mov	r4,r2
 800b2cc:	180b883a 	mov	r5,r3
 800b2d0:	8007a440 	call	8007a44 <__subdf3>
 800b2d4:	dac00f17 	ldw	r11,60(sp)
 800b2d8:	a80d883a 	mov	r6,r21
 800b2dc:	900f883a 	mov	r7,r18
 800b2e0:	e2c00005 	stb	r11,0(fp)
 800b2e4:	1009883a 	mov	r4,r2
 800b2e8:	180b883a 	mov	r5,r3
 800b2ec:	d8800a15 	stw	r2,40(sp)
 800b2f0:	d8c00c15 	stw	r3,48(sp)
 800b2f4:	80070bc0 	call	80070bc <__gedf2>
 800b2f8:	00844116 	blt	zero,r2,800c400 <_dtoa_r+0x1654>
 800b2fc:	0005883a 	mov	r2,zero
 800b300:	dcc00f15 	stw	r19,60(sp)
 800b304:	dd800d15 	stw	r22,52(sp)
 800b308:	dcc00c17 	ldw	r19,48(sp)
 800b30c:	dd800e17 	ldw	r22,56(sp)
 800b310:	dc400c15 	stw	r17,48(sp)
 800b314:	ddc00e15 	stw	r23,56(sp)
 800b318:	dc400a17 	ldw	r17,40(sp)
 800b31c:	dd000a15 	stw	r20,40(sp)
 800b320:	1029883a 	mov	r20,r2
 800b324:	00002606 	br	800b3c0 <_dtoa_r+0x614>
 800b328:	a5000044 	addi	r20,r20,1
 800b32c:	a5843d0e 	bge	r20,r22,800c424 <_dtoa_r+0x1678>
 800b330:	8809883a 	mov	r4,r17
 800b334:	980b883a 	mov	r5,r19
 800b338:	000d883a 	mov	r6,zero
 800b33c:	01d00934 	movhi	r7,16420
 800b340:	800729c0 	call	800729c <__muldf3>
 800b344:	000d883a 	mov	r6,zero
 800b348:	01d00934 	movhi	r7,16420
 800b34c:	a809883a 	mov	r4,r21
 800b350:	900b883a 	mov	r5,r18
 800b354:	1023883a 	mov	r17,r2
 800b358:	1827883a 	mov	r19,r3
 800b35c:	800729c0 	call	800729c <__muldf3>
 800b360:	180b883a 	mov	r5,r3
 800b364:	1009883a 	mov	r4,r2
 800b368:	1825883a 	mov	r18,r3
 800b36c:	102b883a 	mov	r21,r2
 800b370:	80085e00 	call	80085e0 <__fixdfsi>
 800b374:	1009883a 	mov	r4,r2
 800b378:	102f883a 	mov	r23,r2
 800b37c:	80083cc0 	call	80083cc <__floatsidf>
 800b380:	a809883a 	mov	r4,r21
 800b384:	900b883a 	mov	r5,r18
 800b388:	100d883a 	mov	r6,r2
 800b38c:	180f883a 	mov	r7,r3
 800b390:	8007a440 	call	8007a44 <__subdf3>
 800b394:	84000044 	addi	r16,r16,1
 800b398:	ba000c04 	addi	r8,r23,48
 800b39c:	823fffc5 	stb	r8,-1(r16)
 800b3a0:	880d883a 	mov	r6,r17
 800b3a4:	980f883a 	mov	r7,r19
 800b3a8:	1009883a 	mov	r4,r2
 800b3ac:	180b883a 	mov	r5,r3
 800b3b0:	102b883a 	mov	r21,r2
 800b3b4:	1825883a 	mov	r18,r3
 800b3b8:	80071ac0 	call	80071ac <__ledf2>
 800b3bc:	10040e16 	blt	r2,zero,800c3f8 <_dtoa_r+0x164c>
 800b3c0:	a80d883a 	mov	r6,r21
 800b3c4:	900f883a 	mov	r7,r18
 800b3c8:	0009883a 	mov	r4,zero
 800b3cc:	014ffc34 	movhi	r5,16368
 800b3d0:	8007a440 	call	8007a44 <__subdf3>
 800b3d4:	880d883a 	mov	r6,r17
 800b3d8:	980f883a 	mov	r7,r19
 800b3dc:	1009883a 	mov	r4,r2
 800b3e0:	180b883a 	mov	r5,r3
 800b3e4:	80071ac0 	call	80071ac <__ledf2>
 800b3e8:	103fcf0e 	bge	r2,zero,800b328 <_dtoa_r+0x57c>
 800b3ec:	dd800d17 	ldw	r22,52(sp)
 800b3f0:	ddc00e17 	ldw	r23,56(sp)
 800b3f4:	d8801117 	ldw	r2,68(sp)
 800b3f8:	10800044 	addi	r2,r2,1
 800b3fc:	d8800315 	stw	r2,12(sp)
 800b400:	00000106 	br	800b408 <_dtoa_r+0x65c>
 800b404:	e403ee26 	beq	fp,r16,800c3c0 <_dtoa_r+0x1614>
 800b408:	80ffffc3 	ldbu	r3,-1(r16)
 800b40c:	8025883a 	mov	r18,r16
 800b410:	843fffc4 	addi	r16,r16,-1
 800b414:	18803fcc 	andi	r2,r3,255
 800b418:	1080201c 	xori	r2,r2,128
 800b41c:	10bfe004 	addi	r2,r2,-128
 800b420:	10800e60 	cmpeqi	r2,r2,57
 800b424:	103ff71e 	bne	r2,zero,800b404 <_dtoa_r+0x658>
 800b428:	18c00044 	addi	r3,r3,1
 800b42c:	80c00005 	stb	r3,0(r16)
 800b430:	00015106 	br	800b978 <_dtoa_r+0xbcc>
 800b434:	04600034 	movhi	r17,32768
 800b438:	8c7fffc4 	addi	r17,r17,-1
 800b43c:	9462703a 	and	r17,r18,r17
 800b440:	00800044 	movi	r2,1
 800b444:	8825883a 	mov	r18,r17
 800b448:	80800015 	stw	r2,0(r16)
 800b44c:	00dffc34 	movhi	r3,32752
 800b450:	909ffc2c 	andhi	r2,r18,32752
 800b454:	10fe751e 	bne	r2,r3,800ae2c <_dtoa_r+0x80>
 800b458:	d8c01f17 	ldw	r3,124(sp)
 800b45c:	00800434 	movhi	r2,16
 800b460:	10bfffc4 	addi	r2,r2,-1
 800b464:	90a4703a 	and	r18,r18,r2
 800b468:	0089c3c4 	movi	r2,9999
 800b46c:	18800015 	stw	r2,0(r3)
 800b470:	9528b03a 	or	r20,r18,r20
 800b474:	a000121e 	bne	r20,zero,800b4c0 <_dtoa_r+0x714>
 800b478:	d8802117 	ldw	r2,132(sp)
 800b47c:	07020074 	movhi	fp,2049
 800b480:	10041526 	beq	r2,zero,800c4d8 <_dtoa_r+0x172c>
 800b484:	00820074 	movhi	r2,2049
 800b488:	e71f6e04 	addi	fp,fp,32184
 800b48c:	109f7004 	addi	r2,r2,32192
 800b490:	d8c02117 	ldw	r3,132(sp)
 800b494:	18800015 	stw	r2,0(r3)
 800b498:	003e7506 	br	800ae70 <_dtoa_r+0xc4>
 800b49c:	01400434 	movhi	r5,16
 800b4a0:	297fffc4 	addi	r5,r5,-1
 800b4a4:	894a703a 	and	r5,r17,r5
 800b4a8:	df001217 	ldw	fp,72(sp)
 800b4ac:	a009883a 	mov	r4,r20
 800b4b0:	294ffc34 	orhi	r5,r5,16368
 800b4b4:	843f0044 	addi	r16,r16,-1023
 800b4b8:	d8000915 	stw	zero,36(sp)
 800b4bc:	003e9606 	br	800af18 <_dtoa_r+0x16c>
 800b4c0:	d8802117 	ldw	r2,132(sp)
 800b4c4:	07020074 	movhi	fp,2049
 800b4c8:	1002141e 	bne	r2,zero,800bd1c <_dtoa_r+0xf70>
 800b4cc:	e71f6d04 	addi	fp,fp,32180
 800b4d0:	003e6706 	br	800ae70 <_dtoa_r+0xc4>
 800b4d4:	b8001115 	stw	zero,68(r23)
 800b4d8:	000b883a 	mov	r5,zero
 800b4dc:	b809883a 	mov	r4,r23
 800b4e0:	800e2ec0 	call	800e2ec <_Balloc>
 800b4e4:	1039883a 	mov	fp,r2
 800b4e8:	1003ed26 	beq	r2,zero,800c4a0 <_dtoa_r+0x16f4>
 800b4ec:	b8801015 	stw	r2,64(r23)
 800b4f0:	00bfffc4 	movi	r2,-1
 800b4f4:	d8800415 	stw	r2,16(sp)
 800b4f8:	d8800b15 	stw	r2,44(sp)
 800b4fc:	00800044 	movi	r2,1
 800b500:	d8001e15 	stw	zero,120(sp)
 800b504:	d8800615 	stw	r2,24(sp)
 800b508:	d8801317 	ldw	r2,76(sp)
 800b50c:	10007216 	blt	r2,zero,800b6d8 <_dtoa_r+0x92c>
 800b510:	d9000317 	ldw	r4,12(sp)
 800b514:	20c003c8 	cmpgei	r3,r4,15
 800b518:	18006f1e 	bne	r3,zero,800b6d8 <_dtoa_r+0x92c>
 800b51c:	200690fa 	slli	r3,r4,3
 800b520:	00820074 	movhi	r2,2049
 800b524:	109fad04 	addi	r2,r2,32436
 800b528:	10c5883a 	add	r2,r2,r3
 800b52c:	10c00017 	ldw	r3,0(r2)
 800b530:	14800117 	ldw	r18,4(r2)
 800b534:	d8801e17 	ldw	r2,120(sp)
 800b538:	d8c00115 	stw	r3,4(sp)
 800b53c:	1000150e 	bge	r2,zero,800b594 <_dtoa_r+0x7e8>
 800b540:	d8800417 	ldw	r2,16(sp)
 800b544:	00801316 	blt	zero,r2,800b594 <_dtoa_r+0x7e8>
 800b548:	d8800417 	ldw	r2,16(sp)
 800b54c:	1002801e 	bne	r2,zero,800bf50 <_dtoa_r+0x11a4>
 800b550:	d9000117 	ldw	r4,4(sp)
 800b554:	000d883a 	mov	r6,zero
 800b558:	01d00534 	movhi	r7,16404
 800b55c:	900b883a 	mov	r5,r18
 800b560:	800729c0 	call	800729c <__muldf3>
 800b564:	100d883a 	mov	r6,r2
 800b568:	180f883a 	mov	r7,r3
 800b56c:	a009883a 	mov	r4,r20
 800b570:	880b883a 	mov	r5,r17
 800b574:	80071ac0 	call	80071ac <__ledf2>
 800b578:	002b883a 	mov	r21,zero
 800b57c:	0021883a 	mov	r16,zero
 800b580:	00820f16 	blt	zero,r2,800bdc0 <_dtoa_r+0x1014>
 800b584:	d8801e17 	ldw	r2,120(sp)
 800b588:	e025883a 	mov	r18,fp
 800b58c:	00a2303a 	nor	r17,zero,r2
 800b590:	00021006 	br	800bdd4 <_dtoa_r+0x1028>
 800b594:	dd400117 	ldw	r21,4(sp)
 800b598:	900f883a 	mov	r7,r18
 800b59c:	a009883a 	mov	r4,r20
 800b5a0:	a80d883a 	mov	r6,r21
 800b5a4:	880b883a 	mov	r5,r17
 800b5a8:	80067080 	call	8006708 <__divdf3>
 800b5ac:	180b883a 	mov	r5,r3
 800b5b0:	1009883a 	mov	r4,r2
 800b5b4:	80085e00 	call	80085e0 <__fixdfsi>
 800b5b8:	1009883a 	mov	r4,r2
 800b5bc:	1027883a 	mov	r19,r2
 800b5c0:	80083cc0 	call	80083cc <__floatsidf>
 800b5c4:	a80d883a 	mov	r6,r21
 800b5c8:	900f883a 	mov	r7,r18
 800b5cc:	1009883a 	mov	r4,r2
 800b5d0:	180b883a 	mov	r5,r3
 800b5d4:	800729c0 	call	800729c <__muldf3>
 800b5d8:	100d883a 	mov	r6,r2
 800b5dc:	a009883a 	mov	r4,r20
 800b5e0:	880b883a 	mov	r5,r17
 800b5e4:	180f883a 	mov	r7,r3
 800b5e8:	8007a440 	call	8007a44 <__subdf3>
 800b5ec:	d9800417 	ldw	r6,16(sp)
 800b5f0:	1009883a 	mov	r4,r2
 800b5f4:	98800c04 	addi	r2,r19,48
 800b5f8:	e0800005 	stb	r2,0(fp)
 800b5fc:	30800060 	cmpeqi	r2,r6,1
 800b600:	180b883a 	mov	r5,r3
 800b604:	e4000044 	addi	r16,fp,1
 800b608:	1002a91e 	bne	r2,zero,800c0b0 <_dtoa_r+0x1304>
 800b60c:	04400044 	movi	r17,1
 800b610:	3027883a 	mov	r19,r6
 800b614:	dd800215 	stw	r22,8(sp)
 800b618:	ddc00415 	stw	r23,16(sp)
 800b61c:	00001c06 	br	800b690 <_dtoa_r+0x8e4>
 800b620:	a80d883a 	mov	r6,r21
 800b624:	900f883a 	mov	r7,r18
 800b628:	b809883a 	mov	r4,r23
 800b62c:	a00b883a 	mov	r5,r20
 800b630:	80067080 	call	8006708 <__divdf3>
 800b634:	180b883a 	mov	r5,r3
 800b638:	1009883a 	mov	r4,r2
 800b63c:	80085e00 	call	80085e0 <__fixdfsi>
 800b640:	1009883a 	mov	r4,r2
 800b644:	102d883a 	mov	r22,r2
 800b648:	80083cc0 	call	80083cc <__floatsidf>
 800b64c:	a80d883a 	mov	r6,r21
 800b650:	900f883a 	mov	r7,r18
 800b654:	1009883a 	mov	r4,r2
 800b658:	180b883a 	mov	r5,r3
 800b65c:	800729c0 	call	800729c <__muldf3>
 800b660:	b809883a 	mov	r4,r23
 800b664:	a00b883a 	mov	r5,r20
 800b668:	100d883a 	mov	r6,r2
 800b66c:	180f883a 	mov	r7,r3
 800b670:	8007a440 	call	8007a44 <__subdf3>
 800b674:	b1000c04 	addi	r4,r22,48
 800b678:	81000005 	stb	r4,0(r16)
 800b67c:	8c400044 	addi	r17,r17,1
 800b680:	84000044 	addi	r16,r16,1
 800b684:	1009883a 	mov	r4,r2
 800b688:	180b883a 	mov	r5,r3
 800b68c:	9c428526 	beq	r19,r17,800c0a4 <_dtoa_r+0x12f8>
 800b690:	000d883a 	mov	r6,zero
 800b694:	01d00934 	movhi	r7,16420
 800b698:	800729c0 	call	800729c <__muldf3>
 800b69c:	000d883a 	mov	r6,zero
 800b6a0:	000f883a 	mov	r7,zero
 800b6a4:	1009883a 	mov	r4,r2
 800b6a8:	180b883a 	mov	r5,r3
 800b6ac:	102f883a 	mov	r23,r2
 800b6b0:	1829883a 	mov	r20,r3
 800b6b4:	800703c0 	call	800703c <__eqdf2>
 800b6b8:	103fd91e 	bne	r2,zero,800b620 <_dtoa_r+0x874>
 800b6bc:	d8800317 	ldw	r2,12(sp)
 800b6c0:	dd800217 	ldw	r22,8(sp)
 800b6c4:	ddc00417 	ldw	r23,16(sp)
 800b6c8:	10800044 	addi	r2,r2,1
 800b6cc:	d8800315 	stw	r2,12(sp)
 800b6d0:	8025883a 	mov	r18,r16
 800b6d4:	0000a806 	br	800b978 <_dtoa_r+0xbcc>
 800b6d8:	d8c00617 	ldw	r3,24(sp)
 800b6dc:	1800ec26 	beq	r3,zero,800ba90 <_dtoa_r+0xce4>
 800b6e0:	d8c00117 	ldw	r3,4(sp)
 800b6e4:	18c00088 	cmpgei	r3,r3,2
 800b6e8:	1801e926 	beq	r3,zero,800be90 <_dtoa_r+0x10e4>
 800b6ec:	d8800417 	ldw	r2,16(sp)
 800b6f0:	157fffc4 	addi	r21,r2,-1
 800b6f4:	d8800717 	ldw	r2,28(sp)
 800b6f8:	1541c50e 	bge	r2,r21,800be10 <_dtoa_r+0x1064>
 800b6fc:	d8800717 	ldw	r2,28(sp)
 800b700:	dd400715 	stw	r21,28(sp)
 800b704:	a885c83a 	sub	r2,r21,r2
 800b708:	98a7883a 	add	r19,r19,r2
 800b70c:	002b883a 	mov	r21,zero
 800b710:	d8800417 	ldw	r2,16(sp)
 800b714:	10029516 	blt	r2,zero,800c16c <_dtoa_r+0x13c0>
 800b718:	d8c00517 	ldw	r3,20(sp)
 800b71c:	d9000217 	ldw	r4,8(sp)
 800b720:	1825883a 	mov	r18,r3
 800b724:	2089883a 	add	r4,r4,r2
 800b728:	10c5883a 	add	r2,r2,r3
 800b72c:	d9000215 	stw	r4,8(sp)
 800b730:	d8800515 	stw	r2,20(sp)
 800b734:	01400044 	movi	r5,1
 800b738:	b809883a 	mov	r4,r23
 800b73c:	800e75c0 	call	800e75c <__i2b>
 800b740:	1021883a 	mov	r16,r2
 800b744:	04800b0e 	bge	zero,r18,800b774 <_dtoa_r+0x9c8>
 800b748:	d8c00217 	ldw	r3,8(sp)
 800b74c:	00c0090e 	bge	zero,r3,800b774 <_dtoa_r+0x9c8>
 800b750:	9005883a 	mov	r2,r18
 800b754:	1c81a616 	blt	r3,r18,800bdf0 <_dtoa_r+0x1044>
 800b758:	d8c00517 	ldw	r3,20(sp)
 800b75c:	90a5c83a 	sub	r18,r18,r2
 800b760:	1887c83a 	sub	r3,r3,r2
 800b764:	d8c00515 	stw	r3,20(sp)
 800b768:	d8c00217 	ldw	r3,8(sp)
 800b76c:	1885c83a 	sub	r2,r3,r2
 800b770:	d8800215 	stw	r2,8(sp)
 800b774:	d8800717 	ldw	r2,28(sp)
 800b778:	10001526 	beq	r2,zero,800b7d0 <_dtoa_r+0xa24>
 800b77c:	d8800617 	ldw	r2,24(sp)
 800b780:	1001f626 	beq	r2,zero,800bf5c <_dtoa_r+0x11b0>
 800b784:	05400f0e 	bge	zero,r21,800b7c4 <_dtoa_r+0xa18>
 800b788:	800b883a 	mov	r5,r16
 800b78c:	a80d883a 	mov	r6,r21
 800b790:	b809883a 	mov	r4,r23
 800b794:	800ea5c0 	call	800ea5c <__pow5mult>
 800b798:	b00d883a 	mov	r6,r22
 800b79c:	100b883a 	mov	r5,r2
 800b7a0:	b809883a 	mov	r4,r23
 800b7a4:	1021883a 	mov	r16,r2
 800b7a8:	800e7b00 	call	800e7b0 <__multiply>
 800b7ac:	b00b883a 	mov	r5,r22
 800b7b0:	b809883a 	mov	r4,r23
 800b7b4:	d8800915 	stw	r2,36(sp)
 800b7b8:	800e3900 	call	800e390 <_Bfree>
 800b7bc:	d8800917 	ldw	r2,36(sp)
 800b7c0:	102d883a 	mov	r22,r2
 800b7c4:	d8800717 	ldw	r2,28(sp)
 800b7c8:	154dc83a 	sub	r6,r2,r21
 800b7cc:	1542621e 	bne	r2,r21,800c158 <_dtoa_r+0x13ac>
 800b7d0:	01400044 	movi	r5,1
 800b7d4:	b809883a 	mov	r4,r23
 800b7d8:	800e75c0 	call	800e75c <__i2b>
 800b7dc:	102b883a 	mov	r21,r2
 800b7e0:	04c0be16 	blt	zero,r19,800badc <_dtoa_r+0xd30>
 800b7e4:	d8800117 	ldw	r2,4(sp)
 800b7e8:	10800088 	cmpgei	r2,r2,2
 800b7ec:	10015226 	beq	r2,zero,800bd38 <_dtoa_r+0xf8c>
 800b7f0:	0023883a 	mov	r17,zero
 800b7f4:	00800044 	movi	r2,1
 800b7f8:	9800c11e 	bne	r19,zero,800bb00 <_dtoa_r+0xd54>
 800b7fc:	d9400217 	ldw	r5,8(sp)
 800b800:	1145883a 	add	r2,r2,r5
 800b804:	108007cc 	andi	r2,r2,31
 800b808:	1000a526 	beq	r2,zero,800baa0 <_dtoa_r+0xcf4>
 800b80c:	00c00804 	movi	r3,32
 800b810:	1887c83a 	sub	r3,r3,r2
 800b814:	19000150 	cmplti	r4,r3,5
 800b818:	2003311e 	bne	r4,zero,800c4e0 <_dtoa_r+0x1734>
 800b81c:	00c00704 	movi	r3,28
 800b820:	1885c83a 	sub	r2,r3,r2
 800b824:	d8c00517 	ldw	r3,20(sp)
 800b828:	90a5883a 	add	r18,r18,r2
 800b82c:	1887883a 	add	r3,r3,r2
 800b830:	2885883a 	add	r2,r5,r2
 800b834:	d8c00515 	stw	r3,20(sp)
 800b838:	d8800215 	stw	r2,8(sp)
 800b83c:	d8800517 	ldw	r2,20(sp)
 800b840:	0080050e 	bge	zero,r2,800b858 <_dtoa_r+0xaac>
 800b844:	b00b883a 	mov	r5,r22
 800b848:	100d883a 	mov	r6,r2
 800b84c:	b809883a 	mov	r4,r23
 800b850:	800eb740 	call	800eb74 <__lshift>
 800b854:	102d883a 	mov	r22,r2
 800b858:	d8800217 	ldw	r2,8(sp)
 800b85c:	0080050e 	bge	zero,r2,800b874 <_dtoa_r+0xac8>
 800b860:	a80b883a 	mov	r5,r21
 800b864:	100d883a 	mov	r6,r2
 800b868:	b809883a 	mov	r4,r23
 800b86c:	800eb740 	call	800eb74 <__lshift>
 800b870:	102b883a 	mov	r21,r2
 800b874:	d8800817 	ldw	r2,32(sp)
 800b878:	1001161e 	bne	r2,zero,800bcd4 <_dtoa_r+0xf28>
 800b87c:	d8800417 	ldw	r2,16(sp)
 800b880:	0081040e 	bge	zero,r2,800bc94 <_dtoa_r+0xee8>
 800b884:	d8800617 	ldw	r2,24(sp)
 800b888:	1000b01e 	bne	r2,zero,800bb4c <_dtoa_r+0xda0>
 800b88c:	d8800317 	ldw	r2,12(sp)
 800b890:	10800044 	addi	r2,r2,1
 800b894:	d8800315 	stw	r2,12(sp)
 800b898:	dc800417 	ldw	r18,16(sp)
 800b89c:	04400044 	movi	r17,1
 800b8a0:	00000706 	br	800b8c0 <_dtoa_r+0xb14>
 800b8a4:	b00b883a 	mov	r5,r22
 800b8a8:	000f883a 	mov	r7,zero
 800b8ac:	01800284 	movi	r6,10
 800b8b0:	b809883a 	mov	r4,r23
 800b8b4:	800e3b40 	call	800e3b4 <__multadd>
 800b8b8:	102d883a 	mov	r22,r2
 800b8bc:	8c400044 	addi	r17,r17,1
 800b8c0:	a80b883a 	mov	r5,r21
 800b8c4:	b009883a 	mov	r4,r22
 800b8c8:	800ab8c0 	call	800ab8c <quorem>
 800b8cc:	10c00c04 	addi	r3,r2,48
 800b8d0:	e445883a 	add	r2,fp,r17
 800b8d4:	10ffffc5 	stb	r3,-1(r2)
 800b8d8:	8cbff216 	blt	r17,r18,800b8a4 <_dtoa_r+0xaf8>
 800b8dc:	d8800417 	ldw	r2,16(sp)
 800b8e0:	0081510e 	bge	zero,r2,800be28 <_dtoa_r+0x107c>
 800b8e4:	e0a5883a 	add	r18,fp,r2
 800b8e8:	0023883a 	mov	r17,zero
 800b8ec:	b00b883a 	mov	r5,r22
 800b8f0:	01800044 	movi	r6,1
 800b8f4:	b809883a 	mov	r4,r23
 800b8f8:	d8c00115 	stw	r3,4(sp)
 800b8fc:	800eb740 	call	800eb74 <__lshift>
 800b900:	1009883a 	mov	r4,r2
 800b904:	a80b883a 	mov	r5,r21
 800b908:	102d883a 	mov	r22,r2
 800b90c:	800ecfc0 	call	800ecfc <__mcmp>
 800b910:	913fffc3 	ldbu	r4,-1(r18)
 800b914:	00800416 	blt	zero,r2,800b928 <_dtoa_r+0xb7c>
 800b918:	00014806 	br	800be3c <_dtoa_r+0x1090>
 800b91c:	e0c15626 	beq	fp,r3,800be78 <_dtoa_r+0x10cc>
 800b920:	193fffc3 	ldbu	r4,-1(r3)
 800b924:	1825883a 	mov	r18,r3
 800b928:	20803fcc 	andi	r2,r4,255
 800b92c:	1080201c 	xori	r2,r2,128
 800b930:	10bfe004 	addi	r2,r2,-128
 800b934:	10800e60 	cmpeqi	r2,r2,57
 800b938:	90ffffc4 	addi	r3,r18,-1
 800b93c:	103ff71e 	bne	r2,zero,800b91c <_dtoa_r+0xb70>
 800b940:	21000044 	addi	r4,r4,1
 800b944:	19000005 	stb	r4,0(r3)
 800b948:	a80b883a 	mov	r5,r21
 800b94c:	b809883a 	mov	r4,r23
 800b950:	800e3900 	call	800e390 <_Bfree>
 800b954:	80000826 	beq	r16,zero,800b978 <_dtoa_r+0xbcc>
 800b958:	88000426 	beq	r17,zero,800b96c <_dtoa_r+0xbc0>
 800b95c:	8c000326 	beq	r17,r16,800b96c <_dtoa_r+0xbc0>
 800b960:	880b883a 	mov	r5,r17
 800b964:	b809883a 	mov	r4,r23
 800b968:	800e3900 	call	800e390 <_Bfree>
 800b96c:	800b883a 	mov	r5,r16
 800b970:	b809883a 	mov	r4,r23
 800b974:	800e3900 	call	800e390 <_Bfree>
 800b978:	b00b883a 	mov	r5,r22
 800b97c:	b809883a 	mov	r4,r23
 800b980:	800e3900 	call	800e390 <_Bfree>
 800b984:	d8801f17 	ldw	r2,124(sp)
 800b988:	d8c00317 	ldw	r3,12(sp)
 800b98c:	90000005 	stb	zero,0(r18)
 800b990:	10c00015 	stw	r3,0(r2)
 800b994:	d8802117 	ldw	r2,132(sp)
 800b998:	103d3526 	beq	r2,zero,800ae70 <_dtoa_r+0xc4>
 800b99c:	14800015 	stw	r18,0(r2)
 800b9a0:	003d3306 	br	800ae70 <_dtoa_r+0xc4>
 800b9a4:	e0bfffc4 	addi	r2,fp,-1
 800b9a8:	d8000815 	stw	zero,32(sp)
 800b9ac:	10002616 	blt	r2,zero,800ba48 <_dtoa_r+0xc9c>
 800b9b0:	d8000515 	stw	zero,20(sp)
 800b9b4:	d8800217 	ldw	r2,8(sp)
 800b9b8:	d8c00117 	ldw	r3,4(sp)
 800b9bc:	dcc00315 	stw	r19,12(sp)
 800b9c0:	14c5883a 	add	r2,r2,r19
 800b9c4:	d8800215 	stw	r2,8(sp)
 800b9c8:	d8000715 	stw	zero,28(sp)
 800b9cc:	188002a8 	cmpgeui	r2,r3,10
 800b9d0:	103d9d26 	beq	r2,zero,800b048 <_dtoa_r+0x29c>
 800b9d4:	00800044 	movi	r2,1
 800b9d8:	d8800615 	stw	r2,24(sp)
 800b9dc:	00bfffc4 	movi	r2,-1
 800b9e0:	04000044 	movi	r16,1
 800b9e4:	d8000115 	stw	zero,4(sp)
 800b9e8:	d8800415 	stw	r2,16(sp)
 800b9ec:	d8001e15 	stw	zero,120(sp)
 800b9f0:	d8800417 	ldw	r2,16(sp)
 800b9f4:	b8001115 	stw	zero,68(r23)
 800b9f8:	000b883a 	mov	r5,zero
 800b9fc:	d8800b15 	stw	r2,44(sp)
 800ba00:	003dae06 	br	800b0bc <_dtoa_r+0x310>
 800ba04:	188000e0 	cmpeqi	r2,r3,3
 800ba08:	d8000615 	stw	zero,24(sp)
 800ba0c:	103eb126 	beq	r2,zero,800b4d4 <_dtoa_r+0x728>
 800ba10:	d8801e17 	ldw	r2,120(sp)
 800ba14:	d8c00317 	ldw	r3,12(sp)
 800ba18:	10c5883a 	add	r2,r2,r3
 800ba1c:	d8800b15 	stw	r2,44(sp)
 800ba20:	10800044 	addi	r2,r2,1
 800ba24:	d8800415 	stw	r2,16(sp)
 800ba28:	100d883a 	mov	r6,r2
 800ba2c:	00bd9816 	blt	zero,r2,800b090 <_dtoa_r+0x2e4>
 800ba30:	01800044 	movi	r6,1
 800ba34:	003d9606 	br	800b090 <_dtoa_r+0x2e4>
 800ba38:	00800044 	movi	r2,1
 800ba3c:	d8800815 	stw	r2,32(sp)
 800ba40:	e0bfffc4 	addi	r2,fp,-1
 800ba44:	103d740e 	bge	r2,zero,800b018 <_dtoa_r+0x26c>
 800ba48:	00800044 	movi	r2,1
 800ba4c:	1705c83a 	sub	r2,r2,fp
 800ba50:	d8800515 	stw	r2,20(sp)
 800ba54:	d8000215 	stw	zero,8(sp)
 800ba58:	003d7006 	br	800b01c <_dtoa_r+0x270>
 800ba5c:	9809883a 	mov	r4,r19
 800ba60:	80083cc0 	call	80083cc <__floatsidf>
 800ba64:	900d883a 	mov	r6,r18
 800ba68:	a80f883a 	mov	r7,r21
 800ba6c:	1009883a 	mov	r4,r2
 800ba70:	180b883a 	mov	r5,r3
 800ba74:	800703c0 	call	800703c <__eqdf2>
 800ba78:	103d5426 	beq	r2,zero,800afcc <_dtoa_r+0x220>
 800ba7c:	9cffffc4 	addi	r19,r19,-1
 800ba80:	003d5206 	br	800afcc <_dtoa_r+0x220>
 800ba84:	07020074 	movhi	fp,2049
 800ba88:	e71f6404 	addi	fp,fp,32144
 800ba8c:	003cf806 	br	800ae70 <_dtoa_r+0xc4>
 800ba90:	dd400717 	ldw	r21,28(sp)
 800ba94:	dc800517 	ldw	r18,20(sp)
 800ba98:	0021883a 	mov	r16,zero
 800ba9c:	003f2906 	br	800b744 <_dtoa_r+0x998>
 800baa0:	00800704 	movi	r2,28
 800baa4:	d8c00517 	ldw	r3,20(sp)
 800baa8:	90a5883a 	add	r18,r18,r2
 800baac:	1887883a 	add	r3,r3,r2
 800bab0:	d8c00515 	stw	r3,20(sp)
 800bab4:	d8c00217 	ldw	r3,8(sp)
 800bab8:	1885883a 	add	r2,r3,r2
 800babc:	d8800215 	stw	r2,8(sp)
 800bac0:	003f5e06 	br	800b83c <_dtoa_r+0xa90>
 800bac4:	01000804 	movi	r4,32
 800bac8:	2089c83a 	sub	r4,r4,r2
 800bacc:	a108983a 	sll	r4,r20,r4
 800bad0:	003d0a06 	br	800aefc <_dtoa_r+0x150>
 800bad4:	04000044 	movi	r16,1
 800bad8:	003d6006 	br	800b05c <_dtoa_r+0x2b0>
 800badc:	100b883a 	mov	r5,r2
 800bae0:	980d883a 	mov	r6,r19
 800bae4:	b809883a 	mov	r4,r23
 800bae8:	800ea5c0 	call	800ea5c <__pow5mult>
 800baec:	d8c00117 	ldw	r3,4(sp)
 800baf0:	102b883a 	mov	r21,r2
 800baf4:	18c00090 	cmplti	r3,r3,2
 800baf8:	18014b1e 	bne	r3,zero,800c028 <_dtoa_r+0x127c>
 800bafc:	0023883a 	mov	r17,zero
 800bb00:	a8800417 	ldw	r2,16(r21)
 800bb04:	10800104 	addi	r2,r2,4
 800bb08:	100490ba 	slli	r2,r2,2
 800bb0c:	a885883a 	add	r2,r21,r2
 800bb10:	11000017 	ldw	r4,0(r2)
 800bb14:	800e6480 	call	800e648 <__hi0bits>
 800bb18:	00c00804 	movi	r3,32
 800bb1c:	1885c83a 	sub	r2,r3,r2
 800bb20:	003f3606 	br	800b7fc <_dtoa_r+0xa50>
 800bb24:	800b883a 	mov	r5,r16
 800bb28:	000f883a 	mov	r7,zero
 800bb2c:	01800284 	movi	r6,10
 800bb30:	b809883a 	mov	r4,r23
 800bb34:	800e3b40 	call	800e3b4 <__multadd>
 800bb38:	1021883a 	mov	r16,r2
 800bb3c:	d8800b17 	ldw	r2,44(sp)
 800bb40:	00824d0e 	bge	zero,r2,800c478 <_dtoa_r+0x16cc>
 800bb44:	dcc00315 	stw	r19,12(sp)
 800bb48:	d8800415 	stw	r2,16(sp)
 800bb4c:	0480aa16 	blt	zero,r18,800bdf8 <_dtoa_r+0x104c>
 800bb50:	8801701e 	bne	r17,zero,800c114 <_dtoa_r+0x1368>
 800bb54:	8027883a 	mov	r19,r16
 800bb58:	d9000417 	ldw	r4,16(sp)
 800bb5c:	e0bfffc4 	addi	r2,fp,-1
 800bb60:	a0c0004c 	andi	r3,r20,1
 800bb64:	1105883a 	add	r2,r2,r4
 800bb68:	d8800415 	stw	r2,16(sp)
 800bb6c:	d8800117 	ldw	r2,4(sp)
 800bb70:	d8c00715 	stw	r3,28(sp)
 800bb74:	e029883a 	mov	r20,fp
 800bb78:	1884b03a 	or	r2,r3,r2
 800bb7c:	d8800615 	stw	r2,24(sp)
 800bb80:	df000815 	stw	fp,32(sp)
 800bb84:	00002906 	br	800bc2c <_dtoa_r+0xe80>
 800bb88:	b009883a 	mov	r4,r22
 800bb8c:	800ecfc0 	call	800ecfc <__mcmp>
 800bb90:	900b883a 	mov	r5,r18
 800bb94:	b809883a 	mov	r4,r23
 800bb98:	d8800215 	stw	r2,8(sp)
 800bb9c:	800e3900 	call	800e390 <_Bfree>
 800bba0:	d8800217 	ldw	r2,8(sp)
 800bba4:	1000021e 	bne	r2,zero,800bbb0 <_dtoa_r+0xe04>
 800bba8:	d8c00617 	ldw	r3,24(sp)
 800bbac:	18022326 	beq	r3,zero,800c43c <_dtoa_r+0x1690>
 800bbb0:	a4800044 	addi	r18,r20,1
 800bbb4:	88012216 	blt	r17,zero,800c040 <_dtoa_r+0x1294>
 800bbb8:	d8c00117 	ldw	r3,4(sp)
 800bbbc:	1c62b03a 	or	r17,r3,r17
 800bbc0:	d8c00717 	ldw	r3,28(sp)
 800bbc4:	1c62b03a 	or	r17,r3,r17
 800bbc8:	88011d26 	beq	r17,zero,800c040 <_dtoa_r+0x1294>
 800bbcc:	00816b16 	blt	zero,r2,800c17c <_dtoa_r+0x13d0>
 800bbd0:	d8800417 	ldw	r2,16(sp)
 800bbd4:	a7000005 	stb	fp,0(r20)
 800bbd8:	15017126 	beq	r2,r20,800c1a0 <_dtoa_r+0x13f4>
 800bbdc:	b00b883a 	mov	r5,r22
 800bbe0:	000f883a 	mov	r7,zero
 800bbe4:	01800284 	movi	r6,10
 800bbe8:	b809883a 	mov	r4,r23
 800bbec:	800e3b40 	call	800e3b4 <__multadd>
 800bbf0:	102d883a 	mov	r22,r2
 800bbf4:	800b883a 	mov	r5,r16
 800bbf8:	000f883a 	mov	r7,zero
 800bbfc:	01800284 	movi	r6,10
 800bc00:	b809883a 	mov	r4,r23
 800bc04:	84c01f26 	beq	r16,r19,800bc84 <_dtoa_r+0xed8>
 800bc08:	800e3b40 	call	800e3b4 <__multadd>
 800bc0c:	980b883a 	mov	r5,r19
 800bc10:	000f883a 	mov	r7,zero
 800bc14:	01800284 	movi	r6,10
 800bc18:	b809883a 	mov	r4,r23
 800bc1c:	1021883a 	mov	r16,r2
 800bc20:	800e3b40 	call	800e3b4 <__multadd>
 800bc24:	1027883a 	mov	r19,r2
 800bc28:	9029883a 	mov	r20,r18
 800bc2c:	a80b883a 	mov	r5,r21
 800bc30:	b009883a 	mov	r4,r22
 800bc34:	800ab8c0 	call	800ab8c <quorem>
 800bc38:	800b883a 	mov	r5,r16
 800bc3c:	b009883a 	mov	r4,r22
 800bc40:	1039883a 	mov	fp,r2
 800bc44:	d8800515 	stw	r2,20(sp)
 800bc48:	800ecfc0 	call	800ecfc <__mcmp>
 800bc4c:	a80b883a 	mov	r5,r21
 800bc50:	980d883a 	mov	r6,r19
 800bc54:	b809883a 	mov	r4,r23
 800bc58:	1023883a 	mov	r17,r2
 800bc5c:	800ed540 	call	800ed54 <__mdiff>
 800bc60:	1025883a 	mov	r18,r2
 800bc64:	10800317 	ldw	r2,12(r2)
 800bc68:	e7000c04 	addi	fp,fp,48
 800bc6c:	900b883a 	mov	r5,r18
 800bc70:	103fc526 	beq	r2,zero,800bb88 <_dtoa_r+0xddc>
 800bc74:	b809883a 	mov	r4,r23
 800bc78:	800e3900 	call	800e390 <_Bfree>
 800bc7c:	00800044 	movi	r2,1
 800bc80:	003fcb06 	br	800bbb0 <_dtoa_r+0xe04>
 800bc84:	800e3b40 	call	800e3b4 <__multadd>
 800bc88:	1021883a 	mov	r16,r2
 800bc8c:	1027883a 	mov	r19,r2
 800bc90:	003fe506 	br	800bc28 <_dtoa_r+0xe7c>
 800bc94:	d8800117 	ldw	r2,4(sp)
 800bc98:	108000d0 	cmplti	r2,r2,3
 800bc9c:	10003c26 	beq	r2,zero,800bd90 <_dtoa_r+0xfe4>
 800bca0:	d8800617 	ldw	r2,24(sp)
 800bca4:	103fa91e 	bne	r2,zero,800bb4c <_dtoa_r+0xda0>
 800bca8:	a80b883a 	mov	r5,r21
 800bcac:	b009883a 	mov	r4,r22
 800bcb0:	800ab8c0 	call	800ab8c <quorem>
 800bcb4:	10c00c04 	addi	r3,r2,48
 800bcb8:	d8800317 	ldw	r2,12(sp)
 800bcbc:	e4800044 	addi	r18,fp,1
 800bcc0:	e0c00005 	stb	r3,0(fp)
 800bcc4:	10800044 	addi	r2,r2,1
 800bcc8:	d8800315 	stw	r2,12(sp)
 800bccc:	0023883a 	mov	r17,zero
 800bcd0:	003f0606 	br	800b8ec <_dtoa_r+0xb40>
 800bcd4:	a80b883a 	mov	r5,r21
 800bcd8:	b009883a 	mov	r4,r22
 800bcdc:	800ecfc0 	call	800ecfc <__mcmp>
 800bce0:	103ee60e 	bge	r2,zero,800b87c <_dtoa_r+0xad0>
 800bce4:	b00b883a 	mov	r5,r22
 800bce8:	000f883a 	mov	r7,zero
 800bcec:	01800284 	movi	r6,10
 800bcf0:	b809883a 	mov	r4,r23
 800bcf4:	800e3b40 	call	800e3b4 <__multadd>
 800bcf8:	d8c00317 	ldw	r3,12(sp)
 800bcfc:	102d883a 	mov	r22,r2
 800bd00:	d8800617 	ldw	r2,24(sp)
 800bd04:	1cffffc4 	addi	r19,r3,-1
 800bd08:	103f861e 	bne	r2,zero,800bb24 <_dtoa_r+0xd78>
 800bd0c:	d8800b17 	ldw	r2,44(sp)
 800bd10:	0081d40e 	bge	zero,r2,800c464 <_dtoa_r+0x16b8>
 800bd14:	d8800415 	stw	r2,16(sp)
 800bd18:	003edf06 	br	800b898 <_dtoa_r+0xaec>
 800bd1c:	00820074 	movhi	r2,2049
 800bd20:	e71f6d04 	addi	fp,fp,32180
 800bd24:	109f6dc4 	addi	r2,r2,32183
 800bd28:	003dd906 	br	800b490 <_dtoa_r+0x6e4>
 800bd2c:	00800044 	movi	r2,1
 800bd30:	d8800615 	stw	r2,24(sp)
 800bd34:	003f3606 	br	800ba10 <_dtoa_r+0xc64>
 800bd38:	a03ead1e 	bne	r20,zero,800b7f0 <_dtoa_r+0xa44>
 800bd3c:	00800434 	movhi	r2,16
 800bd40:	10bfffc4 	addi	r2,r2,-1
 800bd44:	8884703a 	and	r2,r17,r2
 800bd48:	103ea91e 	bne	r2,zero,800b7f0 <_dtoa_r+0xa44>
 800bd4c:	8c5ffc2c 	andhi	r17,r17,32752
 800bd50:	883ea726 	beq	r17,zero,800b7f0 <_dtoa_r+0xa44>
 800bd54:	d8800517 	ldw	r2,20(sp)
 800bd58:	04400044 	movi	r17,1
 800bd5c:	10800044 	addi	r2,r2,1
 800bd60:	d8800515 	stw	r2,20(sp)
 800bd64:	d8800217 	ldw	r2,8(sp)
 800bd68:	10800044 	addi	r2,r2,1
 800bd6c:	d8800215 	stw	r2,8(sp)
 800bd70:	003ea006 	br	800b7f4 <_dtoa_r+0xa48>
 800bd74:	00800044 	movi	r2,1
 800bd78:	d8800415 	stw	r2,16(sp)
 800bd7c:	d8801e15 	stw	r2,120(sp)
 800bd80:	003f1b06 	br	800b9f0 <_dtoa_r+0xc44>
 800bd84:	d8800b17 	ldw	r2,44(sp)
 800bd88:	dcc00315 	stw	r19,12(sp)
 800bd8c:	d8800415 	stw	r2,16(sp)
 800bd90:	d8800417 	ldw	r2,16(sp)
 800bd94:	103dfb1e 	bne	r2,zero,800b584 <_dtoa_r+0x7d8>
 800bd98:	a80b883a 	mov	r5,r21
 800bd9c:	b809883a 	mov	r4,r23
 800bda0:	000f883a 	mov	r7,zero
 800bda4:	01800144 	movi	r6,5
 800bda8:	800e3b40 	call	800e3b4 <__multadd>
 800bdac:	100b883a 	mov	r5,r2
 800bdb0:	b009883a 	mov	r4,r22
 800bdb4:	102b883a 	mov	r21,r2
 800bdb8:	800ecfc0 	call	800ecfc <__mcmp>
 800bdbc:	00bdf10e 	bge	zero,r2,800b584 <_dtoa_r+0x7d8>
 800bdc0:	00800c44 	movi	r2,49
 800bdc4:	e0800005 	stb	r2,0(fp)
 800bdc8:	d8800317 	ldw	r2,12(sp)
 800bdcc:	e4800044 	addi	r18,fp,1
 800bdd0:	14400044 	addi	r17,r2,1
 800bdd4:	a80b883a 	mov	r5,r21
 800bdd8:	b809883a 	mov	r4,r23
 800bddc:	800e3900 	call	800e390 <_Bfree>
 800bde0:	88800044 	addi	r2,r17,1
 800bde4:	d8800315 	stw	r2,12(sp)
 800bde8:	803ee01e 	bne	r16,zero,800b96c <_dtoa_r+0xbc0>
 800bdec:	003ee206 	br	800b978 <_dtoa_r+0xbcc>
 800bdf0:	1805883a 	mov	r2,r3
 800bdf4:	003e5806 	br	800b758 <_dtoa_r+0x9ac>
 800bdf8:	800b883a 	mov	r5,r16
 800bdfc:	900d883a 	mov	r6,r18
 800be00:	b809883a 	mov	r4,r23
 800be04:	800eb740 	call	800eb74 <__lshift>
 800be08:	1021883a 	mov	r16,r2
 800be0c:	003f5006 	br	800bb50 <_dtoa_r+0xda4>
 800be10:	156bc83a 	sub	r21,r2,r21
 800be14:	003e3e06 	br	800b710 <_dtoa_r+0x964>
 800be18:	dd000a15 	stw	r20,40(sp)
 800be1c:	dc400c15 	stw	r17,48(sp)
 800be20:	04000084 	movi	r16,2
 800be24:	003cc906 	br	800b14c <_dtoa_r+0x3a0>
 800be28:	00800044 	movi	r2,1
 800be2c:	003ead06 	br	800b8e4 <_dtoa_r+0xb38>
 800be30:	00800044 	movi	r2,1
 800be34:	d8800615 	stw	r2,24(sp)
 800be38:	003c9006 	br	800b07c <_dtoa_r+0x2d0>
 800be3c:	1000031e 	bne	r2,zero,800be4c <_dtoa_r+0x10a0>
 800be40:	d8c00117 	ldw	r3,4(sp)
 800be44:	18c0004c 	andi	r3,r3,1
 800be48:	183eb71e 	bne	r3,zero,800b928 <_dtoa_r+0xb7c>
 800be4c:	2005883a 	mov	r2,r4
 800be50:	00000206 	br	800be5c <_dtoa_r+0x10b0>
 800be54:	90bfff83 	ldbu	r2,-2(r18)
 800be58:	1825883a 	mov	r18,r3
 800be5c:	10803fcc 	andi	r2,r2,255
 800be60:	1080201c 	xori	r2,r2,128
 800be64:	10bfe004 	addi	r2,r2,-128
 800be68:	10800c18 	cmpnei	r2,r2,48
 800be6c:	90ffffc4 	addi	r3,r18,-1
 800be70:	103ff826 	beq	r2,zero,800be54 <_dtoa_r+0x10a8>
 800be74:	003eb406 	br	800b948 <_dtoa_r+0xb9c>
 800be78:	00800c44 	movi	r2,49
 800be7c:	e0800005 	stb	r2,0(fp)
 800be80:	d8800317 	ldw	r2,12(sp)
 800be84:	10800044 	addi	r2,r2,1
 800be88:	d8800315 	stw	r2,12(sp)
 800be8c:	003eae06 	br	800b948 <_dtoa_r+0xb9c>
 800be90:	d8c00917 	ldw	r3,36(sp)
 800be94:	18011826 	beq	r3,zero,800c2f8 <_dtoa_r+0x154c>
 800be98:	d8c00517 	ldw	r3,20(sp)
 800be9c:	d9000217 	ldw	r4,8(sp)
 800bea0:	10810cc4 	addi	r2,r2,1075
 800bea4:	dd400717 	ldw	r21,28(sp)
 800bea8:	2089883a 	add	r4,r4,r2
 800beac:	1885883a 	add	r2,r3,r2
 800beb0:	1825883a 	mov	r18,r3
 800beb4:	d9000215 	stw	r4,8(sp)
 800beb8:	d8800515 	stw	r2,20(sp)
 800bebc:	003e1d06 	br	800b734 <_dtoa_r+0x988>
 800bec0:	8009883a 	mov	r4,r16
 800bec4:	80083cc0 	call	80083cc <__floatsidf>
 800bec8:	d9c00a17 	ldw	r7,40(sp)
 800becc:	900d883a 	mov	r6,r18
 800bed0:	1009883a 	mov	r4,r2
 800bed4:	180b883a 	mov	r5,r3
 800bed8:	800729c0 	call	800729c <__muldf3>
 800bedc:	000d883a 	mov	r6,zero
 800bee0:	01d00734 	movhi	r7,16412
 800bee4:	1009883a 	mov	r4,r2
 800bee8:	180b883a 	mov	r5,r3
 800beec:	8005d900 	call	8005d90 <__adddf3>
 800bef0:	d8800c15 	stw	r2,48(sp)
 800bef4:	00bf3034 	movhi	r2,64704
 800bef8:	1885883a 	add	r2,r3,r2
 800befc:	d8800d15 	stw	r2,52(sp)
 800bf00:	d9400a17 	ldw	r5,40(sp)
 800bf04:	9009883a 	mov	r4,r18
 800bf08:	000d883a 	mov	r6,zero
 800bf0c:	01d00534 	movhi	r7,16404
 800bf10:	8007a440 	call	8007a44 <__subdf3>
 800bf14:	dd400d17 	ldw	r21,52(sp)
 800bf18:	d9800c17 	ldw	r6,48(sp)
 800bf1c:	1009883a 	mov	r4,r2
 800bf20:	a80f883a 	mov	r7,r21
 800bf24:	180b883a 	mov	r5,r3
 800bf28:	1025883a 	mov	r18,r2
 800bf2c:	1821883a 	mov	r16,r3
 800bf30:	80070bc0 	call	80070bc <__gedf2>
 800bf34:	00812d16 	blt	zero,r2,800c3ec <_dtoa_r+0x1640>
 800bf38:	d9800c17 	ldw	r6,48(sp)
 800bf3c:	a9e0003c 	xorhi	r7,r21,32768
 800bf40:	9009883a 	mov	r4,r18
 800bf44:	800b883a 	mov	r5,r16
 800bf48:	80071ac0 	call	80071ac <__ledf2>
 800bf4c:	103d6e0e 	bge	r2,zero,800b508 <_dtoa_r+0x75c>
 800bf50:	002b883a 	mov	r21,zero
 800bf54:	0021883a 	mov	r16,zero
 800bf58:	003d8a06 	br	800b584 <_dtoa_r+0x7d8>
 800bf5c:	d9800717 	ldw	r6,28(sp)
 800bf60:	b00b883a 	mov	r5,r22
 800bf64:	b809883a 	mov	r4,r23
 800bf68:	800ea5c0 	call	800ea5c <__pow5mult>
 800bf6c:	102d883a 	mov	r22,r2
 800bf70:	003e1706 	br	800b7d0 <_dtoa_r+0xa24>
 800bf74:	d8800317 	ldw	r2,12(sp)
 800bf78:	10010d26 	beq	r2,zero,800c3b0 <_dtoa_r+0x1604>
 800bf7c:	00abc83a 	sub	r21,zero,r2
 800bf80:	a88003cc 	andi	r2,r21,15
 800bf84:	100690fa 	slli	r3,r2,3
 800bf88:	00820074 	movhi	r2,2049
 800bf8c:	109fad04 	addi	r2,r2,32436
 800bf90:	10c5883a 	add	r2,r2,r3
 800bf94:	11800017 	ldw	r6,0(r2)
 800bf98:	11c00117 	ldw	r7,4(r2)
 800bf9c:	a009883a 	mov	r4,r20
 800bfa0:	880b883a 	mov	r5,r17
 800bfa4:	a82bd13a 	srai	r21,r21,4
 800bfa8:	800729c0 	call	800729c <__muldf3>
 800bfac:	d8c00a15 	stw	r3,40(sp)
 800bfb0:	1025883a 	mov	r18,r2
 800bfb4:	a8013826 	beq	r21,zero,800c498 <_dtoa_r+0x16ec>
 800bfb8:	02020074 	movhi	r8,2049
 800bfbc:	04000084 	movi	r16,2
 800bfc0:	421fa304 	addi	r8,r8,32396
 800bfc4:	180b883a 	mov	r5,r3
 800bfc8:	dc400c15 	stw	r17,48(sp)
 800bfcc:	1009883a 	mov	r4,r2
 800bfd0:	8023883a 	mov	r17,r16
 800bfd4:	0007883a 	mov	r3,zero
 800bfd8:	4021883a 	mov	r16,r8
 800bfdc:	a980004c 	andi	r6,r21,1
 800bfe0:	30000726 	beq	r6,zero,800c000 <_dtoa_r+0x1254>
 800bfe4:	81800017 	ldw	r6,0(r16)
 800bfe8:	81c00117 	ldw	r7,4(r16)
 800bfec:	8c400044 	addi	r17,r17,1
 800bff0:	800729c0 	call	800729c <__muldf3>
 800bff4:	180b883a 	mov	r5,r3
 800bff8:	1009883a 	mov	r4,r2
 800bffc:	00c00044 	movi	r3,1
 800c000:	a82bd07a 	srai	r21,r21,1
 800c004:	84000204 	addi	r16,r16,8
 800c008:	a83ff41e 	bne	r21,zero,800bfdc <_dtoa_r+0x1230>
 800c00c:	18c03fcc 	andi	r3,r3,255
 800c010:	8821883a 	mov	r16,r17
 800c014:	dc400c17 	ldw	r17,48(sp)
 800c018:	183c6526 	beq	r3,zero,800b1b0 <_dtoa_r+0x404>
 800c01c:	2025883a 	mov	r18,r4
 800c020:	d9400a15 	stw	r5,40(sp)
 800c024:	003c6206 	br	800b1b0 <_dtoa_r+0x404>
 800c028:	a03eb41e 	bne	r20,zero,800bafc <_dtoa_r+0xd50>
 800c02c:	00800434 	movhi	r2,16
 800c030:	10bfffc4 	addi	r2,r2,-1
 800c034:	8884703a 	and	r2,r17,r2
 800c038:	103f4426 	beq	r2,zero,800bd4c <_dtoa_r+0xfa0>
 800c03c:	003eaf06 	br	800bafc <_dtoa_r+0xd50>
 800c040:	d9000317 	ldw	r4,12(sp)
 800c044:	e007883a 	mov	r3,fp
 800c048:	df000817 	ldw	fp,32(sp)
 800c04c:	21000044 	addi	r4,r4,1
 800c050:	d9000315 	stw	r4,12(sp)
 800c054:	00800f0e 	bge	zero,r2,800c094 <_dtoa_r+0x12e8>
 800c058:	b00b883a 	mov	r5,r22
 800c05c:	01800044 	movi	r6,1
 800c060:	b809883a 	mov	r4,r23
 800c064:	d8c00115 	stw	r3,4(sp)
 800c068:	800eb740 	call	800eb74 <__lshift>
 800c06c:	a80b883a 	mov	r5,r21
 800c070:	1009883a 	mov	r4,r2
 800c074:	102d883a 	mov	r22,r2
 800c078:	800ecfc0 	call	800ecfc <__mcmp>
 800c07c:	d8c00117 	ldw	r3,4(sp)
 800c080:	0080e40e 	bge	zero,r2,800c414 <_dtoa_r+0x1668>
 800c084:	18c00e60 	cmpeqi	r3,r3,57
 800c088:	1800d21e 	bne	r3,zero,800c3d4 <_dtoa_r+0x1628>
 800c08c:	d8800517 	ldw	r2,20(sp)
 800c090:	10c00c44 	addi	r3,r2,49
 800c094:	8023883a 	mov	r17,r16
 800c098:	a0c00005 	stb	r3,0(r20)
 800c09c:	9821883a 	mov	r16,r19
 800c0a0:	003e2906 	br	800b948 <_dtoa_r+0xb9c>
 800c0a4:	b027883a 	mov	r19,r22
 800c0a8:	ddc00417 	ldw	r23,16(sp)
 800c0ac:	dd800217 	ldw	r22,8(sp)
 800c0b0:	200d883a 	mov	r6,r4
 800c0b4:	280f883a 	mov	r7,r5
 800c0b8:	8005d900 	call	8005d90 <__adddf3>
 800c0bc:	dd400117 	ldw	r21,4(sp)
 800c0c0:	180b883a 	mov	r5,r3
 800c0c4:	900f883a 	mov	r7,r18
 800c0c8:	a80d883a 	mov	r6,r21
 800c0cc:	1009883a 	mov	r4,r2
 800c0d0:	1823883a 	mov	r17,r3
 800c0d4:	1029883a 	mov	r20,r2
 800c0d8:	80070bc0 	call	80070bc <__gedf2>
 800c0dc:	d8c00317 	ldw	r3,12(sp)
 800c0e0:	18c00044 	addi	r3,r3,1
 800c0e4:	d8c00315 	stw	r3,12(sp)
 800c0e8:	00bcc716 	blt	zero,r2,800b408 <_dtoa_r+0x65c>
 800c0ec:	a80d883a 	mov	r6,r21
 800c0f0:	900f883a 	mov	r7,r18
 800c0f4:	a009883a 	mov	r4,r20
 800c0f8:	880b883a 	mov	r5,r17
 800c0fc:	800703c0 	call	800703c <__eqdf2>
 800c100:	1000021e 	bne	r2,zero,800c10c <_dtoa_r+0x1360>
 800c104:	9cc0004c 	andi	r19,r19,1
 800c108:	983cbf1e 	bne	r19,zero,800b408 <_dtoa_r+0x65c>
 800c10c:	8025883a 	mov	r18,r16
 800c110:	003e1906 	br	800b978 <_dtoa_r+0xbcc>
 800c114:	81400117 	ldw	r5,4(r16)
 800c118:	b809883a 	mov	r4,r23
 800c11c:	800e2ec0 	call	800e2ec <_Balloc>
 800c120:	1023883a 	mov	r17,r2
 800c124:	1000e526 	beq	r2,zero,800c4bc <_dtoa_r+0x1710>
 800c128:	81800417 	ldw	r6,16(r16)
 800c12c:	81400304 	addi	r5,r16,12
 800c130:	11000304 	addi	r4,r2,12
 800c134:	31800084 	addi	r6,r6,2
 800c138:	300c90ba 	slli	r6,r6,2
 800c13c:	800dfd00 	call	800dfd0 <memcpy>
 800c140:	01800044 	movi	r6,1
 800c144:	880b883a 	mov	r5,r17
 800c148:	b809883a 	mov	r4,r23
 800c14c:	800eb740 	call	800eb74 <__lshift>
 800c150:	1027883a 	mov	r19,r2
 800c154:	003e8006 	br	800bb58 <_dtoa_r+0xdac>
 800c158:	b00b883a 	mov	r5,r22
 800c15c:	b809883a 	mov	r4,r23
 800c160:	800ea5c0 	call	800ea5c <__pow5mult>
 800c164:	102d883a 	mov	r22,r2
 800c168:	003d9906 	br	800b7d0 <_dtoa_r+0xa24>
 800c16c:	d8800517 	ldw	r2,20(sp)
 800c170:	d8c00417 	ldw	r3,16(sp)
 800c174:	10e5c83a 	sub	r18,r2,r3
 800c178:	003d6e06 	br	800b734 <_dtoa_r+0x988>
 800c17c:	d9000317 	ldw	r4,12(sp)
 800c180:	e007883a 	mov	r3,fp
 800c184:	18800e58 	cmpnei	r2,r3,57
 800c188:	21000044 	addi	r4,r4,1
 800c18c:	d9000315 	stw	r4,12(sp)
 800c190:	df000817 	ldw	fp,32(sp)
 800c194:	10008f26 	beq	r2,zero,800c3d4 <_dtoa_r+0x1628>
 800c198:	18c00044 	addi	r3,r3,1
 800c19c:	003fbd06 	br	800c094 <_dtoa_r+0x12e8>
 800c1a0:	d8800317 	ldw	r2,12(sp)
 800c1a4:	e007883a 	mov	r3,fp
 800c1a8:	8023883a 	mov	r17,r16
 800c1ac:	10800044 	addi	r2,r2,1
 800c1b0:	df000817 	ldw	fp,32(sp)
 800c1b4:	d8800315 	stw	r2,12(sp)
 800c1b8:	9821883a 	mov	r16,r19
 800c1bc:	003dcb06 	br	800b8ec <_dtoa_r+0xb40>
 800c1c0:	d9000c17 	ldw	r4,48(sp)
 800c1c4:	d9400d17 	ldw	r5,52(sp)
 800c1c8:	600d883a 	mov	r6,r12
 800c1cc:	680f883a 	mov	r7,r13
 800c1d0:	dac00a15 	stw	r11,40(sp)
 800c1d4:	800729c0 	call	800729c <__muldf3>
 800c1d8:	dac00a17 	ldw	r11,40(sp)
 800c1dc:	d9400e17 	ldw	r5,56(sp)
 800c1e0:	d8800a15 	stw	r2,40(sp)
 800c1e4:	e2c00005 	stb	r11,0(fp)
 800c1e8:	29000058 	cmpnei	r4,r5,1
 800c1ec:	d8c00c15 	stw	r3,48(sp)
 800c1f0:	e145883a 	add	r2,fp,r5
 800c1f4:	20002126 	beq	r4,zero,800c27c <_dtoa_r+0x14d0>
 800c1f8:	dc400e15 	stw	r17,56(sp)
 800c1fc:	dcc00d15 	stw	r19,52(sp)
 800c200:	8023883a 	mov	r17,r16
 800c204:	a809883a 	mov	r4,r21
 800c208:	900b883a 	mov	r5,r18
 800c20c:	1021883a 	mov	r16,r2
 800c210:	000d883a 	mov	r6,zero
 800c214:	01d00934 	movhi	r7,16420
 800c218:	800729c0 	call	800729c <__muldf3>
 800c21c:	180b883a 	mov	r5,r3
 800c220:	1009883a 	mov	r4,r2
 800c224:	182b883a 	mov	r21,r3
 800c228:	1027883a 	mov	r19,r2
 800c22c:	80085e00 	call	80085e0 <__fixdfsi>
 800c230:	1009883a 	mov	r4,r2
 800c234:	1025883a 	mov	r18,r2
 800c238:	80083cc0 	call	80083cc <__floatsidf>
 800c23c:	9809883a 	mov	r4,r19
 800c240:	a80b883a 	mov	r5,r21
 800c244:	100d883a 	mov	r6,r2
 800c248:	180f883a 	mov	r7,r3
 800c24c:	8c400044 	addi	r17,r17,1
 800c250:	94800c04 	addi	r18,r18,48
 800c254:	8007a440 	call	8007a44 <__subdf3>
 800c258:	8cbfffc5 	stb	r18,-1(r17)
 800c25c:	1009883a 	mov	r4,r2
 800c260:	180b883a 	mov	r5,r3
 800c264:	847fea1e 	bne	r16,r17,800c210 <_dtoa_r+0x1464>
 800c268:	8821883a 	mov	r16,r17
 800c26c:	dcc00d17 	ldw	r19,52(sp)
 800c270:	dc400e17 	ldw	r17,56(sp)
 800c274:	102b883a 	mov	r21,r2
 800c278:	1825883a 	mov	r18,r3
 800c27c:	d9000a17 	ldw	r4,40(sp)
 800c280:	d9400c17 	ldw	r5,48(sp)
 800c284:	000d883a 	mov	r6,zero
 800c288:	01cff834 	movhi	r7,16352
 800c28c:	8005d900 	call	8005d90 <__adddf3>
 800c290:	a80d883a 	mov	r6,r21
 800c294:	900f883a 	mov	r7,r18
 800c298:	1009883a 	mov	r4,r2
 800c29c:	180b883a 	mov	r5,r3
 800c2a0:	80071ac0 	call	80071ac <__ledf2>
 800c2a4:	103c5316 	blt	r2,zero,800b3f4 <_dtoa_r+0x648>
 800c2a8:	d9800a17 	ldw	r6,40(sp)
 800c2ac:	d9c00c17 	ldw	r7,48(sp)
 800c2b0:	0009883a 	mov	r4,zero
 800c2b4:	014ff834 	movhi	r5,16352
 800c2b8:	8007a440 	call	8007a44 <__subdf3>
 800c2bc:	a80d883a 	mov	r6,r21
 800c2c0:	900f883a 	mov	r7,r18
 800c2c4:	1009883a 	mov	r4,r2
 800c2c8:	180b883a 	mov	r5,r3
 800c2cc:	80070bc0 	call	80070bc <__gedf2>
 800c2d0:	00bc8d0e 	bge	zero,r2,800b508 <_dtoa_r+0x75c>
 800c2d4:	80bfffc7 	ldb	r2,-1(r16)
 800c2d8:	8025883a 	mov	r18,r16
 800c2dc:	843fffc4 	addi	r16,r16,-1
 800c2e0:	10800c20 	cmpeqi	r2,r2,48
 800c2e4:	103ffb1e 	bne	r2,zero,800c2d4 <_dtoa_r+0x1528>
 800c2e8:	d8801117 	ldw	r2,68(sp)
 800c2ec:	10800044 	addi	r2,r2,1
 800c2f0:	d8800315 	stw	r2,12(sp)
 800c2f4:	003da006 	br	800b978 <_dtoa_r+0xbcc>
 800c2f8:	d8c01217 	ldw	r3,72(sp)
 800c2fc:	00800d84 	movi	r2,54
 800c300:	d9000517 	ldw	r4,20(sp)
 800c304:	10c5c83a 	sub	r2,r2,r3
 800c308:	d8c00217 	ldw	r3,8(sp)
 800c30c:	dd400717 	ldw	r21,28(sp)
 800c310:	2025883a 	mov	r18,r4
 800c314:	1887883a 	add	r3,r3,r2
 800c318:	2085883a 	add	r2,r4,r2
 800c31c:	d8c00215 	stw	r3,8(sp)
 800c320:	d8800515 	stw	r2,20(sp)
 800c324:	003d0306 	br	800b734 <_dtoa_r+0x988>
 800c328:	d8800417 	ldw	r2,16(sp)
 800c32c:	103ee426 	beq	r2,zero,800bec0 <_dtoa_r+0x1114>
 800c330:	d8800b17 	ldw	r2,44(sp)
 800c334:	00bc740e 	bge	zero,r2,800b508 <_dtoa_r+0x75c>
 800c338:	a80b883a 	mov	r5,r21
 800c33c:	9009883a 	mov	r4,r18
 800c340:	000d883a 	mov	r6,zero
 800c344:	01d00934 	movhi	r7,16420
 800c348:	800729c0 	call	800729c <__muldf3>
 800c34c:	81000044 	addi	r4,r16,1
 800c350:	1025883a 	mov	r18,r2
 800c354:	182b883a 	mov	r21,r3
 800c358:	d8c00a15 	stw	r3,40(sp)
 800c35c:	80083cc0 	call	80083cc <__floatsidf>
 800c360:	900d883a 	mov	r6,r18
 800c364:	a80f883a 	mov	r7,r21
 800c368:	1009883a 	mov	r4,r2
 800c36c:	180b883a 	mov	r5,r3
 800c370:	800729c0 	call	800729c <__muldf3>
 800c374:	1009883a 	mov	r4,r2
 800c378:	000d883a 	mov	r6,zero
 800c37c:	01d00734 	movhi	r7,16412
 800c380:	180b883a 	mov	r5,r3
 800c384:	8005d900 	call	8005d90 <__adddf3>
 800c388:	d9000317 	ldw	r4,12(sp)
 800c38c:	d8800c15 	stw	r2,48(sp)
 800c390:	00bf3034 	movhi	r2,64704
 800c394:	1887883a 	add	r3,r3,r2
 800c398:	d8800b17 	ldw	r2,44(sp)
 800c39c:	213fffc4 	addi	r4,r4,-1
 800c3a0:	d9001115 	stw	r4,68(sp)
 800c3a4:	d8c00d15 	stw	r3,52(sp)
 800c3a8:	d8800e15 	stw	r2,56(sp)
 800c3ac:	003b9f06 	br	800b22c <_dtoa_r+0x480>
 800c3b0:	a025883a 	mov	r18,r20
 800c3b4:	dc400a15 	stw	r17,40(sp)
 800c3b8:	04000084 	movi	r16,2
 800c3bc:	003b7c06 	br	800b1b0 <_dtoa_r+0x404>
 800c3c0:	d8800317 	ldw	r2,12(sp)
 800c3c4:	00c00c44 	movi	r3,49
 800c3c8:	10800044 	addi	r2,r2,1
 800c3cc:	d8800315 	stw	r2,12(sp)
 800c3d0:	003c1606 	br	800b42c <_dtoa_r+0x680>
 800c3d4:	00800e44 	movi	r2,57
 800c3d8:	8023883a 	mov	r17,r16
 800c3dc:	a0800005 	stb	r2,0(r20)
 800c3e0:	9821883a 	mov	r16,r19
 800c3e4:	01000e44 	movi	r4,57
 800c3e8:	003d4f06 	br	800b928 <_dtoa_r+0xb7c>
 800c3ec:	002b883a 	mov	r21,zero
 800c3f0:	0021883a 	mov	r16,zero
 800c3f4:	003e7206 	br	800bdc0 <_dtoa_r+0x1014>
 800c3f8:	dd800d17 	ldw	r22,52(sp)
 800c3fc:	ddc00e17 	ldw	r23,56(sp)
 800c400:	d8801117 	ldw	r2,68(sp)
 800c404:	8025883a 	mov	r18,r16
 800c408:	10800044 	addi	r2,r2,1
 800c40c:	d8800315 	stw	r2,12(sp)
 800c410:	003d5906 	br	800b978 <_dtoa_r+0xbcc>
 800c414:	103f1f1e 	bne	r2,zero,800c094 <_dtoa_r+0x12e8>
 800c418:	1880004c 	andi	r2,r3,1
 800c41c:	103f191e 	bne	r2,zero,800c084 <_dtoa_r+0x12d8>
 800c420:	003f1c06 	br	800c094 <_dtoa_r+0x12e8>
 800c424:	dcc00f17 	ldw	r19,60(sp)
 800c428:	dd800d17 	ldw	r22,52(sp)
 800c42c:	ddc00e17 	ldw	r23,56(sp)
 800c430:	dc400c17 	ldw	r17,48(sp)
 800c434:	dd000a17 	ldw	r20,40(sp)
 800c438:	003c3306 	br	800b508 <_dtoa_r+0x75c>
 800c43c:	d9000317 	ldw	r4,12(sp)
 800c440:	e007883a 	mov	r3,fp
 800c444:	18800e60 	cmpeqi	r2,r3,57
 800c448:	21000044 	addi	r4,r4,1
 800c44c:	d9000315 	stw	r4,12(sp)
 800c450:	df000817 	ldw	fp,32(sp)
 800c454:	a4800044 	addi	r18,r20,1
 800c458:	103fde1e 	bne	r2,zero,800c3d4 <_dtoa_r+0x1628>
 800c45c:	047f0b16 	blt	zero,r17,800c08c <_dtoa_r+0x12e0>
 800c460:	003f0c06 	br	800c094 <_dtoa_r+0x12e8>
 800c464:	d8800117 	ldw	r2,4(sp)
 800c468:	108000c8 	cmpgei	r2,r2,3
 800c46c:	103e451e 	bne	r2,zero,800bd84 <_dtoa_r+0xfd8>
 800c470:	dcc00315 	stw	r19,12(sp)
 800c474:	003e0c06 	br	800bca8 <_dtoa_r+0xefc>
 800c478:	d8800117 	ldw	r2,4(sp)
 800c47c:	108000c8 	cmpgei	r2,r2,3
 800c480:	103e401e 	bne	r2,zero,800bd84 <_dtoa_r+0xfd8>
 800c484:	d8800b17 	ldw	r2,44(sp)
 800c488:	dcc00315 	stw	r19,12(sp)
 800c48c:	d8800415 	stw	r2,16(sp)
 800c490:	04bdaf0e 	bge	zero,r18,800bb50 <_dtoa_r+0xda4>
 800c494:	003e5806 	br	800bdf8 <_dtoa_r+0x104c>
 800c498:	04000084 	movi	r16,2
 800c49c:	003b4406 	br	800b1b0 <_dtoa_r+0x404>
 800c4a0:	01c20074 	movhi	r7,2049
 800c4a4:	01020074 	movhi	r4,2049
 800c4a8:	39df7104 	addi	r7,r7,32196
 800c4ac:	000d883a 	mov	r6,zero
 800c4b0:	01406a84 	movi	r5,426
 800c4b4:	211f7604 	addi	r4,r4,32216
 800c4b8:	80113e40 	call	80113e4 <__assert_func>
 800c4bc:	01c20074 	movhi	r7,2049
 800c4c0:	01020074 	movhi	r4,2049
 800c4c4:	39df7104 	addi	r7,r7,32196
 800c4c8:	000d883a 	mov	r6,zero
 800c4cc:	0140ba84 	movi	r5,746
 800c4d0:	211f7604 	addi	r4,r4,32216
 800c4d4:	80113e40 	call	80113e4 <__assert_func>
 800c4d8:	e71f6e04 	addi	fp,fp,32184
 800c4dc:	003a6406 	br	800ae70 <_dtoa_r+0xc4>
 800c4e0:	18c00120 	cmpeqi	r3,r3,4
 800c4e4:	183cd51e 	bne	r3,zero,800b83c <_dtoa_r+0xa90>
 800c4e8:	00c00f04 	movi	r3,60
 800c4ec:	1885c83a 	sub	r2,r3,r2
 800c4f0:	003d6c06 	br	800baa4 <_dtoa_r+0xcf8>
 800c4f4:	000b883a 	mov	r5,zero
 800c4f8:	003af006 	br	800b0bc <_dtoa_r+0x310>

0800c4fc <__sflush_r>:
 800c4fc:	2880030b 	ldhu	r2,12(r5)
 800c500:	defffb04 	addi	sp,sp,-20
 800c504:	dcc00315 	stw	r19,12(sp)
 800c508:	dc000015 	stw	r16,0(sp)
 800c50c:	dfc00415 	stw	ra,16(sp)
 800c510:	dc800215 	stw	r18,8(sp)
 800c514:	dc400115 	stw	r17,4(sp)
 800c518:	10c0020c 	andi	r3,r2,8
 800c51c:	2821883a 	mov	r16,r5
 800c520:	2027883a 	mov	r19,r4
 800c524:	18003f1e 	bne	r3,zero,800c624 <__sflush_r+0x128>
 800c528:	28c00117 	ldw	r3,4(r5)
 800c52c:	10820014 	ori	r2,r2,2048
 800c530:	2880030d 	sth	r2,12(r5)
 800c534:	00c0550e 	bge	zero,r3,800c68c <__sflush_r+0x190>
 800c538:	82000a17 	ldw	r8,40(r16)
 800c53c:	40003126 	beq	r8,zero,800c604 <__sflush_r+0x108>
 800c540:	9c400017 	ldw	r17,0(r19)
 800c544:	1104000c 	andi	r4,r2,4096
 800c548:	98000015 	stw	zero,0(r19)
 800c54c:	81400717 	ldw	r5,28(r16)
 800c550:	1007883a 	mov	r3,r2
 800c554:	2000521e 	bne	r4,zero,800c6a0 <__sflush_r+0x1a4>
 800c558:	01c00044 	movi	r7,1
 800c55c:	000d883a 	mov	r6,zero
 800c560:	9809883a 	mov	r4,r19
 800c564:	403ee83a 	callr	r8
 800c568:	10ffffd8 	cmpnei	r3,r2,-1
 800c56c:	18005826 	beq	r3,zero,800c6d0 <__sflush_r+0x1d4>
 800c570:	80c0030b 	ldhu	r3,12(r16)
 800c574:	82000a17 	ldw	r8,40(r16)
 800c578:	81400717 	ldw	r5,28(r16)
 800c57c:	18c0010c 	andi	r3,r3,4
 800c580:	18000626 	beq	r3,zero,800c59c <__sflush_r+0xa0>
 800c584:	81000117 	ldw	r4,4(r16)
 800c588:	80c00c17 	ldw	r3,48(r16)
 800c58c:	1105c83a 	sub	r2,r2,r4
 800c590:	18000226 	beq	r3,zero,800c59c <__sflush_r+0xa0>
 800c594:	80c00f17 	ldw	r3,60(r16)
 800c598:	10c5c83a 	sub	r2,r2,r3
 800c59c:	100d883a 	mov	r6,r2
 800c5a0:	000f883a 	mov	r7,zero
 800c5a4:	9809883a 	mov	r4,r19
 800c5a8:	403ee83a 	callr	r8
 800c5ac:	10ffffd8 	cmpnei	r3,r2,-1
 800c5b0:	18003d1e 	bne	r3,zero,800c6a8 <__sflush_r+0x1ac>
 800c5b4:	99000017 	ldw	r4,0(r19)
 800c5b8:	80c0030b 	ldhu	r3,12(r16)
 800c5bc:	20004e26 	beq	r4,zero,800c6f8 <__sflush_r+0x1fc>
 800c5c0:	21400760 	cmpeqi	r5,r4,29
 800c5c4:	2800021e 	bne	r5,zero,800c5d0 <__sflush_r+0xd4>
 800c5c8:	210005a0 	cmpeqi	r4,r4,22
 800c5cc:	20002c26 	beq	r4,zero,800c680 <__sflush_r+0x184>
 800c5d0:	80800417 	ldw	r2,16(r16)
 800c5d4:	18fdffcc 	andi	r3,r3,63487
 800c5d8:	80c0030d 	sth	r3,12(r16)
 800c5dc:	80000115 	stw	zero,4(r16)
 800c5e0:	80800015 	stw	r2,0(r16)
 800c5e4:	81400c17 	ldw	r5,48(r16)
 800c5e8:	9c400015 	stw	r17,0(r19)
 800c5ec:	28000526 	beq	r5,zero,800c604 <__sflush_r+0x108>
 800c5f0:	80801004 	addi	r2,r16,64
 800c5f4:	28800226 	beq	r5,r2,800c600 <__sflush_r+0x104>
 800c5f8:	9809883a 	mov	r4,r19
 800c5fc:	800cc1c0 	call	800cc1c <_free_r>
 800c600:	80000c15 	stw	zero,48(r16)
 800c604:	0005883a 	mov	r2,zero
 800c608:	dfc00417 	ldw	ra,16(sp)
 800c60c:	dcc00317 	ldw	r19,12(sp)
 800c610:	dc800217 	ldw	r18,8(sp)
 800c614:	dc400117 	ldw	r17,4(sp)
 800c618:	dc000017 	ldw	r16,0(sp)
 800c61c:	dec00504 	addi	sp,sp,20
 800c620:	f800283a 	ret
 800c624:	2c800417 	ldw	r18,16(r5)
 800c628:	903ff626 	beq	r18,zero,800c604 <__sflush_r+0x108>
 800c62c:	2c400017 	ldw	r17,0(r5)
 800c630:	108000cc 	andi	r2,r2,3
 800c634:	2c800015 	stw	r18,0(r5)
 800c638:	8ca3c83a 	sub	r17,r17,r18
 800c63c:	1000161e 	bne	r2,zero,800c698 <__sflush_r+0x19c>
 800c640:	28800517 	ldw	r2,20(r5)
 800c644:	80800215 	stw	r2,8(r16)
 800c648:	04400316 	blt	zero,r17,800c658 <__sflush_r+0x15c>
 800c64c:	003fed06 	br	800c604 <__sflush_r+0x108>
 800c650:	90a5883a 	add	r18,r18,r2
 800c654:	047feb0e 	bge	zero,r17,800c604 <__sflush_r+0x108>
 800c658:	80800917 	ldw	r2,36(r16)
 800c65c:	81400717 	ldw	r5,28(r16)
 800c660:	880f883a 	mov	r7,r17
 800c664:	900d883a 	mov	r6,r18
 800c668:	9809883a 	mov	r4,r19
 800c66c:	103ee83a 	callr	r2
 800c670:	88a3c83a 	sub	r17,r17,r2
 800c674:	00bff616 	blt	zero,r2,800c650 <__sflush_r+0x154>
 800c678:	80c0030b 	ldhu	r3,12(r16)
 800c67c:	00bfffc4 	movi	r2,-1
 800c680:	18c01014 	ori	r3,r3,64
 800c684:	80c0030d 	sth	r3,12(r16)
 800c688:	003fdf06 	br	800c608 <__sflush_r+0x10c>
 800c68c:	28c00f17 	ldw	r3,60(r5)
 800c690:	00ffa916 	blt	zero,r3,800c538 <__sflush_r+0x3c>
 800c694:	003fdb06 	br	800c604 <__sflush_r+0x108>
 800c698:	0005883a 	mov	r2,zero
 800c69c:	003fe906 	br	800c644 <__sflush_r+0x148>
 800c6a0:	80801417 	ldw	r2,80(r16)
 800c6a4:	003fb506 	br	800c57c <__sflush_r+0x80>
 800c6a8:	80c0030b 	ldhu	r3,12(r16)
 800c6ac:	81000417 	ldw	r4,16(r16)
 800c6b0:	80000115 	stw	zero,4(r16)
 800c6b4:	197dffcc 	andi	r5,r3,63487
 800c6b8:	8140030d 	sth	r5,12(r16)
 800c6bc:	81000015 	stw	r4,0(r16)
 800c6c0:	18c4000c 	andi	r3,r3,4096
 800c6c4:	183fc726 	beq	r3,zero,800c5e4 <__sflush_r+0xe8>
 800c6c8:	80801415 	stw	r2,80(r16)
 800c6cc:	003fc506 	br	800c5e4 <__sflush_r+0xe8>
 800c6d0:	98c00017 	ldw	r3,0(r19)
 800c6d4:	183fa626 	beq	r3,zero,800c570 <__sflush_r+0x74>
 800c6d8:	19000760 	cmpeqi	r4,r3,29
 800c6dc:	20000e1e 	bne	r4,zero,800c718 <__sflush_r+0x21c>
 800c6e0:	18c00598 	cmpnei	r3,r3,22
 800c6e4:	18000c26 	beq	r3,zero,800c718 <__sflush_r+0x21c>
 800c6e8:	80c0030b 	ldhu	r3,12(r16)
 800c6ec:	18c01014 	ori	r3,r3,64
 800c6f0:	80c0030d 	sth	r3,12(r16)
 800c6f4:	003fc406 	br	800c608 <__sflush_r+0x10c>
 800c6f8:	81000417 	ldw	r4,16(r16)
 800c6fc:	197dffcc 	andi	r5,r3,63487
 800c700:	8140030d 	sth	r5,12(r16)
 800c704:	80000115 	stw	zero,4(r16)
 800c708:	81000015 	stw	r4,0(r16)
 800c70c:	18c4000c 	andi	r3,r3,4096
 800c710:	183fb426 	beq	r3,zero,800c5e4 <__sflush_r+0xe8>
 800c714:	003fec06 	br	800c6c8 <__sflush_r+0x1cc>
 800c718:	9c400015 	stw	r17,0(r19)
 800c71c:	0005883a 	mov	r2,zero
 800c720:	003fb906 	br	800c608 <__sflush_r+0x10c>

0800c724 <_fflush_r>:
 800c724:	defffd04 	addi	sp,sp,-12
 800c728:	dc000115 	stw	r16,4(sp)
 800c72c:	dfc00215 	stw	ra,8(sp)
 800c730:	2021883a 	mov	r16,r4
 800c734:	20000226 	beq	r4,zero,800c740 <_fflush_r+0x1c>
 800c738:	20800e17 	ldw	r2,56(r4)
 800c73c:	10000726 	beq	r2,zero,800c75c <_fflush_r+0x38>
 800c740:	2880030f 	ldh	r2,12(r5)
 800c744:	10000a1e 	bne	r2,zero,800c770 <_fflush_r+0x4c>
 800c748:	0005883a 	mov	r2,zero
 800c74c:	dfc00217 	ldw	ra,8(sp)
 800c750:	dc000117 	ldw	r16,4(sp)
 800c754:	dec00304 	addi	sp,sp,12
 800c758:	f800283a 	ret
 800c75c:	d9400015 	stw	r5,0(sp)
 800c760:	800cab80 	call	800cab8 <__sinit>
 800c764:	d9400017 	ldw	r5,0(sp)
 800c768:	2880030f 	ldh	r2,12(r5)
 800c76c:	103ff626 	beq	r2,zero,800c748 <_fflush_r+0x24>
 800c770:	8009883a 	mov	r4,r16
 800c774:	dfc00217 	ldw	ra,8(sp)
 800c778:	dc000117 	ldw	r16,4(sp)
 800c77c:	dec00304 	addi	sp,sp,12
 800c780:	800c4fc1 	jmpi	800c4fc <__sflush_r>

0800c784 <fflush>:
 800c784:	200b883a 	mov	r5,r4
 800c788:	20000326 	beq	r4,zero,800c798 <fflush+0x14>
 800c78c:	008200b4 	movhi	r2,2050
 800c790:	1127bf17 	ldw	r4,-24836(r2)
 800c794:	800c7241 	jmpi	800c724 <_fflush_r>
 800c798:	008200b4 	movhi	r2,2050
 800c79c:	1127be17 	ldw	r4,-24840(r2)
 800c7a0:	01420074 	movhi	r5,2049
 800c7a4:	2971c904 	addi	r5,r5,-14556
 800c7a8:	800d47c1 	jmpi	800d47c <_fwalk_reent>

0800c7ac <__fp_lock>:
 800c7ac:	0005883a 	mov	r2,zero
 800c7b0:	f800283a 	ret

0800c7b4 <_cleanup_r>:
 800c7b4:	01420074 	movhi	r5,2049
 800c7b8:	29454804 	addi	r5,r5,5408
 800c7bc:	800d47c1 	jmpi	800d47c <_fwalk_reent>

0800c7c0 <__sinit.part.0>:
 800c7c0:	00c20074 	movhi	r3,2049
 800c7c4:	20800117 	ldw	r2,4(r4)
 800c7c8:	18f1ed04 	addi	r3,r3,-14412
 800c7cc:	20c00f15 	stw	r3,60(r4)
 800c7d0:	2140bb04 	addi	r5,r4,748
 800c7d4:	00c000c4 	movi	r3,3
 800c7d8:	20c0b915 	stw	r3,740(r4)
 800c7dc:	2140ba15 	stw	r5,744(r4)
 800c7e0:	2000b815 	stw	zero,736(r4)
 800c7e4:	10001705 	stb	zero,92(r2)
 800c7e8:	10001745 	stb	zero,93(r2)
 800c7ec:	10001785 	stb	zero,94(r2)
 800c7f0:	100017c5 	stb	zero,95(r2)
 800c7f4:	10001805 	stb	zero,96(r2)
 800c7f8:	10001845 	stb	zero,97(r2)
 800c7fc:	10001885 	stb	zero,98(r2)
 800c800:	100018c5 	stb	zero,99(r2)
 800c804:	00c00104 	movi	r3,4
 800c808:	10c00315 	stw	r3,12(r2)
 800c80c:	02020074 	movhi	r8,2049
 800c810:	20c00217 	ldw	r3,8(r4)
 800c814:	01c20074 	movhi	r7,2049
 800c818:	01820074 	movhi	r6,2049
 800c81c:	01420074 	movhi	r5,2049
 800c820:	423ee304 	addi	r8,r8,-1140
 800c824:	39fefa04 	addi	r7,r7,-1048
 800c828:	31bf1a04 	addi	r6,r6,-920
 800c82c:	297f3104 	addi	r5,r5,-828
 800c830:	02400074 	movhi	r9,1
 800c834:	10001915 	stw	zero,100(r2)
 800c838:	10000015 	stw	zero,0(r2)
 800c83c:	10000115 	stw	zero,4(r2)
 800c840:	10000215 	stw	zero,8(r2)
 800c844:	10000415 	stw	zero,16(r2)
 800c848:	10000515 	stw	zero,20(r2)
 800c84c:	10000615 	stw	zero,24(r2)
 800c850:	10800715 	stw	r2,28(r2)
 800c854:	12000815 	stw	r8,32(r2)
 800c858:	11c00915 	stw	r7,36(r2)
 800c85c:	11800a15 	stw	r6,40(r2)
 800c860:	11400b15 	stw	r5,44(r2)
 800c864:	4a400284 	addi	r9,r9,10
 800c868:	1a400315 	stw	r9,12(r3)
 800c86c:	18001915 	stw	zero,100(r3)
 800c870:	18000015 	stw	zero,0(r3)
 800c874:	18000115 	stw	zero,4(r3)
 800c878:	18000215 	stw	zero,8(r3)
 800c87c:	18000415 	stw	zero,16(r3)
 800c880:	18001705 	stb	zero,92(r3)
 800c884:	18001745 	stb	zero,93(r3)
 800c888:	18001785 	stb	zero,94(r3)
 800c88c:	180017c5 	stb	zero,95(r3)
 800c890:	18001805 	stb	zero,96(r3)
 800c894:	18001845 	stb	zero,97(r3)
 800c898:	18001885 	stb	zero,98(r3)
 800c89c:	180018c5 	stb	zero,99(r3)
 800c8a0:	20800317 	ldw	r2,12(r4)
 800c8a4:	024000b4 	movhi	r9,2
 800c8a8:	18000515 	stw	zero,20(r3)
 800c8ac:	18000615 	stw	zero,24(r3)
 800c8b0:	18c00715 	stw	r3,28(r3)
 800c8b4:	1a000815 	stw	r8,32(r3)
 800c8b8:	19c00915 	stw	r7,36(r3)
 800c8bc:	19800a15 	stw	r6,40(r3)
 800c8c0:	19400b15 	stw	r5,44(r3)
 800c8c4:	4a400484 	addi	r9,r9,18
 800c8c8:	10001915 	stw	zero,100(r2)
 800c8cc:	10000015 	stw	zero,0(r2)
 800c8d0:	10000115 	stw	zero,4(r2)
 800c8d4:	10000215 	stw	zero,8(r2)
 800c8d8:	12400315 	stw	r9,12(r2)
 800c8dc:	10000415 	stw	zero,16(r2)
 800c8e0:	10000515 	stw	zero,20(r2)
 800c8e4:	10000615 	stw	zero,24(r2)
 800c8e8:	10001705 	stb	zero,92(r2)
 800c8ec:	10001745 	stb	zero,93(r2)
 800c8f0:	10001785 	stb	zero,94(r2)
 800c8f4:	100017c5 	stb	zero,95(r2)
 800c8f8:	10001805 	stb	zero,96(r2)
 800c8fc:	10001845 	stb	zero,97(r2)
 800c900:	10001885 	stb	zero,98(r2)
 800c904:	100018c5 	stb	zero,99(r2)
 800c908:	10800715 	stw	r2,28(r2)
 800c90c:	12000815 	stw	r8,32(r2)
 800c910:	11c00915 	stw	r7,36(r2)
 800c914:	11800a15 	stw	r6,40(r2)
 800c918:	11400b15 	stw	r5,44(r2)
 800c91c:	00800044 	movi	r2,1
 800c920:	20800e15 	stw	r2,56(r4)
 800c924:	f800283a 	ret

0800c928 <__fp_unlock>:
 800c928:	0005883a 	mov	r2,zero
 800c92c:	f800283a 	ret

0800c930 <__sfmoreglue>:
 800c930:	defffc04 	addi	sp,sp,-16
 800c934:	dc800215 	stw	r18,8(sp)
 800c938:	2825883a 	mov	r18,r5
 800c93c:	dc000015 	stw	r16,0(sp)
 800c940:	01401a04 	movi	r5,104
 800c944:	2021883a 	mov	r16,r4
 800c948:	913fffc4 	addi	r4,r18,-1
 800c94c:	dfc00315 	stw	ra,12(sp)
 800c950:	dc400115 	stw	r17,4(sp)
 800c954:	80052bc0 	call	80052bc <__mulsi3>
 800c958:	8009883a 	mov	r4,r16
 800c95c:	11401d04 	addi	r5,r2,116
 800c960:	1023883a 	mov	r17,r2
 800c964:	800d71c0 	call	800d71c <_malloc_r>
 800c968:	1021883a 	mov	r16,r2
 800c96c:	10000726 	beq	r2,zero,800c98c <__sfmoreglue+0x5c>
 800c970:	11000304 	addi	r4,r2,12
 800c974:	10000015 	stw	zero,0(r2)
 800c978:	14800115 	stw	r18,4(r2)
 800c97c:	11000215 	stw	r4,8(r2)
 800c980:	89801a04 	addi	r6,r17,104
 800c984:	000b883a 	mov	r5,zero
 800c988:	800e1fc0 	call	800e1fc <memset>
 800c98c:	8005883a 	mov	r2,r16
 800c990:	dfc00317 	ldw	ra,12(sp)
 800c994:	dc800217 	ldw	r18,8(sp)
 800c998:	dc400117 	ldw	r17,4(sp)
 800c99c:	dc000017 	ldw	r16,0(sp)
 800c9a0:	dec00404 	addi	sp,sp,16
 800c9a4:	f800283a 	ret

0800c9a8 <__sfp>:
 800c9a8:	defffd04 	addi	sp,sp,-12
 800c9ac:	008200b4 	movhi	r2,2050
 800c9b0:	dc000015 	stw	r16,0(sp)
 800c9b4:	1427be17 	ldw	r16,-24840(r2)
 800c9b8:	dc400115 	stw	r17,4(sp)
 800c9bc:	dfc00215 	stw	ra,8(sp)
 800c9c0:	80800e17 	ldw	r2,56(r16)
 800c9c4:	2023883a 	mov	r17,r4
 800c9c8:	10002b26 	beq	r2,zero,800ca78 <__sfp+0xd0>
 800c9cc:	8400b804 	addi	r16,r16,736
 800c9d0:	80c00117 	ldw	r3,4(r16)
 800c9d4:	80800217 	ldw	r2,8(r16)
 800c9d8:	18ffffc4 	addi	r3,r3,-1
 800c9dc:	1800030e 	bge	r3,zero,800c9ec <__sfp+0x44>
 800c9e0:	00002106 	br	800ca68 <__sfp+0xc0>
 800c9e4:	10801a04 	addi	r2,r2,104
 800c9e8:	30001f26 	beq	r6,zero,800ca68 <__sfp+0xc0>
 800c9ec:	1140030f 	ldh	r5,12(r2)
 800c9f0:	18ffffc4 	addi	r3,r3,-1
 800c9f4:	19bfffd8 	cmpnei	r6,r3,-1
 800c9f8:	283ffa1e 	bne	r5,zero,800c9e4 <__sfp+0x3c>
 800c9fc:	00fffff4 	movhi	r3,65535
 800ca00:	18c00044 	addi	r3,r3,1
 800ca04:	10001915 	stw	zero,100(r2)
 800ca08:	10000015 	stw	zero,0(r2)
 800ca0c:	10000115 	stw	zero,4(r2)
 800ca10:	10000215 	stw	zero,8(r2)
 800ca14:	10c00315 	stw	r3,12(r2)
 800ca18:	10000415 	stw	zero,16(r2)
 800ca1c:	10000515 	stw	zero,20(r2)
 800ca20:	10000615 	stw	zero,24(r2)
 800ca24:	10001705 	stb	zero,92(r2)
 800ca28:	10001745 	stb	zero,93(r2)
 800ca2c:	10001785 	stb	zero,94(r2)
 800ca30:	100017c5 	stb	zero,95(r2)
 800ca34:	10001805 	stb	zero,96(r2)
 800ca38:	10001845 	stb	zero,97(r2)
 800ca3c:	10001885 	stb	zero,98(r2)
 800ca40:	100018c5 	stb	zero,99(r2)
 800ca44:	10000c15 	stw	zero,48(r2)
 800ca48:	10000d15 	stw	zero,52(r2)
 800ca4c:	10001115 	stw	zero,68(r2)
 800ca50:	10001215 	stw	zero,72(r2)
 800ca54:	dfc00217 	ldw	ra,8(sp)
 800ca58:	dc400117 	ldw	r17,4(sp)
 800ca5c:	dc000017 	ldw	r16,0(sp)
 800ca60:	dec00304 	addi	sp,sp,12
 800ca64:	f800283a 	ret
 800ca68:	80800017 	ldw	r2,0(r16)
 800ca6c:	10000526 	beq	r2,zero,800ca84 <__sfp+0xdc>
 800ca70:	1021883a 	mov	r16,r2
 800ca74:	003fd606 	br	800c9d0 <__sfp+0x28>
 800ca78:	8009883a 	mov	r4,r16
 800ca7c:	800c7c00 	call	800c7c0 <__sinit.part.0>
 800ca80:	003fd206 	br	800c9cc <__sfp+0x24>
 800ca84:	01400104 	movi	r5,4
 800ca88:	8809883a 	mov	r4,r17
 800ca8c:	800c9300 	call	800c930 <__sfmoreglue>
 800ca90:	80800015 	stw	r2,0(r16)
 800ca94:	103ff61e 	bne	r2,zero,800ca70 <__sfp+0xc8>
 800ca98:	00c00304 	movi	r3,12
 800ca9c:	88c00015 	stw	r3,0(r17)
 800caa0:	003fec06 	br	800ca54 <__sfp+0xac>

0800caa4 <_cleanup>:
 800caa4:	008200b4 	movhi	r2,2050
 800caa8:	1127be17 	ldw	r4,-24840(r2)
 800caac:	01420074 	movhi	r5,2049
 800cab0:	29454804 	addi	r5,r5,5408
 800cab4:	800d47c1 	jmpi	800d47c <_fwalk_reent>

0800cab8 <__sinit>:
 800cab8:	20800e17 	ldw	r2,56(r4)
 800cabc:	10000126 	beq	r2,zero,800cac4 <__sinit+0xc>
 800cac0:	f800283a 	ret
 800cac4:	800c7c01 	jmpi	800c7c0 <__sinit.part.0>

0800cac8 <__sfp_lock_acquire>:
 800cac8:	f800283a 	ret

0800cacc <__sfp_lock_release>:
 800cacc:	f800283a 	ret

0800cad0 <__sinit_lock_acquire>:
 800cad0:	f800283a 	ret

0800cad4 <__sinit_lock_release>:
 800cad4:	f800283a 	ret

0800cad8 <__fp_lock_all>:
 800cad8:	008200b4 	movhi	r2,2050
 800cadc:	1127bf17 	ldw	r4,-24836(r2)
 800cae0:	01420074 	movhi	r5,2049
 800cae4:	2971eb04 	addi	r5,r5,-14420
 800cae8:	800d3e41 	jmpi	800d3e4 <_fwalk>

0800caec <__fp_unlock_all>:
 800caec:	008200b4 	movhi	r2,2050
 800caf0:	1127bf17 	ldw	r4,-24836(r2)
 800caf4:	01420074 	movhi	r5,2049
 800caf8:	29724a04 	addi	r5,r5,-14040
 800cafc:	800d3e41 	jmpi	800d3e4 <_fwalk>

0800cb00 <_malloc_trim_r>:
 800cb00:	defffb04 	addi	sp,sp,-20
 800cb04:	dcc00315 	stw	r19,12(sp)
 800cb08:	04c200b4 	movhi	r19,2050
 800cb0c:	dc800215 	stw	r18,8(sp)
 800cb10:	dc400115 	stw	r17,4(sp)
 800cb14:	dc000015 	stw	r16,0(sp)
 800cb18:	dfc00415 	stw	ra,16(sp)
 800cb1c:	2821883a 	mov	r16,r5
 800cb20:	9ce1c704 	addi	r19,r19,-30948
 800cb24:	2025883a 	mov	r18,r4
 800cb28:	80133500 	call	8013350 <__malloc_lock>
 800cb2c:	98800217 	ldw	r2,8(r19)
 800cb30:	14400117 	ldw	r17,4(r2)
 800cb34:	00bfff04 	movi	r2,-4
 800cb38:	88a2703a 	and	r17,r17,r2
 800cb3c:	8c21c83a 	sub	r16,r17,r16
 800cb40:	8403fbc4 	addi	r16,r16,4079
 800cb44:	8020d33a 	srli	r16,r16,12
 800cb48:	843fffc4 	addi	r16,r16,-1
 800cb4c:	8020933a 	slli	r16,r16,12
 800cb50:	80840008 	cmpgei	r2,r16,4096
 800cb54:	10000626 	beq	r2,zero,800cb70 <_malloc_trim_r+0x70>
 800cb58:	000b883a 	mov	r5,zero
 800cb5c:	9009883a 	mov	r4,r18
 800cb60:	800fb340 	call	800fb34 <_sbrk_r>
 800cb64:	98c00217 	ldw	r3,8(r19)
 800cb68:	1c47883a 	add	r3,r3,r17
 800cb6c:	10c00a26 	beq	r2,r3,800cb98 <_malloc_trim_r+0x98>
 800cb70:	9009883a 	mov	r4,r18
 800cb74:	80133740 	call	8013374 <__malloc_unlock>
 800cb78:	0005883a 	mov	r2,zero
 800cb7c:	dfc00417 	ldw	ra,16(sp)
 800cb80:	dcc00317 	ldw	r19,12(sp)
 800cb84:	dc800217 	ldw	r18,8(sp)
 800cb88:	dc400117 	ldw	r17,4(sp)
 800cb8c:	dc000017 	ldw	r16,0(sp)
 800cb90:	dec00504 	addi	sp,sp,20
 800cb94:	f800283a 	ret
 800cb98:	040bc83a 	sub	r5,zero,r16
 800cb9c:	9009883a 	mov	r4,r18
 800cba0:	800fb340 	call	800fb34 <_sbrk_r>
 800cba4:	10bfffd8 	cmpnei	r2,r2,-1
 800cba8:	10000d26 	beq	r2,zero,800cbe0 <_malloc_trim_r+0xe0>
 800cbac:	008200b4 	movhi	r2,2050
 800cbb0:	10af0617 	ldw	r2,-17384(r2)
 800cbb4:	98c00217 	ldw	r3,8(r19)
 800cbb8:	8c23c83a 	sub	r17,r17,r16
 800cbbc:	8c400054 	ori	r17,r17,1
 800cbc0:	1421c83a 	sub	r16,r2,r16
 800cbc4:	1c400115 	stw	r17,4(r3)
 800cbc8:	008200b4 	movhi	r2,2050
 800cbcc:	9009883a 	mov	r4,r18
 800cbd0:	142f0615 	stw	r16,-17384(r2)
 800cbd4:	80133740 	call	8013374 <__malloc_unlock>
 800cbd8:	00800044 	movi	r2,1
 800cbdc:	003fe706 	br	800cb7c <_malloc_trim_r+0x7c>
 800cbe0:	000b883a 	mov	r5,zero
 800cbe4:	9009883a 	mov	r4,r18
 800cbe8:	800fb340 	call	800fb34 <_sbrk_r>
 800cbec:	99000217 	ldw	r4,8(r19)
 800cbf0:	1107c83a 	sub	r3,r2,r4
 800cbf4:	19400410 	cmplti	r5,r3,16
 800cbf8:	283fdd1e 	bne	r5,zero,800cb70 <_malloc_trim_r+0x70>
 800cbfc:	014200b4 	movhi	r5,2050
 800cc00:	2967c017 	ldw	r5,-24832(r5)
 800cc04:	18c00054 	ori	r3,r3,1
 800cc08:	20c00115 	stw	r3,4(r4)
 800cc0c:	1145c83a 	sub	r2,r2,r5
 800cc10:	014200b4 	movhi	r5,2050
 800cc14:	28af0615 	stw	r2,-17384(r5)
 800cc18:	003fd506 	br	800cb70 <_malloc_trim_r+0x70>

0800cc1c <_free_r>:
 800cc1c:	28004f26 	beq	r5,zero,800cd5c <_free_r+0x140>
 800cc20:	defffd04 	addi	sp,sp,-12
 800cc24:	dc400115 	stw	r17,4(sp)
 800cc28:	dc000015 	stw	r16,0(sp)
 800cc2c:	2023883a 	mov	r17,r4
 800cc30:	2821883a 	mov	r16,r5
 800cc34:	dfc00215 	stw	ra,8(sp)
 800cc38:	80133500 	call	8013350 <__malloc_lock>
 800cc3c:	81ffff17 	ldw	r7,-4(r16)
 800cc40:	00bfff84 	movi	r2,-2
 800cc44:	80fffe04 	addi	r3,r16,-8
 800cc48:	3884703a 	and	r2,r7,r2
 800cc4c:	010200b4 	movhi	r4,2050
 800cc50:	188d883a 	add	r6,r3,r2
 800cc54:	2121c704 	addi	r4,r4,-30948
 800cc58:	31400117 	ldw	r5,4(r6)
 800cc5c:	22000217 	ldw	r8,8(r4)
 800cc60:	027fff04 	movi	r9,-4
 800cc64:	2a4a703a 	and	r5,r5,r9
 800cc68:	41806426 	beq	r8,r6,800cdfc <_free_r+0x1e0>
 800cc6c:	31400115 	stw	r5,4(r6)
 800cc70:	39c0004c 	andi	r7,r7,1
 800cc74:	3151883a 	add	r8,r6,r5
 800cc78:	3800281e 	bne	r7,zero,800cd1c <_free_r+0x100>
 800cc7c:	82bffe17 	ldw	r10,-8(r16)
 800cc80:	42000117 	ldw	r8,4(r8)
 800cc84:	01c200b4 	movhi	r7,2050
 800cc88:	1a87c83a 	sub	r3,r3,r10
 800cc8c:	1a400217 	ldw	r9,8(r3)
 800cc90:	39e1c904 	addi	r7,r7,-30940
 800cc94:	1285883a 	add	r2,r2,r10
 800cc98:	4200004c 	andi	r8,r8,1
 800cc9c:	49c04c26 	beq	r9,r7,800cdd0 <_free_r+0x1b4>
 800cca0:	1a800317 	ldw	r10,12(r3)
 800cca4:	4a800315 	stw	r10,12(r9)
 800cca8:	52400215 	stw	r9,8(r10)
 800ccac:	40007126 	beq	r8,zero,800ce74 <_free_r+0x258>
 800ccb0:	11400054 	ori	r5,r2,1
 800ccb4:	19400115 	stw	r5,4(r3)
 800ccb8:	30800015 	stw	r2,0(r6)
 800ccbc:	11408028 	cmpgeui	r5,r2,512
 800ccc0:	28002c1e 	bne	r5,zero,800cd74 <_free_r+0x158>
 800ccc4:	100ad0fa 	srli	r5,r2,3
 800ccc8:	100cd17a 	srli	r6,r2,5
 800cccc:	00800044 	movi	r2,1
 800ccd0:	29400044 	addi	r5,r5,1
 800ccd4:	280a90fa 	slli	r5,r5,3
 800ccd8:	21c00117 	ldw	r7,4(r4)
 800ccdc:	1184983a 	sll	r2,r2,r6
 800cce0:	214b883a 	add	r5,r4,r5
 800cce4:	29800017 	ldw	r6,0(r5)
 800cce8:	11c4b03a 	or	r2,r2,r7
 800ccec:	29fffe04 	addi	r7,r5,-8
 800ccf0:	19c00315 	stw	r7,12(r3)
 800ccf4:	19800215 	stw	r6,8(r3)
 800ccf8:	20800115 	stw	r2,4(r4)
 800ccfc:	28c00015 	stw	r3,0(r5)
 800cd00:	30c00315 	stw	r3,12(r6)
 800cd04:	8809883a 	mov	r4,r17
 800cd08:	dfc00217 	ldw	ra,8(sp)
 800cd0c:	dc400117 	ldw	r17,4(sp)
 800cd10:	dc000017 	ldw	r16,0(sp)
 800cd14:	dec00304 	addi	sp,sp,12
 800cd18:	80133741 	jmpi	8013374 <__malloc_unlock>
 800cd1c:	41c00117 	ldw	r7,4(r8)
 800cd20:	39c0004c 	andi	r7,r7,1
 800cd24:	38000e1e 	bne	r7,zero,800cd60 <_free_r+0x144>
 800cd28:	01c200b4 	movhi	r7,2050
 800cd2c:	1145883a 	add	r2,r2,r5
 800cd30:	39e1c904 	addi	r7,r7,-30940
 800cd34:	31400217 	ldw	r5,8(r6)
 800cd38:	12400054 	ori	r9,r2,1
 800cd3c:	1891883a 	add	r8,r3,r2
 800cd40:	29c05226 	beq	r5,r7,800ce8c <_free_r+0x270>
 800cd44:	31800317 	ldw	r6,12(r6)
 800cd48:	29800315 	stw	r6,12(r5)
 800cd4c:	31400215 	stw	r5,8(r6)
 800cd50:	1a400115 	stw	r9,4(r3)
 800cd54:	40800015 	stw	r2,0(r8)
 800cd58:	003fd806 	br	800ccbc <_free_r+0xa0>
 800cd5c:	f800283a 	ret
 800cd60:	11400054 	ori	r5,r2,1
 800cd64:	817fff15 	stw	r5,-4(r16)
 800cd68:	30800015 	stw	r2,0(r6)
 800cd6c:	11408028 	cmpgeui	r5,r2,512
 800cd70:	283fd426 	beq	r5,zero,800ccc4 <_free_r+0xa8>
 800cd74:	100ad27a 	srli	r5,r2,9
 800cd78:	29800168 	cmpgeui	r6,r5,5
 800cd7c:	3000341e 	bne	r6,zero,800ce50 <_free_r+0x234>
 800cd80:	100ad1ba 	srli	r5,r2,6
 800cd84:	29800e44 	addi	r6,r5,57
 800cd88:	300c90fa 	slli	r6,r6,3
 800cd8c:	29c00e04 	addi	r7,r5,56
 800cd90:	218d883a 	add	r6,r4,r6
 800cd94:	31400017 	ldw	r5,0(r6)
 800cd98:	31bffe04 	addi	r6,r6,-8
 800cd9c:	31404226 	beq	r6,r5,800cea8 <_free_r+0x28c>
 800cda0:	01ffff04 	movi	r7,-4
 800cda4:	29000117 	ldw	r4,4(r5)
 800cda8:	21c8703a 	and	r4,r4,r7
 800cdac:	1100022e 	bgeu	r2,r4,800cdb8 <_free_r+0x19c>
 800cdb0:	29400217 	ldw	r5,8(r5)
 800cdb4:	317ffb1e 	bne	r6,r5,800cda4 <_free_r+0x188>
 800cdb8:	29800317 	ldw	r6,12(r5)
 800cdbc:	19800315 	stw	r6,12(r3)
 800cdc0:	19400215 	stw	r5,8(r3)
 800cdc4:	30c00215 	stw	r3,8(r6)
 800cdc8:	28c00315 	stw	r3,12(r5)
 800cdcc:	003fcd06 	br	800cd04 <_free_r+0xe8>
 800cdd0:	40004d1e 	bne	r8,zero,800cf08 <_free_r+0x2ec>
 800cdd4:	31000317 	ldw	r4,12(r6)
 800cdd8:	31800217 	ldw	r6,8(r6)
 800cddc:	2885883a 	add	r2,r5,r2
 800cde0:	11400054 	ori	r5,r2,1
 800cde4:	31000315 	stw	r4,12(r6)
 800cde8:	21800215 	stw	r6,8(r4)
 800cdec:	19400115 	stw	r5,4(r3)
 800cdf0:	1887883a 	add	r3,r3,r2
 800cdf4:	18800015 	stw	r2,0(r3)
 800cdf8:	003fc206 	br	800cd04 <_free_r+0xe8>
 800cdfc:	39c0004c 	andi	r7,r7,1
 800ce00:	1145883a 	add	r2,r2,r5
 800ce04:	3800071e 	bne	r7,zero,800ce24 <_free_r+0x208>
 800ce08:	81fffe17 	ldw	r7,-8(r16)
 800ce0c:	19c7c83a 	sub	r3,r3,r7
 800ce10:	19400317 	ldw	r5,12(r3)
 800ce14:	19800217 	ldw	r6,8(r3)
 800ce18:	11c5883a 	add	r2,r2,r7
 800ce1c:	31400315 	stw	r5,12(r6)
 800ce20:	29800215 	stw	r6,8(r5)
 800ce24:	014200b4 	movhi	r5,2050
 800ce28:	11800054 	ori	r6,r2,1
 800ce2c:	2967c117 	ldw	r5,-24828(r5)
 800ce30:	19800115 	stw	r6,4(r3)
 800ce34:	20c00215 	stw	r3,8(r4)
 800ce38:	117fb236 	bltu	r2,r5,800cd04 <_free_r+0xe8>
 800ce3c:	008200b4 	movhi	r2,2050
 800ce40:	116ef217 	ldw	r5,-17464(r2)
 800ce44:	8809883a 	mov	r4,r17
 800ce48:	800cb000 	call	800cb00 <_malloc_trim_r>
 800ce4c:	003fad06 	br	800cd04 <_free_r+0xe8>
 800ce50:	29800568 	cmpgeui	r6,r5,21
 800ce54:	30000926 	beq	r6,zero,800ce7c <_free_r+0x260>
 800ce58:	29801568 	cmpgeui	r6,r5,85
 800ce5c:	3000191e 	bne	r6,zero,800cec4 <_free_r+0x2a8>
 800ce60:	100ad33a 	srli	r5,r2,12
 800ce64:	29801bc4 	addi	r6,r5,111
 800ce68:	300c90fa 	slli	r6,r6,3
 800ce6c:	29c01b84 	addi	r7,r5,110
 800ce70:	003fc706 	br	800cd90 <_free_r+0x174>
 800ce74:	1145883a 	add	r2,r2,r5
 800ce78:	003fae06 	br	800cd34 <_free_r+0x118>
 800ce7c:	29801704 	addi	r6,r5,92
 800ce80:	300c90fa 	slli	r6,r6,3
 800ce84:	29c016c4 	addi	r7,r5,91
 800ce88:	003fc106 	br	800cd90 <_free_r+0x174>
 800ce8c:	20c00515 	stw	r3,20(r4)
 800ce90:	20c00415 	stw	r3,16(r4)
 800ce94:	19c00315 	stw	r7,12(r3)
 800ce98:	19c00215 	stw	r7,8(r3)
 800ce9c:	1a400115 	stw	r9,4(r3)
 800cea0:	40800015 	stw	r2,0(r8)
 800cea4:	003f9706 	br	800cd04 <_free_r+0xe8>
 800cea8:	380fd0ba 	srai	r7,r7,2
 800ceac:	00800044 	movi	r2,1
 800ceb0:	22000117 	ldw	r8,4(r4)
 800ceb4:	11ce983a 	sll	r7,r2,r7
 800ceb8:	3a0eb03a 	or	r7,r7,r8
 800cebc:	21c00115 	stw	r7,4(r4)
 800cec0:	003fbe06 	br	800cdbc <_free_r+0x1a0>
 800cec4:	29805568 	cmpgeui	r6,r5,341
 800cec8:	3000051e 	bne	r6,zero,800cee0 <_free_r+0x2c4>
 800cecc:	100ad3fa 	srli	r5,r2,15
 800ced0:	29801e04 	addi	r6,r5,120
 800ced4:	300c90fa 	slli	r6,r6,3
 800ced8:	29c01dc4 	addi	r7,r5,119
 800cedc:	003fac06 	br	800cd90 <_free_r+0x174>
 800cee0:	29415568 	cmpgeui	r5,r5,1365
 800cee4:	2800051e 	bne	r5,zero,800cefc <_free_r+0x2e0>
 800cee8:	100ad4ba 	srli	r5,r2,18
 800ceec:	29801f44 	addi	r6,r5,125
 800cef0:	300c90fa 	slli	r6,r6,3
 800cef4:	29c01f04 	addi	r7,r5,124
 800cef8:	003fa506 	br	800cd90 <_free_r+0x174>
 800cefc:	0180fe04 	movi	r6,1016
 800cf00:	01c01f84 	movi	r7,126
 800cf04:	003fa206 	br	800cd90 <_free_r+0x174>
 800cf08:	11000054 	ori	r4,r2,1
 800cf0c:	19000115 	stw	r4,4(r3)
 800cf10:	30800015 	stw	r2,0(r6)
 800cf14:	003f7b06 	br	800cd04 <_free_r+0xe8>

0800cf18 <__sfvwrite_r>:
 800cf18:	30800217 	ldw	r2,8(r6)
 800cf1c:	1000c826 	beq	r2,zero,800d240 <__sfvwrite_r+0x328>
 800cf20:	29c0030b 	ldhu	r7,12(r5)
 800cf24:	defff404 	addi	sp,sp,-48
 800cf28:	dd800815 	stw	r22,32(sp)
 800cf2c:	dd400715 	stw	r21,28(sp)
 800cf30:	dc000215 	stw	r16,8(sp)
 800cf34:	dfc00b15 	stw	ra,44(sp)
 800cf38:	df000a15 	stw	fp,40(sp)
 800cf3c:	ddc00915 	stw	r23,36(sp)
 800cf40:	dd000615 	stw	r20,24(sp)
 800cf44:	dcc00515 	stw	r19,20(sp)
 800cf48:	dc800415 	stw	r18,16(sp)
 800cf4c:	dc400315 	stw	r17,12(sp)
 800cf50:	3880020c 	andi	r2,r7,8
 800cf54:	302d883a 	mov	r22,r6
 800cf58:	202b883a 	mov	r21,r4
 800cf5c:	2821883a 	mov	r16,r5
 800cf60:	10002226 	beq	r2,zero,800cfec <__sfvwrite_r+0xd4>
 800cf64:	28800417 	ldw	r2,16(r5)
 800cf68:	10002026 	beq	r2,zero,800cfec <__sfvwrite_r+0xd4>
 800cf6c:	3880008c 	andi	r2,r7,2
 800cf70:	b4400017 	ldw	r17,0(r22)
 800cf74:	10002526 	beq	r2,zero,800d00c <__sfvwrite_r+0xf4>
 800cf78:	80800917 	ldw	r2,36(r16)
 800cf7c:	81400717 	ldw	r5,28(r16)
 800cf80:	05200034 	movhi	r20,32768
 800cf84:	0027883a 	mov	r19,zero
 800cf88:	0025883a 	mov	r18,zero
 800cf8c:	a53f0004 	addi	r20,r20,-1024
 800cf90:	980d883a 	mov	r6,r19
 800cf94:	a809883a 	mov	r4,r21
 800cf98:	90001026 	beq	r18,zero,800cfdc <__sfvwrite_r+0xc4>
 800cf9c:	900f883a 	mov	r7,r18
 800cfa0:	a480012e 	bgeu	r20,r18,800cfa8 <__sfvwrite_r+0x90>
 800cfa4:	a00f883a 	mov	r7,r20
 800cfa8:	103ee83a 	callr	r2
 800cfac:	00809f0e 	bge	zero,r2,800d22c <__sfvwrite_r+0x314>
 800cfb0:	b1000217 	ldw	r4,8(r22)
 800cfb4:	98a7883a 	add	r19,r19,r2
 800cfb8:	90a5c83a 	sub	r18,r18,r2
 800cfbc:	2085c83a 	sub	r2,r4,r2
 800cfc0:	b0800215 	stw	r2,8(r22)
 800cfc4:	10006326 	beq	r2,zero,800d154 <__sfvwrite_r+0x23c>
 800cfc8:	80800917 	ldw	r2,36(r16)
 800cfcc:	81400717 	ldw	r5,28(r16)
 800cfd0:	980d883a 	mov	r6,r19
 800cfd4:	a809883a 	mov	r4,r21
 800cfd8:	903ff01e 	bne	r18,zero,800cf9c <__sfvwrite_r+0x84>
 800cfdc:	8cc00017 	ldw	r19,0(r17)
 800cfe0:	8c800117 	ldw	r18,4(r17)
 800cfe4:	8c400204 	addi	r17,r17,8
 800cfe8:	003fe906 	br	800cf90 <__sfvwrite_r+0x78>
 800cfec:	800b883a 	mov	r5,r16
 800cff0:	a809883a 	mov	r4,r21
 800cff4:	800aa300 	call	800aa30 <__swsetup_r>
 800cff8:	1000f81e 	bne	r2,zero,800d3dc <__sfvwrite_r+0x4c4>
 800cffc:	81c0030b 	ldhu	r7,12(r16)
 800d000:	b4400017 	ldw	r17,0(r22)
 800d004:	3880008c 	andi	r2,r7,2
 800d008:	103fdb1e 	bne	r2,zero,800cf78 <__sfvwrite_r+0x60>
 800d00c:	3880004c 	andi	r2,r7,1
 800d010:	84800217 	ldw	r18,8(r16)
 800d014:	82000017 	ldw	r8,0(r16)
 800d018:	10008b1e 	bne	r2,zero,800d248 <__sfvwrite_r+0x330>
 800d01c:	00a00034 	movhi	r2,32768
 800d020:	10bfff84 	addi	r2,r2,-2
 800d024:	00e00034 	movhi	r3,32768
 800d028:	d8800015 	stw	r2,0(sp)
 800d02c:	18bfffc4 	addi	r2,r3,-1
 800d030:	0039883a 	mov	fp,zero
 800d034:	0027883a 	mov	r19,zero
 800d038:	d8800115 	stw	r2,4(sp)
 800d03c:	98004126 	beq	r19,zero,800d144 <__sfvwrite_r+0x22c>
 800d040:	3880800c 	andi	r2,r7,512
 800d044:	10009326 	beq	r2,zero,800d294 <__sfvwrite_r+0x37c>
 800d048:	902f883a 	mov	r23,r18
 800d04c:	9c80ba36 	bltu	r19,r18,800d338 <__sfvwrite_r+0x420>
 800d050:	3881200c 	andi	r2,r7,1152
 800d054:	10002626 	beq	r2,zero,800d0f0 <__sfvwrite_r+0x1d8>
 800d058:	81800517 	ldw	r6,20(r16)
 800d05c:	81400417 	ldw	r5,16(r16)
 800d060:	98800044 	addi	r2,r19,1
 800d064:	3189883a 	add	r4,r6,r6
 800d068:	2189883a 	add	r4,r4,r6
 800d06c:	2028d7fa 	srli	r20,r4,31
 800d070:	4165c83a 	sub	r18,r8,r5
 800d074:	1485883a 	add	r2,r2,r18
 800d078:	a109883a 	add	r4,r20,r4
 800d07c:	2029d07a 	srai	r20,r4,1
 800d080:	a00d883a 	mov	r6,r20
 800d084:	a080022e 	bgeu	r20,r2,800d090 <__sfvwrite_r+0x178>
 800d088:	1029883a 	mov	r20,r2
 800d08c:	100d883a 	mov	r6,r2
 800d090:	39c1000c 	andi	r7,r7,1024
 800d094:	3800c126 	beq	r7,zero,800d39c <__sfvwrite_r+0x484>
 800d098:	a809883a 	mov	r4,r21
 800d09c:	300b883a 	mov	r5,r6
 800d0a0:	800d71c0 	call	800d71c <_malloc_r>
 800d0a4:	1009883a 	mov	r4,r2
 800d0a8:	1000c826 	beq	r2,zero,800d3cc <__sfvwrite_r+0x4b4>
 800d0ac:	81400417 	ldw	r5,16(r16)
 800d0b0:	900d883a 	mov	r6,r18
 800d0b4:	800dfd00 	call	800dfd0 <memcpy>
 800d0b8:	1009883a 	mov	r4,r2
 800d0bc:	8080030b 	ldhu	r2,12(r16)
 800d0c0:	00fedfc4 	movi	r3,-1153
 800d0c4:	10c4703a 	and	r2,r2,r3
 800d0c8:	10802014 	ori	r2,r2,128
 800d0cc:	8080030d 	sth	r2,12(r16)
 800d0d0:	2491883a 	add	r8,r4,r18
 800d0d4:	a485c83a 	sub	r2,r20,r18
 800d0d8:	81000415 	stw	r4,16(r16)
 800d0dc:	82000015 	stw	r8,0(r16)
 800d0e0:	85000515 	stw	r20,20(r16)
 800d0e4:	9825883a 	mov	r18,r19
 800d0e8:	80800215 	stw	r2,8(r16)
 800d0ec:	982f883a 	mov	r23,r19
 800d0f0:	4009883a 	mov	r4,r8
 800d0f4:	b80d883a 	mov	r6,r23
 800d0f8:	e00b883a 	mov	r5,fp
 800d0fc:	800e0d00 	call	800e0d0 <memmove>
 800d100:	81000217 	ldw	r4,8(r16)
 800d104:	80800017 	ldw	r2,0(r16)
 800d108:	9829883a 	mov	r20,r19
 800d10c:	24a5c83a 	sub	r18,r4,r18
 800d110:	15c5883a 	add	r2,r2,r23
 800d114:	84800215 	stw	r18,8(r16)
 800d118:	80800015 	stw	r2,0(r16)
 800d11c:	0027883a 	mov	r19,zero
 800d120:	b0800217 	ldw	r2,8(r22)
 800d124:	e539883a 	add	fp,fp,r20
 800d128:	1529c83a 	sub	r20,r2,r20
 800d12c:	b5000215 	stw	r20,8(r22)
 800d130:	a0000826 	beq	r20,zero,800d154 <__sfvwrite_r+0x23c>
 800d134:	81c0030b 	ldhu	r7,12(r16)
 800d138:	84800217 	ldw	r18,8(r16)
 800d13c:	82000017 	ldw	r8,0(r16)
 800d140:	983fbf1e 	bne	r19,zero,800d040 <__sfvwrite_r+0x128>
 800d144:	8f000017 	ldw	fp,0(r17)
 800d148:	8cc00117 	ldw	r19,4(r17)
 800d14c:	8c400204 	addi	r17,r17,8
 800d150:	003fba06 	br	800d03c <__sfvwrite_r+0x124>
 800d154:	0005883a 	mov	r2,zero
 800d158:	dfc00b17 	ldw	ra,44(sp)
 800d15c:	df000a17 	ldw	fp,40(sp)
 800d160:	ddc00917 	ldw	r23,36(sp)
 800d164:	dd800817 	ldw	r22,32(sp)
 800d168:	dd400717 	ldw	r21,28(sp)
 800d16c:	dd000617 	ldw	r20,24(sp)
 800d170:	dcc00517 	ldw	r19,20(sp)
 800d174:	dc800417 	ldw	r18,16(sp)
 800d178:	dc400317 	ldw	r17,12(sp)
 800d17c:	dc000217 	ldw	r16,8(sp)
 800d180:	dec00c04 	addi	sp,sp,48
 800d184:	f800283a 	ret
 800d188:	e1c07316 	blt	fp,r7,800d358 <__sfvwrite_r+0x440>
 800d18c:	80800917 	ldw	r2,36(r16)
 800d190:	81400717 	ldw	r5,28(r16)
 800d194:	b80d883a 	mov	r6,r23
 800d198:	a809883a 	mov	r4,r21
 800d19c:	103ee83a 	callr	r2
 800d1a0:	1025883a 	mov	r18,r2
 800d1a4:	0080210e 	bge	zero,r2,800d22c <__sfvwrite_r+0x314>
 800d1a8:	a4a9c83a 	sub	r20,r20,r18
 800d1ac:	a0006526 	beq	r20,zero,800d344 <__sfvwrite_r+0x42c>
 800d1b0:	00800044 	movi	r2,1
 800d1b4:	b1800217 	ldw	r6,8(r22)
 800d1b8:	bcaf883a 	add	r23,r23,r18
 800d1bc:	9ca7c83a 	sub	r19,r19,r18
 800d1c0:	34a5c83a 	sub	r18,r6,r18
 800d1c4:	b4800215 	stw	r18,8(r22)
 800d1c8:	903fe226 	beq	r18,zero,800d154 <__sfvwrite_r+0x23c>
 800d1cc:	84800217 	ldw	r18,8(r16)
 800d1d0:	82000017 	ldw	r8,0(r16)
 800d1d4:	98002126 	beq	r19,zero,800d25c <__sfvwrite_r+0x344>
 800d1d8:	10002426 	beq	r2,zero,800d26c <__sfvwrite_r+0x354>
 800d1dc:	a005883a 	mov	r2,r20
 800d1e0:	9839883a 	mov	fp,r19
 800d1e4:	14c0012e 	bgeu	r2,r19,800d1ec <__sfvwrite_r+0x2d4>
 800d1e8:	1039883a 	mov	fp,r2
 800d1ec:	80800417 	ldw	r2,16(r16)
 800d1f0:	81c00517 	ldw	r7,20(r16)
 800d1f4:	123fe42e 	bgeu	r2,r8,800d188 <__sfvwrite_r+0x270>
 800d1f8:	3ca5883a 	add	r18,r7,r18
 800d1fc:	973fe20e 	bge	r18,fp,800d188 <__sfvwrite_r+0x270>
 800d200:	b80b883a 	mov	r5,r23
 800d204:	4009883a 	mov	r4,r8
 800d208:	900d883a 	mov	r6,r18
 800d20c:	800e0d00 	call	800e0d0 <memmove>
 800d210:	80800017 	ldw	r2,0(r16)
 800d214:	800b883a 	mov	r5,r16
 800d218:	a809883a 	mov	r4,r21
 800d21c:	1485883a 	add	r2,r2,r18
 800d220:	80800015 	stw	r2,0(r16)
 800d224:	800c7240 	call	800c724 <_fflush_r>
 800d228:	103fdf26 	beq	r2,zero,800d1a8 <__sfvwrite_r+0x290>
 800d22c:	8080030b 	ldhu	r2,12(r16)
 800d230:	10801014 	ori	r2,r2,64
 800d234:	8080030d 	sth	r2,12(r16)
 800d238:	00bfffc4 	movi	r2,-1
 800d23c:	003fc606 	br	800d158 <__sfvwrite_r+0x240>
 800d240:	0005883a 	mov	r2,zero
 800d244:	f800283a 	ret
 800d248:	0027883a 	mov	r19,zero
 800d24c:	0029883a 	mov	r20,zero
 800d250:	0005883a 	mov	r2,zero
 800d254:	002f883a 	mov	r23,zero
 800d258:	983fdf1e 	bne	r19,zero,800d1d8 <__sfvwrite_r+0x2c0>
 800d25c:	8cc00117 	ldw	r19,4(r17)
 800d260:	8dc00017 	ldw	r23,0(r17)
 800d264:	8c400204 	addi	r17,r17,8
 800d268:	983ffc26 	beq	r19,zero,800d25c <__sfvwrite_r+0x344>
 800d26c:	980d883a 	mov	r6,r19
 800d270:	01400284 	movi	r5,10
 800d274:	b809883a 	mov	r4,r23
 800d278:	da000015 	stw	r8,0(sp)
 800d27c:	800defc0 	call	800defc <memchr>
 800d280:	da000017 	ldw	r8,0(sp)
 800d284:	10004226 	beq	r2,zero,800d390 <__sfvwrite_r+0x478>
 800d288:	10800044 	addi	r2,r2,1
 800d28c:	15e9c83a 	sub	r20,r2,r23
 800d290:	003fd206 	br	800d1dc <__sfvwrite_r+0x2c4>
 800d294:	80800417 	ldw	r2,16(r16)
 800d298:	12001436 	bltu	r2,r8,800d2ec <__sfvwrite_r+0x3d4>
 800d29c:	85000517 	ldw	r20,20(r16)
 800d2a0:	9d001236 	bltu	r19,r20,800d2ec <__sfvwrite_r+0x3d4>
 800d2a4:	d8800017 	ldw	r2,0(sp)
 800d2a8:	14c0372e 	bgeu	r2,r19,800d388 <__sfvwrite_r+0x470>
 800d2ac:	d9000117 	ldw	r4,4(sp)
 800d2b0:	a00b883a 	mov	r5,r20
 800d2b4:	80051080 	call	8005108 <__divsi3>
 800d2b8:	a00b883a 	mov	r5,r20
 800d2bc:	1009883a 	mov	r4,r2
 800d2c0:	80052bc0 	call	80052bc <__mulsi3>
 800d2c4:	82000917 	ldw	r8,36(r16)
 800d2c8:	81400717 	ldw	r5,28(r16)
 800d2cc:	100f883a 	mov	r7,r2
 800d2d0:	e00d883a 	mov	r6,fp
 800d2d4:	a809883a 	mov	r4,r21
 800d2d8:	403ee83a 	callr	r8
 800d2dc:	1029883a 	mov	r20,r2
 800d2e0:	00bfd20e 	bge	zero,r2,800d22c <__sfvwrite_r+0x314>
 800d2e4:	9d27c83a 	sub	r19,r19,r20
 800d2e8:	003f8d06 	br	800d120 <__sfvwrite_r+0x208>
 800d2ec:	9029883a 	mov	r20,r18
 800d2f0:	9c80012e 	bgeu	r19,r18,800d2f8 <__sfvwrite_r+0x3e0>
 800d2f4:	9829883a 	mov	r20,r19
 800d2f8:	4009883a 	mov	r4,r8
 800d2fc:	a00d883a 	mov	r6,r20
 800d300:	e00b883a 	mov	r5,fp
 800d304:	800e0d00 	call	800e0d0 <memmove>
 800d308:	80800217 	ldw	r2,8(r16)
 800d30c:	81000017 	ldw	r4,0(r16)
 800d310:	1505c83a 	sub	r2,r2,r20
 800d314:	2509883a 	add	r4,r4,r20
 800d318:	80800215 	stw	r2,8(r16)
 800d31c:	81000015 	stw	r4,0(r16)
 800d320:	103ff01e 	bne	r2,zero,800d2e4 <__sfvwrite_r+0x3cc>
 800d324:	800b883a 	mov	r5,r16
 800d328:	a809883a 	mov	r4,r21
 800d32c:	800c7240 	call	800c724 <_fflush_r>
 800d330:	103fec26 	beq	r2,zero,800d2e4 <__sfvwrite_r+0x3cc>
 800d334:	003fbd06 	br	800d22c <__sfvwrite_r+0x314>
 800d338:	9825883a 	mov	r18,r19
 800d33c:	982f883a 	mov	r23,r19
 800d340:	003f6b06 	br	800d0f0 <__sfvwrite_r+0x1d8>
 800d344:	800b883a 	mov	r5,r16
 800d348:	a809883a 	mov	r4,r21
 800d34c:	800c7240 	call	800c724 <_fflush_r>
 800d350:	103f9826 	beq	r2,zero,800d1b4 <__sfvwrite_r+0x29c>
 800d354:	003fb506 	br	800d22c <__sfvwrite_r+0x314>
 800d358:	e00d883a 	mov	r6,fp
 800d35c:	b80b883a 	mov	r5,r23
 800d360:	4009883a 	mov	r4,r8
 800d364:	800e0d00 	call	800e0d0 <memmove>
 800d368:	80800217 	ldw	r2,8(r16)
 800d36c:	81800017 	ldw	r6,0(r16)
 800d370:	e025883a 	mov	r18,fp
 800d374:	1705c83a 	sub	r2,r2,fp
 800d378:	370d883a 	add	r6,r6,fp
 800d37c:	80800215 	stw	r2,8(r16)
 800d380:	81800015 	stw	r6,0(r16)
 800d384:	003f8806 	br	800d1a8 <__sfvwrite_r+0x290>
 800d388:	9809883a 	mov	r4,r19
 800d38c:	003fc806 	br	800d2b0 <__sfvwrite_r+0x398>
 800d390:	98800044 	addi	r2,r19,1
 800d394:	1029883a 	mov	r20,r2
 800d398:	003f9106 	br	800d1e0 <__sfvwrite_r+0x2c8>
 800d39c:	a809883a 	mov	r4,r21
 800d3a0:	800f5d00 	call	800f5d0 <_realloc_r>
 800d3a4:	1009883a 	mov	r4,r2
 800d3a8:	103f491e 	bne	r2,zero,800d0d0 <__sfvwrite_r+0x1b8>
 800d3ac:	81400417 	ldw	r5,16(r16)
 800d3b0:	a809883a 	mov	r4,r21
 800d3b4:	800cc1c0 	call	800cc1c <_free_r>
 800d3b8:	8080030b 	ldhu	r2,12(r16)
 800d3bc:	00c00304 	movi	r3,12
 800d3c0:	a8c00015 	stw	r3,0(r21)
 800d3c4:	10bfdfcc 	andi	r2,r2,65407
 800d3c8:	003f9906 	br	800d230 <__sfvwrite_r+0x318>
 800d3cc:	00c00304 	movi	r3,12
 800d3d0:	8080030b 	ldhu	r2,12(r16)
 800d3d4:	a8c00015 	stw	r3,0(r21)
 800d3d8:	003f9506 	br	800d230 <__sfvwrite_r+0x318>
 800d3dc:	00bfffc4 	movi	r2,-1
 800d3e0:	003f5d06 	br	800d158 <__sfvwrite_r+0x240>

0800d3e4 <_fwalk>:
 800d3e4:	defffa04 	addi	sp,sp,-24
 800d3e8:	dd000415 	stw	r20,16(sp)
 800d3ec:	dcc00315 	stw	r19,12(sp)
 800d3f0:	dc800215 	stw	r18,8(sp)
 800d3f4:	dfc00515 	stw	ra,20(sp)
 800d3f8:	dc400115 	stw	r17,4(sp)
 800d3fc:	dc000015 	stw	r16,0(sp)
 800d400:	2827883a 	mov	r19,r5
 800d404:	2480b804 	addi	r18,r4,736
 800d408:	0029883a 	mov	r20,zero
 800d40c:	94400117 	ldw	r17,4(r18)
 800d410:	94000217 	ldw	r16,8(r18)
 800d414:	8c7fffc4 	addi	r17,r17,-1
 800d418:	88000d16 	blt	r17,zero,800d450 <_fwalk+0x6c>
 800d41c:	8080030b 	ldhu	r2,12(r16)
 800d420:	8c7fffc4 	addi	r17,r17,-1
 800d424:	108000b0 	cmpltui	r2,r2,2
 800d428:	1000061e 	bne	r2,zero,800d444 <_fwalk+0x60>
 800d42c:	8080038f 	ldh	r2,14(r16)
 800d430:	8009883a 	mov	r4,r16
 800d434:	10bfffe0 	cmpeqi	r2,r2,-1
 800d438:	1000021e 	bne	r2,zero,800d444 <_fwalk+0x60>
 800d43c:	983ee83a 	callr	r19
 800d440:	a0a8b03a 	or	r20,r20,r2
 800d444:	88bfffd8 	cmpnei	r2,r17,-1
 800d448:	84001a04 	addi	r16,r16,104
 800d44c:	103ff31e 	bne	r2,zero,800d41c <_fwalk+0x38>
 800d450:	94800017 	ldw	r18,0(r18)
 800d454:	903fed1e 	bne	r18,zero,800d40c <_fwalk+0x28>
 800d458:	a005883a 	mov	r2,r20
 800d45c:	dfc00517 	ldw	ra,20(sp)
 800d460:	dd000417 	ldw	r20,16(sp)
 800d464:	dcc00317 	ldw	r19,12(sp)
 800d468:	dc800217 	ldw	r18,8(sp)
 800d46c:	dc400117 	ldw	r17,4(sp)
 800d470:	dc000017 	ldw	r16,0(sp)
 800d474:	dec00604 	addi	sp,sp,24
 800d478:	f800283a 	ret

0800d47c <_fwalk_reent>:
 800d47c:	defff904 	addi	sp,sp,-28
 800d480:	dd400515 	stw	r21,20(sp)
 800d484:	dd000415 	stw	r20,16(sp)
 800d488:	dcc00315 	stw	r19,12(sp)
 800d48c:	dc800215 	stw	r18,8(sp)
 800d490:	dfc00615 	stw	ra,24(sp)
 800d494:	dc400115 	stw	r17,4(sp)
 800d498:	dc000015 	stw	r16,0(sp)
 800d49c:	202b883a 	mov	r21,r4
 800d4a0:	2827883a 	mov	r19,r5
 800d4a4:	2480b804 	addi	r18,r4,736
 800d4a8:	0029883a 	mov	r20,zero
 800d4ac:	94400117 	ldw	r17,4(r18)
 800d4b0:	94000217 	ldw	r16,8(r18)
 800d4b4:	8c7fffc4 	addi	r17,r17,-1
 800d4b8:	88000e16 	blt	r17,zero,800d4f4 <_fwalk_reent+0x78>
 800d4bc:	8080030b 	ldhu	r2,12(r16)
 800d4c0:	8c7fffc4 	addi	r17,r17,-1
 800d4c4:	108000b0 	cmpltui	r2,r2,2
 800d4c8:	1000071e 	bne	r2,zero,800d4e8 <_fwalk_reent+0x6c>
 800d4cc:	8080038f 	ldh	r2,14(r16)
 800d4d0:	800b883a 	mov	r5,r16
 800d4d4:	a809883a 	mov	r4,r21
 800d4d8:	10bfffe0 	cmpeqi	r2,r2,-1
 800d4dc:	1000021e 	bne	r2,zero,800d4e8 <_fwalk_reent+0x6c>
 800d4e0:	983ee83a 	callr	r19
 800d4e4:	a0a8b03a 	or	r20,r20,r2
 800d4e8:	88bfffd8 	cmpnei	r2,r17,-1
 800d4ec:	84001a04 	addi	r16,r16,104
 800d4f0:	103ff21e 	bne	r2,zero,800d4bc <_fwalk_reent+0x40>
 800d4f4:	94800017 	ldw	r18,0(r18)
 800d4f8:	903fec1e 	bne	r18,zero,800d4ac <_fwalk_reent+0x30>
 800d4fc:	a005883a 	mov	r2,r20
 800d500:	dfc00617 	ldw	ra,24(sp)
 800d504:	dd400517 	ldw	r21,20(sp)
 800d508:	dd000417 	ldw	r20,16(sp)
 800d50c:	dcc00317 	ldw	r19,12(sp)
 800d510:	dc800217 	ldw	r18,8(sp)
 800d514:	dc400117 	ldw	r17,4(sp)
 800d518:	dc000017 	ldw	r16,0(sp)
 800d51c:	dec00704 	addi	sp,sp,28
 800d520:	f800283a 	ret

0800d524 <__localeconv_l>:
 800d524:	20803c04 	addi	r2,r4,240
 800d528:	f800283a 	ret

0800d52c <_localeconv_r>:
 800d52c:	008200b4 	movhi	r2,2050
 800d530:	10a30504 	addi	r2,r2,-29676
 800d534:	f800283a 	ret

0800d538 <localeconv>:
 800d538:	008200b4 	movhi	r2,2050
 800d53c:	10a30504 	addi	r2,r2,-29676
 800d540:	f800283a 	ret

0800d544 <__swhatbuf_r>:
 800d544:	deffea04 	addi	sp,sp,-88
 800d548:	dc001215 	stw	r16,72(sp)
 800d54c:	2821883a 	mov	r16,r5
 800d550:	2940038f 	ldh	r5,14(r5)
 800d554:	dc801415 	stw	r18,80(sp)
 800d558:	dc401315 	stw	r17,76(sp)
 800d55c:	dfc01515 	stw	ra,84(sp)
 800d560:	3023883a 	mov	r17,r6
 800d564:	3825883a 	mov	r18,r7
 800d568:	28001016 	blt	r5,zero,800d5ac <__swhatbuf_r+0x68>
 800d56c:	d80d883a 	mov	r6,sp
 800d570:	80118800 	call	8011880 <_fstat_r>
 800d574:	10000d16 	blt	r2,zero,800d5ac <__swhatbuf_r+0x68>
 800d578:	d8c00117 	ldw	r3,4(sp)
 800d57c:	00820004 	movi	r2,2048
 800d580:	18fc000c 	andi	r3,r3,61440
 800d584:	18c80020 	cmpeqi	r3,r3,8192
 800d588:	90c00015 	stw	r3,0(r18)
 800d58c:	00c10004 	movi	r3,1024
 800d590:	88c00015 	stw	r3,0(r17)
 800d594:	dfc01517 	ldw	ra,84(sp)
 800d598:	dc801417 	ldw	r18,80(sp)
 800d59c:	dc401317 	ldw	r17,76(sp)
 800d5a0:	dc001217 	ldw	r16,72(sp)
 800d5a4:	dec01604 	addi	sp,sp,88
 800d5a8:	f800283a 	ret
 800d5ac:	8080030b 	ldhu	r2,12(r16)
 800d5b0:	90000015 	stw	zero,0(r18)
 800d5b4:	1080200c 	andi	r2,r2,128
 800d5b8:	10000426 	beq	r2,zero,800d5cc <__swhatbuf_r+0x88>
 800d5bc:	00801004 	movi	r2,64
 800d5c0:	88800015 	stw	r2,0(r17)
 800d5c4:	0005883a 	mov	r2,zero
 800d5c8:	003ff206 	br	800d594 <__swhatbuf_r+0x50>
 800d5cc:	00810004 	movi	r2,1024
 800d5d0:	88800015 	stw	r2,0(r17)
 800d5d4:	0005883a 	mov	r2,zero
 800d5d8:	003fee06 	br	800d594 <__swhatbuf_r+0x50>

0800d5dc <__smakebuf_r>:
 800d5dc:	2880030b 	ldhu	r2,12(r5)
 800d5e0:	defffa04 	addi	sp,sp,-24
 800d5e4:	dc000215 	stw	r16,8(sp)
 800d5e8:	dfc00515 	stw	ra,20(sp)
 800d5ec:	dc800415 	stw	r18,16(sp)
 800d5f0:	dc400315 	stw	r17,12(sp)
 800d5f4:	1080008c 	andi	r2,r2,2
 800d5f8:	2821883a 	mov	r16,r5
 800d5fc:	10000b26 	beq	r2,zero,800d62c <__smakebuf_r+0x50>
 800d600:	288010c4 	addi	r2,r5,67
 800d604:	28800015 	stw	r2,0(r5)
 800d608:	28800415 	stw	r2,16(r5)
 800d60c:	00800044 	movi	r2,1
 800d610:	28800515 	stw	r2,20(r5)
 800d614:	dfc00517 	ldw	ra,20(sp)
 800d618:	dc800417 	ldw	r18,16(sp)
 800d61c:	dc400317 	ldw	r17,12(sp)
 800d620:	dc000217 	ldw	r16,8(sp)
 800d624:	dec00604 	addi	sp,sp,24
 800d628:	f800283a 	ret
 800d62c:	d9c00104 	addi	r7,sp,4
 800d630:	d80d883a 	mov	r6,sp
 800d634:	2023883a 	mov	r17,r4
 800d638:	800d5440 	call	800d544 <__swhatbuf_r>
 800d63c:	d9000117 	ldw	r4,4(sp)
 800d640:	1025883a 	mov	r18,r2
 800d644:	2000131e 	bne	r4,zero,800d694 <__smakebuf_r+0xb8>
 800d648:	d9400017 	ldw	r5,0(sp)
 800d64c:	8809883a 	mov	r4,r17
 800d650:	800d71c0 	call	800d71c <_malloc_r>
 800d654:	10001c26 	beq	r2,zero,800d6c8 <__smakebuf_r+0xec>
 800d658:	01020074 	movhi	r4,2049
 800d65c:	2131ed04 	addi	r4,r4,-14412
 800d660:	80c0030b 	ldhu	r3,12(r16)
 800d664:	89000f15 	stw	r4,60(r17)
 800d668:	80800015 	stw	r2,0(r16)
 800d66c:	80800415 	stw	r2,16(r16)
 800d670:	d8800017 	ldw	r2,0(sp)
 800d674:	d9400117 	ldw	r5,4(sp)
 800d678:	18c02014 	ori	r3,r3,128
 800d67c:	80c0030d 	sth	r3,12(r16)
 800d680:	80800515 	stw	r2,20(r16)
 800d684:	28001d1e 	bne	r5,zero,800d6fc <__smakebuf_r+0x120>
 800d688:	90c6b03a 	or	r3,r18,r3
 800d68c:	80c0030d 	sth	r3,12(r16)
 800d690:	003fe006 	br	800d614 <__smakebuf_r+0x38>
 800d694:	8140038f 	ldh	r5,14(r16)
 800d698:	8809883a 	mov	r4,r17
 800d69c:	80118e00 	call	80118e0 <_isatty_r>
 800d6a0:	103fe926 	beq	r2,zero,800d648 <__smakebuf_r+0x6c>
 800d6a4:	8080030b 	ldhu	r2,12(r16)
 800d6a8:	80c010c4 	addi	r3,r16,67
 800d6ac:	80c00015 	stw	r3,0(r16)
 800d6b0:	10800054 	ori	r2,r2,1
 800d6b4:	8080030d 	sth	r2,12(r16)
 800d6b8:	00800044 	movi	r2,1
 800d6bc:	80c00415 	stw	r3,16(r16)
 800d6c0:	80800515 	stw	r2,20(r16)
 800d6c4:	003fe006 	br	800d648 <__smakebuf_r+0x6c>
 800d6c8:	8080030b 	ldhu	r2,12(r16)
 800d6cc:	10c0800c 	andi	r3,r2,512
 800d6d0:	183fd01e 	bne	r3,zero,800d614 <__smakebuf_r+0x38>
 800d6d4:	00ffff04 	movi	r3,-4
 800d6d8:	10c4703a 	and	r2,r2,r3
 800d6dc:	10800094 	ori	r2,r2,2
 800d6e0:	80c010c4 	addi	r3,r16,67
 800d6e4:	8080030d 	sth	r2,12(r16)
 800d6e8:	00800044 	movi	r2,1
 800d6ec:	80c00015 	stw	r3,0(r16)
 800d6f0:	80c00415 	stw	r3,16(r16)
 800d6f4:	80800515 	stw	r2,20(r16)
 800d6f8:	003fc606 	br	800d614 <__smakebuf_r+0x38>
 800d6fc:	8140038f 	ldh	r5,14(r16)
 800d700:	8809883a 	mov	r4,r17
 800d704:	80118e00 	call	80118e0 <_isatty_r>
 800d708:	80c0030b 	ldhu	r3,12(r16)
 800d70c:	103fde26 	beq	r2,zero,800d688 <__smakebuf_r+0xac>
 800d710:	18ffff0c 	andi	r3,r3,65532
 800d714:	18c00054 	ori	r3,r3,1
 800d718:	003fdb06 	br	800d688 <__smakebuf_r+0xac>

0800d71c <_malloc_r>:
 800d71c:	defff604 	addi	sp,sp,-40
 800d720:	dc400115 	stw	r17,4(sp)
 800d724:	2c4002c4 	addi	r17,r5,11
 800d728:	dc800215 	stw	r18,8(sp)
 800d72c:	dfc00915 	stw	ra,36(sp)
 800d730:	df000815 	stw	fp,32(sp)
 800d734:	ddc00715 	stw	r23,28(sp)
 800d738:	dd800615 	stw	r22,24(sp)
 800d73c:	dd400515 	stw	r21,20(sp)
 800d740:	dd000415 	stw	r20,16(sp)
 800d744:	dcc00315 	stw	r19,12(sp)
 800d748:	dc000015 	stw	r16,0(sp)
 800d74c:	888005e8 	cmpgeui	r2,r17,23
 800d750:	2025883a 	mov	r18,r4
 800d754:	10001b1e 	bne	r2,zero,800d7c4 <_malloc_r+0xa8>
 800d758:	29400468 	cmpgeui	r5,r5,17
 800d75c:	2800821e 	bne	r5,zero,800d968 <_malloc_r+0x24c>
 800d760:	80133500 	call	8013350 <__malloc_lock>
 800d764:	04400404 	movi	r17,16
 800d768:	01c00084 	movi	r7,2
 800d76c:	00800604 	movi	r2,24
 800d770:	04c200b4 	movhi	r19,2050
 800d774:	9ce1c704 	addi	r19,r19,-30948
 800d778:	9885883a 	add	r2,r19,r2
 800d77c:	14000117 	ldw	r16,4(r2)
 800d780:	10fffe04 	addi	r3,r2,-8
 800d784:	80c08b26 	beq	r16,r3,800d9b4 <_malloc_r+0x298>
 800d788:	80800117 	ldw	r2,4(r16)
 800d78c:	81000317 	ldw	r4,12(r16)
 800d790:	00ffff04 	movi	r3,-4
 800d794:	10c4703a 	and	r2,r2,r3
 800d798:	81400217 	ldw	r5,8(r16)
 800d79c:	8085883a 	add	r2,r16,r2
 800d7a0:	10c00117 	ldw	r3,4(r2)
 800d7a4:	29000315 	stw	r4,12(r5)
 800d7a8:	21400215 	stw	r5,8(r4)
 800d7ac:	18c00054 	ori	r3,r3,1
 800d7b0:	10c00115 	stw	r3,4(r2)
 800d7b4:	9009883a 	mov	r4,r18
 800d7b8:	80133740 	call	8013374 <__malloc_unlock>
 800d7bc:	80800204 	addi	r2,r16,8
 800d7c0:	00006c06 	br	800d974 <_malloc_r+0x258>
 800d7c4:	00bffe04 	movi	r2,-8
 800d7c8:	88a2703a 	and	r17,r17,r2
 800d7cc:	88006616 	blt	r17,zero,800d968 <_malloc_r+0x24c>
 800d7d0:	89406536 	bltu	r17,r5,800d968 <_malloc_r+0x24c>
 800d7d4:	80133500 	call	8013350 <__malloc_lock>
 800d7d8:	88807e28 	cmpgeui	r2,r17,504
 800d7dc:	10012226 	beq	r2,zero,800dc68 <_malloc_r+0x54c>
 800d7e0:	8804d27a 	srli	r2,r17,9
 800d7e4:	10006f26 	beq	r2,zero,800d9a4 <_malloc_r+0x288>
 800d7e8:	10c00168 	cmpgeui	r3,r2,5
 800d7ec:	1800fe1e 	bne	r3,zero,800dbe8 <_malloc_r+0x4cc>
 800d7f0:	8804d1ba 	srli	r2,r17,6
 800d7f4:	11c00e44 	addi	r7,r2,57
 800d7f8:	380890fa 	slli	r4,r7,3
 800d7fc:	12000e04 	addi	r8,r2,56
 800d800:	04c200b4 	movhi	r19,2050
 800d804:	9ce1c704 	addi	r19,r19,-30948
 800d808:	9909883a 	add	r4,r19,r4
 800d80c:	24000117 	ldw	r16,4(r4)
 800d810:	213ffe04 	addi	r4,r4,-8
 800d814:	24000b26 	beq	r4,r16,800d844 <_malloc_r+0x128>
 800d818:	01bfff04 	movi	r6,-4
 800d81c:	00000306 	br	800d82c <_malloc_r+0x110>
 800d820:	1800d60e 	bge	r3,zero,800db7c <_malloc_r+0x460>
 800d824:	84000317 	ldw	r16,12(r16)
 800d828:	24000626 	beq	r4,r16,800d844 <_malloc_r+0x128>
 800d82c:	80800117 	ldw	r2,4(r16)
 800d830:	1184703a 	and	r2,r2,r6
 800d834:	1447c83a 	sub	r3,r2,r17
 800d838:	19400408 	cmpgei	r5,r3,16
 800d83c:	283ff826 	beq	r5,zero,800d820 <_malloc_r+0x104>
 800d840:	400f883a 	mov	r7,r8
 800d844:	9c000417 	ldw	r16,16(r19)
 800d848:	024200b4 	movhi	r9,2050
 800d84c:	4a61c904 	addi	r9,r9,-30940
 800d850:	82405f26 	beq	r16,r9,800d9d0 <_malloc_r+0x2b4>
 800d854:	80c00117 	ldw	r3,4(r16)
 800d858:	00bfff04 	movi	r2,-4
 800d85c:	1884703a 	and	r2,r3,r2
 800d860:	1447c83a 	sub	r3,r2,r17
 800d864:	19000410 	cmplti	r4,r3,16
 800d868:	20010a26 	beq	r4,zero,800dc94 <_malloc_r+0x578>
 800d86c:	9a400515 	stw	r9,20(r19)
 800d870:	9a400415 	stw	r9,16(r19)
 800d874:	1800ff0e 	bge	r3,zero,800dc74 <_malloc_r+0x558>
 800d878:	10c08028 	cmpgeui	r3,r2,512
 800d87c:	1800c11e 	bne	r3,zero,800db84 <_malloc_r+0x468>
 800d880:	1006d0fa 	srli	r3,r2,3
 800d884:	1008d17a 	srli	r4,r2,5
 800d888:	00800044 	movi	r2,1
 800d88c:	18c00044 	addi	r3,r3,1
 800d890:	180690fa 	slli	r3,r3,3
 800d894:	99400117 	ldw	r5,4(r19)
 800d898:	1104983a 	sll	r2,r2,r4
 800d89c:	98c7883a 	add	r3,r19,r3
 800d8a0:	19000017 	ldw	r4,0(r3)
 800d8a4:	1144b03a 	or	r2,r2,r5
 800d8a8:	197ffe04 	addi	r5,r3,-8
 800d8ac:	81400315 	stw	r5,12(r16)
 800d8b0:	81000215 	stw	r4,8(r16)
 800d8b4:	98800115 	stw	r2,4(r19)
 800d8b8:	1c000015 	stw	r16,0(r3)
 800d8bc:	24000315 	stw	r16,12(r4)
 800d8c0:	3807d0ba 	srai	r3,r7,2
 800d8c4:	01000044 	movi	r4,1
 800d8c8:	20c8983a 	sll	r4,r4,r3
 800d8cc:	11004536 	bltu	r2,r4,800d9e4 <_malloc_r+0x2c8>
 800d8d0:	2086703a 	and	r3,r4,r2
 800d8d4:	18000a1e 	bne	r3,zero,800d900 <_malloc_r+0x1e4>
 800d8d8:	00ffff04 	movi	r3,-4
 800d8dc:	2109883a 	add	r4,r4,r4
 800d8e0:	38ce703a 	and	r7,r7,r3
 800d8e4:	2086703a 	and	r3,r4,r2
 800d8e8:	39c00104 	addi	r7,r7,4
 800d8ec:	1800041e 	bne	r3,zero,800d900 <_malloc_r+0x1e4>
 800d8f0:	2109883a 	add	r4,r4,r4
 800d8f4:	2086703a 	and	r3,r4,r2
 800d8f8:	39c00104 	addi	r7,r7,4
 800d8fc:	183ffc26 	beq	r3,zero,800d8f0 <_malloc_r+0x1d4>
 800d900:	02bfff04 	movi	r10,-4
 800d904:	381690fa 	slli	r11,r7,3
 800d908:	3819883a 	mov	r12,r7
 800d90c:	9ad7883a 	add	r11,r19,r11
 800d910:	5811883a 	mov	r8,r11
 800d914:	40800317 	ldw	r2,12(r8)
 800d918:	4080bc26 	beq	r8,r2,800dc0c <_malloc_r+0x4f0>
 800d91c:	10c00117 	ldw	r3,4(r2)
 800d920:	1021883a 	mov	r16,r2
 800d924:	10800317 	ldw	r2,12(r2)
 800d928:	1a86703a 	and	r3,r3,r10
 800d92c:	1c4bc83a 	sub	r5,r3,r17
 800d930:	29800410 	cmplti	r6,r5,16
 800d934:	3000ba26 	beq	r6,zero,800dc20 <_malloc_r+0x504>
 800d938:	283ff716 	blt	r5,zero,800d918 <_malloc_r+0x1fc>
 800d93c:	80c7883a 	add	r3,r16,r3
 800d940:	19400117 	ldw	r5,4(r3)
 800d944:	81800217 	ldw	r6,8(r16)
 800d948:	9009883a 	mov	r4,r18
 800d94c:	29400054 	ori	r5,r5,1
 800d950:	19400115 	stw	r5,4(r3)
 800d954:	30800315 	stw	r2,12(r6)
 800d958:	11800215 	stw	r6,8(r2)
 800d95c:	80133740 	call	8013374 <__malloc_unlock>
 800d960:	80800204 	addi	r2,r16,8
 800d964:	00000306 	br	800d974 <_malloc_r+0x258>
 800d968:	00800304 	movi	r2,12
 800d96c:	90800015 	stw	r2,0(r18)
 800d970:	0005883a 	mov	r2,zero
 800d974:	dfc00917 	ldw	ra,36(sp)
 800d978:	df000817 	ldw	fp,32(sp)
 800d97c:	ddc00717 	ldw	r23,28(sp)
 800d980:	dd800617 	ldw	r22,24(sp)
 800d984:	dd400517 	ldw	r21,20(sp)
 800d988:	dd000417 	ldw	r20,16(sp)
 800d98c:	dcc00317 	ldw	r19,12(sp)
 800d990:	dc800217 	ldw	r18,8(sp)
 800d994:	dc400117 	ldw	r17,4(sp)
 800d998:	dc000017 	ldw	r16,0(sp)
 800d99c:	dec00a04 	addi	sp,sp,40
 800d9a0:	f800283a 	ret
 800d9a4:	01008004 	movi	r4,512
 800d9a8:	01c01004 	movi	r7,64
 800d9ac:	02000fc4 	movi	r8,63
 800d9b0:	003f9306 	br	800d800 <_malloc_r+0xe4>
 800d9b4:	14000317 	ldw	r16,12(r2)
 800d9b8:	39c00084 	addi	r7,r7,2
 800d9bc:	143f721e 	bne	r2,r16,800d788 <_malloc_r+0x6c>
 800d9c0:	9c000417 	ldw	r16,16(r19)
 800d9c4:	024200b4 	movhi	r9,2050
 800d9c8:	4a61c904 	addi	r9,r9,-30940
 800d9cc:	827fa11e 	bne	r16,r9,800d854 <_malloc_r+0x138>
 800d9d0:	3807d0ba 	srai	r3,r7,2
 800d9d4:	01000044 	movi	r4,1
 800d9d8:	98800117 	ldw	r2,4(r19)
 800d9dc:	20c8983a 	sll	r4,r4,r3
 800d9e0:	113fbb2e 	bgeu	r2,r4,800d8d0 <_malloc_r+0x1b4>
 800d9e4:	9c000217 	ldw	r16,8(r19)
 800d9e8:	00bfff04 	movi	r2,-4
 800d9ec:	85400117 	ldw	r21,4(r16)
 800d9f0:	a8ac703a 	and	r22,r21,r2
 800d9f4:	b4400336 	bltu	r22,r17,800da04 <_malloc_r+0x2e8>
 800d9f8:	b445c83a 	sub	r2,r22,r17
 800d9fc:	10c00408 	cmpgei	r3,r2,16
 800da00:	1800541e 	bne	r3,zero,800db54 <_malloc_r+0x438>
 800da04:	008200b4 	movhi	r2,2050
 800da08:	10a7c017 	ldw	r2,-24832(r2)
 800da0c:	00c200b4 	movhi	r3,2050
 800da10:	1d6ef217 	ldw	r21,-17464(r3)
 800da14:	10bfffd8 	cmpnei	r2,r2,-1
 800da18:	85b9883a 	add	fp,r16,r22
 800da1c:	8d6b883a 	add	r21,r17,r21
 800da20:	1000d626 	beq	r2,zero,800dd7c <_malloc_r+0x660>
 800da24:	ad4403c4 	addi	r21,r21,4111
 800da28:	00bc0004 	movi	r2,-4096
 800da2c:	a8aa703a 	and	r21,r21,r2
 800da30:	a80b883a 	mov	r5,r21
 800da34:	9009883a 	mov	r4,r18
 800da38:	800fb340 	call	800fb34 <_sbrk_r>
 800da3c:	102f883a 	mov	r23,r2
 800da40:	10bfffd8 	cmpnei	r2,r2,-1
 800da44:	1000a826 	beq	r2,zero,800dce8 <_malloc_r+0x5cc>
 800da48:	bf00a636 	bltu	r23,fp,800dce4 <_malloc_r+0x5c8>
 800da4c:	008200b4 	movhi	r2,2050
 800da50:	152f0617 	ldw	r20,-17384(r2)
 800da54:	ad29883a 	add	r20,r21,r20
 800da58:	152f0615 	stw	r20,-17384(r2)
 800da5c:	a007883a 	mov	r3,r20
 800da60:	e5c0ec26 	beq	fp,r23,800de14 <_malloc_r+0x6f8>
 800da64:	008200b4 	movhi	r2,2050
 800da68:	10a7c017 	ldw	r2,-24832(r2)
 800da6c:	10bfffd8 	cmpnei	r2,r2,-1
 800da70:	1000ef26 	beq	r2,zero,800de30 <_malloc_r+0x714>
 800da74:	bf39c83a 	sub	fp,r23,fp
 800da78:	e0c7883a 	add	r3,fp,r3
 800da7c:	008200b4 	movhi	r2,2050
 800da80:	10ef0615 	stw	r3,-17384(r2)
 800da84:	bf0001cc 	andi	fp,r23,7
 800da88:	e000c526 	beq	fp,zero,800dda0 <_malloc_r+0x684>
 800da8c:	bf2fc83a 	sub	r23,r23,fp
 800da90:	bdc00204 	addi	r23,r23,8
 800da94:	05040204 	movi	r20,4104
 800da98:	a729c83a 	sub	r20,r20,fp
 800da9c:	bd6b883a 	add	r21,r23,r21
 800daa0:	a569c83a 	sub	r20,r20,r21
 800daa4:	a503ffcc 	andi	r20,r20,4095
 800daa8:	a00b883a 	mov	r5,r20
 800daac:	9009883a 	mov	r4,r18
 800dab0:	800fb340 	call	800fb34 <_sbrk_r>
 800dab4:	10ffffe0 	cmpeqi	r3,r2,-1
 800dab8:	1800f31e 	bne	r3,zero,800de88 <_malloc_r+0x76c>
 800dabc:	15c5c83a 	sub	r2,r2,r23
 800dac0:	152b883a 	add	r21,r2,r20
 800dac4:	008200b4 	movhi	r2,2050
 800dac8:	116f0617 	ldw	r5,-17384(r2)
 800dacc:	9dc00215 	stw	r23,8(r19)
 800dad0:	ad400054 	ori	r21,r21,1
 800dad4:	a169883a 	add	r20,r20,r5
 800dad8:	152f0615 	stw	r20,-17384(r2)
 800dadc:	bd400115 	stw	r21,4(r23)
 800dae0:	84c0d626 	beq	r16,r19,800de3c <_malloc_r+0x720>
 800dae4:	b0800428 	cmpgeui	r2,r22,16
 800dae8:	1000d626 	beq	r2,zero,800de44 <_malloc_r+0x728>
 800daec:	80c00117 	ldw	r3,4(r16)
 800daf0:	013ffe04 	movi	r4,-8
 800daf4:	b0bffd04 	addi	r2,r22,-12
 800daf8:	1104703a 	and	r2,r2,r4
 800dafc:	18c0004c 	andi	r3,r3,1
 800db00:	1886b03a 	or	r3,r3,r2
 800db04:	80c00115 	stw	r3,4(r16)
 800db08:	01000144 	movi	r4,5
 800db0c:	8087883a 	add	r3,r16,r2
 800db10:	19000115 	stw	r4,4(r3)
 800db14:	19000215 	stw	r4,8(r3)
 800db18:	10800428 	cmpgeui	r2,r2,16
 800db1c:	1000df1e 	bne	r2,zero,800de9c <_malloc_r+0x780>
 800db20:	bd400117 	ldw	r21,4(r23)
 800db24:	b821883a 	mov	r16,r23
 800db28:	008200b4 	movhi	r2,2050
 800db2c:	10aef117 	ldw	r2,-17468(r2)
 800db30:	1500022e 	bgeu	r2,r20,800db3c <_malloc_r+0x420>
 800db34:	008200b4 	movhi	r2,2050
 800db38:	152ef115 	stw	r20,-17468(r2)
 800db3c:	008200b4 	movhi	r2,2050
 800db40:	10aef017 	ldw	r2,-17472(r2)
 800db44:	15006a2e 	bgeu	r2,r20,800dcf0 <_malloc_r+0x5d4>
 800db48:	008200b4 	movhi	r2,2050
 800db4c:	152ef015 	stw	r20,-17472(r2)
 800db50:	00006706 	br	800dcf0 <_malloc_r+0x5d4>
 800db54:	88c00054 	ori	r3,r17,1
 800db58:	80c00115 	stw	r3,4(r16)
 800db5c:	8463883a 	add	r17,r16,r17
 800db60:	10800054 	ori	r2,r2,1
 800db64:	9c400215 	stw	r17,8(r19)
 800db68:	88800115 	stw	r2,4(r17)
 800db6c:	9009883a 	mov	r4,r18
 800db70:	80133740 	call	8013374 <__malloc_unlock>
 800db74:	80800204 	addi	r2,r16,8
 800db78:	003f7e06 	br	800d974 <_malloc_r+0x258>
 800db7c:	81000317 	ldw	r4,12(r16)
 800db80:	003f0506 	br	800d798 <_malloc_r+0x7c>
 800db84:	1006d27a 	srli	r3,r2,9
 800db88:	19000168 	cmpgeui	r4,r3,5
 800db8c:	20005026 	beq	r4,zero,800dcd0 <_malloc_r+0x5b4>
 800db90:	19000568 	cmpgeui	r4,r3,21
 800db94:	20008c1e 	bne	r4,zero,800ddc8 <_malloc_r+0x6ac>
 800db98:	19401704 	addi	r5,r3,92
 800db9c:	280a90fa 	slli	r5,r5,3
 800dba0:	190016c4 	addi	r4,r3,91
 800dba4:	994b883a 	add	r5,r19,r5
 800dba8:	28c00017 	ldw	r3,0(r5)
 800dbac:	297ffe04 	addi	r5,r5,-8
 800dbb0:	28c07426 	beq	r5,r3,800dd84 <_malloc_r+0x668>
 800dbb4:	01bfff04 	movi	r6,-4
 800dbb8:	19000117 	ldw	r4,4(r3)
 800dbbc:	2188703a 	and	r4,r4,r6
 800dbc0:	1100022e 	bgeu	r2,r4,800dbcc <_malloc_r+0x4b0>
 800dbc4:	18c00217 	ldw	r3,8(r3)
 800dbc8:	28fffb1e 	bne	r5,r3,800dbb8 <_malloc_r+0x49c>
 800dbcc:	19400317 	ldw	r5,12(r3)
 800dbd0:	98800117 	ldw	r2,4(r19)
 800dbd4:	81400315 	stw	r5,12(r16)
 800dbd8:	80c00215 	stw	r3,8(r16)
 800dbdc:	2c000215 	stw	r16,8(r5)
 800dbe0:	1c000315 	stw	r16,12(r3)
 800dbe4:	003f3606 	br	800d8c0 <_malloc_r+0x1a4>
 800dbe8:	10c00568 	cmpgeui	r3,r2,21
 800dbec:	18004a26 	beq	r3,zero,800dd18 <_malloc_r+0x5fc>
 800dbf0:	10c01568 	cmpgeui	r3,r2,85
 800dbf4:	18007b1e 	bne	r3,zero,800dde4 <_malloc_r+0x6c8>
 800dbf8:	8804d33a 	srli	r2,r17,12
 800dbfc:	11c01bc4 	addi	r7,r2,111
 800dc00:	380890fa 	slli	r4,r7,3
 800dc04:	12001b84 	addi	r8,r2,110
 800dc08:	003efd06 	br	800d800 <_malloc_r+0xe4>
 800dc0c:	63000044 	addi	r12,r12,1
 800dc10:	608000cc 	andi	r2,r12,3
 800dc14:	42000204 	addi	r8,r8,8
 800dc18:	103f3e1e 	bne	r2,zero,800d914 <_malloc_r+0x1f8>
 800dc1c:	00004506 	br	800dd34 <_malloc_r+0x618>
 800dc20:	81000217 	ldw	r4,8(r16)
 800dc24:	89800054 	ori	r6,r17,1
 800dc28:	81800115 	stw	r6,4(r16)
 800dc2c:	20800315 	stw	r2,12(r4)
 800dc30:	11000215 	stw	r4,8(r2)
 800dc34:	8463883a 	add	r17,r16,r17
 800dc38:	9c400515 	stw	r17,20(r19)
 800dc3c:	9c400415 	stw	r17,16(r19)
 800dc40:	28800054 	ori	r2,r5,1
 800dc44:	88800115 	stw	r2,4(r17)
 800dc48:	8a400315 	stw	r9,12(r17)
 800dc4c:	8a400215 	stw	r9,8(r17)
 800dc50:	80c7883a 	add	r3,r16,r3
 800dc54:	19400015 	stw	r5,0(r3)
 800dc58:	9009883a 	mov	r4,r18
 800dc5c:	80133740 	call	8013374 <__malloc_unlock>
 800dc60:	80800204 	addi	r2,r16,8
 800dc64:	003f4306 	br	800d974 <_malloc_r+0x258>
 800dc68:	880ed0fa 	srli	r7,r17,3
 800dc6c:	88800204 	addi	r2,r17,8
 800dc70:	003ebf06 	br	800d770 <_malloc_r+0x54>
 800dc74:	8085883a 	add	r2,r16,r2
 800dc78:	10c00117 	ldw	r3,4(r2)
 800dc7c:	9009883a 	mov	r4,r18
 800dc80:	18c00054 	ori	r3,r3,1
 800dc84:	10c00115 	stw	r3,4(r2)
 800dc88:	80133740 	call	8013374 <__malloc_unlock>
 800dc8c:	80800204 	addi	r2,r16,8
 800dc90:	003f3806 	br	800d974 <_malloc_r+0x258>
 800dc94:	89000054 	ori	r4,r17,1
 800dc98:	81000115 	stw	r4,4(r16)
 800dc9c:	8463883a 	add	r17,r16,r17
 800dca0:	9c400515 	stw	r17,20(r19)
 800dca4:	9c400415 	stw	r17,16(r19)
 800dca8:	19000054 	ori	r4,r3,1
 800dcac:	89000115 	stw	r4,4(r17)
 800dcb0:	8085883a 	add	r2,r16,r2
 800dcb4:	8a400315 	stw	r9,12(r17)
 800dcb8:	8a400215 	stw	r9,8(r17)
 800dcbc:	10c00015 	stw	r3,0(r2)
 800dcc0:	9009883a 	mov	r4,r18
 800dcc4:	80133740 	call	8013374 <__malloc_unlock>
 800dcc8:	80800204 	addi	r2,r16,8
 800dccc:	003f2906 	br	800d974 <_malloc_r+0x258>
 800dcd0:	1006d1ba 	srli	r3,r2,6
 800dcd4:	19400e44 	addi	r5,r3,57
 800dcd8:	280a90fa 	slli	r5,r5,3
 800dcdc:	19000e04 	addi	r4,r3,56
 800dce0:	003fb006 	br	800dba4 <_malloc_r+0x488>
 800dce4:	84c04626 	beq	r16,r19,800de00 <_malloc_r+0x6e4>
 800dce8:	9c000217 	ldw	r16,8(r19)
 800dcec:	85400117 	ldw	r21,4(r16)
 800dcf0:	00bfff04 	movi	r2,-4
 800dcf4:	a8aa703a 	and	r21,r21,r2
 800dcf8:	ac45c83a 	sub	r2,r21,r17
 800dcfc:	ac400236 	bltu	r21,r17,800dd08 <_malloc_r+0x5ec>
 800dd00:	10c00408 	cmpgei	r3,r2,16
 800dd04:	183f931e 	bne	r3,zero,800db54 <_malloc_r+0x438>
 800dd08:	9009883a 	mov	r4,r18
 800dd0c:	80133740 	call	8013374 <__malloc_unlock>
 800dd10:	0005883a 	mov	r2,zero
 800dd14:	003f1706 	br	800d974 <_malloc_r+0x258>
 800dd18:	11c01704 	addi	r7,r2,92
 800dd1c:	380890fa 	slli	r4,r7,3
 800dd20:	120016c4 	addi	r8,r2,91
 800dd24:	003eb606 	br	800d800 <_malloc_r+0xe4>
 800dd28:	58800217 	ldw	r2,8(r11)
 800dd2c:	39ffffc4 	addi	r7,r7,-1
 800dd30:	12c0701e 	bne	r2,r11,800def4 <_malloc_r+0x7d8>
 800dd34:	388000cc 	andi	r2,r7,3
 800dd38:	5afffe04 	addi	r11,r11,-8
 800dd3c:	103ffa1e 	bne	r2,zero,800dd28 <_malloc_r+0x60c>
 800dd40:	98c00117 	ldw	r3,4(r19)
 800dd44:	0104303a 	nor	r2,zero,r4
 800dd48:	10c4703a 	and	r2,r2,r3
 800dd4c:	98800115 	stw	r2,4(r19)
 800dd50:	2109883a 	add	r4,r4,r4
 800dd54:	113f2336 	bltu	r2,r4,800d9e4 <_malloc_r+0x2c8>
 800dd58:	203f2226 	beq	r4,zero,800d9e4 <_malloc_r+0x2c8>
 800dd5c:	2086703a 	and	r3,r4,r2
 800dd60:	1800041e 	bne	r3,zero,800dd74 <_malloc_r+0x658>
 800dd64:	2109883a 	add	r4,r4,r4
 800dd68:	2086703a 	and	r3,r4,r2
 800dd6c:	63000104 	addi	r12,r12,4
 800dd70:	183ffc26 	beq	r3,zero,800dd64 <_malloc_r+0x648>
 800dd74:	600f883a 	mov	r7,r12
 800dd78:	003ee206 	br	800d904 <_malloc_r+0x1e8>
 800dd7c:	ad400404 	addi	r21,r21,16
 800dd80:	003f2b06 	br	800da30 <_malloc_r+0x314>
 800dd84:	2009d0ba 	srai	r4,r4,2
 800dd88:	00800044 	movi	r2,1
 800dd8c:	99800117 	ldw	r6,4(r19)
 800dd90:	1104983a 	sll	r2,r2,r4
 800dd94:	1184b03a 	or	r2,r2,r6
 800dd98:	98800115 	stw	r2,4(r19)
 800dd9c:	003f8d06 	br	800dbd4 <_malloc_r+0x4b8>
 800dda0:	bd69883a 	add	r20,r23,r21
 800dda4:	0529c83a 	sub	r20,zero,r20
 800dda8:	a503ffcc 	andi	r20,r20,4095
 800ddac:	a00b883a 	mov	r5,r20
 800ddb0:	9009883a 	mov	r4,r18
 800ddb4:	800fb340 	call	800fb34 <_sbrk_r>
 800ddb8:	10ffffe0 	cmpeqi	r3,r2,-1
 800ddbc:	183f3f26 	beq	r3,zero,800dabc <_malloc_r+0x3a0>
 800ddc0:	0029883a 	mov	r20,zero
 800ddc4:	003f3f06 	br	800dac4 <_malloc_r+0x3a8>
 800ddc8:	19001568 	cmpgeui	r4,r3,85
 800ddcc:	2000201e 	bne	r4,zero,800de50 <_malloc_r+0x734>
 800ddd0:	1006d33a 	srli	r3,r2,12
 800ddd4:	19401bc4 	addi	r5,r3,111
 800ddd8:	280a90fa 	slli	r5,r5,3
 800dddc:	19001b84 	addi	r4,r3,110
 800dde0:	003f7006 	br	800dba4 <_malloc_r+0x488>
 800dde4:	10c05568 	cmpgeui	r3,r2,341
 800dde8:	1800201e 	bne	r3,zero,800de6c <_malloc_r+0x750>
 800ddec:	8804d3fa 	srli	r2,r17,15
 800ddf0:	11c01e04 	addi	r7,r2,120
 800ddf4:	380890fa 	slli	r4,r7,3
 800ddf8:	12001dc4 	addi	r8,r2,119
 800ddfc:	003e8006 	br	800d800 <_malloc_r+0xe4>
 800de00:	008200b4 	movhi	r2,2050
 800de04:	10ef0617 	ldw	r3,-17384(r2)
 800de08:	a8c7883a 	add	r3,r21,r3
 800de0c:	10ef0615 	stw	r3,-17384(r2)
 800de10:	003f1406 	br	800da64 <_malloc_r+0x348>
 800de14:	e083ffcc 	andi	r2,fp,4095
 800de18:	103f121e 	bne	r2,zero,800da64 <_malloc_r+0x348>
 800de1c:	9c000217 	ldw	r16,8(r19)
 800de20:	b56b883a 	add	r21,r22,r21
 800de24:	ad400054 	ori	r21,r21,1
 800de28:	85400115 	stw	r21,4(r16)
 800de2c:	003f3e06 	br	800db28 <_malloc_r+0x40c>
 800de30:	008200b4 	movhi	r2,2050
 800de34:	15e7c015 	stw	r23,-24832(r2)
 800de38:	003f1206 	br	800da84 <_malloc_r+0x368>
 800de3c:	b821883a 	mov	r16,r23
 800de40:	003f3906 	br	800db28 <_malloc_r+0x40c>
 800de44:	00800044 	movi	r2,1
 800de48:	b8800115 	stw	r2,4(r23)
 800de4c:	003fae06 	br	800dd08 <_malloc_r+0x5ec>
 800de50:	19005568 	cmpgeui	r4,r3,341
 800de54:	2000191e 	bne	r4,zero,800debc <_malloc_r+0x7a0>
 800de58:	1006d3fa 	srli	r3,r2,15
 800de5c:	19401e04 	addi	r5,r3,120
 800de60:	280a90fa 	slli	r5,r5,3
 800de64:	19001dc4 	addi	r4,r3,119
 800de68:	003f4e06 	br	800dba4 <_malloc_r+0x488>
 800de6c:	10815568 	cmpgeui	r2,r2,1365
 800de70:	1000191e 	bne	r2,zero,800ded8 <_malloc_r+0x7bc>
 800de74:	8804d4ba 	srli	r2,r17,18
 800de78:	11c01f44 	addi	r7,r2,125
 800de7c:	380890fa 	slli	r4,r7,3
 800de80:	12001f04 	addi	r8,r2,124
 800de84:	003e5e06 	br	800d800 <_malloc_r+0xe4>
 800de88:	e73ffe04 	addi	fp,fp,-8
 800de8c:	af2b883a 	add	r21,r21,fp
 800de90:	adebc83a 	sub	r21,r21,r23
 800de94:	0029883a 	mov	r20,zero
 800de98:	003f0a06 	br	800dac4 <_malloc_r+0x3a8>
 800de9c:	81400204 	addi	r5,r16,8
 800dea0:	9009883a 	mov	r4,r18
 800dea4:	800cc1c0 	call	800cc1c <_free_r>
 800dea8:	9c000217 	ldw	r16,8(r19)
 800deac:	008200b4 	movhi	r2,2050
 800deb0:	152f0617 	ldw	r20,-17384(r2)
 800deb4:	85400117 	ldw	r21,4(r16)
 800deb8:	003f1b06 	br	800db28 <_malloc_r+0x40c>
 800debc:	18c15568 	cmpgeui	r3,r3,1365
 800dec0:	1800091e 	bne	r3,zero,800dee8 <_malloc_r+0x7cc>
 800dec4:	1006d4ba 	srli	r3,r2,18
 800dec8:	19401f44 	addi	r5,r3,125
 800decc:	280a90fa 	slli	r5,r5,3
 800ded0:	19001f04 	addi	r4,r3,124
 800ded4:	003f3306 	br	800dba4 <_malloc_r+0x488>
 800ded8:	0100fe04 	movi	r4,1016
 800dedc:	01c01fc4 	movi	r7,127
 800dee0:	02001f84 	movi	r8,126
 800dee4:	003e4606 	br	800d800 <_malloc_r+0xe4>
 800dee8:	0140fe04 	movi	r5,1016
 800deec:	01001f84 	movi	r4,126
 800def0:	003f2c06 	br	800dba4 <_malloc_r+0x488>
 800def4:	98800117 	ldw	r2,4(r19)
 800def8:	003f9506 	br	800dd50 <_malloc_r+0x634>

0800defc <memchr>:
 800defc:	208000cc 	andi	r2,r4,3
 800df00:	280f883a 	mov	r7,r5
 800df04:	10000e26 	beq	r2,zero,800df40 <memchr+0x44>
 800df08:	30bfffc4 	addi	r2,r6,-1
 800df0c:	30001726 	beq	r6,zero,800df6c <memchr+0x70>
 800df10:	29803fcc 	andi	r6,r5,255
 800df14:	00000606 	br	800df30 <memchr+0x34>
 800df18:	21000044 	addi	r4,r4,1
 800df1c:	20c000cc 	andi	r3,r4,3
 800df20:	18000826 	beq	r3,zero,800df44 <memchr+0x48>
 800df24:	10bfffc4 	addi	r2,r2,-1
 800df28:	10ffffe0 	cmpeqi	r3,r2,-1
 800df2c:	18000f1e 	bne	r3,zero,800df6c <memchr+0x70>
 800df30:	20c00003 	ldbu	r3,0(r4)
 800df34:	19bff81e 	bne	r3,r6,800df18 <memchr+0x1c>
 800df38:	2005883a 	mov	r2,r4
 800df3c:	f800283a 	ret
 800df40:	3005883a 	mov	r2,r6
 800df44:	10c00128 	cmpgeui	r3,r2,4
 800df48:	18000a1e 	bne	r3,zero,800df74 <memchr+0x78>
 800df4c:	10001f26 	beq	r2,zero,800dfcc <memchr+0xd0>
 800df50:	2087883a 	add	r3,r4,r2
 800df54:	39803fcc 	andi	r6,r7,255
 800df58:	2005883a 	mov	r2,r4
 800df5c:	11000003 	ldbu	r4,0(r2)
 800df60:	21bff626 	beq	r4,r6,800df3c <memchr+0x40>
 800df64:	10800044 	addi	r2,r2,1
 800df68:	18bffc1e 	bne	r3,r2,800df5c <memchr+0x60>
 800df6c:	0005883a 	mov	r2,zero
 800df70:	f800283a 	ret
 800df74:	2810923a 	slli	r8,r5,8
 800df78:	29403fcc 	andi	r5,r5,255
 800df7c:	027fbff4 	movhi	r9,65279
 800df80:	423fffcc 	andi	r8,r8,65535
 800df84:	414ab03a 	or	r5,r8,r5
 800df88:	2810943a 	slli	r8,r5,16
 800df8c:	01a02074 	movhi	r6,32897
 800df90:	4a7fbfc4 	addi	r9,r9,-257
 800df94:	4150b03a 	or	r8,r8,r5
 800df98:	31a02004 	addi	r6,r6,-32640
 800df9c:	20c00017 	ldw	r3,0(r4)
 800dfa0:	40c6f03a 	xor	r3,r8,r3
 800dfa4:	1a4b883a 	add	r5,r3,r9
 800dfa8:	00c6303a 	nor	r3,zero,r3
 800dfac:	28c6703a 	and	r3,r5,r3
 800dfb0:	1986703a 	and	r3,r3,r6
 800dfb4:	183fe61e 	bne	r3,zero,800df50 <memchr+0x54>
 800dfb8:	10bfff04 	addi	r2,r2,-4
 800dfbc:	10c00128 	cmpgeui	r3,r2,4
 800dfc0:	21000104 	addi	r4,r4,4
 800dfc4:	183ff51e 	bne	r3,zero,800df9c <memchr+0xa0>
 800dfc8:	003fe006 	br	800df4c <memchr+0x50>
 800dfcc:	f800283a 	ret

0800dfd0 <memcpy>:
 800dfd0:	30c00430 	cmpltui	r3,r6,16
 800dfd4:	2005883a 	mov	r2,r4
 800dfd8:	18002d1e 	bne	r3,zero,800e090 <memcpy+0xc0>
 800dfdc:	2906b03a 	or	r3,r5,r4
 800dfe0:	18c000cc 	andi	r3,r3,3
 800dfe4:	1800351e 	bne	r3,zero,800e0bc <memcpy+0xec>
 800dfe8:	32fffc04 	addi	r11,r6,-16
 800dfec:	5816d13a 	srli	r11,r11,4
 800dff0:	280f883a 	mov	r7,r5
 800dff4:	2007883a 	mov	r3,r4
 800dff8:	5ac00044 	addi	r11,r11,1
 800dffc:	5816913a 	slli	r11,r11,4
 800e000:	22d5883a 	add	r10,r4,r11
 800e004:	39000117 	ldw	r4,4(r7)
 800e008:	3a400017 	ldw	r9,0(r7)
 800e00c:	3a000217 	ldw	r8,8(r7)
 800e010:	19000115 	stw	r4,4(r3)
 800e014:	39000317 	ldw	r4,12(r7)
 800e018:	1a400015 	stw	r9,0(r3)
 800e01c:	1a000215 	stw	r8,8(r3)
 800e020:	19000315 	stw	r4,12(r3)
 800e024:	18c00404 	addi	r3,r3,16
 800e028:	39c00404 	addi	r7,r7,16
 800e02c:	50fff51e 	bne	r10,r3,800e004 <memcpy+0x34>
 800e030:	3100030c 	andi	r4,r6,12
 800e034:	2acb883a 	add	r5,r5,r11
 800e038:	320003cc 	andi	r8,r6,15
 800e03c:	20002226 	beq	r4,zero,800e0c8 <memcpy+0xf8>
 800e040:	280f883a 	mov	r7,r5
 800e044:	1813883a 	mov	r9,r3
 800e048:	39c00104 	addi	r7,r7,4
 800e04c:	3abfff17 	ldw	r10,-4(r7)
 800e050:	41c9c83a 	sub	r4,r8,r7
 800e054:	2909883a 	add	r4,r5,r4
 800e058:	4a800015 	stw	r10,0(r9)
 800e05c:	21000128 	cmpgeui	r4,r4,4
 800e060:	4a400104 	addi	r9,r9,4
 800e064:	203ff81e 	bne	r4,zero,800e048 <memcpy+0x78>
 800e068:	413fff04 	addi	r4,r8,-4
 800e06c:	2008d0ba 	srli	r4,r4,2
 800e070:	318000cc 	andi	r6,r6,3
 800e074:	31ffffc4 	addi	r7,r6,-1
 800e078:	21000044 	addi	r4,r4,1
 800e07c:	200890ba 	slli	r4,r4,2
 800e080:	1907883a 	add	r3,r3,r4
 800e084:	290b883a 	add	r5,r5,r4
 800e088:	3000041e 	bne	r6,zero,800e09c <memcpy+0xcc>
 800e08c:	f800283a 	ret
 800e090:	2007883a 	mov	r3,r4
 800e094:	31ffffc4 	addi	r7,r6,-1
 800e098:	303ffc26 	beq	r6,zero,800e08c <memcpy+0xbc>
 800e09c:	39c00044 	addi	r7,r7,1
 800e0a0:	19cf883a 	add	r7,r3,r7
 800e0a4:	29800003 	ldbu	r6,0(r5)
 800e0a8:	18c00044 	addi	r3,r3,1
 800e0ac:	29400044 	addi	r5,r5,1
 800e0b0:	19bfffc5 	stb	r6,-1(r3)
 800e0b4:	38fffb1e 	bne	r7,r3,800e0a4 <memcpy+0xd4>
 800e0b8:	f800283a 	ret
 800e0bc:	31ffffc4 	addi	r7,r6,-1
 800e0c0:	2007883a 	mov	r3,r4
 800e0c4:	003ff506 	br	800e09c <memcpy+0xcc>
 800e0c8:	400d883a 	mov	r6,r8
 800e0cc:	003ff106 	br	800e094 <memcpy+0xc4>

0800e0d0 <memmove>:
 800e0d0:	2005883a 	mov	r2,r4
 800e0d4:	29000a2e 	bgeu	r5,r4,800e100 <memmove+0x30>
 800e0d8:	2989883a 	add	r4,r5,r6
 800e0dc:	1100082e 	bgeu	r2,r4,800e100 <memmove+0x30>
 800e0e0:	1187883a 	add	r3,r2,r6
 800e0e4:	30003e26 	beq	r6,zero,800e1e0 <memmove+0x110>
 800e0e8:	217fffc3 	ldbu	r5,-1(r4)
 800e0ec:	18ffffc4 	addi	r3,r3,-1
 800e0f0:	213fffc4 	addi	r4,r4,-1
 800e0f4:	19400005 	stb	r5,0(r3)
 800e0f8:	10fffb1e 	bne	r2,r3,800e0e8 <memmove+0x18>
 800e0fc:	f800283a 	ret
 800e100:	30c00430 	cmpltui	r3,r6,16
 800e104:	18000b26 	beq	r3,zero,800e134 <memmove+0x64>
 800e108:	1007883a 	mov	r3,r2
 800e10c:	31ffffc4 	addi	r7,r6,-1
 800e110:	30003726 	beq	r6,zero,800e1f0 <memmove+0x120>
 800e114:	39c00044 	addi	r7,r7,1
 800e118:	29cf883a 	add	r7,r5,r7
 800e11c:	29800003 	ldbu	r6,0(r5)
 800e120:	29400044 	addi	r5,r5,1
 800e124:	18c00044 	addi	r3,r3,1
 800e128:	19bfffc5 	stb	r6,-1(r3)
 800e12c:	29fffb1e 	bne	r5,r7,800e11c <memmove+0x4c>
 800e130:	f800283a 	ret
 800e134:	2886b03a 	or	r3,r5,r2
 800e138:	18c000cc 	andi	r3,r3,3
 800e13c:	1800291e 	bne	r3,zero,800e1e4 <memmove+0x114>
 800e140:	327ffc04 	addi	r9,r6,-16
 800e144:	4812d13a 	srli	r9,r9,4
 800e148:	280f883a 	mov	r7,r5
 800e14c:	1007883a 	mov	r3,r2
 800e150:	4a400044 	addi	r9,r9,1
 800e154:	4812913a 	slli	r9,r9,4
 800e158:	1251883a 	add	r8,r2,r9
 800e15c:	39000017 	ldw	r4,0(r7)
 800e160:	39c00404 	addi	r7,r7,16
 800e164:	18c00404 	addi	r3,r3,16
 800e168:	193ffc15 	stw	r4,-16(r3)
 800e16c:	393ffd17 	ldw	r4,-12(r7)
 800e170:	193ffd15 	stw	r4,-12(r3)
 800e174:	393ffe17 	ldw	r4,-8(r7)
 800e178:	193ffe15 	stw	r4,-8(r3)
 800e17c:	393fff17 	ldw	r4,-4(r7)
 800e180:	193fff15 	stw	r4,-4(r3)
 800e184:	40fff51e 	bne	r8,r3,800e15c <memmove+0x8c>
 800e188:	3100030c 	andi	r4,r6,12
 800e18c:	2a4b883a 	add	r5,r5,r9
 800e190:	320003cc 	andi	r8,r6,15
 800e194:	20001726 	beq	r4,zero,800e1f4 <memmove+0x124>
 800e198:	2813883a 	mov	r9,r5
 800e19c:	180f883a 	mov	r7,r3
 800e1a0:	4a800017 	ldw	r10,0(r9)
 800e1a4:	39c00104 	addi	r7,r7,4
 800e1a8:	41c9c83a 	sub	r4,r8,r7
 800e1ac:	1909883a 	add	r4,r3,r4
 800e1b0:	21000128 	cmpgeui	r4,r4,4
 800e1b4:	3abfff15 	stw	r10,-4(r7)
 800e1b8:	4a400104 	addi	r9,r9,4
 800e1bc:	203ff81e 	bne	r4,zero,800e1a0 <memmove+0xd0>
 800e1c0:	413fff04 	addi	r4,r8,-4
 800e1c4:	2008d0ba 	srli	r4,r4,2
 800e1c8:	318000cc 	andi	r6,r6,3
 800e1cc:	21000044 	addi	r4,r4,1
 800e1d0:	200890ba 	slli	r4,r4,2
 800e1d4:	1907883a 	add	r3,r3,r4
 800e1d8:	290b883a 	add	r5,r5,r4
 800e1dc:	003fcb06 	br	800e10c <memmove+0x3c>
 800e1e0:	f800283a 	ret
 800e1e4:	31ffffc4 	addi	r7,r6,-1
 800e1e8:	1007883a 	mov	r3,r2
 800e1ec:	003fc906 	br	800e114 <memmove+0x44>
 800e1f0:	f800283a 	ret
 800e1f4:	400d883a 	mov	r6,r8
 800e1f8:	003fc406 	br	800e10c <memmove+0x3c>

0800e1fc <memset>:
 800e1fc:	20c000cc 	andi	r3,r4,3
 800e200:	2005883a 	mov	r2,r4
 800e204:	18003626 	beq	r3,zero,800e2e0 <memset+0xe4>
 800e208:	31ffffc4 	addi	r7,r6,-1
 800e20c:	30003326 	beq	r6,zero,800e2dc <memset+0xe0>
 800e210:	2811883a 	mov	r8,r5
 800e214:	2007883a 	mov	r3,r4
 800e218:	00000306 	br	800e228 <memset+0x2c>
 800e21c:	39ffffc4 	addi	r7,r7,-1
 800e220:	39bfffe0 	cmpeqi	r6,r7,-1
 800e224:	30002d1e 	bne	r6,zero,800e2dc <memset+0xe0>
 800e228:	18c00044 	addi	r3,r3,1
 800e22c:	198000cc 	andi	r6,r3,3
 800e230:	1a3fffc5 	stb	r8,-1(r3)
 800e234:	303ff91e 	bne	r6,zero,800e21c <memset+0x20>
 800e238:	39000130 	cmpltui	r4,r7,4
 800e23c:	2000221e 	bne	r4,zero,800e2c8 <memset+0xcc>
 800e240:	29003fcc 	andi	r4,r5,255
 800e244:	200c923a 	slli	r6,r4,8
 800e248:	3a000430 	cmpltui	r8,r7,16
 800e24c:	3108b03a 	or	r4,r6,r4
 800e250:	200c943a 	slli	r6,r4,16
 800e254:	310cb03a 	or	r6,r6,r4
 800e258:	40000e1e 	bne	r8,zero,800e294 <memset+0x98>
 800e25c:	393ffc04 	addi	r4,r7,-16
 800e260:	2008d13a 	srli	r4,r4,4
 800e264:	21000044 	addi	r4,r4,1
 800e268:	2008913a 	slli	r4,r4,4
 800e26c:	1909883a 	add	r4,r3,r4
 800e270:	19800015 	stw	r6,0(r3)
 800e274:	19800115 	stw	r6,4(r3)
 800e278:	19800215 	stw	r6,8(r3)
 800e27c:	19800315 	stw	r6,12(r3)
 800e280:	18c00404 	addi	r3,r3,16
 800e284:	20fffa1e 	bne	r4,r3,800e270 <memset+0x74>
 800e288:	3900030c 	andi	r4,r7,12
 800e28c:	39c003cc 	andi	r7,r7,15
 800e290:	20000d26 	beq	r4,zero,800e2c8 <memset+0xcc>
 800e294:	1811883a 	mov	r8,r3
 800e298:	42000104 	addi	r8,r8,4
 800e29c:	3a09c83a 	sub	r4,r7,r8
 800e2a0:	1909883a 	add	r4,r3,r4
 800e2a4:	21000128 	cmpgeui	r4,r4,4
 800e2a8:	41bfff15 	stw	r6,-4(r8)
 800e2ac:	203ffa1e 	bne	r4,zero,800e298 <memset+0x9c>
 800e2b0:	393fff04 	addi	r4,r7,-4
 800e2b4:	2008d0ba 	srli	r4,r4,2
 800e2b8:	39c000cc 	andi	r7,r7,3
 800e2bc:	21000044 	addi	r4,r4,1
 800e2c0:	200890ba 	slli	r4,r4,2
 800e2c4:	1907883a 	add	r3,r3,r4
 800e2c8:	38000426 	beq	r7,zero,800e2dc <memset+0xe0>
 800e2cc:	19cf883a 	add	r7,r3,r7
 800e2d0:	18c00044 	addi	r3,r3,1
 800e2d4:	197fffc5 	stb	r5,-1(r3)
 800e2d8:	38fffd1e 	bne	r7,r3,800e2d0 <memset+0xd4>
 800e2dc:	f800283a 	ret
 800e2e0:	2007883a 	mov	r3,r4
 800e2e4:	300f883a 	mov	r7,r6
 800e2e8:	003fd306 	br	800e238 <memset+0x3c>

0800e2ec <_Balloc>:
 800e2ec:	20801317 	ldw	r2,76(r4)
 800e2f0:	defffc04 	addi	sp,sp,-16
 800e2f4:	dc400115 	stw	r17,4(sp)
 800e2f8:	dc000015 	stw	r16,0(sp)
 800e2fc:	dfc00315 	stw	ra,12(sp)
 800e300:	dc800215 	stw	r18,8(sp)
 800e304:	2021883a 	mov	r16,r4
 800e308:	2823883a 	mov	r17,r5
 800e30c:	10000e26 	beq	r2,zero,800e348 <_Balloc+0x5c>
 800e310:	880690ba 	slli	r3,r17,2
 800e314:	10c7883a 	add	r3,r2,r3
 800e318:	18800017 	ldw	r2,0(r3)
 800e31c:	10001126 	beq	r2,zero,800e364 <_Balloc+0x78>
 800e320:	11000017 	ldw	r4,0(r2)
 800e324:	19000015 	stw	r4,0(r3)
 800e328:	10000415 	stw	zero,16(r2)
 800e32c:	10000315 	stw	zero,12(r2)
 800e330:	dfc00317 	ldw	ra,12(sp)
 800e334:	dc800217 	ldw	r18,8(sp)
 800e338:	dc400117 	ldw	r17,4(sp)
 800e33c:	dc000017 	ldw	r16,0(sp)
 800e340:	dec00404 	addi	sp,sp,16
 800e344:	f800283a 	ret
 800e348:	01800844 	movi	r6,33
 800e34c:	01400104 	movi	r5,4
 800e350:	801145c0 	call	801145c <_calloc_r>
 800e354:	80801315 	stw	r2,76(r16)
 800e358:	103fed1e 	bne	r2,zero,800e310 <_Balloc+0x24>
 800e35c:	0005883a 	mov	r2,zero
 800e360:	003ff306 	br	800e330 <_Balloc+0x44>
 800e364:	04800044 	movi	r18,1
 800e368:	9464983a 	sll	r18,r18,r17
 800e36c:	01400044 	movi	r5,1
 800e370:	8009883a 	mov	r4,r16
 800e374:	91800144 	addi	r6,r18,5
 800e378:	300c90ba 	slli	r6,r6,2
 800e37c:	801145c0 	call	801145c <_calloc_r>
 800e380:	103ff626 	beq	r2,zero,800e35c <_Balloc+0x70>
 800e384:	14400115 	stw	r17,4(r2)
 800e388:	14800215 	stw	r18,8(r2)
 800e38c:	003fe606 	br	800e328 <_Balloc+0x3c>

0800e390 <_Bfree>:
 800e390:	28000726 	beq	r5,zero,800e3b0 <_Bfree+0x20>
 800e394:	28c00117 	ldw	r3,4(r5)
 800e398:	20801317 	ldw	r2,76(r4)
 800e39c:	180690ba 	slli	r3,r3,2
 800e3a0:	10c5883a 	add	r2,r2,r3
 800e3a4:	10c00017 	ldw	r3,0(r2)
 800e3a8:	28c00015 	stw	r3,0(r5)
 800e3ac:	11400015 	stw	r5,0(r2)
 800e3b0:	f800283a 	ret

0800e3b4 <__multadd>:
 800e3b4:	defff704 	addi	sp,sp,-36
 800e3b8:	dc800215 	stw	r18,8(sp)
 800e3bc:	2c800417 	ldw	r18,16(r5)
 800e3c0:	ddc00715 	stw	r23,28(sp)
 800e3c4:	dd800615 	stw	r22,24(sp)
 800e3c8:	dd400515 	stw	r21,20(sp)
 800e3cc:	dd000415 	stw	r20,16(sp)
 800e3d0:	dcc00315 	stw	r19,12(sp)
 800e3d4:	dc400115 	stw	r17,4(sp)
 800e3d8:	dfc00815 	stw	ra,32(sp)
 800e3dc:	dc000015 	stw	r16,0(sp)
 800e3e0:	2827883a 	mov	r19,r5
 800e3e4:	2029883a 	mov	r20,r4
 800e3e8:	302b883a 	mov	r21,r6
 800e3ec:	3823883a 	mov	r17,r7
 800e3f0:	2d800504 	addi	r22,r5,20
 800e3f4:	002f883a 	mov	r23,zero
 800e3f8:	b4000017 	ldw	r16,0(r22)
 800e3fc:	a80b883a 	mov	r5,r21
 800e400:	b5800104 	addi	r22,r22,4
 800e404:	813fffcc 	andi	r4,r16,65535
 800e408:	80052bc0 	call	80052bc <__mulsi3>
 800e40c:	8008d43a 	srli	r4,r16,16
 800e410:	a80b883a 	mov	r5,r21
 800e414:	1461883a 	add	r16,r2,r17
 800e418:	80052bc0 	call	80052bc <__mulsi3>
 800e41c:	800ed43a 	srli	r7,r16,16
 800e420:	843fffcc 	andi	r16,r16,65535
 800e424:	bdc00044 	addi	r23,r23,1
 800e428:	11c5883a 	add	r2,r2,r7
 800e42c:	1006943a 	slli	r3,r2,16
 800e430:	1022d43a 	srli	r17,r2,16
 800e434:	1c21883a 	add	r16,r3,r16
 800e438:	b43fff15 	stw	r16,-4(r22)
 800e43c:	bcbfee16 	blt	r23,r18,800e3f8 <__multadd+0x44>
 800e440:	88000826 	beq	r17,zero,800e464 <__multadd+0xb0>
 800e444:	98800217 	ldw	r2,8(r19)
 800e448:	9080120e 	bge	r18,r2,800e494 <__multadd+0xe0>
 800e44c:	90800144 	addi	r2,r18,5
 800e450:	100490ba 	slli	r2,r2,2
 800e454:	94800044 	addi	r18,r18,1
 800e458:	9885883a 	add	r2,r19,r2
 800e45c:	14400015 	stw	r17,0(r2)
 800e460:	9c800415 	stw	r18,16(r19)
 800e464:	9805883a 	mov	r2,r19
 800e468:	dfc00817 	ldw	ra,32(sp)
 800e46c:	ddc00717 	ldw	r23,28(sp)
 800e470:	dd800617 	ldw	r22,24(sp)
 800e474:	dd400517 	ldw	r21,20(sp)
 800e478:	dd000417 	ldw	r20,16(sp)
 800e47c:	dcc00317 	ldw	r19,12(sp)
 800e480:	dc800217 	ldw	r18,8(sp)
 800e484:	dc400117 	ldw	r17,4(sp)
 800e488:	dc000017 	ldw	r16,0(sp)
 800e48c:	dec00904 	addi	sp,sp,36
 800e490:	f800283a 	ret
 800e494:	99400117 	ldw	r5,4(r19)
 800e498:	a009883a 	mov	r4,r20
 800e49c:	29400044 	addi	r5,r5,1
 800e4a0:	800e2ec0 	call	800e2ec <_Balloc>
 800e4a4:	1021883a 	mov	r16,r2
 800e4a8:	10001226 	beq	r2,zero,800e4f4 <__multadd+0x140>
 800e4ac:	99800417 	ldw	r6,16(r19)
 800e4b0:	99400304 	addi	r5,r19,12
 800e4b4:	11000304 	addi	r4,r2,12
 800e4b8:	31800084 	addi	r6,r6,2
 800e4bc:	300c90ba 	slli	r6,r6,2
 800e4c0:	800dfd00 	call	800dfd0 <memcpy>
 800e4c4:	98000926 	beq	r19,zero,800e4ec <__multadd+0x138>
 800e4c8:	98c00117 	ldw	r3,4(r19)
 800e4cc:	a0801317 	ldw	r2,76(r20)
 800e4d0:	180690ba 	slli	r3,r3,2
 800e4d4:	10c5883a 	add	r2,r2,r3
 800e4d8:	10c00017 	ldw	r3,0(r2)
 800e4dc:	98c00015 	stw	r3,0(r19)
 800e4e0:	14c00015 	stw	r19,0(r2)
 800e4e4:	8027883a 	mov	r19,r16
 800e4e8:	003fd806 	br	800e44c <__multadd+0x98>
 800e4ec:	8027883a 	mov	r19,r16
 800e4f0:	003fd606 	br	800e44c <__multadd+0x98>
 800e4f4:	01c20074 	movhi	r7,2049
 800e4f8:	01020074 	movhi	r4,2049
 800e4fc:	39df7104 	addi	r7,r7,32196
 800e500:	000d883a 	mov	r6,zero
 800e504:	01402d44 	movi	r5,181
 800e508:	211f8604 	addi	r4,r4,32280
 800e50c:	80113e40 	call	80113e4 <__assert_func>

0800e510 <__s2b>:
 800e510:	defff904 	addi	sp,sp,-28
 800e514:	dc800215 	stw	r18,8(sp)
 800e518:	dc000015 	stw	r16,0(sp)
 800e51c:	2025883a 	mov	r18,r4
 800e520:	2821883a 	mov	r16,r5
 800e524:	39000204 	addi	r4,r7,8
 800e528:	01400244 	movi	r5,9
 800e52c:	dcc00315 	stw	r19,12(sp)
 800e530:	dc400115 	stw	r17,4(sp)
 800e534:	dfc00615 	stw	ra,24(sp)
 800e538:	3823883a 	mov	r17,r7
 800e53c:	dd400515 	stw	r21,20(sp)
 800e540:	dd000415 	stw	r20,16(sp)
 800e544:	3027883a 	mov	r19,r6
 800e548:	80051080 	call	8005108 <__divsi3>
 800e54c:	88c00290 	cmplti	r3,r17,10
 800e550:	1800341e 	bne	r3,zero,800e624 <__s2b+0x114>
 800e554:	00c00044 	movi	r3,1
 800e558:	000b883a 	mov	r5,zero
 800e55c:	18c7883a 	add	r3,r3,r3
 800e560:	29400044 	addi	r5,r5,1
 800e564:	18bffd16 	blt	r3,r2,800e55c <__s2b+0x4c>
 800e568:	9009883a 	mov	r4,r18
 800e56c:	800e2ec0 	call	800e2ec <_Balloc>
 800e570:	100b883a 	mov	r5,r2
 800e574:	10002d26 	beq	r2,zero,800e62c <__s2b+0x11c>
 800e578:	d8800717 	ldw	r2,28(sp)
 800e57c:	28800515 	stw	r2,20(r5)
 800e580:	00800044 	movi	r2,1
 800e584:	28800415 	stw	r2,16(r5)
 800e588:	98800290 	cmplti	r2,r19,10
 800e58c:	1000221e 	bne	r2,zero,800e618 <__s2b+0x108>
 800e590:	85400244 	addi	r21,r16,9
 800e594:	a829883a 	mov	r20,r21
 800e598:	84e1883a 	add	r16,r16,r19
 800e59c:	a1c00007 	ldb	r7,0(r20)
 800e5a0:	01800284 	movi	r6,10
 800e5a4:	9009883a 	mov	r4,r18
 800e5a8:	39fff404 	addi	r7,r7,-48
 800e5ac:	800e3b40 	call	800e3b4 <__multadd>
 800e5b0:	a5000044 	addi	r20,r20,1
 800e5b4:	100b883a 	mov	r5,r2
 800e5b8:	a43ff81e 	bne	r20,r16,800e59c <__s2b+0x8c>
 800e5bc:	9c3ffe04 	addi	r16,r19,-8
 800e5c0:	ac21883a 	add	r16,r21,r16
 800e5c4:	9c400a0e 	bge	r19,r17,800e5f0 <__s2b+0xe0>
 800e5c8:	8ce3c83a 	sub	r17,r17,r19
 800e5cc:	8463883a 	add	r17,r16,r17
 800e5d0:	81c00007 	ldb	r7,0(r16)
 800e5d4:	01800284 	movi	r6,10
 800e5d8:	9009883a 	mov	r4,r18
 800e5dc:	39fff404 	addi	r7,r7,-48
 800e5e0:	800e3b40 	call	800e3b4 <__multadd>
 800e5e4:	84000044 	addi	r16,r16,1
 800e5e8:	100b883a 	mov	r5,r2
 800e5ec:	8c3ff81e 	bne	r17,r16,800e5d0 <__s2b+0xc0>
 800e5f0:	2805883a 	mov	r2,r5
 800e5f4:	dfc00617 	ldw	ra,24(sp)
 800e5f8:	dd400517 	ldw	r21,20(sp)
 800e5fc:	dd000417 	ldw	r20,16(sp)
 800e600:	dcc00317 	ldw	r19,12(sp)
 800e604:	dc800217 	ldw	r18,8(sp)
 800e608:	dc400117 	ldw	r17,4(sp)
 800e60c:	dc000017 	ldw	r16,0(sp)
 800e610:	dec00704 	addi	sp,sp,28
 800e614:	f800283a 	ret
 800e618:	84000284 	addi	r16,r16,10
 800e61c:	04c00244 	movi	r19,9
 800e620:	003fe806 	br	800e5c4 <__s2b+0xb4>
 800e624:	000b883a 	mov	r5,zero
 800e628:	003fcf06 	br	800e568 <__s2b+0x58>
 800e62c:	01c20074 	movhi	r7,2049
 800e630:	01020074 	movhi	r4,2049
 800e634:	39df7104 	addi	r7,r7,32196
 800e638:	000d883a 	mov	r6,zero
 800e63c:	01403384 	movi	r5,206
 800e640:	211f8604 	addi	r4,r4,32280
 800e644:	80113e40 	call	80113e4 <__assert_func>

0800e648 <__hi0bits>:
 800e648:	20bfffec 	andhi	r2,r4,65535
 800e64c:	1000131e 	bne	r2,zero,800e69c <__hi0bits+0x54>
 800e650:	2008943a 	slli	r4,r4,16
 800e654:	00800404 	movi	r2,16
 800e658:	20ffc02c 	andhi	r3,r4,65280
 800e65c:	1800021e 	bne	r3,zero,800e668 <__hi0bits+0x20>
 800e660:	2008923a 	slli	r4,r4,8
 800e664:	10800204 	addi	r2,r2,8
 800e668:	20fc002c 	andhi	r3,r4,61440
 800e66c:	1800021e 	bne	r3,zero,800e678 <__hi0bits+0x30>
 800e670:	2008913a 	slli	r4,r4,4
 800e674:	10800104 	addi	r2,r2,4
 800e678:	20f0002c 	andhi	r3,r4,49152
 800e67c:	1800021e 	bne	r3,zero,800e688 <__hi0bits+0x40>
 800e680:	200890ba 	slli	r4,r4,2
 800e684:	10800084 	addi	r2,r2,2
 800e688:	20000316 	blt	r4,zero,800e698 <__hi0bits+0x50>
 800e68c:	2110002c 	andhi	r4,r4,16384
 800e690:	10800044 	addi	r2,r2,1
 800e694:	20000326 	beq	r4,zero,800e6a4 <__hi0bits+0x5c>
 800e698:	f800283a 	ret
 800e69c:	0005883a 	mov	r2,zero
 800e6a0:	003fed06 	br	800e658 <__hi0bits+0x10>
 800e6a4:	00800804 	movi	r2,32
 800e6a8:	f800283a 	ret

0800e6ac <__lo0bits>:
 800e6ac:	20c00017 	ldw	r3,0(r4)
 800e6b0:	188001cc 	andi	r2,r3,7
 800e6b4:	10000826 	beq	r2,zero,800e6d8 <__lo0bits+0x2c>
 800e6b8:	1880004c 	andi	r2,r3,1
 800e6bc:	10001f1e 	bne	r2,zero,800e73c <__lo0bits+0x90>
 800e6c0:	1880008c 	andi	r2,r3,2
 800e6c4:	10002126 	beq	r2,zero,800e74c <__lo0bits+0xa0>
 800e6c8:	1806d07a 	srli	r3,r3,1
 800e6cc:	00800044 	movi	r2,1
 800e6d0:	20c00015 	stw	r3,0(r4)
 800e6d4:	f800283a 	ret
 800e6d8:	18bfffcc 	andi	r2,r3,65535
 800e6dc:	10001426 	beq	r2,zero,800e730 <__lo0bits+0x84>
 800e6e0:	0005883a 	mov	r2,zero
 800e6e4:	19403fcc 	andi	r5,r3,255
 800e6e8:	2800021e 	bne	r5,zero,800e6f4 <__lo0bits+0x48>
 800e6ec:	1806d23a 	srli	r3,r3,8
 800e6f0:	10800204 	addi	r2,r2,8
 800e6f4:	194003cc 	andi	r5,r3,15
 800e6f8:	2800021e 	bne	r5,zero,800e704 <__lo0bits+0x58>
 800e6fc:	1806d13a 	srli	r3,r3,4
 800e700:	10800104 	addi	r2,r2,4
 800e704:	194000cc 	andi	r5,r3,3
 800e708:	2800021e 	bne	r5,zero,800e714 <__lo0bits+0x68>
 800e70c:	1806d0ba 	srli	r3,r3,2
 800e710:	10800084 	addi	r2,r2,2
 800e714:	1940004c 	andi	r5,r3,1
 800e718:	2800031e 	bne	r5,zero,800e728 <__lo0bits+0x7c>
 800e71c:	1806d07a 	srli	r3,r3,1
 800e720:	10800044 	addi	r2,r2,1
 800e724:	18000726 	beq	r3,zero,800e744 <__lo0bits+0x98>
 800e728:	20c00015 	stw	r3,0(r4)
 800e72c:	f800283a 	ret
 800e730:	1806d43a 	srli	r3,r3,16
 800e734:	00800404 	movi	r2,16
 800e738:	003fea06 	br	800e6e4 <__lo0bits+0x38>
 800e73c:	0005883a 	mov	r2,zero
 800e740:	f800283a 	ret
 800e744:	00800804 	movi	r2,32
 800e748:	f800283a 	ret
 800e74c:	1806d0ba 	srli	r3,r3,2
 800e750:	00800084 	movi	r2,2
 800e754:	20c00015 	stw	r3,0(r4)
 800e758:	f800283a 	ret

0800e75c <__i2b>:
 800e75c:	defffe04 	addi	sp,sp,-8
 800e760:	dc000015 	stw	r16,0(sp)
 800e764:	2821883a 	mov	r16,r5
 800e768:	01400044 	movi	r5,1
 800e76c:	dfc00115 	stw	ra,4(sp)
 800e770:	800e2ec0 	call	800e2ec <_Balloc>
 800e774:	10000726 	beq	r2,zero,800e794 <__i2b+0x38>
 800e778:	01000044 	movi	r4,1
 800e77c:	14000515 	stw	r16,20(r2)
 800e780:	11000415 	stw	r4,16(r2)
 800e784:	dfc00117 	ldw	ra,4(sp)
 800e788:	dc000017 	ldw	r16,0(sp)
 800e78c:	dec00204 	addi	sp,sp,8
 800e790:	f800283a 	ret
 800e794:	01c20074 	movhi	r7,2049
 800e798:	01020074 	movhi	r4,2049
 800e79c:	39df7104 	addi	r7,r7,32196
 800e7a0:	000d883a 	mov	r6,zero
 800e7a4:	01405004 	movi	r5,320
 800e7a8:	211f8604 	addi	r4,r4,32280
 800e7ac:	80113e40 	call	80113e4 <__assert_func>

0800e7b0 <__multiply>:
 800e7b0:	defff004 	addi	sp,sp,-64
 800e7b4:	dd800c15 	stw	r22,48(sp)
 800e7b8:	dc400715 	stw	r17,28(sp)
 800e7bc:	2d800417 	ldw	r22,16(r5)
 800e7c0:	34400417 	ldw	r17,16(r6)
 800e7c4:	dc800815 	stw	r18,32(sp)
 800e7c8:	dc000615 	stw	r16,24(sp)
 800e7cc:	dfc00f15 	stw	ra,60(sp)
 800e7d0:	df000e15 	stw	fp,56(sp)
 800e7d4:	ddc00d15 	stw	r23,52(sp)
 800e7d8:	dd400b15 	stw	r21,44(sp)
 800e7dc:	dd000a15 	stw	r20,40(sp)
 800e7e0:	dcc00915 	stw	r19,36(sp)
 800e7e4:	2825883a 	mov	r18,r5
 800e7e8:	3021883a 	mov	r16,r6
 800e7ec:	b4400516 	blt	r22,r17,800e804 <__multiply+0x54>
 800e7f0:	8807883a 	mov	r3,r17
 800e7f4:	2821883a 	mov	r16,r5
 800e7f8:	b023883a 	mov	r17,r22
 800e7fc:	3025883a 	mov	r18,r6
 800e800:	182d883a 	mov	r22,r3
 800e804:	80800217 	ldw	r2,8(r16)
 800e808:	8d87883a 	add	r3,r17,r22
 800e80c:	d8c00115 	stw	r3,4(sp)
 800e810:	81400117 	ldw	r5,4(r16)
 800e814:	10c0010e 	bge	r2,r3,800e81c <__multiply+0x6c>
 800e818:	29400044 	addi	r5,r5,1
 800e81c:	800e2ec0 	call	800e2ec <_Balloc>
 800e820:	d8800515 	stw	r2,20(sp)
 800e824:	10008626 	beq	r2,zero,800ea40 <__multiply+0x290>
 800e828:	d8800117 	ldw	r2,4(sp)
 800e82c:	102690ba 	slli	r19,r2,2
 800e830:	d8800517 	ldw	r2,20(sp)
 800e834:	10c00504 	addi	r3,r2,20
 800e838:	d8c00015 	stw	r3,0(sp)
 800e83c:	1ce7883a 	add	r19,r3,r19
 800e840:	1805883a 	mov	r2,r3
 800e844:	1cc0032e 	bgeu	r3,r19,800e854 <__multiply+0xa4>
 800e848:	10000015 	stw	zero,0(r2)
 800e84c:	10800104 	addi	r2,r2,4
 800e850:	14fffd36 	bltu	r2,r19,800e848 <__multiply+0x98>
 800e854:	b02c90ba 	slli	r22,r22,2
 800e858:	882290ba 	slli	r17,r17,2
 800e85c:	94800504 	addi	r18,r18,20
 800e860:	80800504 	addi	r2,r16,20
 800e864:	9587883a 	add	r3,r18,r22
 800e868:	d8800315 	stw	r2,12(sp)
 800e86c:	d8c00215 	stw	r3,8(sp)
 800e870:	1463883a 	add	r17,r2,r17
 800e874:	90c0342e 	bgeu	r18,r3,800e948 <__multiply+0x198>
 800e878:	80800544 	addi	r2,r16,21
 800e87c:	88804b36 	bltu	r17,r2,800e9ac <__multiply+0x1fc>
 800e880:	8c05c83a 	sub	r2,r17,r16
 800e884:	10bffac4 	addi	r2,r2,-21
 800e888:	1004d0ba 	srli	r2,r2,2
 800e88c:	10800044 	addi	r2,r2,1
 800e890:	100490ba 	slli	r2,r2,2
 800e894:	d8800415 	stw	r2,16(sp)
 800e898:	00000606 	br	800e8b4 <__multiply+0x104>
 800e89c:	d8800017 	ldw	r2,0(sp)
 800e8a0:	94800104 	addi	r18,r18,4
 800e8a4:	10800104 	addi	r2,r2,4
 800e8a8:	d8800015 	stw	r2,0(sp)
 800e8ac:	d8800217 	ldw	r2,8(sp)
 800e8b0:	9080252e 	bgeu	r18,r2,800e948 <__multiply+0x198>
 800e8b4:	90800017 	ldw	r2,0(r18)
 800e8b8:	15ffffcc 	andi	r23,r2,65535
 800e8bc:	b800401e 	bne	r23,zero,800e9c0 <__multiply+0x210>
 800e8c0:	1028d43a 	srli	r20,r2,16
 800e8c4:	a03ff526 	beq	r20,zero,800e89c <__multiply+0xec>
 800e8c8:	dd400017 	ldw	r21,0(sp)
 800e8cc:	dd800317 	ldw	r22,12(sp)
 800e8d0:	0039883a 	mov	fp,zero
 800e8d4:	adc00017 	ldw	r23,0(r21)
 800e8d8:	b821883a 	mov	r16,r23
 800e8dc:	b100000b 	ldhu	r4,0(r22)
 800e8e0:	a00b883a 	mov	r5,r20
 800e8e4:	ad400104 	addi	r21,r21,4
 800e8e8:	80052bc0 	call	80052bc <__mulsi3>
 800e8ec:	800cd43a 	srli	r6,r16,16
 800e8f0:	b8ffffcc 	andi	r3,r23,65535
 800e8f4:	b5800104 	addi	r22,r22,4
 800e8f8:	118d883a 	add	r6,r2,r6
 800e8fc:	3739883a 	add	fp,r6,fp
 800e900:	e004943a 	slli	r2,fp,16
 800e904:	ac000017 	ldw	r16,0(r21)
 800e908:	a00b883a 	mov	r5,r20
 800e90c:	10c6b03a 	or	r3,r2,r3
 800e910:	a8ffff15 	stw	r3,-4(r21)
 800e914:	b13fff8b 	ldhu	r4,-2(r22)
 800e918:	80052bc0 	call	80052bc <__mulsi3>
 800e91c:	e00cd43a 	srli	r6,fp,16
 800e920:	80ffffcc 	andi	r3,r16,65535
 800e924:	10c7883a 	add	r3,r2,r3
 800e928:	19af883a 	add	r23,r3,r6
 800e92c:	b838d43a 	srli	fp,r23,16
 800e930:	b47fea36 	bltu	r22,r17,800e8dc <__multiply+0x12c>
 800e934:	d8800017 	ldw	r2,0(sp)
 800e938:	d8c00417 	ldw	r3,16(sp)
 800e93c:	10c5883a 	add	r2,r2,r3
 800e940:	15c00015 	stw	r23,0(r2)
 800e944:	003fd506 	br	800e89c <__multiply+0xec>
 800e948:	d8800117 	ldw	r2,4(sp)
 800e94c:	00800516 	blt	zero,r2,800e964 <__multiply+0x1b4>
 800e950:	00000706 	br	800e970 <__multiply+0x1c0>
 800e954:	d8800117 	ldw	r2,4(sp)
 800e958:	10bfffc4 	addi	r2,r2,-1
 800e95c:	d8800115 	stw	r2,4(sp)
 800e960:	10000326 	beq	r2,zero,800e970 <__multiply+0x1c0>
 800e964:	98bfff17 	ldw	r2,-4(r19)
 800e968:	9cffff04 	addi	r19,r19,-4
 800e96c:	103ff926 	beq	r2,zero,800e954 <__multiply+0x1a4>
 800e970:	d8800517 	ldw	r2,20(sp)
 800e974:	d8c00117 	ldw	r3,4(sp)
 800e978:	10c00415 	stw	r3,16(r2)
 800e97c:	dfc00f17 	ldw	ra,60(sp)
 800e980:	df000e17 	ldw	fp,56(sp)
 800e984:	ddc00d17 	ldw	r23,52(sp)
 800e988:	dd800c17 	ldw	r22,48(sp)
 800e98c:	dd400b17 	ldw	r21,44(sp)
 800e990:	dd000a17 	ldw	r20,40(sp)
 800e994:	dcc00917 	ldw	r19,36(sp)
 800e998:	dc800817 	ldw	r18,32(sp)
 800e99c:	dc400717 	ldw	r17,28(sp)
 800e9a0:	dc000617 	ldw	r16,24(sp)
 800e9a4:	dec01004 	addi	sp,sp,64
 800e9a8:	f800283a 	ret
 800e9ac:	00800104 	movi	r2,4
 800e9b0:	d8800415 	stw	r2,16(sp)
 800e9b4:	90800017 	ldw	r2,0(r18)
 800e9b8:	15ffffcc 	andi	r23,r2,65535
 800e9bc:	b83fc026 	beq	r23,zero,800e8c0 <__multiply+0x110>
 800e9c0:	dd800017 	ldw	r22,0(sp)
 800e9c4:	dd400317 	ldw	r21,12(sp)
 800e9c8:	0029883a 	mov	r20,zero
 800e9cc:	af000017 	ldw	fp,0(r21)
 800e9d0:	b4000017 	ldw	r16,0(r22)
 800e9d4:	b80b883a 	mov	r5,r23
 800e9d8:	e13fffcc 	andi	r4,fp,65535
 800e9dc:	80052bc0 	call	80052bc <__mulsi3>
 800e9e0:	e008d43a 	srli	r4,fp,16
 800e9e4:	823fffcc 	andi	r8,r16,65535
 800e9e8:	1205883a 	add	r2,r2,r8
 800e9ec:	b80b883a 	mov	r5,r23
 800e9f0:	1529883a 	add	r20,r2,r20
 800e9f4:	8020d43a 	srli	r16,r16,16
 800e9f8:	80052bc0 	call	80052bc <__mulsi3>
 800e9fc:	a008d43a 	srli	r4,r20,16
 800ea00:	1405883a 	add	r2,r2,r16
 800ea04:	a0ffffcc 	andi	r3,r20,65535
 800ea08:	1105883a 	add	r2,r2,r4
 800ea0c:	1008943a 	slli	r4,r2,16
 800ea10:	b5800104 	addi	r22,r22,4
 800ea14:	ad400104 	addi	r21,r21,4
 800ea18:	20c6b03a 	or	r3,r4,r3
 800ea1c:	b0ffff15 	stw	r3,-4(r22)
 800ea20:	1028d43a 	srli	r20,r2,16
 800ea24:	ac7fe936 	bltu	r21,r17,800e9cc <__multiply+0x21c>
 800ea28:	d8800017 	ldw	r2,0(sp)
 800ea2c:	d8c00417 	ldw	r3,16(sp)
 800ea30:	10c5883a 	add	r2,r2,r3
 800ea34:	15000015 	stw	r20,0(r2)
 800ea38:	90800017 	ldw	r2,0(r18)
 800ea3c:	003fa006 	br	800e8c0 <__multiply+0x110>
 800ea40:	01c20074 	movhi	r7,2049
 800ea44:	01020074 	movhi	r4,2049
 800ea48:	39df7104 	addi	r7,r7,32196
 800ea4c:	000d883a 	mov	r6,zero
 800ea50:	01405744 	movi	r5,349
 800ea54:	211f8604 	addi	r4,r4,32280
 800ea58:	80113e40 	call	80113e4 <__assert_func>

0800ea5c <__pow5mult>:
 800ea5c:	defffb04 	addi	sp,sp,-20
 800ea60:	dcc00315 	stw	r19,12(sp)
 800ea64:	dc000015 	stw	r16,0(sp)
 800ea68:	dfc00415 	stw	ra,16(sp)
 800ea6c:	dc800215 	stw	r18,8(sp)
 800ea70:	dc400115 	stw	r17,4(sp)
 800ea74:	308000cc 	andi	r2,r6,3
 800ea78:	3021883a 	mov	r16,r6
 800ea7c:	2027883a 	mov	r19,r4
 800ea80:	10002d1e 	bne	r2,zero,800eb38 <__pow5mult+0xdc>
 800ea84:	2825883a 	mov	r18,r5
 800ea88:	8021d0ba 	srai	r16,r16,2
 800ea8c:	80001926 	beq	r16,zero,800eaf4 <__pow5mult+0x98>
 800ea90:	9c401217 	ldw	r17,72(r19)
 800ea94:	8800061e 	bne	r17,zero,800eab0 <__pow5mult+0x54>
 800ea98:	00002f06 	br	800eb58 <__pow5mult+0xfc>
 800ea9c:	8021d07a 	srai	r16,r16,1
 800eaa0:	80001426 	beq	r16,zero,800eaf4 <__pow5mult+0x98>
 800eaa4:	88800017 	ldw	r2,0(r17)
 800eaa8:	10001a26 	beq	r2,zero,800eb14 <__pow5mult+0xb8>
 800eaac:	1023883a 	mov	r17,r2
 800eab0:	8080004c 	andi	r2,r16,1
 800eab4:	103ff926 	beq	r2,zero,800ea9c <__pow5mult+0x40>
 800eab8:	880d883a 	mov	r6,r17
 800eabc:	900b883a 	mov	r5,r18
 800eac0:	9809883a 	mov	r4,r19
 800eac4:	800e7b00 	call	800e7b0 <__multiply>
 800eac8:	90001926 	beq	r18,zero,800eb30 <__pow5mult+0xd4>
 800eacc:	91000117 	ldw	r4,4(r18)
 800ead0:	98c01317 	ldw	r3,76(r19)
 800ead4:	8021d07a 	srai	r16,r16,1
 800ead8:	200890ba 	slli	r4,r4,2
 800eadc:	1907883a 	add	r3,r3,r4
 800eae0:	19000017 	ldw	r4,0(r3)
 800eae4:	91000015 	stw	r4,0(r18)
 800eae8:	1c800015 	stw	r18,0(r3)
 800eaec:	1025883a 	mov	r18,r2
 800eaf0:	803fec1e 	bne	r16,zero,800eaa4 <__pow5mult+0x48>
 800eaf4:	9005883a 	mov	r2,r18
 800eaf8:	dfc00417 	ldw	ra,16(sp)
 800eafc:	dcc00317 	ldw	r19,12(sp)
 800eb00:	dc800217 	ldw	r18,8(sp)
 800eb04:	dc400117 	ldw	r17,4(sp)
 800eb08:	dc000017 	ldw	r16,0(sp)
 800eb0c:	dec00504 	addi	sp,sp,20
 800eb10:	f800283a 	ret
 800eb14:	880d883a 	mov	r6,r17
 800eb18:	880b883a 	mov	r5,r17
 800eb1c:	9809883a 	mov	r4,r19
 800eb20:	800e7b00 	call	800e7b0 <__multiply>
 800eb24:	88800015 	stw	r2,0(r17)
 800eb28:	10000015 	stw	zero,0(r2)
 800eb2c:	003fdf06 	br	800eaac <__pow5mult+0x50>
 800eb30:	1025883a 	mov	r18,r2
 800eb34:	003fd906 	br	800ea9c <__pow5mult+0x40>
 800eb38:	100490ba 	slli	r2,r2,2
 800eb3c:	00c20074 	movhi	r3,2049
 800eb40:	000f883a 	mov	r7,zero
 800eb44:	10c7883a 	add	r3,r2,r3
 800eb48:	199f9517 	ldw	r6,32340(r3)
 800eb4c:	800e3b40 	call	800e3b4 <__multadd>
 800eb50:	1025883a 	mov	r18,r2
 800eb54:	003fcc06 	br	800ea88 <__pow5mult+0x2c>
 800eb58:	01409c44 	movi	r5,625
 800eb5c:	9809883a 	mov	r4,r19
 800eb60:	800e75c0 	call	800e75c <__i2b>
 800eb64:	98801215 	stw	r2,72(r19)
 800eb68:	1023883a 	mov	r17,r2
 800eb6c:	10000015 	stw	zero,0(r2)
 800eb70:	003fcf06 	br	800eab0 <__pow5mult+0x54>

0800eb74 <__lshift>:
 800eb74:	defff904 	addi	sp,sp,-28
 800eb78:	dd400515 	stw	r21,20(sp)
 800eb7c:	dc800215 	stw	r18,8(sp)
 800eb80:	302bd17a 	srai	r21,r6,5
 800eb84:	2c800417 	ldw	r18,16(r5)
 800eb88:	28800217 	ldw	r2,8(r5)
 800eb8c:	dd000415 	stw	r20,16(sp)
 800eb90:	aca5883a 	add	r18,r21,r18
 800eb94:	dcc00315 	stw	r19,12(sp)
 800eb98:	dc400115 	stw	r17,4(sp)
 800eb9c:	dc000015 	stw	r16,0(sp)
 800eba0:	dfc00615 	stw	ra,24(sp)
 800eba4:	94400044 	addi	r17,r18,1
 800eba8:	2821883a 	mov	r16,r5
 800ebac:	3029883a 	mov	r20,r6
 800ebb0:	29400117 	ldw	r5,4(r5)
 800ebb4:	2027883a 	mov	r19,r4
 800ebb8:	1440030e 	bge	r2,r17,800ebc8 <__lshift+0x54>
 800ebbc:	1085883a 	add	r2,r2,r2
 800ebc0:	29400044 	addi	r5,r5,1
 800ebc4:	147ffd16 	blt	r2,r17,800ebbc <__lshift+0x48>
 800ebc8:	9809883a 	mov	r4,r19
 800ebcc:	800e2ec0 	call	800e2ec <_Balloc>
 800ebd0:	10004326 	beq	r2,zero,800ece0 <__lshift+0x16c>
 800ebd4:	12000504 	addi	r8,r2,20
 800ebd8:	0540090e 	bge	zero,r21,800ec00 <__lshift+0x8c>
 800ebdc:	ad400144 	addi	r21,r21,5
 800ebe0:	a82a90ba 	slli	r21,r21,2
 800ebe4:	4007883a 	mov	r3,r8
 800ebe8:	1549883a 	add	r4,r2,r21
 800ebec:	18c00104 	addi	r3,r3,4
 800ebf0:	183fff15 	stw	zero,-4(r3)
 800ebf4:	193ffd1e 	bne	r3,r4,800ebec <__lshift+0x78>
 800ebf8:	ad7ffb04 	addi	r21,r21,-20
 800ebfc:	4551883a 	add	r8,r8,r21
 800ec00:	82400417 	ldw	r9,16(r16)
 800ec04:	80c00504 	addi	r3,r16,20
 800ec08:	a14007cc 	andi	r5,r20,31
 800ec0c:	481290ba 	slli	r9,r9,2
 800ec10:	1a53883a 	add	r9,r3,r9
 800ec14:	28002a26 	beq	r5,zero,800ecc0 <__lshift+0x14c>
 800ec18:	02800804 	movi	r10,32
 800ec1c:	5155c83a 	sub	r10,r10,r5
 800ec20:	4009883a 	mov	r4,r8
 800ec24:	000f883a 	mov	r7,zero
 800ec28:	19800017 	ldw	r6,0(r3)
 800ec2c:	21000104 	addi	r4,r4,4
 800ec30:	18c00104 	addi	r3,r3,4
 800ec34:	314c983a 	sll	r6,r6,r5
 800ec38:	31ccb03a 	or	r6,r6,r7
 800ec3c:	21bfff15 	stw	r6,-4(r4)
 800ec40:	19bfff17 	ldw	r6,-4(r3)
 800ec44:	328ed83a 	srl	r7,r6,r10
 800ec48:	1a7ff736 	bltu	r3,r9,800ec28 <__lshift+0xb4>
 800ec4c:	80c00544 	addi	r3,r16,21
 800ec50:	48c02136 	bltu	r9,r3,800ecd8 <__lshift+0x164>
 800ec54:	4c07c83a 	sub	r3,r9,r16
 800ec58:	18fffac4 	addi	r3,r3,-21
 800ec5c:	1806d0ba 	srli	r3,r3,2
 800ec60:	18c00044 	addi	r3,r3,1
 800ec64:	180690ba 	slli	r3,r3,2
 800ec68:	40d1883a 	add	r8,r8,r3
 800ec6c:	41c00015 	stw	r7,0(r8)
 800ec70:	38000126 	beq	r7,zero,800ec78 <__lshift+0x104>
 800ec74:	8825883a 	mov	r18,r17
 800ec78:	14800415 	stw	r18,16(r2)
 800ec7c:	80000726 	beq	r16,zero,800ec9c <__lshift+0x128>
 800ec80:	81000117 	ldw	r4,4(r16)
 800ec84:	98c01317 	ldw	r3,76(r19)
 800ec88:	200890ba 	slli	r4,r4,2
 800ec8c:	1907883a 	add	r3,r3,r4
 800ec90:	19000017 	ldw	r4,0(r3)
 800ec94:	81000015 	stw	r4,0(r16)
 800ec98:	1c000015 	stw	r16,0(r3)
 800ec9c:	dfc00617 	ldw	ra,24(sp)
 800eca0:	dd400517 	ldw	r21,20(sp)
 800eca4:	dd000417 	ldw	r20,16(sp)
 800eca8:	dcc00317 	ldw	r19,12(sp)
 800ecac:	dc800217 	ldw	r18,8(sp)
 800ecb0:	dc400117 	ldw	r17,4(sp)
 800ecb4:	dc000017 	ldw	r16,0(sp)
 800ecb8:	dec00704 	addi	sp,sp,28
 800ecbc:	f800283a 	ret
 800ecc0:	19000017 	ldw	r4,0(r3)
 800ecc4:	18c00104 	addi	r3,r3,4
 800ecc8:	42000104 	addi	r8,r8,4
 800eccc:	413fff15 	stw	r4,-4(r8)
 800ecd0:	1a7ffb36 	bltu	r3,r9,800ecc0 <__lshift+0x14c>
 800ecd4:	003fe806 	br	800ec78 <__lshift+0x104>
 800ecd8:	00c00104 	movi	r3,4
 800ecdc:	003fe206 	br	800ec68 <__lshift+0xf4>
 800ece0:	01c20074 	movhi	r7,2049
 800ece4:	01020074 	movhi	r4,2049
 800ece8:	39df7104 	addi	r7,r7,32196
 800ecec:	000d883a 	mov	r6,zero
 800ecf0:	01407644 	movi	r5,473
 800ecf4:	211f8604 	addi	r4,r4,32280
 800ecf8:	80113e40 	call	80113e4 <__assert_func>

0800ecfc <__mcmp>:
 800ecfc:	21800417 	ldw	r6,16(r4)
 800ed00:	28c00417 	ldw	r3,16(r5)
 800ed04:	30c5c83a 	sub	r2,r6,r3
 800ed08:	30c00e1e 	bne	r6,r3,800ed44 <__mcmp+0x48>
 800ed0c:	180690ba 	slli	r3,r3,2
 800ed10:	21c00504 	addi	r7,r4,20
 800ed14:	29400504 	addi	r5,r5,20
 800ed18:	38c9883a 	add	r4,r7,r3
 800ed1c:	28c7883a 	add	r3,r5,r3
 800ed20:	00000106 	br	800ed28 <__mcmp+0x2c>
 800ed24:	3900082e 	bgeu	r7,r4,800ed48 <__mcmp+0x4c>
 800ed28:	21bfff17 	ldw	r6,-4(r4)
 800ed2c:	197fff17 	ldw	r5,-4(r3)
 800ed30:	213fff04 	addi	r4,r4,-4
 800ed34:	18ffff04 	addi	r3,r3,-4
 800ed38:	317ffa26 	beq	r6,r5,800ed24 <__mcmp+0x28>
 800ed3c:	3140032e 	bgeu	r6,r5,800ed4c <__mcmp+0x50>
 800ed40:	00bfffc4 	movi	r2,-1
 800ed44:	f800283a 	ret
 800ed48:	f800283a 	ret
 800ed4c:	00800044 	movi	r2,1
 800ed50:	f800283a 	ret

0800ed54 <__mdiff>:
 800ed54:	28800417 	ldw	r2,16(r5)
 800ed58:	30c00417 	ldw	r3,16(r6)
 800ed5c:	defffc04 	addi	sp,sp,-16
 800ed60:	dc800215 	stw	r18,8(sp)
 800ed64:	dc400115 	stw	r17,4(sp)
 800ed68:	dc000015 	stw	r16,0(sp)
 800ed6c:	dfc00315 	stw	ra,12(sp)
 800ed70:	2823883a 	mov	r17,r5
 800ed74:	3021883a 	mov	r16,r6
 800ed78:	10e5c83a 	sub	r18,r2,r3
 800ed7c:	10c0641e 	bne	r2,r3,800ef10 <__mdiff+0x1bc>
 800ed80:	180c90ba 	slli	r6,r3,2
 800ed84:	29400504 	addi	r5,r5,20
 800ed88:	80c00504 	addi	r3,r16,20
 800ed8c:	2985883a 	add	r2,r5,r6
 800ed90:	1987883a 	add	r3,r3,r6
 800ed94:	00000106 	br	800ed9c <__mdiff+0x48>
 800ed98:	2880642e 	bgeu	r5,r2,800ef2c <__mdiff+0x1d8>
 800ed9c:	11ffff17 	ldw	r7,-4(r2)
 800eda0:	19bfff17 	ldw	r6,-4(r3)
 800eda4:	10bfff04 	addi	r2,r2,-4
 800eda8:	18ffff04 	addi	r3,r3,-4
 800edac:	39bffa26 	beq	r7,r6,800ed98 <__mdiff+0x44>
 800edb0:	39805236 	bltu	r7,r6,800eefc <__mdiff+0x1a8>
 800edb4:	89400117 	ldw	r5,4(r17)
 800edb8:	800e2ec0 	call	800e2ec <_Balloc>
 800edbc:	10006226 	beq	r2,zero,800ef48 <__mdiff+0x1f4>
 800edc0:	8a400417 	ldw	r9,16(r17)
 800edc4:	83000417 	ldw	r12,16(r16)
 800edc8:	8ac00504 	addi	r11,r17,20
 800edcc:	481090ba 	slli	r8,r9,2
 800edd0:	601890ba 	slli	r12,r12,2
 800edd4:	81800504 	addi	r6,r16,20
 800edd8:	13400504 	addi	r13,r2,20
 800eddc:	14800315 	stw	r18,12(r2)
 800ede0:	5a11883a 	add	r8,r11,r8
 800ede4:	3319883a 	add	r12,r6,r12
 800ede8:	681d883a 	mov	r14,r13
 800edec:	5815883a 	mov	r10,r11
 800edf0:	0007883a 	mov	r3,zero
 800edf4:	51000017 	ldw	r4,0(r10)
 800edf8:	31c00017 	ldw	r7,0(r6)
 800edfc:	73800104 	addi	r14,r14,4
 800ee00:	217fffcc 	andi	r5,r4,65535
 800ee04:	28cb883a 	add	r5,r5,r3
 800ee08:	38ffffcc 	andi	r3,r7,65535
 800ee0c:	28cbc83a 	sub	r5,r5,r3
 800ee10:	380ed43a 	srli	r7,r7,16
 800ee14:	2006d43a 	srli	r3,r4,16
 800ee18:	2809d43a 	srai	r4,r5,16
 800ee1c:	297fffcc 	andi	r5,r5,65535
 800ee20:	19c7c83a 	sub	r3,r3,r7
 800ee24:	1907883a 	add	r3,r3,r4
 800ee28:	1808943a 	slli	r4,r3,16
 800ee2c:	31800104 	addi	r6,r6,4
 800ee30:	1807d43a 	srai	r3,r3,16
 800ee34:	214ab03a 	or	r5,r4,r5
 800ee38:	717fff15 	stw	r5,-4(r14)
 800ee3c:	52800104 	addi	r10,r10,4
 800ee40:	333fec36 	bltu	r6,r12,800edf4 <__mdiff+0xa0>
 800ee44:	640fc83a 	sub	r7,r12,r16
 800ee48:	39fffac4 	addi	r7,r7,-21
 800ee4c:	84000544 	addi	r16,r16,21
 800ee50:	380ed0ba 	srli	r7,r7,2
 800ee54:	64003336 	bltu	r12,r16,800ef24 <__mdiff+0x1d0>
 800ee58:	380890ba 	slli	r4,r7,2
 800ee5c:	6909883a 	add	r4,r13,r4
 800ee60:	64002e36 	bltu	r12,r16,800ef1c <__mdiff+0x1c8>
 800ee64:	39800044 	addi	r6,r7,1
 800ee68:	300c90ba 	slli	r6,r6,2
 800ee6c:	5997883a 	add	r11,r11,r6
 800ee70:	699b883a 	add	r13,r13,r6
 800ee74:	5a00152e 	bgeu	r11,r8,800eecc <__mdiff+0x178>
 800ee78:	680f883a 	mov	r7,r13
 800ee7c:	580d883a 	mov	r6,r11
 800ee80:	31000017 	ldw	r4,0(r6)
 800ee84:	39c00104 	addi	r7,r7,4
 800ee88:	31800104 	addi	r6,r6,4
 800ee8c:	217fffcc 	andi	r5,r4,65535
 800ee90:	28cb883a 	add	r5,r5,r3
 800ee94:	2815d43a 	srai	r10,r5,16
 800ee98:	2006d43a 	srli	r3,r4,16
 800ee9c:	297fffcc 	andi	r5,r5,65535
 800eea0:	1a87883a 	add	r3,r3,r10
 800eea4:	1814943a 	slli	r10,r3,16
 800eea8:	1807d43a 	srai	r3,r3,16
 800eeac:	514ab03a 	or	r5,r10,r5
 800eeb0:	397fff15 	stw	r5,-4(r7)
 800eeb4:	323ff236 	bltu	r6,r8,800ee80 <__mdiff+0x12c>
 800eeb8:	413fffc4 	addi	r4,r8,-1
 800eebc:	22c9c83a 	sub	r4,r4,r11
 800eec0:	2008d0ba 	srli	r4,r4,2
 800eec4:	200890ba 	slli	r4,r4,2
 800eec8:	6909883a 	add	r4,r13,r4
 800eecc:	2800041e 	bne	r5,zero,800eee0 <__mdiff+0x18c>
 800eed0:	20ffff17 	ldw	r3,-4(r4)
 800eed4:	4a7fffc4 	addi	r9,r9,-1
 800eed8:	213fff04 	addi	r4,r4,-4
 800eedc:	183ffc26 	beq	r3,zero,800eed0 <__mdiff+0x17c>
 800eee0:	12400415 	stw	r9,16(r2)
 800eee4:	dfc00317 	ldw	ra,12(sp)
 800eee8:	dc800217 	ldw	r18,8(sp)
 800eeec:	dc400117 	ldw	r17,4(sp)
 800eef0:	dc000017 	ldw	r16,0(sp)
 800eef4:	dec00404 	addi	sp,sp,16
 800eef8:	f800283a 	ret
 800eefc:	8805883a 	mov	r2,r17
 800ef00:	04800044 	movi	r18,1
 800ef04:	8023883a 	mov	r17,r16
 800ef08:	1021883a 	mov	r16,r2
 800ef0c:	003fa906 	br	800edb4 <__mdiff+0x60>
 800ef10:	903ffa16 	blt	r18,zero,800eefc <__mdiff+0x1a8>
 800ef14:	0025883a 	mov	r18,zero
 800ef18:	003fa606 	br	800edb4 <__mdiff+0x60>
 800ef1c:	01800104 	movi	r6,4
 800ef20:	003fd206 	br	800ee6c <__mdiff+0x118>
 800ef24:	0009883a 	mov	r4,zero
 800ef28:	003fcc06 	br	800ee5c <__mdiff+0x108>
 800ef2c:	000b883a 	mov	r5,zero
 800ef30:	800e2ec0 	call	800e2ec <_Balloc>
 800ef34:	10000b26 	beq	r2,zero,800ef64 <__mdiff+0x210>
 800ef38:	00c00044 	movi	r3,1
 800ef3c:	10c00415 	stw	r3,16(r2)
 800ef40:	10000515 	stw	zero,20(r2)
 800ef44:	003fe706 	br	800eee4 <__mdiff+0x190>
 800ef48:	01c20074 	movhi	r7,2049
 800ef4c:	01020074 	movhi	r4,2049
 800ef50:	39df7104 	addi	r7,r7,32196
 800ef54:	000d883a 	mov	r6,zero
 800ef58:	01409004 	movi	r5,576
 800ef5c:	211f8604 	addi	r4,r4,32280
 800ef60:	80113e40 	call	80113e4 <__assert_func>
 800ef64:	01c20074 	movhi	r7,2049
 800ef68:	01020074 	movhi	r4,2049
 800ef6c:	39df7104 	addi	r7,r7,32196
 800ef70:	000d883a 	mov	r6,zero
 800ef74:	01408c84 	movi	r5,562
 800ef78:	211f8604 	addi	r4,r4,32280
 800ef7c:	80113e40 	call	80113e4 <__assert_func>

0800ef80 <__ulp>:
 800ef80:	28dffc2c 	andhi	r3,r5,32752
 800ef84:	017f3034 	movhi	r5,64704
 800ef88:	1947883a 	add	r3,r3,r5
 800ef8c:	00c0020e 	bge	zero,r3,800ef98 <__ulp+0x18>
 800ef90:	0005883a 	mov	r2,zero
 800ef94:	f800283a 	ret
 800ef98:	00c7c83a 	sub	r3,zero,r3
 800ef9c:	1807d53a 	srai	r3,r3,20
 800efa0:	18800508 	cmpgei	r2,r3,20
 800efa4:	1000041e 	bne	r2,zero,800efb8 <__ulp+0x38>
 800efa8:	00800234 	movhi	r2,8
 800efac:	10c7d83a 	sra	r3,r2,r3
 800efb0:	0005883a 	mov	r2,zero
 800efb4:	f800283a 	ret
 800efb8:	193ffb04 	addi	r4,r3,-20
 800efbc:	208007c8 	cmpgei	r2,r4,31
 800efc0:	0007883a 	mov	r3,zero
 800efc4:	1000031e 	bne	r2,zero,800efd4 <__ulp+0x54>
 800efc8:	00a00034 	movhi	r2,32768
 800efcc:	1104d83a 	srl	r2,r2,r4
 800efd0:	f800283a 	ret
 800efd4:	00800044 	movi	r2,1
 800efd8:	f800283a 	ret

0800efdc <__b2d>:
 800efdc:	defffa04 	addi	sp,sp,-24
 800efe0:	dc400115 	stw	r17,4(sp)
 800efe4:	24400417 	ldw	r17,16(r4)
 800efe8:	dc000015 	stw	r16,0(sp)
 800efec:	24000504 	addi	r16,r4,20
 800eff0:	882290ba 	slli	r17,r17,2
 800eff4:	dc800215 	stw	r18,8(sp)
 800eff8:	dd000415 	stw	r20,16(sp)
 800effc:	8463883a 	add	r17,r16,r17
 800f000:	8cbfff17 	ldw	r18,-4(r17)
 800f004:	dcc00315 	stw	r19,12(sp)
 800f008:	dfc00515 	stw	ra,20(sp)
 800f00c:	9009883a 	mov	r4,r18
 800f010:	2827883a 	mov	r19,r5
 800f014:	800e6480 	call	800e648 <__hi0bits>
 800f018:	01000804 	movi	r4,32
 800f01c:	2087c83a 	sub	r3,r4,r2
 800f020:	98c00015 	stw	r3,0(r19)
 800f024:	10c002c8 	cmpgei	r3,r2,11
 800f028:	8d3fff04 	addi	r20,r17,-4
 800f02c:	18001f26 	beq	r3,zero,800f0ac <__b2d+0xd0>
 800f030:	10fffd44 	addi	r3,r2,-11
 800f034:	85000e2e 	bgeu	r16,r20,800f070 <__b2d+0x94>
 800f038:	88bffe17 	ldw	r2,-8(r17)
 800f03c:	18001226 	beq	r3,zero,800f088 <__b2d+0xac>
 800f040:	20c9c83a 	sub	r4,r4,r3
 800f044:	110cd83a 	srl	r6,r2,r4
 800f048:	90e4983a 	sll	r18,r18,r3
 800f04c:	10c4983a 	sll	r2,r2,r3
 800f050:	897ffe04 	addi	r5,r17,-8
 800f054:	9186b03a 	or	r3,r18,r6
 800f058:	18cffc34 	orhi	r3,r3,16368
 800f05c:	81400b2e 	bgeu	r16,r5,800f08c <__b2d+0xb0>
 800f060:	897ffd17 	ldw	r5,-12(r17)
 800f064:	2908d83a 	srl	r4,r5,r4
 800f068:	1104b03a 	or	r2,r2,r4
 800f06c:	00000706 	br	800f08c <__b2d+0xb0>
 800f070:	18000426 	beq	r3,zero,800f084 <__b2d+0xa8>
 800f074:	90c6983a 	sll	r3,r18,r3
 800f078:	0005883a 	mov	r2,zero
 800f07c:	18cffc34 	orhi	r3,r3,16368
 800f080:	00000206 	br	800f08c <__b2d+0xb0>
 800f084:	0005883a 	mov	r2,zero
 800f088:	90cffc34 	orhi	r3,r18,16368
 800f08c:	dfc00517 	ldw	ra,20(sp)
 800f090:	dd000417 	ldw	r20,16(sp)
 800f094:	dcc00317 	ldw	r19,12(sp)
 800f098:	dc800217 	ldw	r18,8(sp)
 800f09c:	dc400117 	ldw	r17,4(sp)
 800f0a0:	dc000017 	ldw	r16,0(sp)
 800f0a4:	dec00604 	addi	sp,sp,24
 800f0a8:	f800283a 	ret
 800f0ac:	014002c4 	movi	r5,11
 800f0b0:	2889c83a 	sub	r4,r5,r2
 800f0b4:	9106d83a 	srl	r3,r18,r4
 800f0b8:	18cffc34 	orhi	r3,r3,16368
 800f0bc:	85000536 	bltu	r16,r20,800f0d4 <__b2d+0xf8>
 800f0c0:	000b883a 	mov	r5,zero
 800f0c4:	10800544 	addi	r2,r2,21
 800f0c8:	9084983a 	sll	r2,r18,r2
 800f0cc:	1144b03a 	or	r2,r2,r5
 800f0d0:	003fee06 	br	800f08c <__b2d+0xb0>
 800f0d4:	897ffe17 	ldw	r5,-8(r17)
 800f0d8:	290ad83a 	srl	r5,r5,r4
 800f0dc:	003ff906 	br	800f0c4 <__b2d+0xe8>

0800f0e0 <__d2b>:
 800f0e0:	defff804 	addi	sp,sp,-32
 800f0e4:	dd000615 	stw	r20,24(sp)
 800f0e8:	2829883a 	mov	r20,r5
 800f0ec:	01400044 	movi	r5,1
 800f0f0:	dcc00515 	stw	r19,20(sp)
 800f0f4:	dc000215 	stw	r16,8(sp)
 800f0f8:	dfc00715 	stw	ra,28(sp)
 800f0fc:	dc800415 	stw	r18,16(sp)
 800f100:	dc400315 	stw	r17,12(sp)
 800f104:	3021883a 	mov	r16,r6
 800f108:	3827883a 	mov	r19,r7
 800f10c:	800e2ec0 	call	800e2ec <_Balloc>
 800f110:	10004526 	beq	r2,zero,800f228 <__d2b+0x148>
 800f114:	8024d53a 	srli	r18,r16,20
 800f118:	01800434 	movhi	r6,16
 800f11c:	31bfffc4 	addi	r6,r6,-1
 800f120:	9481ffcc 	andi	r18,r18,2047
 800f124:	1023883a 	mov	r17,r2
 800f128:	81a0703a 	and	r16,r16,r6
 800f12c:	90000126 	beq	r18,zero,800f134 <__d2b+0x54>
 800f130:	84000434 	orhi	r16,r16,16
 800f134:	dc000115 	stw	r16,4(sp)
 800f138:	a0002226 	beq	r20,zero,800f1c4 <__d2b+0xe4>
 800f13c:	d809883a 	mov	r4,sp
 800f140:	dd000015 	stw	r20,0(sp)
 800f144:	800e6ac0 	call	800e6ac <__lo0bits>
 800f148:	d8c00117 	ldw	r3,4(sp)
 800f14c:	10003326 	beq	r2,zero,800f21c <__d2b+0x13c>
 800f150:	01000804 	movi	r4,32
 800f154:	2089c83a 	sub	r4,r4,r2
 800f158:	1908983a 	sll	r4,r3,r4
 800f15c:	d9400017 	ldw	r5,0(sp)
 800f160:	1886d83a 	srl	r3,r3,r2
 800f164:	2148b03a 	or	r4,r4,r5
 800f168:	89000515 	stw	r4,20(r17)
 800f16c:	d8c00115 	stw	r3,4(sp)
 800f170:	88c00615 	stw	r3,24(r17)
 800f174:	1800271e 	bne	r3,zero,800f214 <__d2b+0x134>
 800f178:	04000044 	movi	r16,1
 800f17c:	8c000415 	stw	r16,16(r17)
 800f180:	90001926 	beq	r18,zero,800f1e8 <__d2b+0x108>
 800f184:	00c00d44 	movi	r3,53
 800f188:	94bef344 	addi	r18,r18,-1075
 800f18c:	90a5883a 	add	r18,r18,r2
 800f190:	1885c83a 	sub	r2,r3,r2
 800f194:	d8c00817 	ldw	r3,32(sp)
 800f198:	9c800015 	stw	r18,0(r19)
 800f19c:	18800015 	stw	r2,0(r3)
 800f1a0:	8805883a 	mov	r2,r17
 800f1a4:	dfc00717 	ldw	ra,28(sp)
 800f1a8:	dd000617 	ldw	r20,24(sp)
 800f1ac:	dcc00517 	ldw	r19,20(sp)
 800f1b0:	dc800417 	ldw	r18,16(sp)
 800f1b4:	dc400317 	ldw	r17,12(sp)
 800f1b8:	dc000217 	ldw	r16,8(sp)
 800f1bc:	dec00804 	addi	sp,sp,32
 800f1c0:	f800283a 	ret
 800f1c4:	d9000104 	addi	r4,sp,4
 800f1c8:	800e6ac0 	call	800e6ac <__lo0bits>
 800f1cc:	00c00044 	movi	r3,1
 800f1d0:	88c00415 	stw	r3,16(r17)
 800f1d4:	d8c00117 	ldw	r3,4(sp)
 800f1d8:	10800804 	addi	r2,r2,32
 800f1dc:	04000044 	movi	r16,1
 800f1e0:	88c00515 	stw	r3,20(r17)
 800f1e4:	903fe71e 	bne	r18,zero,800f184 <__d2b+0xa4>
 800f1e8:	800690ba 	slli	r3,r16,2
 800f1ec:	10bef384 	addi	r2,r2,-1074
 800f1f0:	98800015 	stw	r2,0(r19)
 800f1f4:	88c5883a 	add	r2,r17,r3
 800f1f8:	11000417 	ldw	r4,16(r2)
 800f1fc:	8020917a 	slli	r16,r16,5
 800f200:	800e6480 	call	800e648 <__hi0bits>
 800f204:	80a1c83a 	sub	r16,r16,r2
 800f208:	d8800817 	ldw	r2,32(sp)
 800f20c:	14000015 	stw	r16,0(r2)
 800f210:	003fe306 	br	800f1a0 <__d2b+0xc0>
 800f214:	04000084 	movi	r16,2
 800f218:	003fd806 	br	800f17c <__d2b+0x9c>
 800f21c:	d9000017 	ldw	r4,0(sp)
 800f220:	89000515 	stw	r4,20(r17)
 800f224:	003fd206 	br	800f170 <__d2b+0x90>
 800f228:	01c20074 	movhi	r7,2049
 800f22c:	01020074 	movhi	r4,2049
 800f230:	39df7104 	addi	r7,r7,32196
 800f234:	000d883a 	mov	r6,zero
 800f238:	0140c284 	movi	r5,778
 800f23c:	211f8604 	addi	r4,r4,32280
 800f240:	80113e40 	call	80113e4 <__assert_func>

0800f244 <__ratio>:
 800f244:	defff904 	addi	sp,sp,-28
 800f248:	dc400315 	stw	r17,12(sp)
 800f24c:	2823883a 	mov	r17,r5
 800f250:	d80b883a 	mov	r5,sp
 800f254:	dfc00615 	stw	ra,24(sp)
 800f258:	dcc00515 	stw	r19,20(sp)
 800f25c:	dc800415 	stw	r18,16(sp)
 800f260:	2027883a 	mov	r19,r4
 800f264:	dc000215 	stw	r16,8(sp)
 800f268:	800efdc0 	call	800efdc <__b2d>
 800f26c:	d9400104 	addi	r5,sp,4
 800f270:	8809883a 	mov	r4,r17
 800f274:	1025883a 	mov	r18,r2
 800f278:	1821883a 	mov	r16,r3
 800f27c:	800efdc0 	call	800efdc <__b2d>
 800f280:	89400417 	ldw	r5,16(r17)
 800f284:	99000417 	ldw	r4,16(r19)
 800f288:	d9800117 	ldw	r6,4(sp)
 800f28c:	180f883a 	mov	r7,r3
 800f290:	2149c83a 	sub	r4,r4,r5
 800f294:	d9400017 	ldw	r5,0(sp)
 800f298:	2008917a 	slli	r4,r4,5
 800f29c:	298bc83a 	sub	r5,r5,r6
 800f2a0:	2149883a 	add	r4,r4,r5
 800f2a4:	100d883a 	mov	r6,r2
 800f2a8:	01000c0e 	bge	zero,r4,800f2dc <__ratio+0x98>
 800f2ac:	2008953a 	slli	r4,r4,20
 800f2b0:	2421883a 	add	r16,r4,r16
 800f2b4:	9009883a 	mov	r4,r18
 800f2b8:	800b883a 	mov	r5,r16
 800f2bc:	80067080 	call	8006708 <__divdf3>
 800f2c0:	dfc00617 	ldw	ra,24(sp)
 800f2c4:	dcc00517 	ldw	r19,20(sp)
 800f2c8:	dc800417 	ldw	r18,16(sp)
 800f2cc:	dc400317 	ldw	r17,12(sp)
 800f2d0:	dc000217 	ldw	r16,8(sp)
 800f2d4:	dec00704 	addi	sp,sp,28
 800f2d8:	f800283a 	ret
 800f2dc:	2008953a 	slli	r4,r4,20
 800f2e0:	190fc83a 	sub	r7,r3,r4
 800f2e4:	003ff306 	br	800f2b4 <__ratio+0x70>

0800f2e8 <_mprec_log10>:
 800f2e8:	defffe04 	addi	sp,sp,-8
 800f2ec:	dc000015 	stw	r16,0(sp)
 800f2f0:	dfc00115 	stw	ra,4(sp)
 800f2f4:	20800608 	cmpgei	r2,r4,24
 800f2f8:	2021883a 	mov	r16,r4
 800f2fc:	10000f26 	beq	r2,zero,800f33c <_mprec_log10+0x54>
 800f300:	0009883a 	mov	r4,zero
 800f304:	014ffc34 	movhi	r5,16368
 800f308:	000d883a 	mov	r6,zero
 800f30c:	01d00934 	movhi	r7,16420
 800f310:	800729c0 	call	800729c <__muldf3>
 800f314:	843fffc4 	addi	r16,r16,-1
 800f318:	1009883a 	mov	r4,r2
 800f31c:	180b883a 	mov	r5,r3
 800f320:	803ff91e 	bne	r16,zero,800f308 <_mprec_log10+0x20>
 800f324:	2005883a 	mov	r2,r4
 800f328:	2807883a 	mov	r3,r5
 800f32c:	dfc00117 	ldw	ra,4(sp)
 800f330:	dc000017 	ldw	r16,0(sp)
 800f334:	dec00204 	addi	sp,sp,8
 800f338:	f800283a 	ret
 800f33c:	202090fa 	slli	r16,r4,3
 800f340:	00820074 	movhi	r2,2049
 800f344:	109fad04 	addi	r2,r2,32436
 800f348:	1421883a 	add	r16,r2,r16
 800f34c:	81000017 	ldw	r4,0(r16)
 800f350:	81400117 	ldw	r5,4(r16)
 800f354:	003ff306 	br	800f324 <_mprec_log10+0x3c>

0800f358 <__copybits>:
 800f358:	297fffc4 	addi	r5,r5,-1
 800f35c:	280fd17a 	srai	r7,r5,5
 800f360:	31400417 	ldw	r5,16(r6)
 800f364:	30800504 	addi	r2,r6,20
 800f368:	39c00044 	addi	r7,r7,1
 800f36c:	280a90ba 	slli	r5,r5,2
 800f370:	380e90ba 	slli	r7,r7,2
 800f374:	114b883a 	add	r5,r2,r5
 800f378:	21cf883a 	add	r7,r4,r7
 800f37c:	11400c2e 	bgeu	r2,r5,800f3b0 <__copybits+0x58>
 800f380:	2007883a 	mov	r3,r4
 800f384:	12000017 	ldw	r8,0(r2)
 800f388:	10800104 	addi	r2,r2,4
 800f38c:	18c00104 	addi	r3,r3,4
 800f390:	1a3fff15 	stw	r8,-4(r3)
 800f394:	117ffb36 	bltu	r2,r5,800f384 <__copybits+0x2c>
 800f398:	2985c83a 	sub	r2,r5,r6
 800f39c:	10bffac4 	addi	r2,r2,-21
 800f3a0:	1004d0ba 	srli	r2,r2,2
 800f3a4:	10800044 	addi	r2,r2,1
 800f3a8:	100490ba 	slli	r2,r2,2
 800f3ac:	2089883a 	add	r4,r4,r2
 800f3b0:	21c0032e 	bgeu	r4,r7,800f3c0 <__copybits+0x68>
 800f3b4:	21000104 	addi	r4,r4,4
 800f3b8:	203fff15 	stw	zero,-4(r4)
 800f3bc:	21fffd36 	bltu	r4,r7,800f3b4 <__copybits+0x5c>
 800f3c0:	f800283a 	ret

0800f3c4 <__any_on>:
 800f3c4:	20c00417 	ldw	r3,16(r4)
 800f3c8:	280dd17a 	srai	r6,r5,5
 800f3cc:	21000504 	addi	r4,r4,20
 800f3d0:	1980080e 	bge	r3,r6,800f3f4 <__any_on+0x30>
 800f3d4:	180490ba 	slli	r2,r3,2
 800f3d8:	2085883a 	add	r2,r4,r2
 800f3dc:	20800f2e 	bgeu	r4,r2,800f41c <__any_on+0x58>
 800f3e0:	10ffff17 	ldw	r3,-4(r2)
 800f3e4:	10bfff04 	addi	r2,r2,-4
 800f3e8:	183ffc26 	beq	r3,zero,800f3dc <__any_on+0x18>
 800f3ec:	00800044 	movi	r2,1
 800f3f0:	f800283a 	ret
 800f3f4:	300490ba 	slli	r2,r6,2
 800f3f8:	2085883a 	add	r2,r4,r2
 800f3fc:	30fff70e 	bge	r6,r3,800f3dc <__any_on+0x18>
 800f400:	294007cc 	andi	r5,r5,31
 800f404:	283ff526 	beq	r5,zero,800f3dc <__any_on+0x18>
 800f408:	11800017 	ldw	r6,0(r2)
 800f40c:	3146d83a 	srl	r3,r6,r5
 800f410:	194a983a 	sll	r5,r3,r5
 800f414:	317ff51e 	bne	r6,r5,800f3ec <__any_on+0x28>
 800f418:	003ff006 	br	800f3dc <__any_on+0x18>
 800f41c:	0005883a 	mov	r2,zero
 800f420:	f800283a 	ret

0800f424 <_putc_r>:
 800f424:	defffc04 	addi	sp,sp,-16
 800f428:	dc400215 	stw	r17,8(sp)
 800f42c:	dfc00315 	stw	ra,12(sp)
 800f430:	2023883a 	mov	r17,r4
 800f434:	20000226 	beq	r4,zero,800f440 <_putc_r+0x1c>
 800f438:	20800e17 	ldw	r2,56(r4)
 800f43c:	10000e26 	beq	r2,zero,800f478 <_putc_r+0x54>
 800f440:	30800217 	ldw	r2,8(r6)
 800f444:	10bfffc4 	addi	r2,r2,-1
 800f448:	30800215 	stw	r2,8(r6)
 800f44c:	10001316 	blt	r2,zero,800f49c <_putc_r+0x78>
 800f450:	30800017 	ldw	r2,0(r6)
 800f454:	11400005 	stb	r5,0(r2)
 800f458:	30800017 	ldw	r2,0(r6)
 800f45c:	10c00044 	addi	r3,r2,1
 800f460:	30c00015 	stw	r3,0(r6)
 800f464:	10800003 	ldbu	r2,0(r2)
 800f468:	dfc00317 	ldw	ra,12(sp)
 800f46c:	dc400217 	ldw	r17,8(sp)
 800f470:	dec00404 	addi	sp,sp,16
 800f474:	f800283a 	ret
 800f478:	d9800115 	stw	r6,4(sp)
 800f47c:	d9400015 	stw	r5,0(sp)
 800f480:	800cab80 	call	800cab8 <__sinit>
 800f484:	d9800117 	ldw	r6,4(sp)
 800f488:	d9400017 	ldw	r5,0(sp)
 800f48c:	30800217 	ldw	r2,8(r6)
 800f490:	10bfffc4 	addi	r2,r2,-1
 800f494:	30800215 	stw	r2,8(r6)
 800f498:	103fed0e 	bge	r2,zero,800f450 <_putc_r+0x2c>
 800f49c:	30c00617 	ldw	r3,24(r6)
 800f4a0:	10c00e16 	blt	r2,r3,800f4dc <_putc_r+0xb8>
 800f4a4:	30800017 	ldw	r2,0(r6)
 800f4a8:	11400005 	stb	r5,0(r2)
 800f4ac:	30c00017 	ldw	r3,0(r6)
 800f4b0:	18800003 	ldbu	r2,0(r3)
 800f4b4:	108002a0 	cmpeqi	r2,r2,10
 800f4b8:	1000071e 	bne	r2,zero,800f4d8 <_putc_r+0xb4>
 800f4bc:	18800044 	addi	r2,r3,1
 800f4c0:	30800015 	stw	r2,0(r6)
 800f4c4:	18800003 	ldbu	r2,0(r3)
 800f4c8:	dfc00317 	ldw	ra,12(sp)
 800f4cc:	dc400217 	ldw	r17,8(sp)
 800f4d0:	dec00404 	addi	sp,sp,16
 800f4d4:	f800283a 	ret
 800f4d8:	01400284 	movi	r5,10
 800f4dc:	8809883a 	mov	r4,r17
 800f4e0:	dfc00317 	ldw	ra,12(sp)
 800f4e4:	dc400217 	ldw	r17,8(sp)
 800f4e8:	dec00404 	addi	sp,sp,16
 800f4ec:	80111c81 	jmpi	80111c8 <__swbuf_r>

0800f4f0 <putc>:
 800f4f0:	defffc04 	addi	sp,sp,-16
 800f4f4:	008200b4 	movhi	r2,2050
 800f4f8:	dc800215 	stw	r18,8(sp)
 800f4fc:	14a7bf17 	ldw	r18,-24836(r2)
 800f500:	dc400115 	stw	r17,4(sp)
 800f504:	dfc00315 	stw	ra,12(sp)
 800f508:	2023883a 	mov	r17,r4
 800f50c:	90000226 	beq	r18,zero,800f518 <putc+0x28>
 800f510:	90800e17 	ldw	r2,56(r18)
 800f514:	10000f26 	beq	r2,zero,800f554 <putc+0x64>
 800f518:	28800217 	ldw	r2,8(r5)
 800f51c:	10bfffc4 	addi	r2,r2,-1
 800f520:	28800215 	stw	r2,8(r5)
 800f524:	10001316 	blt	r2,zero,800f574 <putc+0x84>
 800f528:	28800017 	ldw	r2,0(r5)
 800f52c:	14400005 	stb	r17,0(r2)
 800f530:	28800017 	ldw	r2,0(r5)
 800f534:	10c00044 	addi	r3,r2,1
 800f538:	28c00015 	stw	r3,0(r5)
 800f53c:	10800003 	ldbu	r2,0(r2)
 800f540:	dfc00317 	ldw	ra,12(sp)
 800f544:	dc800217 	ldw	r18,8(sp)
 800f548:	dc400117 	ldw	r17,4(sp)
 800f54c:	dec00404 	addi	sp,sp,16
 800f550:	f800283a 	ret
 800f554:	9009883a 	mov	r4,r18
 800f558:	d9400015 	stw	r5,0(sp)
 800f55c:	800cab80 	call	800cab8 <__sinit>
 800f560:	d9400017 	ldw	r5,0(sp)
 800f564:	28800217 	ldw	r2,8(r5)
 800f568:	10bfffc4 	addi	r2,r2,-1
 800f56c:	28800215 	stw	r2,8(r5)
 800f570:	103fed0e 	bge	r2,zero,800f528 <putc+0x38>
 800f574:	28c00617 	ldw	r3,24(r5)
 800f578:	10c00a16 	blt	r2,r3,800f5a4 <putc+0xb4>
 800f57c:	28800017 	ldw	r2,0(r5)
 800f580:	14400005 	stb	r17,0(r2)
 800f584:	28c00017 	ldw	r3,0(r5)
 800f588:	18800003 	ldbu	r2,0(r3)
 800f58c:	108002a0 	cmpeqi	r2,r2,10
 800f590:	10000c1e 	bne	r2,zero,800f5c4 <putc+0xd4>
 800f594:	18800044 	addi	r2,r3,1
 800f598:	28800015 	stw	r2,0(r5)
 800f59c:	18800003 	ldbu	r2,0(r3)
 800f5a0:	003fe706 	br	800f540 <putc+0x50>
 800f5a4:	280d883a 	mov	r6,r5
 800f5a8:	880b883a 	mov	r5,r17
 800f5ac:	9009883a 	mov	r4,r18
 800f5b0:	dfc00317 	ldw	ra,12(sp)
 800f5b4:	dc800217 	ldw	r18,8(sp)
 800f5b8:	dc400117 	ldw	r17,4(sp)
 800f5bc:	dec00404 	addi	sp,sp,16
 800f5c0:	80111c81 	jmpi	80111c8 <__swbuf_r>
 800f5c4:	280d883a 	mov	r6,r5
 800f5c8:	01400284 	movi	r5,10
 800f5cc:	003ff706 	br	800f5ac <putc+0xbc>

0800f5d0 <_realloc_r>:
 800f5d0:	defff504 	addi	sp,sp,-44
 800f5d4:	dc800315 	stw	r18,12(sp)
 800f5d8:	dfc00a15 	stw	ra,40(sp)
 800f5dc:	df000915 	stw	fp,36(sp)
 800f5e0:	ddc00815 	stw	r23,32(sp)
 800f5e4:	dd800715 	stw	r22,28(sp)
 800f5e8:	dd400615 	stw	r21,24(sp)
 800f5ec:	dd000515 	stw	r20,20(sp)
 800f5f0:	dcc00415 	stw	r19,16(sp)
 800f5f4:	dc400215 	stw	r17,8(sp)
 800f5f8:	dc000115 	stw	r16,4(sp)
 800f5fc:	3025883a 	mov	r18,r6
 800f600:	28008b26 	beq	r5,zero,800f830 <_realloc_r+0x260>
 800f604:	2821883a 	mov	r16,r5
 800f608:	2027883a 	mov	r19,r4
 800f60c:	944002c4 	addi	r17,r18,11
 800f610:	80133500 	call	8013350 <__malloc_lock>
 800f614:	888005f0 	cmpltui	r2,r17,23
 800f618:	1000521e 	bne	r2,zero,800f764 <_realloc_r+0x194>
 800f61c:	017ffe04 	movi	r5,-8
 800f620:	8962703a 	and	r17,r17,r5
 800f624:	8807883a 	mov	r3,r17
 800f628:	88005116 	blt	r17,zero,800f770 <_realloc_r+0x1a0>
 800f62c:	8c805036 	bltu	r17,r18,800f770 <_realloc_r+0x1a0>
 800f630:	80bfff17 	ldw	r2,-4(r16)
 800f634:	017fff04 	movi	r5,-4
 800f638:	857ffe04 	addi	r21,r16,-8
 800f63c:	1168703a 	and	r20,r2,r5
 800f640:	ad2d883a 	add	r22,r21,r20
 800f644:	a0c0390e 	bge	r20,r3,800f72c <_realloc_r+0x15c>
 800f648:	070200b4 	movhi	fp,2050
 800f64c:	e721c704 	addi	fp,fp,-30948
 800f650:	e2000217 	ldw	r8,8(fp)
 800f654:	b1000117 	ldw	r4,4(r22)
 800f658:	45808e26 	beq	r8,r22,800f894 <_realloc_r+0x2c4>
 800f65c:	01bfff84 	movi	r6,-2
 800f660:	218c703a 	and	r6,r4,r6
 800f664:	b18d883a 	add	r6,r22,r6
 800f668:	31800117 	ldw	r6,4(r6)
 800f66c:	3180004c 	andi	r6,r6,1
 800f670:	30004f1e 	bne	r6,zero,800f7b0 <_realloc_r+0x1e0>
 800f674:	2148703a 	and	r4,r4,r5
 800f678:	a10b883a 	add	r5,r20,r4
 800f67c:	28c0bf0e 	bge	r5,r3,800f97c <_realloc_r+0x3ac>
 800f680:	1080004c 	andi	r2,r2,1
 800f684:	10004c1e 	bne	r2,zero,800f7b8 <_realloc_r+0x1e8>
 800f688:	81fffe17 	ldw	r7,-8(r16)
 800f68c:	00bfff04 	movi	r2,-4
 800f690:	a9cfc83a 	sub	r7,r21,r7
 800f694:	39400117 	ldw	r5,4(r7)
 800f698:	288a703a 	and	r5,r5,r2
 800f69c:	b0000426 	beq	r22,zero,800f6b0 <_realloc_r+0xe0>
 800f6a0:	a16f883a 	add	r23,r20,r5
 800f6a4:	b92f883a 	add	r23,r23,r4
 800f6a8:	4580bf26 	beq	r8,r22,800f9a8 <_realloc_r+0x3d8>
 800f6ac:	b8c0930e 	bge	r23,r3,800f8fc <_realloc_r+0x32c>
 800f6b0:	38004126 	beq	r7,zero,800f7b8 <_realloc_r+0x1e8>
 800f6b4:	a16f883a 	add	r23,r20,r5
 800f6b8:	b8c03f16 	blt	r23,r3,800f7b8 <_realloc_r+0x1e8>
 800f6bc:	38800317 	ldw	r2,12(r7)
 800f6c0:	38c00217 	ldw	r3,8(r7)
 800f6c4:	a1bfff04 	addi	r6,r20,-4
 800f6c8:	31400968 	cmpgeui	r5,r6,37
 800f6cc:	18800315 	stw	r2,12(r3)
 800f6d0:	10c00215 	stw	r3,8(r2)
 800f6d4:	39000204 	addi	r4,r7,8
 800f6d8:	3ded883a 	add	r22,r7,r23
 800f6dc:	2800941e 	bne	r5,zero,800f930 <_realloc_r+0x360>
 800f6e0:	30800530 	cmpltui	r2,r6,20
 800f6e4:	80c00017 	ldw	r3,0(r16)
 800f6e8:	1000df1e 	bne	r2,zero,800fa68 <_realloc_r+0x498>
 800f6ec:	38c00215 	stw	r3,8(r7)
 800f6f0:	80c00117 	ldw	r3,4(r16)
 800f6f4:	30800728 	cmpgeui	r2,r6,28
 800f6f8:	38c00315 	stw	r3,12(r7)
 800f6fc:	1000dc1e 	bne	r2,zero,800fa70 <_realloc_r+0x4a0>
 800f700:	80c00217 	ldw	r3,8(r16)
 800f704:	38800404 	addi	r2,r7,16
 800f708:	84000204 	addi	r16,r16,8
 800f70c:	10c00015 	stw	r3,0(r2)
 800f710:	80c00117 	ldw	r3,4(r16)
 800f714:	b829883a 	mov	r20,r23
 800f718:	382b883a 	mov	r21,r7
 800f71c:	10c00115 	stw	r3,4(r2)
 800f720:	80c00217 	ldw	r3,8(r16)
 800f724:	2021883a 	mov	r16,r4
 800f728:	10c00215 	stw	r3,8(r2)
 800f72c:	a9800117 	ldw	r6,4(r21)
 800f730:	a445c83a 	sub	r2,r20,r17
 800f734:	10c00430 	cmpltui	r3,r2,16
 800f738:	3180004c 	andi	r6,r6,1
 800f73c:	18004926 	beq	r3,zero,800f864 <_realloc_r+0x294>
 800f740:	a18cb03a 	or	r6,r20,r6
 800f744:	a9800115 	stw	r6,4(r21)
 800f748:	b0800117 	ldw	r2,4(r22)
 800f74c:	10800054 	ori	r2,r2,1
 800f750:	b0800115 	stw	r2,4(r22)
 800f754:	9809883a 	mov	r4,r19
 800f758:	80133740 	call	8013374 <__malloc_unlock>
 800f75c:	8025883a 	mov	r18,r16
 800f760:	00000606 	br	800f77c <_realloc_r+0x1ac>
 800f764:	04400404 	movi	r17,16
 800f768:	00c00404 	movi	r3,16
 800f76c:	8cbfb02e 	bgeu	r17,r18,800f630 <_realloc_r+0x60>
 800f770:	00800304 	movi	r2,12
 800f774:	98800015 	stw	r2,0(r19)
 800f778:	0025883a 	mov	r18,zero
 800f77c:	9005883a 	mov	r2,r18
 800f780:	dfc00a17 	ldw	ra,40(sp)
 800f784:	df000917 	ldw	fp,36(sp)
 800f788:	ddc00817 	ldw	r23,32(sp)
 800f78c:	dd800717 	ldw	r22,28(sp)
 800f790:	dd400617 	ldw	r21,24(sp)
 800f794:	dd000517 	ldw	r20,20(sp)
 800f798:	dcc00417 	ldw	r19,16(sp)
 800f79c:	dc800317 	ldw	r18,12(sp)
 800f7a0:	dc400217 	ldw	r17,8(sp)
 800f7a4:	dc000117 	ldw	r16,4(sp)
 800f7a8:	dec00b04 	addi	sp,sp,44
 800f7ac:	f800283a 	ret
 800f7b0:	1080004c 	andi	r2,r2,1
 800f7b4:	10006c26 	beq	r2,zero,800f968 <_realloc_r+0x398>
 800f7b8:	900b883a 	mov	r5,r18
 800f7bc:	9809883a 	mov	r4,r19
 800f7c0:	800d71c0 	call	800d71c <_malloc_r>
 800f7c4:	1025883a 	mov	r18,r2
 800f7c8:	10001626 	beq	r2,zero,800f824 <_realloc_r+0x254>
 800f7cc:	80bfff17 	ldw	r2,-4(r16)
 800f7d0:	013fff84 	movi	r4,-2
 800f7d4:	90fffe04 	addi	r3,r18,-8
 800f7d8:	1104703a 	and	r2,r2,r4
 800f7dc:	a885883a 	add	r2,r21,r2
 800f7e0:	10c05b26 	beq	r2,r3,800f950 <_realloc_r+0x380>
 800f7e4:	a1bfff04 	addi	r6,r20,-4
 800f7e8:	30800968 	cmpgeui	r2,r6,37
 800f7ec:	10006a1e 	bne	r2,zero,800f998 <_realloc_r+0x3c8>
 800f7f0:	30800530 	cmpltui	r2,r6,20
 800f7f4:	81000017 	ldw	r4,0(r16)
 800f7f8:	10003726 	beq	r2,zero,800f8d8 <_realloc_r+0x308>
 800f7fc:	9005883a 	mov	r2,r18
 800f800:	8007883a 	mov	r3,r16
 800f804:	11000015 	stw	r4,0(r2)
 800f808:	19000117 	ldw	r4,4(r3)
 800f80c:	11000115 	stw	r4,4(r2)
 800f810:	18c00217 	ldw	r3,8(r3)
 800f814:	10c00215 	stw	r3,8(r2)
 800f818:	800b883a 	mov	r5,r16
 800f81c:	9809883a 	mov	r4,r19
 800f820:	800cc1c0 	call	800cc1c <_free_r>
 800f824:	9809883a 	mov	r4,r19
 800f828:	80133740 	call	8013374 <__malloc_unlock>
 800f82c:	003fd306 	br	800f77c <_realloc_r+0x1ac>
 800f830:	300b883a 	mov	r5,r6
 800f834:	dfc00a17 	ldw	ra,40(sp)
 800f838:	df000917 	ldw	fp,36(sp)
 800f83c:	ddc00817 	ldw	r23,32(sp)
 800f840:	dd800717 	ldw	r22,28(sp)
 800f844:	dd400617 	ldw	r21,24(sp)
 800f848:	dd000517 	ldw	r20,20(sp)
 800f84c:	dcc00417 	ldw	r19,16(sp)
 800f850:	dc800317 	ldw	r18,12(sp)
 800f854:	dc400217 	ldw	r17,8(sp)
 800f858:	dc000117 	ldw	r16,4(sp)
 800f85c:	dec00b04 	addi	sp,sp,44
 800f860:	800d71c1 	jmpi	800d71c <_malloc_r>
 800f864:	344cb03a 	or	r6,r6,r17
 800f868:	a9800115 	stw	r6,4(r21)
 800f86c:	ac4b883a 	add	r5,r21,r17
 800f870:	10800054 	ori	r2,r2,1
 800f874:	28800115 	stw	r2,4(r5)
 800f878:	b0800117 	ldw	r2,4(r22)
 800f87c:	29400204 	addi	r5,r5,8
 800f880:	9809883a 	mov	r4,r19
 800f884:	10800054 	ori	r2,r2,1
 800f888:	b0800115 	stw	r2,4(r22)
 800f88c:	800cc1c0 	call	800cc1c <_free_r>
 800f890:	003fb006 	br	800f754 <_realloc_r+0x184>
 800f894:	2148703a 	and	r4,r4,r5
 800f898:	a10b883a 	add	r5,r20,r4
 800f89c:	89800404 	addi	r6,r17,16
 800f8a0:	29bf7716 	blt	r5,r6,800f680 <_realloc_r+0xb0>
 800f8a4:	ac6b883a 	add	r21,r21,r17
 800f8a8:	2c45c83a 	sub	r2,r5,r17
 800f8ac:	e5400215 	stw	r21,8(fp)
 800f8b0:	10800054 	ori	r2,r2,1
 800f8b4:	a8800115 	stw	r2,4(r21)
 800f8b8:	80bfff17 	ldw	r2,-4(r16)
 800f8bc:	9809883a 	mov	r4,r19
 800f8c0:	8025883a 	mov	r18,r16
 800f8c4:	1080004c 	andi	r2,r2,1
 800f8c8:	1462b03a 	or	r17,r2,r17
 800f8cc:	847fff15 	stw	r17,-4(r16)
 800f8d0:	80133740 	call	8013374 <__malloc_unlock>
 800f8d4:	003fa906 	br	800f77c <_realloc_r+0x1ac>
 800f8d8:	91000015 	stw	r4,0(r18)
 800f8dc:	80c00117 	ldw	r3,4(r16)
 800f8e0:	30800728 	cmpgeui	r2,r6,28
 800f8e4:	90c00115 	stw	r3,4(r18)
 800f8e8:	1000551e 	bne	r2,zero,800fa40 <_realloc_r+0x470>
 800f8ec:	81000217 	ldw	r4,8(r16)
 800f8f0:	80c00204 	addi	r3,r16,8
 800f8f4:	90800204 	addi	r2,r18,8
 800f8f8:	003fc206 	br	800f804 <_realloc_r+0x234>
 800f8fc:	b0800317 	ldw	r2,12(r22)
 800f900:	b0c00217 	ldw	r3,8(r22)
 800f904:	a1bfff04 	addi	r6,r20,-4
 800f908:	31400968 	cmpgeui	r5,r6,37
 800f90c:	18800315 	stw	r2,12(r3)
 800f910:	10c00215 	stw	r3,8(r2)
 800f914:	38c00217 	ldw	r3,8(r7)
 800f918:	38800317 	ldw	r2,12(r7)
 800f91c:	39000204 	addi	r4,r7,8
 800f920:	3ded883a 	add	r22,r7,r23
 800f924:	18800315 	stw	r2,12(r3)
 800f928:	10c00215 	stw	r3,8(r2)
 800f92c:	283f6c26 	beq	r5,zero,800f6e0 <_realloc_r+0x110>
 800f930:	800b883a 	mov	r5,r16
 800f934:	d9c00015 	stw	r7,0(sp)
 800f938:	800e0d00 	call	800e0d0 <memmove>
 800f93c:	d9c00017 	ldw	r7,0(sp)
 800f940:	1021883a 	mov	r16,r2
 800f944:	b829883a 	mov	r20,r23
 800f948:	382b883a 	mov	r21,r7
 800f94c:	003f7706 	br	800f72c <_realloc_r+0x15c>
 800f950:	90bfff17 	ldw	r2,-4(r18)
 800f954:	00ffff04 	movi	r3,-4
 800f958:	10c4703a 	and	r2,r2,r3
 800f95c:	a0a9883a 	add	r20,r20,r2
 800f960:	ad2d883a 	add	r22,r21,r20
 800f964:	003f7106 	br	800f72c <_realloc_r+0x15c>
 800f968:	81fffe17 	ldw	r7,-8(r16)
 800f96c:	a9cfc83a 	sub	r7,r21,r7
 800f970:	39000117 	ldw	r4,4(r7)
 800f974:	214a703a 	and	r5,r4,r5
 800f978:	003f4d06 	br	800f6b0 <_realloc_r+0xe0>
 800f97c:	b0800317 	ldw	r2,12(r22)
 800f980:	b0c00217 	ldw	r3,8(r22)
 800f984:	2829883a 	mov	r20,r5
 800f988:	a96d883a 	add	r22,r21,r5
 800f98c:	18800315 	stw	r2,12(r3)
 800f990:	10c00215 	stw	r3,8(r2)
 800f994:	003f6506 	br	800f72c <_realloc_r+0x15c>
 800f998:	800b883a 	mov	r5,r16
 800f99c:	9009883a 	mov	r4,r18
 800f9a0:	800e0d00 	call	800e0d0 <memmove>
 800f9a4:	003f9c06 	br	800f818 <_realloc_r+0x248>
 800f9a8:	88800404 	addi	r2,r17,16
 800f9ac:	b8bf4016 	blt	r23,r2,800f6b0 <_realloc_r+0xe0>
 800f9b0:	38800317 	ldw	r2,12(r7)
 800f9b4:	38c00217 	ldw	r3,8(r7)
 800f9b8:	a1bfff04 	addi	r6,r20,-4
 800f9bc:	31000968 	cmpgeui	r4,r6,37
 800f9c0:	18800315 	stw	r2,12(r3)
 800f9c4:	10c00215 	stw	r3,8(r2)
 800f9c8:	3c800204 	addi	r18,r7,8
 800f9cc:	20003b1e 	bne	r4,zero,800fabc <_realloc_r+0x4ec>
 800f9d0:	30800530 	cmpltui	r2,r6,20
 800f9d4:	80c00017 	ldw	r3,0(r16)
 800f9d8:	1000361e 	bne	r2,zero,800fab4 <_realloc_r+0x4e4>
 800f9dc:	38c00215 	stw	r3,8(r7)
 800f9e0:	80c00117 	ldw	r3,4(r16)
 800f9e4:	30800728 	cmpgeui	r2,r6,28
 800f9e8:	38c00315 	stw	r3,12(r7)
 800f9ec:	1000401e 	bne	r2,zero,800faf0 <_realloc_r+0x520>
 800f9f0:	80c00217 	ldw	r3,8(r16)
 800f9f4:	38800404 	addi	r2,r7,16
 800f9f8:	84000204 	addi	r16,r16,8
 800f9fc:	10c00015 	stw	r3,0(r2)
 800fa00:	80c00117 	ldw	r3,4(r16)
 800fa04:	10c00115 	stw	r3,4(r2)
 800fa08:	80c00217 	ldw	r3,8(r16)
 800fa0c:	10c00215 	stw	r3,8(r2)
 800fa10:	3c47883a 	add	r3,r7,r17
 800fa14:	bc45c83a 	sub	r2,r23,r17
 800fa18:	e0c00215 	stw	r3,8(fp)
 800fa1c:	10800054 	ori	r2,r2,1
 800fa20:	18800115 	stw	r2,4(r3)
 800fa24:	38800117 	ldw	r2,4(r7)
 800fa28:	9809883a 	mov	r4,r19
 800fa2c:	1080004c 	andi	r2,r2,1
 800fa30:	1462b03a 	or	r17,r2,r17
 800fa34:	3c400115 	stw	r17,4(r7)
 800fa38:	80133740 	call	8013374 <__malloc_unlock>
 800fa3c:	003f4f06 	br	800f77c <_realloc_r+0x1ac>
 800fa40:	80800217 	ldw	r2,8(r16)
 800fa44:	31800920 	cmpeqi	r6,r6,36
 800fa48:	90800215 	stw	r2,8(r18)
 800fa4c:	80800317 	ldw	r2,12(r16)
 800fa50:	90800315 	stw	r2,12(r18)
 800fa54:	81000417 	ldw	r4,16(r16)
 800fa58:	30000f1e 	bne	r6,zero,800fa98 <_realloc_r+0x4c8>
 800fa5c:	80c00404 	addi	r3,r16,16
 800fa60:	90800404 	addi	r2,r18,16
 800fa64:	003f6706 	br	800f804 <_realloc_r+0x234>
 800fa68:	2005883a 	mov	r2,r4
 800fa6c:	003f2706 	br	800f70c <_realloc_r+0x13c>
 800fa70:	80800217 	ldw	r2,8(r16)
 800fa74:	31800920 	cmpeqi	r6,r6,36
 800fa78:	38800415 	stw	r2,16(r7)
 800fa7c:	80800317 	ldw	r2,12(r16)
 800fa80:	38800515 	stw	r2,20(r7)
 800fa84:	80c00417 	ldw	r3,16(r16)
 800fa88:	3000121e 	bne	r6,zero,800fad4 <_realloc_r+0x504>
 800fa8c:	38800604 	addi	r2,r7,24
 800fa90:	84000404 	addi	r16,r16,16
 800fa94:	003f1d06 	br	800f70c <_realloc_r+0x13c>
 800fa98:	91000415 	stw	r4,16(r18)
 800fa9c:	81000517 	ldw	r4,20(r16)
 800faa0:	80c00604 	addi	r3,r16,24
 800faa4:	90800604 	addi	r2,r18,24
 800faa8:	91000515 	stw	r4,20(r18)
 800faac:	81000617 	ldw	r4,24(r16)
 800fab0:	003f5406 	br	800f804 <_realloc_r+0x234>
 800fab4:	9005883a 	mov	r2,r18
 800fab8:	003fd006 	br	800f9fc <_realloc_r+0x42c>
 800fabc:	800b883a 	mov	r5,r16
 800fac0:	9009883a 	mov	r4,r18
 800fac4:	d9c00015 	stw	r7,0(sp)
 800fac8:	800e0d00 	call	800e0d0 <memmove>
 800facc:	d9c00017 	ldw	r7,0(sp)
 800fad0:	003fcf06 	br	800fa10 <_realloc_r+0x440>
 800fad4:	84000604 	addi	r16,r16,24
 800fad8:	38c00615 	stw	r3,24(r7)
 800fadc:	80ffff17 	ldw	r3,-4(r16)
 800fae0:	38800804 	addi	r2,r7,32
 800fae4:	38c00715 	stw	r3,28(r7)
 800fae8:	80c00017 	ldw	r3,0(r16)
 800faec:	003f0706 	br	800f70c <_realloc_r+0x13c>
 800faf0:	80800217 	ldw	r2,8(r16)
 800faf4:	31800920 	cmpeqi	r6,r6,36
 800faf8:	38800415 	stw	r2,16(r7)
 800fafc:	80800317 	ldw	r2,12(r16)
 800fb00:	38800515 	stw	r2,20(r7)
 800fb04:	80c00417 	ldw	r3,16(r16)
 800fb08:	3000031e 	bne	r6,zero,800fb18 <_realloc_r+0x548>
 800fb0c:	38800604 	addi	r2,r7,24
 800fb10:	84000404 	addi	r16,r16,16
 800fb14:	003fb906 	br	800f9fc <_realloc_r+0x42c>
 800fb18:	84000604 	addi	r16,r16,24
 800fb1c:	38c00615 	stw	r3,24(r7)
 800fb20:	80ffff17 	ldw	r3,-4(r16)
 800fb24:	38800804 	addi	r2,r7,32
 800fb28:	38c00715 	stw	r3,28(r7)
 800fb2c:	80c00017 	ldw	r3,0(r16)
 800fb30:	003fb206 	br	800f9fc <_realloc_r+0x42c>

0800fb34 <_sbrk_r>:
 800fb34:	defffe04 	addi	sp,sp,-8
 800fb38:	dc000015 	stw	r16,0(sp)
 800fb3c:	008200b4 	movhi	r2,2050
 800fb40:	2021883a 	mov	r16,r4
 800fb44:	2809883a 	mov	r4,r5
 800fb48:	dfc00115 	stw	ra,4(sp)
 800fb4c:	102ef315 	stw	zero,-17460(r2)
 800fb50:	801354c0 	call	801354c <sbrk>
 800fb54:	10ffffd8 	cmpnei	r3,r2,-1
 800fb58:	18000426 	beq	r3,zero,800fb6c <_sbrk_r+0x38>
 800fb5c:	dfc00117 	ldw	ra,4(sp)
 800fb60:	dc000017 	ldw	r16,0(sp)
 800fb64:	dec00204 	addi	sp,sp,8
 800fb68:	f800283a 	ret
 800fb6c:	00c200b4 	movhi	r3,2050
 800fb70:	18eef317 	ldw	r3,-17460(r3)
 800fb74:	183ff926 	beq	r3,zero,800fb5c <_sbrk_r+0x28>
 800fb78:	80c00015 	stw	r3,0(r16)
 800fb7c:	dfc00117 	ldw	ra,4(sp)
 800fb80:	dc000017 	ldw	r16,0(sp)
 800fb84:	dec00204 	addi	sp,sp,8
 800fb88:	f800283a 	ret

0800fb8c <__sread>:
 800fb8c:	defffe04 	addi	sp,sp,-8
 800fb90:	dc000015 	stw	r16,0(sp)
 800fb94:	2821883a 	mov	r16,r5
 800fb98:	2940038f 	ldh	r5,14(r5)
 800fb9c:	dfc00115 	stw	ra,4(sp)
 800fba0:	8011a840 	call	8011a84 <_read_r>
 800fba4:	10000716 	blt	r2,zero,800fbc4 <__sread+0x38>
 800fba8:	80c01417 	ldw	r3,80(r16)
 800fbac:	1887883a 	add	r3,r3,r2
 800fbb0:	80c01415 	stw	r3,80(r16)
 800fbb4:	dfc00117 	ldw	ra,4(sp)
 800fbb8:	dc000017 	ldw	r16,0(sp)
 800fbbc:	dec00204 	addi	sp,sp,8
 800fbc0:	f800283a 	ret
 800fbc4:	80c0030b 	ldhu	r3,12(r16)
 800fbc8:	18fbffcc 	andi	r3,r3,61439
 800fbcc:	80c0030d 	sth	r3,12(r16)
 800fbd0:	dfc00117 	ldw	ra,4(sp)
 800fbd4:	dc000017 	ldw	r16,0(sp)
 800fbd8:	dec00204 	addi	sp,sp,8
 800fbdc:	f800283a 	ret

0800fbe0 <__seofread>:
 800fbe0:	0005883a 	mov	r2,zero
 800fbe4:	f800283a 	ret

0800fbe8 <__swrite>:
 800fbe8:	2880030b 	ldhu	r2,12(r5)
 800fbec:	defffb04 	addi	sp,sp,-20
 800fbf0:	dcc00315 	stw	r19,12(sp)
 800fbf4:	dc800215 	stw	r18,8(sp)
 800fbf8:	dc400115 	stw	r17,4(sp)
 800fbfc:	dc000015 	stw	r16,0(sp)
 800fc00:	dfc00415 	stw	ra,16(sp)
 800fc04:	10c0400c 	andi	r3,r2,256
 800fc08:	2821883a 	mov	r16,r5
 800fc0c:	2023883a 	mov	r17,r4
 800fc10:	2940038f 	ldh	r5,14(r5)
 800fc14:	3025883a 	mov	r18,r6
 800fc18:	3827883a 	mov	r19,r7
 800fc1c:	18000c1e 	bne	r3,zero,800fc50 <__swrite+0x68>
 800fc20:	10bbffcc 	andi	r2,r2,61439
 800fc24:	980f883a 	mov	r7,r19
 800fc28:	900d883a 	mov	r6,r18
 800fc2c:	8809883a 	mov	r4,r17
 800fc30:	8080030d 	sth	r2,12(r16)
 800fc34:	dfc00417 	ldw	ra,16(sp)
 800fc38:	dcc00317 	ldw	r19,12(sp)
 800fc3c:	dc800217 	ldw	r18,8(sp)
 800fc40:	dc400117 	ldw	r17,4(sp)
 800fc44:	dc000017 	ldw	r16,0(sp)
 800fc48:	dec00504 	addi	sp,sp,20
 800fc4c:	80113281 	jmpi	8011328 <_write_r>
 800fc50:	01c00084 	movi	r7,2
 800fc54:	000d883a 	mov	r6,zero
 800fc58:	80119d00 	call	80119d0 <_lseek_r>
 800fc5c:	8080030b 	ldhu	r2,12(r16)
 800fc60:	8140038f 	ldh	r5,14(r16)
 800fc64:	003fee06 	br	800fc20 <__swrite+0x38>

0800fc68 <__sseek>:
 800fc68:	defffe04 	addi	sp,sp,-8
 800fc6c:	dc000015 	stw	r16,0(sp)
 800fc70:	2821883a 	mov	r16,r5
 800fc74:	2940038f 	ldh	r5,14(r5)
 800fc78:	dfc00115 	stw	ra,4(sp)
 800fc7c:	80119d00 	call	80119d0 <_lseek_r>
 800fc80:	10ffffd8 	cmpnei	r3,r2,-1
 800fc84:	18000826 	beq	r3,zero,800fca8 <__sseek+0x40>
 800fc88:	80c0030b 	ldhu	r3,12(r16)
 800fc8c:	80801415 	stw	r2,80(r16)
 800fc90:	18c40014 	ori	r3,r3,4096
 800fc94:	80c0030d 	sth	r3,12(r16)
 800fc98:	dfc00117 	ldw	ra,4(sp)
 800fc9c:	dc000017 	ldw	r16,0(sp)
 800fca0:	dec00204 	addi	sp,sp,8
 800fca4:	f800283a 	ret
 800fca8:	80c0030b 	ldhu	r3,12(r16)
 800fcac:	18fbffcc 	andi	r3,r3,61439
 800fcb0:	80c0030d 	sth	r3,12(r16)
 800fcb4:	dfc00117 	ldw	ra,4(sp)
 800fcb8:	dc000017 	ldw	r16,0(sp)
 800fcbc:	dec00204 	addi	sp,sp,8
 800fcc0:	f800283a 	ret

0800fcc4 <__sclose>:
 800fcc4:	2940038f 	ldh	r5,14(r5)
 800fcc8:	801138c1 	jmpi	801138c <_close_r>

0800fccc <__sprint_r.part.0>:
 800fccc:	28801917 	ldw	r2,100(r5)
 800fcd0:	defff604 	addi	sp,sp,-40
 800fcd4:	dcc00315 	stw	r19,12(sp)
 800fcd8:	dfc00915 	stw	ra,36(sp)
 800fcdc:	df000815 	stw	fp,32(sp)
 800fce0:	ddc00715 	stw	r23,28(sp)
 800fce4:	dd800615 	stw	r22,24(sp)
 800fce8:	dd400515 	stw	r21,20(sp)
 800fcec:	dd000415 	stw	r20,16(sp)
 800fcf0:	dc800215 	stw	r18,8(sp)
 800fcf4:	dc400115 	stw	r17,4(sp)
 800fcf8:	dc000015 	stw	r16,0(sp)
 800fcfc:	1088000c 	andi	r2,r2,8192
 800fd00:	3027883a 	mov	r19,r6
 800fd04:	10002c26 	beq	r2,zero,800fdb8 <__sprint_r.part.0+0xec>
 800fd08:	30800217 	ldw	r2,8(r6)
 800fd0c:	35000017 	ldw	r20,0(r6)
 800fd10:	2821883a 	mov	r16,r5
 800fd14:	2023883a 	mov	r17,r4
 800fd18:	05bfff04 	movi	r22,-4
 800fd1c:	10002426 	beq	r2,zero,800fdb0 <__sprint_r.part.0+0xe4>
 800fd20:	a5400117 	ldw	r21,4(r20)
 800fd24:	a5c00017 	ldw	r23,0(r20)
 800fd28:	a824d0ba 	srli	r18,r21,2
 800fd2c:	90001b26 	beq	r18,zero,800fd9c <__sprint_r.part.0+0xd0>
 800fd30:	0039883a 	mov	fp,zero
 800fd34:	00000206 	br	800fd40 <__sprint_r.part.0+0x74>
 800fd38:	bdc00104 	addi	r23,r23,4
 800fd3c:	97001626 	beq	r18,fp,800fd98 <__sprint_r.part.0+0xcc>
 800fd40:	b9400017 	ldw	r5,0(r23)
 800fd44:	800d883a 	mov	r6,r16
 800fd48:	8809883a 	mov	r4,r17
 800fd4c:	80117e40 	call	80117e4 <_fputwc_r>
 800fd50:	10bfffe0 	cmpeqi	r2,r2,-1
 800fd54:	e7000044 	addi	fp,fp,1
 800fd58:	103ff726 	beq	r2,zero,800fd38 <__sprint_r.part.0+0x6c>
 800fd5c:	00bfffc4 	movi	r2,-1
 800fd60:	98000215 	stw	zero,8(r19)
 800fd64:	98000115 	stw	zero,4(r19)
 800fd68:	dfc00917 	ldw	ra,36(sp)
 800fd6c:	df000817 	ldw	fp,32(sp)
 800fd70:	ddc00717 	ldw	r23,28(sp)
 800fd74:	dd800617 	ldw	r22,24(sp)
 800fd78:	dd400517 	ldw	r21,20(sp)
 800fd7c:	dd000417 	ldw	r20,16(sp)
 800fd80:	dcc00317 	ldw	r19,12(sp)
 800fd84:	dc800217 	ldw	r18,8(sp)
 800fd88:	dc400117 	ldw	r17,4(sp)
 800fd8c:	dc000017 	ldw	r16,0(sp)
 800fd90:	dec00a04 	addi	sp,sp,40
 800fd94:	f800283a 	ret
 800fd98:	98800217 	ldw	r2,8(r19)
 800fd9c:	adaa703a 	and	r21,r21,r22
 800fda0:	1545c83a 	sub	r2,r2,r21
 800fda4:	98800215 	stw	r2,8(r19)
 800fda8:	a5000204 	addi	r20,r20,8
 800fdac:	103fdc1e 	bne	r2,zero,800fd20 <__sprint_r.part.0+0x54>
 800fdb0:	0005883a 	mov	r2,zero
 800fdb4:	003fea06 	br	800fd60 <__sprint_r.part.0+0x94>
 800fdb8:	800cf180 	call	800cf18 <__sfvwrite_r>
 800fdbc:	003fe806 	br	800fd60 <__sprint_r.part.0+0x94>

0800fdc0 <__sprint_r>:
 800fdc0:	30c00217 	ldw	r3,8(r6)
 800fdc4:	18000126 	beq	r3,zero,800fdcc <__sprint_r+0xc>
 800fdc8:	800fccc1 	jmpi	800fccc <__sprint_r.part.0>
 800fdcc:	30000115 	stw	zero,4(r6)
 800fdd0:	0005883a 	mov	r2,zero
 800fdd4:	f800283a 	ret

0800fdd8 <___vfiprintf_internal_r>:
 800fdd8:	deffcf04 	addi	sp,sp,-196
 800fddc:	dd802d15 	stw	r22,180(sp)
 800fde0:	dd402c15 	stw	r21,176(sp)
 800fde4:	dd002b15 	stw	r20,172(sp)
 800fde8:	dfc03015 	stw	ra,192(sp)
 800fdec:	df002f15 	stw	fp,188(sp)
 800fdf0:	ddc02e15 	stw	r23,184(sp)
 800fdf4:	dcc02a15 	stw	r19,168(sp)
 800fdf8:	dc802915 	stw	r18,164(sp)
 800fdfc:	dc402815 	stw	r17,160(sp)
 800fe00:	dc002715 	stw	r16,156(sp)
 800fe04:	d9c00415 	stw	r7,16(sp)
 800fe08:	202d883a 	mov	r22,r4
 800fe0c:	282b883a 	mov	r21,r5
 800fe10:	3029883a 	mov	r20,r6
 800fe14:	20000226 	beq	r4,zero,800fe20 <___vfiprintf_internal_r+0x48>
 800fe18:	20800e17 	ldw	r2,56(r4)
 800fe1c:	1001b426 	beq	r2,zero,80104f0 <___vfiprintf_internal_r+0x718>
 800fe20:	a880030b 	ldhu	r2,12(r21)
 800fe24:	10c8000c 	andi	r3,r2,8192
 800fe28:	1800061e 	bne	r3,zero,800fe44 <___vfiprintf_internal_r+0x6c>
 800fe2c:	a8c01917 	ldw	r3,100(r21)
 800fe30:	0137ffc4 	movi	r4,-8193
 800fe34:	10880014 	ori	r2,r2,8192
 800fe38:	1906703a 	and	r3,r3,r4
 800fe3c:	a880030d 	sth	r2,12(r21)
 800fe40:	a8c01915 	stw	r3,100(r21)
 800fe44:	10c0020c 	andi	r3,r2,8
 800fe48:	18010826 	beq	r3,zero,801026c <___vfiprintf_internal_r+0x494>
 800fe4c:	a8c00417 	ldw	r3,16(r21)
 800fe50:	18010626 	beq	r3,zero,801026c <___vfiprintf_internal_r+0x494>
 800fe54:	1080068c 	andi	r2,r2,26
 800fe58:	10800298 	cmpnei	r2,r2,10
 800fe5c:	10010b26 	beq	r2,zero,801028c <___vfiprintf_internal_r+0x4b4>
 800fe60:	dc801704 	addi	r18,sp,92
 800fe64:	dc800a15 	stw	r18,40(sp)
 800fe68:	d8000c15 	stw	zero,48(sp)
 800fe6c:	d8000b15 	stw	zero,44(sp)
 800fe70:	9021883a 	mov	r16,r18
 800fe74:	d8000515 	stw	zero,20(sp)
 800fe78:	d8000115 	stw	zero,4(sp)
 800fe7c:	a0c00007 	ldb	r3,0(r20)
 800fe80:	1800e826 	beq	r3,zero,8010224 <___vfiprintf_internal_r+0x44c>
 800fe84:	a023883a 	mov	r17,r20
 800fe88:	00000306 	br	800fe98 <___vfiprintf_internal_r+0xc0>
 800fe8c:	88c00047 	ldb	r3,1(r17)
 800fe90:	8c400044 	addi	r17,r17,1
 800fe94:	18012a26 	beq	r3,zero,8010340 <___vfiprintf_internal_r+0x568>
 800fe98:	18c00958 	cmpnei	r3,r3,37
 800fe9c:	183ffb1e 	bne	r3,zero,800fe8c <___vfiprintf_internal_r+0xb4>
 800fea0:	8d27c83a 	sub	r19,r17,r20
 800fea4:	8d01281e 	bne	r17,r20,8010348 <___vfiprintf_internal_r+0x570>
 800fea8:	88800003 	ldbu	r2,0(r17)
 800feac:	10803fcc 	andi	r2,r2,255
 800feb0:	1080201c 	xori	r2,r2,128
 800feb4:	10bfe004 	addi	r2,r2,-128
 800feb8:	1000da26 	beq	r2,zero,8010224 <___vfiprintf_internal_r+0x44c>
 800febc:	88800047 	ldb	r2,1(r17)
 800fec0:	8d000044 	addi	r20,r17,1
 800fec4:	d8000945 	stb	zero,37(sp)
 800fec8:	000b883a 	mov	r5,zero
 800fecc:	000d883a 	mov	r6,zero
 800fed0:	023fffc4 	movi	r8,-1
 800fed4:	0023883a 	mov	r17,zero
 800fed8:	001b883a 	mov	r13,zero
 800fedc:	a5000044 	addi	r20,r20,1
 800fee0:	10fff804 	addi	r3,r2,-32
 800fee4:	19001668 	cmpgeui	r4,r3,89
 800fee8:	20006c1e 	bne	r4,zero,801009c <___vfiprintf_internal_r+0x2c4>
 800feec:	180690ba 	slli	r3,r3,2
 800fef0:	01020074 	movhi	r4,2049
 800fef4:	1909883a 	add	r4,r3,r4
 800fef8:	20ffc017 	ldw	r3,-256(r4)
 800fefc:	1800683a 	jmp	r3
 800ff00:	08010800 	call	801080 <__alt_mem_onchip_memory2_0+0x801080>
 800ff04:	0801009c 	xori	zero,at,1026
 800ff08:	0801009c 	xori	zero,at,1026
 800ff0c:	080107f4 	orhi	zero,at,1055
 800ff10:	0801009c 	xori	zero,at,1026
 800ff14:	0801009c 	xori	zero,at,1026
 800ff18:	0801009c 	xori	zero,at,1026
 800ff1c:	0801009c 	xori	zero,at,1026
 800ff20:	0801009c 	xori	zero,at,1026
 800ff24:	0801009c 	xori	zero,at,1026
 800ff28:	080107cc 	andi	zero,at,1055
 800ff2c:	080107bc 	xorhi	zero,at,1054
 800ff30:	0801009c 	xori	zero,at,1026
 800ff34:	080107a4 	muli	zero,at,1054
 800ff38:	08010758 	cmpnei	zero,at,1053
 800ff3c:	0801009c 	xori	zero,at,1026
 800ff40:	0801074c 	andi	zero,at,1053
 800ff44:	08010064 	muli	zero,at,1025
 800ff48:	08010064 	muli	zero,at,1025
 800ff4c:	08010064 	muli	zero,at,1025
 800ff50:	08010064 	muli	zero,at,1025
 800ff54:	08010064 	muli	zero,at,1025
 800ff58:	08010064 	muli	zero,at,1025
 800ff5c:	08010064 	muli	zero,at,1025
 800ff60:	08010064 	muli	zero,at,1025
 800ff64:	08010064 	muli	zero,at,1025
 800ff68:	0801009c 	xori	zero,at,1026
 800ff6c:	0801009c 	xori	zero,at,1026
 800ff70:	0801009c 	xori	zero,at,1026
 800ff74:	0801009c 	xori	zero,at,1026
 800ff78:	0801009c 	xori	zero,at,1026
 800ff7c:	0801009c 	xori	zero,at,1026
 800ff80:	0801009c 	xori	zero,at,1026
 800ff84:	0801009c 	xori	zero,at,1026
 800ff88:	0801009c 	xori	zero,at,1026
 800ff8c:	0801009c 	xori	zero,at,1026
 800ff90:	08010668 	cmpgeui	zero,at,1049
 800ff94:	0801009c 	xori	zero,at,1026
 800ff98:	0801009c 	xori	zero,at,1026
 800ff9c:	0801009c 	xori	zero,at,1026
 800ffa0:	0801009c 	xori	zero,at,1026
 800ffa4:	0801009c 	xori	zero,at,1026
 800ffa8:	0801009c 	xori	zero,at,1026
 800ffac:	0801009c 	xori	zero,at,1026
 800ffb0:	0801009c 	xori	zero,at,1026
 800ffb4:	0801009c 	xori	zero,at,1026
 800ffb8:	0801009c 	xori	zero,at,1026
 800ffbc:	080102d8 	cmpnei	zero,at,1035
 800ffc0:	0801009c 	xori	zero,at,1026
 800ffc4:	0801009c 	xori	zero,at,1026
 800ffc8:	0801009c 	xori	zero,at,1026
 800ffcc:	0801009c 	xori	zero,at,1026
 800ffd0:	0801009c 	xori	zero,at,1026
 800ffd4:	080102b0 	cmpltui	zero,at,1034
 800ffd8:	0801009c 	xori	zero,at,1026
 800ffdc:	0801009c 	xori	zero,at,1026
 800ffe0:	08010620 	cmpeqi	zero,at,1048
 800ffe4:	0801009c 	xori	zero,at,1026
 800ffe8:	0801009c 	xori	zero,at,1026
 800ffec:	0801009c 	xori	zero,at,1026
 800fff0:	0801009c 	xori	zero,at,1026
 800fff4:	0801009c 	xori	zero,at,1026
 800fff8:	0801009c 	xori	zero,at,1026
 800fffc:	0801009c 	xori	zero,at,1026
 8010000:	0801009c 	xori	zero,at,1026
 8010004:	0801009c 	xori	zero,at,1026
 8010008:	0801009c 	xori	zero,at,1026
 801000c:	080105f8 	rdprs	zero,at,1047
 8010010:	080104f8 	rdprs	zero,at,1043
 8010014:	0801009c 	xori	zero,at,1026
 8010018:	0801009c 	xori	zero,at,1026
 801001c:	0801009c 	xori	zero,at,1026
 8010020:	0801059c 	xori	zero,at,1046
 8010024:	080104f8 	rdprs	zero,at,1043
 8010028:	0801009c 	xori	zero,at,1026
 801002c:	0801009c 	xori	zero,at,1026
 8010030:	080105e4 	muli	zero,at,1047
 8010034:	0801009c 	xori	zero,at,1026
 8010038:	080105a8 	cmpgeui	zero,at,1046
 801003c:	080102dc 	xori	zero,at,1035
 8010040:	080108d8 	cmpnei	zero,at,1059
 8010044:	080108cc 	andi	zero,at,1059
 8010048:	0801009c 	xori	zero,at,1026
 801004c:	08010874 	orhi	zero,at,1057
 8010050:	0801009c 	xori	zero,at,1026
 8010054:	080102b4 	orhi	zero,at,1034
 8010058:	0801009c 	xori	zero,at,1026
 801005c:	0801009c 	xori	zero,at,1026
 8010060:	0801082c 	andhi	zero,at,1056
 8010064:	0023883a 	mov	r17,zero
 8010068:	113ff404 	addi	r4,r2,-48
 801006c:	880690ba 	slli	r3,r17,2
 8010070:	a0800007 	ldb	r2,0(r20)
 8010074:	a5000044 	addi	r20,r20,1
 8010078:	1c63883a 	add	r17,r3,r17
 801007c:	8c63883a 	add	r17,r17,r17
 8010080:	2463883a 	add	r17,r4,r17
 8010084:	113ff404 	addi	r4,r2,-48
 8010088:	20c002b0 	cmpltui	r3,r4,10
 801008c:	183ff71e 	bne	r3,zero,801006c <___vfiprintf_internal_r+0x294>
 8010090:	10fff804 	addi	r3,r2,-32
 8010094:	19001668 	cmpgeui	r4,r3,89
 8010098:	203f9426 	beq	r4,zero,800feec <___vfiprintf_internal_r+0x114>
 801009c:	29403fcc 	andi	r5,r5,255
 80100a0:	2803e31e 	bne	r5,zero,8011030 <___vfiprintf_internal_r+0x1258>
 80100a4:	10005f26 	beq	r2,zero,8010224 <___vfiprintf_internal_r+0x44c>
 80100a8:	d8800d05 	stb	r2,52(sp)
 80100ac:	d8000945 	stb	zero,37(sp)
 80100b0:	05c00044 	movi	r23,1
 80100b4:	07000044 	movi	fp,1
 80100b8:	dcc00d04 	addi	r19,sp,52
 80100bc:	db400015 	stw	r13,0(sp)
 80100c0:	0011883a 	mov	r8,zero
 80100c4:	d8800017 	ldw	r2,0(sp)
 80100c8:	1380008c 	andi	r14,r2,2
 80100cc:	70000126 	beq	r14,zero,80100d4 <___vfiprintf_internal_r+0x2fc>
 80100d0:	bdc00084 	addi	r23,r23,2
 80100d4:	d8800017 	ldw	r2,0(sp)
 80100d8:	d9000b17 	ldw	r4,44(sp)
 80100dc:	1340210c 	andi	r13,r2,132
 80100e0:	21800044 	addi	r6,r4,1
 80100e4:	d8800c17 	ldw	r2,48(sp)
 80100e8:	300b883a 	mov	r5,r6
 80100ec:	6800021e 	bne	r13,zero,80100f8 <___vfiprintf_internal_r+0x320>
 80100f0:	8dc7c83a 	sub	r3,r17,r23
 80100f4:	00c2d716 	blt	zero,r3,8010c54 <___vfiprintf_internal_r+0xe7c>
 80100f8:	d8c00947 	ldb	r3,37(sp)
 80100fc:	81800204 	addi	r6,r16,8
 8010100:	18000d26 	beq	r3,zero,8010138 <___vfiprintf_internal_r+0x360>
 8010104:	d8c00944 	addi	r3,sp,37
 8010108:	10800044 	addi	r2,r2,1
 801010c:	80c00015 	stw	r3,0(r16)
 8010110:	00c00044 	movi	r3,1
 8010114:	80c00115 	stw	r3,4(r16)
 8010118:	d8800c15 	stw	r2,48(sp)
 801011c:	d9400b15 	stw	r5,44(sp)
 8010120:	28c00208 	cmpgei	r3,r5,8
 8010124:	1802ac1e 	bne	r3,zero,8010bd8 <___vfiprintf_internal_r+0xe00>
 8010128:	2809883a 	mov	r4,r5
 801012c:	3021883a 	mov	r16,r6
 8010130:	29400044 	addi	r5,r5,1
 8010134:	31800204 	addi	r6,r6,8
 8010138:	70001826 	beq	r14,zero,801019c <___vfiprintf_internal_r+0x3c4>
 801013c:	d8c00984 	addi	r3,sp,38
 8010140:	10800084 	addi	r2,r2,2
 8010144:	80c00015 	stw	r3,0(r16)
 8010148:	00c00084 	movi	r3,2
 801014c:	80c00115 	stw	r3,4(r16)
 8010150:	d8800c15 	stw	r2,48(sp)
 8010154:	d9400b15 	stw	r5,44(sp)
 8010158:	28c00208 	cmpgei	r3,r5,8
 801015c:	1802b626 	beq	r3,zero,8010c38 <___vfiprintf_internal_r+0xe60>
 8010160:	10031226 	beq	r2,zero,8010dac <___vfiprintf_internal_r+0xfd4>
 8010164:	d9800a04 	addi	r6,sp,40
 8010168:	a80b883a 	mov	r5,r21
 801016c:	b009883a 	mov	r4,r22
 8010170:	da000315 	stw	r8,12(sp)
 8010174:	db400215 	stw	r13,8(sp)
 8010178:	800fccc0 	call	800fccc <__sprint_r.part.0>
 801017c:	10002b1e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010180:	d9000b17 	ldw	r4,44(sp)
 8010184:	d8800c17 	ldw	r2,48(sp)
 8010188:	da000317 	ldw	r8,12(sp)
 801018c:	db400217 	ldw	r13,8(sp)
 8010190:	d9801904 	addi	r6,sp,100
 8010194:	21400044 	addi	r5,r4,1
 8010198:	9021883a 	mov	r16,r18
 801019c:	6b402018 	cmpnei	r13,r13,128
 80101a0:	68020c26 	beq	r13,zero,80109d4 <___vfiprintf_internal_r+0xbfc>
 80101a4:	4711c83a 	sub	r8,r8,fp
 80101a8:	02024b16 	blt	zero,r8,8010ad8 <___vfiprintf_internal_r+0xd00>
 80101ac:	e085883a 	add	r2,fp,r2
 80101b0:	d9400b15 	stw	r5,44(sp)
 80101b4:	84c00015 	stw	r19,0(r16)
 80101b8:	87000115 	stw	fp,4(r16)
 80101bc:	d8800c15 	stw	r2,48(sp)
 80101c0:	29400210 	cmplti	r5,r5,8
 80101c4:	2800081e 	bne	r5,zero,80101e8 <___vfiprintf_internal_r+0x410>
 80101c8:	10008f26 	beq	r2,zero,8010408 <___vfiprintf_internal_r+0x630>
 80101cc:	d9800a04 	addi	r6,sp,40
 80101d0:	a80b883a 	mov	r5,r21
 80101d4:	b009883a 	mov	r4,r22
 80101d8:	800fccc0 	call	800fccc <__sprint_r.part.0>
 80101dc:	1000131e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 80101e0:	d8800c17 	ldw	r2,48(sp)
 80101e4:	900d883a 	mov	r6,r18
 80101e8:	d8c00017 	ldw	r3,0(sp)
 80101ec:	1cc0010c 	andi	r19,r3,4
 80101f0:	98000226 	beq	r19,zero,80101fc <___vfiprintf_internal_r+0x424>
 80101f4:	8de1c83a 	sub	r16,r17,r23
 80101f8:	04008a16 	blt	zero,r16,8010424 <___vfiprintf_internal_r+0x64c>
 80101fc:	8dc0010e 	bge	r17,r23,8010204 <___vfiprintf_internal_r+0x42c>
 8010200:	b823883a 	mov	r17,r23
 8010204:	d8c00117 	ldw	r3,4(sp)
 8010208:	1c47883a 	add	r3,r3,r17
 801020c:	d8c00115 	stw	r3,4(sp)
 8010210:	1002671e 	bne	r2,zero,8010bb0 <___vfiprintf_internal_r+0xdd8>
 8010214:	a0c00007 	ldb	r3,0(r20)
 8010218:	d8000b15 	stw	zero,44(sp)
 801021c:	9021883a 	mov	r16,r18
 8010220:	183f181e 	bne	r3,zero,800fe84 <___vfiprintf_internal_r+0xac>
 8010224:	d8800c17 	ldw	r2,48(sp)
 8010228:	1003831e 	bne	r2,zero,8011038 <___vfiprintf_internal_r+0x1260>
 801022c:	a880030b 	ldhu	r2,12(r21)
 8010230:	1080100c 	andi	r2,r2,64
 8010234:	10039e1e 	bne	r2,zero,80110b0 <___vfiprintf_internal_r+0x12d8>
 8010238:	d8800117 	ldw	r2,4(sp)
 801023c:	dfc03017 	ldw	ra,192(sp)
 8010240:	df002f17 	ldw	fp,188(sp)
 8010244:	ddc02e17 	ldw	r23,184(sp)
 8010248:	dd802d17 	ldw	r22,180(sp)
 801024c:	dd402c17 	ldw	r21,176(sp)
 8010250:	dd002b17 	ldw	r20,172(sp)
 8010254:	dcc02a17 	ldw	r19,168(sp)
 8010258:	dc802917 	ldw	r18,164(sp)
 801025c:	dc402817 	ldw	r17,160(sp)
 8010260:	dc002717 	ldw	r16,156(sp)
 8010264:	dec03104 	addi	sp,sp,196
 8010268:	f800283a 	ret
 801026c:	a80b883a 	mov	r5,r21
 8010270:	b009883a 	mov	r4,r22
 8010274:	800aa300 	call	800aa30 <__swsetup_r>
 8010278:	10038d1e 	bne	r2,zero,80110b0 <___vfiprintf_internal_r+0x12d8>
 801027c:	a880030b 	ldhu	r2,12(r21)
 8010280:	1080068c 	andi	r2,r2,26
 8010284:	10800298 	cmpnei	r2,r2,10
 8010288:	103ef51e 	bne	r2,zero,800fe60 <___vfiprintf_internal_r+0x88>
 801028c:	a880038f 	ldh	r2,14(r21)
 8010290:	103ef316 	blt	r2,zero,800fe60 <___vfiprintf_internal_r+0x88>
 8010294:	d9c00417 	ldw	r7,16(sp)
 8010298:	a00d883a 	mov	r6,r20
 801029c:	a80b883a 	mov	r5,r21
 80102a0:	b009883a 	mov	r4,r22
 80102a4:	80111080 	call	8011108 <__sbprintf>
 80102a8:	d8800115 	stw	r2,4(sp)
 80102ac:	003fe206 	br	8010238 <___vfiprintf_internal_r+0x460>
 80102b0:	6b400414 	ori	r13,r13,16
 80102b4:	6880080c 	andi	r2,r13,32
 80102b8:	10004726 	beq	r2,zero,80103d8 <___vfiprintf_internal_r+0x600>
 80102bc:	d8c00417 	ldw	r3,16(sp)
 80102c0:	00800044 	movi	r2,1
 80102c4:	1dc00017 	ldw	r23,0(r3)
 80102c8:	1f000117 	ldw	fp,4(r3)
 80102cc:	18c00204 	addi	r3,r3,8
 80102d0:	d8c00415 	stw	r3,16(sp)
 80102d4:	00000906 	br	80102fc <___vfiprintf_internal_r+0x524>
 80102d8:	6b400414 	ori	r13,r13,16
 80102dc:	6880080c 	andi	r2,r13,32
 80102e0:	10003126 	beq	r2,zero,80103a8 <___vfiprintf_internal_r+0x5d0>
 80102e4:	d8c00417 	ldw	r3,16(sp)
 80102e8:	0005883a 	mov	r2,zero
 80102ec:	1dc00017 	ldw	r23,0(r3)
 80102f0:	1f000117 	ldw	fp,4(r3)
 80102f4:	18c00204 	addi	r3,r3,8
 80102f8:	d8c00415 	stw	r3,16(sp)
 80102fc:	d8000945 	stb	zero,37(sp)
 8010300:	40ffffe0 	cmpeqi	r3,r8,-1
 8010304:	001d883a 	mov	r14,zero
 8010308:	1800f21e 	bne	r3,zero,80106d4 <___vfiprintf_internal_r+0x8fc>
 801030c:	04ffdfc4 	movi	r19,-129
 8010310:	6cc8703a 	and	r4,r13,r19
 8010314:	bf06b03a 	or	r3,r23,fp
 8010318:	d9000015 	stw	r4,0(sp)
 801031c:	18024b1e 	bne	r3,zero,8010c4c <___vfiprintf_internal_r+0xe74>
 8010320:	4003091e 	bne	r8,zero,8010f48 <___vfiprintf_internal_r+0x1170>
 8010324:	1002a61e 	bne	r2,zero,8010dc0 <___vfiprintf_internal_r+0xfe8>
 8010328:	6f00004c 	andi	fp,r13,1
 801032c:	e002b826 	beq	fp,zero,8010e10 <___vfiprintf_internal_r+0x1038>
 8010330:	00800c04 	movi	r2,48
 8010334:	d88016c5 	stb	r2,91(sp)
 8010338:	dcc016c4 	addi	r19,sp,91
 801033c:	00008e06 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 8010340:	8d27c83a 	sub	r19,r17,r20
 8010344:	8d3fb726 	beq	r17,r20,8010224 <___vfiprintf_internal_r+0x44c>
 8010348:	d8c00c17 	ldw	r3,48(sp)
 801034c:	d8800b17 	ldw	r2,44(sp)
 8010350:	85000015 	stw	r20,0(r16)
 8010354:	98c7883a 	add	r3,r19,r3
 8010358:	10800044 	addi	r2,r2,1
 801035c:	d8800b15 	stw	r2,44(sp)
 8010360:	84c00115 	stw	r19,4(r16)
 8010364:	d8c00c15 	stw	r3,48(sp)
 8010368:	10800208 	cmpgei	r2,r2,8
 801036c:	1000061e 	bne	r2,zero,8010388 <___vfiprintf_internal_r+0x5b0>
 8010370:	84000204 	addi	r16,r16,8
 8010374:	d8c00117 	ldw	r3,4(sp)
 8010378:	88800003 	ldbu	r2,0(r17)
 801037c:	1cc7883a 	add	r3,r3,r19
 8010380:	d8c00115 	stw	r3,4(sp)
 8010384:	003ec906 	br	800feac <___vfiprintf_internal_r+0xd4>
 8010388:	18027f26 	beq	r3,zero,8010d88 <___vfiprintf_internal_r+0xfb0>
 801038c:	d9800a04 	addi	r6,sp,40
 8010390:	a80b883a 	mov	r5,r21
 8010394:	b009883a 	mov	r4,r22
 8010398:	800fccc0 	call	800fccc <__sprint_r.part.0>
 801039c:	103fa31e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 80103a0:	9021883a 	mov	r16,r18
 80103a4:	003ff306 	br	8010374 <___vfiprintf_internal_r+0x59c>
 80103a8:	d9000417 	ldw	r4,16(sp)
 80103ac:	6880040c 	andi	r2,r13,16
 80103b0:	20c00104 	addi	r3,r4,4
 80103b4:	1002a31e 	bne	r2,zero,8010e44 <___vfiprintf_internal_r+0x106c>
 80103b8:	6880100c 	andi	r2,r13,64
 80103bc:	1002f626 	beq	r2,zero,8010f98 <___vfiprintf_internal_r+0x11c0>
 80103c0:	d8800417 	ldw	r2,16(sp)
 80103c4:	0039883a 	mov	fp,zero
 80103c8:	d8c00415 	stw	r3,16(sp)
 80103cc:	15c0000b 	ldhu	r23,0(r2)
 80103d0:	0005883a 	mov	r2,zero
 80103d4:	003fc906 	br	80102fc <___vfiprintf_internal_r+0x524>
 80103d8:	d9000417 	ldw	r4,16(sp)
 80103dc:	6880040c 	andi	r2,r13,16
 80103e0:	20c00104 	addi	r3,r4,4
 80103e4:	1002ab1e 	bne	r2,zero,8010e94 <___vfiprintf_internal_r+0x10bc>
 80103e8:	6880100c 	andi	r2,r13,64
 80103ec:	1002f026 	beq	r2,zero,8010fb0 <___vfiprintf_internal_r+0x11d8>
 80103f0:	d8800417 	ldw	r2,16(sp)
 80103f4:	0039883a 	mov	fp,zero
 80103f8:	d8c00415 	stw	r3,16(sp)
 80103fc:	15c0000b 	ldhu	r23,0(r2)
 8010400:	00800044 	movi	r2,1
 8010404:	003fbd06 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010408:	d8c00017 	ldw	r3,0(sp)
 801040c:	d8000b15 	stw	zero,44(sp)
 8010410:	1cc0010c 	andi	r19,r3,4
 8010414:	98024a26 	beq	r19,zero,8010d40 <___vfiprintf_internal_r+0xf68>
 8010418:	8de1c83a 	sub	r16,r17,r23
 801041c:	0402480e 	bge	zero,r16,8010d40 <___vfiprintf_internal_r+0xf68>
 8010420:	900d883a 	mov	r6,r18
 8010424:	80c00450 	cmplti	r3,r16,17
 8010428:	d9000b17 	ldw	r4,44(sp)
 801042c:	01c20074 	movhi	r7,2049
 8010430:	1803171e 	bne	r3,zero,8011090 <___vfiprintf_internal_r+0x12b8>
 8010434:	39dfe304 	addi	r7,r7,32652
 8010438:	04c00404 	movi	r19,16
 801043c:	00000606 	br	8010458 <___vfiprintf_internal_r+0x680>
 8010440:	21400084 	addi	r5,r4,2
 8010444:	31800204 	addi	r6,r6,8
 8010448:	1809883a 	mov	r4,r3
 801044c:	843ffc04 	addi	r16,r16,-16
 8010450:	80c00448 	cmpgei	r3,r16,17
 8010454:	18001726 	beq	r3,zero,80104b4 <___vfiprintf_internal_r+0x6dc>
 8010458:	20c00044 	addi	r3,r4,1
 801045c:	10800404 	addi	r2,r2,16
 8010460:	31c00015 	stw	r7,0(r6)
 8010464:	34c00115 	stw	r19,4(r6)
 8010468:	d8800c15 	stw	r2,48(sp)
 801046c:	d8c00b15 	stw	r3,44(sp)
 8010470:	19400208 	cmpgei	r5,r3,8
 8010474:	283ff226 	beq	r5,zero,8010440 <___vfiprintf_internal_r+0x668>
 8010478:	d9800a04 	addi	r6,sp,40
 801047c:	a80b883a 	mov	r5,r21
 8010480:	b009883a 	mov	r4,r22
 8010484:	10014f26 	beq	r2,zero,80109c4 <___vfiprintf_internal_r+0xbec>
 8010488:	d9c00015 	stw	r7,0(sp)
 801048c:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010490:	103f661e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010494:	d9000b17 	ldw	r4,44(sp)
 8010498:	843ffc04 	addi	r16,r16,-16
 801049c:	80c00448 	cmpgei	r3,r16,17
 80104a0:	d8800c17 	ldw	r2,48(sp)
 80104a4:	d9c00017 	ldw	r7,0(sp)
 80104a8:	900d883a 	mov	r6,r18
 80104ac:	21400044 	addi	r5,r4,1
 80104b0:	183fe91e 	bne	r3,zero,8010458 <___vfiprintf_internal_r+0x680>
 80104b4:	1405883a 	add	r2,r2,r16
 80104b8:	d9400b15 	stw	r5,44(sp)
 80104bc:	31c00015 	stw	r7,0(r6)
 80104c0:	34000115 	stw	r16,4(r6)
 80104c4:	d8800c15 	stw	r2,48(sp)
 80104c8:	29400210 	cmplti	r5,r5,8
 80104cc:	283f4b1e 	bne	r5,zero,80101fc <___vfiprintf_internal_r+0x424>
 80104d0:	10021b26 	beq	r2,zero,8010d40 <___vfiprintf_internal_r+0xf68>
 80104d4:	d9800a04 	addi	r6,sp,40
 80104d8:	a80b883a 	mov	r5,r21
 80104dc:	b009883a 	mov	r4,r22
 80104e0:	800fccc0 	call	800fccc <__sprint_r.part.0>
 80104e4:	103f511e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 80104e8:	d8800c17 	ldw	r2,48(sp)
 80104ec:	003f4306 	br	80101fc <___vfiprintf_internal_r+0x424>
 80104f0:	800cab80 	call	800cab8 <__sinit>
 80104f4:	003e4a06 	br	800fe20 <___vfiprintf_internal_r+0x48>
 80104f8:	29403fcc 	andi	r5,r5,255
 80104fc:	2802e01e 	bne	r5,zero,8011080 <___vfiprintf_internal_r+0x12a8>
 8010500:	6880080c 	andi	r2,r13,32
 8010504:	10005d26 	beq	r2,zero,801067c <___vfiprintf_internal_r+0x8a4>
 8010508:	d8c00417 	ldw	r3,16(sp)
 801050c:	18800117 	ldw	r2,4(r3)
 8010510:	1dc00017 	ldw	r23,0(r3)
 8010514:	18c00204 	addi	r3,r3,8
 8010518:	d8c00415 	stw	r3,16(sp)
 801051c:	1039883a 	mov	fp,r2
 8010520:	10006216 	blt	r2,zero,80106ac <___vfiprintf_internal_r+0x8d4>
 8010524:	40bfffd8 	cmpnei	r2,r8,-1
 8010528:	10000a26 	beq	r2,zero,8010554 <___vfiprintf_internal_r+0x77c>
 801052c:	00ffdfc4 	movi	r3,-129
 8010530:	bf04b03a 	or	r2,r23,fp
 8010534:	db800943 	ldbu	r14,37(sp)
 8010538:	68da703a 	and	r13,r13,r3
 801053c:	1000061e 	bne	r2,zero,8010558 <___vfiprintf_internal_r+0x780>
 8010540:	4000081e 	bne	r8,zero,8010564 <___vfiprintf_internal_r+0x78c>
 8010544:	0039883a 	mov	fp,zero
 8010548:	db400015 	stw	r13,0(sp)
 801054c:	9027883a 	mov	r19,r18
 8010550:	00000906 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 8010554:	db800943 	ldbu	r14,37(sp)
 8010558:	e000ee1e 	bne	fp,zero,8010914 <___vfiprintf_internal_r+0xb3c>
 801055c:	b88002a8 	cmpgeui	r2,r23,10
 8010560:	1000ec1e 	bne	r2,zero,8010914 <___vfiprintf_internal_r+0xb3c>
 8010564:	bdc00c04 	addi	r23,r23,48
 8010568:	ddc016c5 	stb	r23,91(sp)
 801056c:	db400015 	stw	r13,0(sp)
 8010570:	07000044 	movi	fp,1
 8010574:	dcc016c4 	addi	r19,sp,91
 8010578:	402f883a 	mov	r23,r8
 801057c:	4700010e 	bge	r8,fp,8010584 <___vfiprintf_internal_r+0x7ac>
 8010580:	e02f883a 	mov	r23,fp
 8010584:	73803fcc 	andi	r14,r14,255
 8010588:	7380201c 	xori	r14,r14,128
 801058c:	73bfe004 	addi	r14,r14,-128
 8010590:	703ecc26 	beq	r14,zero,80100c4 <___vfiprintf_internal_r+0x2ec>
 8010594:	bdc00044 	addi	r23,r23,1
 8010598:	003eca06 	br	80100c4 <___vfiprintf_internal_r+0x2ec>
 801059c:	a0800007 	ldb	r2,0(r20)
 80105a0:	6b401014 	ori	r13,r13,64
 80105a4:	003e4d06 	br	800fedc <___vfiprintf_internal_r+0x104>
 80105a8:	29403fcc 	andi	r5,r5,255
 80105ac:	2802b21e 	bne	r5,zero,8011078 <___vfiprintf_internal_r+0x12a0>
 80105b0:	d9000417 	ldw	r4,16(sp)
 80105b4:	6880080c 	andi	r2,r13,32
 80105b8:	20c00017 	ldw	r3,0(r4)
 80105bc:	21000104 	addi	r4,r4,4
 80105c0:	1002251e 	bne	r2,zero,8010e58 <___vfiprintf_internal_r+0x1080>
 80105c4:	6880040c 	andi	r2,r13,16
 80105c8:	1002531e 	bne	r2,zero,8010f18 <___vfiprintf_internal_r+0x1140>
 80105cc:	6b40100c 	andi	r13,r13,64
 80105d0:	68025126 	beq	r13,zero,8010f18 <___vfiprintf_internal_r+0x1140>
 80105d4:	d8800117 	ldw	r2,4(sp)
 80105d8:	d9000415 	stw	r4,16(sp)
 80105dc:	1880000d 	sth	r2,0(r3)
 80105e0:	003e2606 	br	800fe7c <___vfiprintf_internal_r+0xa4>
 80105e4:	a0800007 	ldb	r2,0(r20)
 80105e8:	10c01b18 	cmpnei	r3,r2,108
 80105ec:	18025a26 	beq	r3,zero,8010f58 <___vfiprintf_internal_r+0x1180>
 80105f0:	6b400414 	ori	r13,r13,16
 80105f4:	003e3906 	br	800fedc <___vfiprintf_internal_r+0x104>
 80105f8:	d8c00417 	ldw	r3,16(sp)
 80105fc:	d8000945 	stb	zero,37(sp)
 8010600:	05c00044 	movi	r23,1
 8010604:	18800017 	ldw	r2,0(r3)
 8010608:	18c00104 	addi	r3,r3,4
 801060c:	d8c00415 	stw	r3,16(sp)
 8010610:	d8800d05 	stb	r2,52(sp)
 8010614:	07000044 	movi	fp,1
 8010618:	dcc00d04 	addi	r19,sp,52
 801061c:	003ea706 	br	80100bc <___vfiprintf_internal_r+0x2e4>
 8010620:	29403fcc 	andi	r5,r5,255
 8010624:	2802981e 	bne	r5,zero,8011088 <___vfiprintf_internal_r+0x12b0>
 8010628:	00c20074 	movhi	r3,2049
 801062c:	18df5804 	addi	r3,r3,32096
 8010630:	d8c00515 	stw	r3,20(sp)
 8010634:	68c0080c 	andi	r3,r13,32
 8010638:	18008326 	beq	r3,zero,8010848 <___vfiprintf_internal_r+0xa70>
 801063c:	d8c00417 	ldw	r3,16(sp)
 8010640:	1dc00017 	ldw	r23,0(r3)
 8010644:	1f000117 	ldw	fp,4(r3)
 8010648:	18c00204 	addi	r3,r3,8
 801064c:	d8c00415 	stw	r3,16(sp)
 8010650:	68c0004c 	andi	r3,r13,1
 8010654:	18000226 	beq	r3,zero,8010660 <___vfiprintf_internal_r+0x888>
 8010658:	bf06b03a 	or	r3,r23,fp
 801065c:	1801f31e 	bne	r3,zero,8010e2c <___vfiprintf_internal_r+0x1054>
 8010660:	00800084 	movi	r2,2
 8010664:	003f2506 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010668:	29403fcc 	andi	r5,r5,255
 801066c:	2802801e 	bne	r5,zero,8011070 <___vfiprintf_internal_r+0x1298>
 8010670:	6b400414 	ori	r13,r13,16
 8010674:	6880080c 	andi	r2,r13,32
 8010678:	103fa31e 	bne	r2,zero,8010508 <___vfiprintf_internal_r+0x730>
 801067c:	d9000417 	ldw	r4,16(sp)
 8010680:	6880040c 	andi	r2,r13,16
 8010684:	20c00104 	addi	r3,r4,4
 8010688:	1001f91e 	bne	r2,zero,8010e70 <___vfiprintf_internal_r+0x1098>
 801068c:	6880100c 	andi	r2,r13,64
 8010690:	10025226 	beq	r2,zero,8010fdc <___vfiprintf_internal_r+0x1204>
 8010694:	d8800417 	ldw	r2,16(sp)
 8010698:	d8c00415 	stw	r3,16(sp)
 801069c:	15c0000f 	ldh	r23,0(r2)
 80106a0:	b839d7fa 	srai	fp,r23,31
 80106a4:	e005883a 	mov	r2,fp
 80106a8:	103f9e0e 	bge	r2,zero,8010524 <___vfiprintf_internal_r+0x74c>
 80106ac:	b804c03a 	cmpne	r2,r23,zero
 80106b0:	0739c83a 	sub	fp,zero,fp
 80106b4:	e0b9c83a 	sub	fp,fp,r2
 80106b8:	00800b44 	movi	r2,45
 80106bc:	d8800945 	stb	r2,37(sp)
 80106c0:	40ffffe0 	cmpeqi	r3,r8,-1
 80106c4:	05efc83a 	sub	r23,zero,r23
 80106c8:	03800b44 	movi	r14,45
 80106cc:	00800044 	movi	r2,1
 80106d0:	183f0e26 	beq	r3,zero,801030c <___vfiprintf_internal_r+0x534>
 80106d4:	10c00060 	cmpeqi	r3,r2,1
 80106d8:	183f9f1e 	bne	r3,zero,8010558 <___vfiprintf_internal_r+0x780>
 80106dc:	108000a0 	cmpeqi	r2,r2,2
 80106e0:	9027883a 	mov	r19,r18
 80106e4:	1000a81e 	bne	r2,zero,8010988 <___vfiprintf_internal_r+0xbb0>
 80106e8:	e006977a 	slli	r3,fp,29
 80106ec:	b804d0fa 	srli	r2,r23,3
 80106f0:	e038d0fa 	srli	fp,fp,3
 80106f4:	b90001cc 	andi	r4,r23,7
 80106f8:	21000c04 	addi	r4,r4,48
 80106fc:	18aeb03a 	or	r23,r3,r2
 8010700:	993fffc5 	stb	r4,-1(r19)
 8010704:	bf04b03a 	or	r2,r23,fp
 8010708:	980b883a 	mov	r5,r19
 801070c:	9cffffc4 	addi	r19,r19,-1
 8010710:	103ff51e 	bne	r2,zero,80106e8 <___vfiprintf_internal_r+0x910>
 8010714:	6880004c 	andi	r2,r13,1
 8010718:	1000a726 	beq	r2,zero,80109b8 <___vfiprintf_internal_r+0xbe0>
 801071c:	21003fcc 	andi	r4,r4,255
 8010720:	2100201c 	xori	r4,r4,128
 8010724:	213fe004 	addi	r4,r4,-128
 8010728:	20800c18 	cmpnei	r2,r4,48
 801072c:	1000a226 	beq	r2,zero,80109b8 <___vfiprintf_internal_r+0xbe0>
 8010730:	297fff84 	addi	r5,r5,-2
 8010734:	00800c04 	movi	r2,48
 8010738:	98bfffc5 	stb	r2,-1(r19)
 801073c:	9179c83a 	sub	fp,r18,r5
 8010740:	db400015 	stw	r13,0(sp)
 8010744:	2827883a 	mov	r19,r5
 8010748:	003f8b06 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 801074c:	a0800007 	ldb	r2,0(r20)
 8010750:	6b402014 	ori	r13,r13,128
 8010754:	003de106 	br	800fedc <___vfiprintf_internal_r+0x104>
 8010758:	a0800007 	ldb	r2,0(r20)
 801075c:	a0c00044 	addi	r3,r20,1
 8010760:	11000aa0 	cmpeqi	r4,r2,42
 8010764:	2002551e 	bne	r4,zero,80110bc <___vfiprintf_internal_r+0x12e4>
 8010768:	113ff404 	addi	r4,r2,-48
 801076c:	21c002b0 	cmpltui	r7,r4,10
 8010770:	1829883a 	mov	r20,r3
 8010774:	0011883a 	mov	r8,zero
 8010778:	383dd926 	beq	r7,zero,800fee0 <___vfiprintf_internal_r+0x108>
 801077c:	400690ba 	slli	r3,r8,2
 8010780:	a0800007 	ldb	r2,0(r20)
 8010784:	a5000044 	addi	r20,r20,1
 8010788:	1a11883a 	add	r8,r3,r8
 801078c:	4211883a 	add	r8,r8,r8
 8010790:	4111883a 	add	r8,r8,r4
 8010794:	113ff404 	addi	r4,r2,-48
 8010798:	20c002b0 	cmpltui	r3,r4,10
 801079c:	183ff71e 	bne	r3,zero,801077c <___vfiprintf_internal_r+0x9a4>
 80107a0:	003dcf06 	br	800fee0 <___vfiprintf_internal_r+0x108>
 80107a4:	a0800003 	ldbu	r2,0(r20)
 80107a8:	10803fcc 	andi	r2,r2,255
 80107ac:	1080201c 	xori	r2,r2,128
 80107b0:	6b400114 	ori	r13,r13,4
 80107b4:	10bfe004 	addi	r2,r2,-128
 80107b8:	003dc806 	br	800fedc <___vfiprintf_internal_r+0x104>
 80107bc:	a0800007 	ldb	r2,0(r20)
 80107c0:	01400044 	movi	r5,1
 80107c4:	01800ac4 	movi	r6,43
 80107c8:	003dc406 	br	800fedc <___vfiprintf_internal_r+0x104>
 80107cc:	d8c00417 	ldw	r3,16(sp)
 80107d0:	a0800003 	ldbu	r2,0(r20)
 80107d4:	1c400017 	ldw	r17,0(r3)
 80107d8:	18c00104 	addi	r3,r3,4
 80107dc:	8801b916 	blt	r17,zero,8010ec4 <___vfiprintf_internal_r+0x10ec>
 80107e0:	d8c00415 	stw	r3,16(sp)
 80107e4:	10803fcc 	andi	r2,r2,255
 80107e8:	1080201c 	xori	r2,r2,128
 80107ec:	10bfe004 	addi	r2,r2,-128
 80107f0:	003dba06 	br	800fedc <___vfiprintf_internal_r+0x104>
 80107f4:	a0800007 	ldb	r2,0(r20)
 80107f8:	6b400054 	ori	r13,r13,1
 80107fc:	003db706 	br	800fedc <___vfiprintf_internal_r+0x104>
 8010800:	30c03fcc 	andi	r3,r6,255
 8010804:	18c0201c 	xori	r3,r3,128
 8010808:	18ffe004 	addi	r3,r3,-128
 801080c:	a0800003 	ldbu	r2,0(r20)
 8010810:	183ff41e 	bne	r3,zero,80107e4 <___vfiprintf_internal_r+0xa0c>
 8010814:	10803fcc 	andi	r2,r2,255
 8010818:	1080201c 	xori	r2,r2,128
 801081c:	01400044 	movi	r5,1
 8010820:	01800804 	movi	r6,32
 8010824:	10bfe004 	addi	r2,r2,-128
 8010828:	003dac06 	br	800fedc <___vfiprintf_internal_r+0x104>
 801082c:	29403fcc 	andi	r5,r5,255
 8010830:	28020a1e 	bne	r5,zero,801105c <___vfiprintf_internal_r+0x1284>
 8010834:	00c20074 	movhi	r3,2049
 8010838:	18df5d04 	addi	r3,r3,32116
 801083c:	d8c00515 	stw	r3,20(sp)
 8010840:	68c0080c 	andi	r3,r13,32
 8010844:	183f7d1e 	bne	r3,zero,801063c <___vfiprintf_internal_r+0x864>
 8010848:	d9400417 	ldw	r5,16(sp)
 801084c:	68c0040c 	andi	r3,r13,16
 8010850:	29000104 	addi	r4,r5,4
 8010854:	18018b1e 	bne	r3,zero,8010e84 <___vfiprintf_internal_r+0x10ac>
 8010858:	68c0100c 	andi	r3,r13,64
 801085c:	1801da26 	beq	r3,zero,8010fc8 <___vfiprintf_internal_r+0x11f0>
 8010860:	d8c00417 	ldw	r3,16(sp)
 8010864:	0039883a 	mov	fp,zero
 8010868:	d9000415 	stw	r4,16(sp)
 801086c:	1dc0000b 	ldhu	r23,0(r3)
 8010870:	003f7706 	br	8010650 <___vfiprintf_internal_r+0x878>
 8010874:	d8800417 	ldw	r2,16(sp)
 8010878:	d8000945 	stb	zero,37(sp)
 801087c:	14c00017 	ldw	r19,0(r2)
 8010880:	10c00104 	addi	r3,r2,4
 8010884:	9801bb26 	beq	r19,zero,8010f74 <___vfiprintf_internal_r+0x119c>
 8010888:	40bfffe0 	cmpeqi	r2,r8,-1
 801088c:	1001901e 	bne	r2,zero,8010ed0 <___vfiprintf_internal_r+0x10f8>
 8010890:	400d883a 	mov	r6,r8
 8010894:	000b883a 	mov	r5,zero
 8010898:	9809883a 	mov	r4,r19
 801089c:	d8c00315 	stw	r3,12(sp)
 80108a0:	db400215 	stw	r13,8(sp)
 80108a4:	da000015 	stw	r8,0(sp)
 80108a8:	800defc0 	call	800defc <memchr>
 80108ac:	da000017 	ldw	r8,0(sp)
 80108b0:	db400217 	ldw	r13,8(sp)
 80108b4:	d8c00317 	ldw	r3,12(sp)
 80108b8:	1001e426 	beq	r2,zero,801104c <___vfiprintf_internal_r+0x1274>
 80108bc:	14f9c83a 	sub	fp,r2,r19
 80108c0:	e02f883a 	mov	r23,fp
 80108c4:	d8c00415 	stw	r3,16(sp)
 80108c8:	003dfc06 	br	80100bc <___vfiprintf_internal_r+0x2e4>
 80108cc:	a0800007 	ldb	r2,0(r20)
 80108d0:	6b400814 	ori	r13,r13,32
 80108d4:	003d8106 	br	800fedc <___vfiprintf_internal_r+0x104>
 80108d8:	d8c00417 	ldw	r3,16(sp)
 80108dc:	00800c04 	movi	r2,48
 80108e0:	d8800985 	stb	r2,38(sp)
 80108e4:	00801e04 	movi	r2,120
 80108e8:	01020074 	movhi	r4,2049
 80108ec:	d88009c5 	stb	r2,39(sp)
 80108f0:	18800104 	addi	r2,r3,4
 80108f4:	d8800415 	stw	r2,16(sp)
 80108f8:	209f5d04 	addi	r2,r4,32116
 80108fc:	d8800515 	stw	r2,20(sp)
 8010900:	1dc00017 	ldw	r23,0(r3)
 8010904:	0039883a 	mov	fp,zero
 8010908:	6b400094 	ori	r13,r13,2
 801090c:	00800084 	movi	r2,2
 8010910:	003e7a06 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010914:	9027883a 	mov	r19,r18
 8010918:	b809883a 	mov	r4,r23
 801091c:	e00b883a 	mov	r5,fp
 8010920:	01800284 	movi	r6,10
 8010924:	000f883a 	mov	r7,zero
 8010928:	db800315 	stw	r14,12(sp)
 801092c:	da000215 	stw	r8,8(sp)
 8010930:	db400015 	stw	r13,0(sp)
 8010934:	80126200 	call	8012620 <__umoddi3>
 8010938:	10800c04 	addi	r2,r2,48
 801093c:	b809883a 	mov	r4,r23
 8010940:	e00b883a 	mov	r5,fp
 8010944:	98bfffc5 	stb	r2,-1(r19)
 8010948:	01800284 	movi	r6,10
 801094c:	000f883a 	mov	r7,zero
 8010950:	80120040 	call	8012004 <__udivdi3>
 8010954:	e009883a 	mov	r4,fp
 8010958:	b80b883a 	mov	r5,r23
 801095c:	db400017 	ldw	r13,0(sp)
 8010960:	da000217 	ldw	r8,8(sp)
 8010964:	db800317 	ldw	r14,12(sp)
 8010968:	9cffffc4 	addi	r19,r19,-1
 801096c:	102f883a 	mov	r23,r2
 8010970:	1839883a 	mov	fp,r3
 8010974:	203fe81e 	bne	r4,zero,8010918 <___vfiprintf_internal_r+0xb40>
 8010978:	294002a8 	cmpgeui	r5,r5,10
 801097c:	283fe61e 	bne	r5,zero,8010918 <___vfiprintf_internal_r+0xb40>
 8010980:	94f9c83a 	sub	fp,r18,r19
 8010984:	003efc06 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 8010988:	d9000517 	ldw	r4,20(sp)
 801098c:	b88003cc 	andi	r2,r23,15
 8010990:	e006973a 	slli	r3,fp,28
 8010994:	b82ed13a 	srli	r23,r23,4
 8010998:	2085883a 	add	r2,r4,r2
 801099c:	10800003 	ldbu	r2,0(r2)
 80109a0:	e038d13a 	srli	fp,fp,4
 80109a4:	1deeb03a 	or	r23,r3,r23
 80109a8:	98bfffc5 	stb	r2,-1(r19)
 80109ac:	bf04b03a 	or	r2,r23,fp
 80109b0:	9cffffc4 	addi	r19,r19,-1
 80109b4:	103ff41e 	bne	r2,zero,8010988 <___vfiprintf_internal_r+0xbb0>
 80109b8:	94f9c83a 	sub	fp,r18,r19
 80109bc:	db400015 	stw	r13,0(sp)
 80109c0:	003eed06 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 80109c4:	01400044 	movi	r5,1
 80109c8:	0009883a 	mov	r4,zero
 80109cc:	900d883a 	mov	r6,r18
 80109d0:	003e9e06 	br	801044c <___vfiprintf_internal_r+0x674>
 80109d4:	8dc7c83a 	sub	r3,r17,r23
 80109d8:	00fdf20e 	bge	zero,r3,80101a4 <___vfiprintf_internal_r+0x3cc>
 80109dc:	19c00450 	cmplti	r7,r3,17
 80109e0:	3801ae1e 	bne	r7,zero,801109c <___vfiprintf_internal_r+0x12c4>
 80109e4:	01c20074 	movhi	r7,2049
 80109e8:	39dfdf04 	addi	r7,r7,32636
 80109ec:	03400404 	movi	r13,16
 80109f0:	00000606 	br	8010a0c <___vfiprintf_internal_r+0xc34>
 80109f4:	23800084 	addi	r14,r4,2
 80109f8:	84000204 	addi	r16,r16,8
 80109fc:	2809883a 	mov	r4,r5
 8010a00:	18fffc04 	addi	r3,r3,-16
 8010a04:	19400448 	cmpgei	r5,r3,17
 8010a08:	28001c26 	beq	r5,zero,8010a7c <___vfiprintf_internal_r+0xca4>
 8010a0c:	21400044 	addi	r5,r4,1
 8010a10:	10800404 	addi	r2,r2,16
 8010a14:	81c00015 	stw	r7,0(r16)
 8010a18:	83400115 	stw	r13,4(r16)
 8010a1c:	d8800c15 	stw	r2,48(sp)
 8010a20:	d9400b15 	stw	r5,44(sp)
 8010a24:	29800208 	cmpgei	r6,r5,8
 8010a28:	303ff226 	beq	r6,zero,80109f4 <___vfiprintf_internal_r+0xc1c>
 8010a2c:	d9800a04 	addi	r6,sp,40
 8010a30:	a80b883a 	mov	r5,r21
 8010a34:	b009883a 	mov	r4,r22
 8010a38:	10006326 	beq	r2,zero,8010bc8 <___vfiprintf_internal_r+0xdf0>
 8010a3c:	d9c00615 	stw	r7,24(sp)
 8010a40:	d8c00315 	stw	r3,12(sp)
 8010a44:	da000215 	stw	r8,8(sp)
 8010a48:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010a4c:	103df71e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010a50:	d8c00317 	ldw	r3,12(sp)
 8010a54:	d9000b17 	ldw	r4,44(sp)
 8010a58:	d8800c17 	ldw	r2,48(sp)
 8010a5c:	18fffc04 	addi	r3,r3,-16
 8010a60:	19400448 	cmpgei	r5,r3,17
 8010a64:	d9c00617 	ldw	r7,24(sp)
 8010a68:	da000217 	ldw	r8,8(sp)
 8010a6c:	9021883a 	mov	r16,r18
 8010a70:	23800044 	addi	r14,r4,1
 8010a74:	03400404 	movi	r13,16
 8010a78:	283fe41e 	bne	r5,zero,8010a0c <___vfiprintf_internal_r+0xc34>
 8010a7c:	83400204 	addi	r13,r16,8
 8010a80:	10c5883a 	add	r2,r2,r3
 8010a84:	80c00115 	stw	r3,4(r16)
 8010a88:	81c00015 	stw	r7,0(r16)
 8010a8c:	d8800c15 	stw	r2,48(sp)
 8010a90:	db800b15 	stw	r14,44(sp)
 8010a94:	70c00208 	cmpgei	r3,r14,8
 8010a98:	1800df26 	beq	r3,zero,8010e18 <___vfiprintf_internal_r+0x1040>
 8010a9c:	10015826 	beq	r2,zero,8011000 <___vfiprintf_internal_r+0x1228>
 8010aa0:	d9800a04 	addi	r6,sp,40
 8010aa4:	a80b883a 	mov	r5,r21
 8010aa8:	b009883a 	mov	r4,r22
 8010aac:	da000215 	stw	r8,8(sp)
 8010ab0:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010ab4:	103ddd1e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010ab8:	da000217 	ldw	r8,8(sp)
 8010abc:	d9000b17 	ldw	r4,44(sp)
 8010ac0:	d8800c17 	ldw	r2,48(sp)
 8010ac4:	4711c83a 	sub	r8,r8,fp
 8010ac8:	d9801904 	addi	r6,sp,100
 8010acc:	21400044 	addi	r5,r4,1
 8010ad0:	9021883a 	mov	r16,r18
 8010ad4:	023db50e 	bge	zero,r8,80101ac <___vfiprintf_internal_r+0x3d4>
 8010ad8:	40c00450 	cmplti	r3,r8,17
 8010adc:	01c20074 	movhi	r7,2049
 8010ae0:	1801441e 	bne	r3,zero,8010ff4 <___vfiprintf_internal_r+0x121c>
 8010ae4:	39dfdf04 	addi	r7,r7,32636
 8010ae8:	03400404 	movi	r13,16
 8010aec:	00000606 	br	8010b08 <___vfiprintf_internal_r+0xd30>
 8010af0:	21400084 	addi	r5,r4,2
 8010af4:	84000204 	addi	r16,r16,8
 8010af8:	1809883a 	mov	r4,r3
 8010afc:	423ffc04 	addi	r8,r8,-16
 8010b00:	40c00448 	cmpgei	r3,r8,17
 8010b04:	18001a26 	beq	r3,zero,8010b70 <___vfiprintf_internal_r+0xd98>
 8010b08:	20c00044 	addi	r3,r4,1
 8010b0c:	10800404 	addi	r2,r2,16
 8010b10:	81c00015 	stw	r7,0(r16)
 8010b14:	83400115 	stw	r13,4(r16)
 8010b18:	d8800c15 	stw	r2,48(sp)
 8010b1c:	d8c00b15 	stw	r3,44(sp)
 8010b20:	19400208 	cmpgei	r5,r3,8
 8010b24:	283ff226 	beq	r5,zero,8010af0 <___vfiprintf_internal_r+0xd18>
 8010b28:	d9800a04 	addi	r6,sp,40
 8010b2c:	a80b883a 	mov	r5,r21
 8010b30:	b009883a 	mov	r4,r22
 8010b34:	10001a26 	beq	r2,zero,8010ba0 <___vfiprintf_internal_r+0xdc8>
 8010b38:	d9c00315 	stw	r7,12(sp)
 8010b3c:	da000215 	stw	r8,8(sp)
 8010b40:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010b44:	103db91e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010b48:	da000217 	ldw	r8,8(sp)
 8010b4c:	d9000b17 	ldw	r4,44(sp)
 8010b50:	d8800c17 	ldw	r2,48(sp)
 8010b54:	423ffc04 	addi	r8,r8,-16
 8010b58:	40c00448 	cmpgei	r3,r8,17
 8010b5c:	d9c00317 	ldw	r7,12(sp)
 8010b60:	9021883a 	mov	r16,r18
 8010b64:	21400044 	addi	r5,r4,1
 8010b68:	03400404 	movi	r13,16
 8010b6c:	183fe61e 	bne	r3,zero,8010b08 <___vfiprintf_internal_r+0xd30>
 8010b70:	81000204 	addi	r4,r16,8
 8010b74:	1205883a 	add	r2,r2,r8
 8010b78:	81c00015 	stw	r7,0(r16)
 8010b7c:	82000115 	stw	r8,4(r16)
 8010b80:	d8800c15 	stw	r2,48(sp)
 8010b84:	d9400b15 	stw	r5,44(sp)
 8010b88:	28c00208 	cmpgei	r3,r5,8
 8010b8c:	1800721e 	bne	r3,zero,8010d58 <___vfiprintf_internal_r+0xf80>
 8010b90:	29400044 	addi	r5,r5,1
 8010b94:	21800204 	addi	r6,r4,8
 8010b98:	2021883a 	mov	r16,r4
 8010b9c:	003d8306 	br	80101ac <___vfiprintf_internal_r+0x3d4>
 8010ba0:	01400044 	movi	r5,1
 8010ba4:	0009883a 	mov	r4,zero
 8010ba8:	9021883a 	mov	r16,r18
 8010bac:	003fd306 	br	8010afc <___vfiprintf_internal_r+0xd24>
 8010bb0:	d9800a04 	addi	r6,sp,40
 8010bb4:	a80b883a 	mov	r5,r21
 8010bb8:	b009883a 	mov	r4,r22
 8010bbc:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010bc0:	103d9426 	beq	r2,zero,8010214 <___vfiprintf_internal_r+0x43c>
 8010bc4:	003d9906 	br	801022c <___vfiprintf_internal_r+0x454>
 8010bc8:	03800044 	movi	r14,1
 8010bcc:	0009883a 	mov	r4,zero
 8010bd0:	9021883a 	mov	r16,r18
 8010bd4:	003f8a06 	br	8010a00 <___vfiprintf_internal_r+0xc28>
 8010bd8:	10006e26 	beq	r2,zero,8010d94 <___vfiprintf_internal_r+0xfbc>
 8010bdc:	d9800a04 	addi	r6,sp,40
 8010be0:	a80b883a 	mov	r5,r21
 8010be4:	b009883a 	mov	r4,r22
 8010be8:	da000615 	stw	r8,24(sp)
 8010bec:	db400315 	stw	r13,12(sp)
 8010bf0:	db800215 	stw	r14,8(sp)
 8010bf4:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010bf8:	103d8c1e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010bfc:	d9000b17 	ldw	r4,44(sp)
 8010c00:	d8800c17 	ldw	r2,48(sp)
 8010c04:	da000617 	ldw	r8,24(sp)
 8010c08:	db400317 	ldw	r13,12(sp)
 8010c0c:	db800217 	ldw	r14,8(sp)
 8010c10:	d9801904 	addi	r6,sp,100
 8010c14:	21400044 	addi	r5,r4,1
 8010c18:	9021883a 	mov	r16,r18
 8010c1c:	003d4606 	br	8010138 <___vfiprintf_internal_r+0x360>
 8010c20:	d8800984 	addi	r2,sp,38
 8010c24:	d8801715 	stw	r2,92(sp)
 8010c28:	00800084 	movi	r2,2
 8010c2c:	d8801815 	stw	r2,96(sp)
 8010c30:	d9801904 	addi	r6,sp,100
 8010c34:	01400044 	movi	r5,1
 8010c38:	3021883a 	mov	r16,r6
 8010c3c:	2809883a 	mov	r4,r5
 8010c40:	21400044 	addi	r5,r4,1
 8010c44:	81800204 	addi	r6,r16,8
 8010c48:	003d5406 	br	801019c <___vfiprintf_internal_r+0x3c4>
 8010c4c:	db400017 	ldw	r13,0(sp)
 8010c50:	003ea006 	br	80106d4 <___vfiprintf_internal_r+0x8fc>
 8010c54:	19400450 	cmplti	r5,r3,17
 8010c58:	01c20074 	movhi	r7,2049
 8010c5c:	2801011e 	bne	r5,zero,8011064 <___vfiprintf_internal_r+0x128c>
 8010c60:	39dfe304 	addi	r7,r7,32652
 8010c64:	03c00404 	movi	r15,16
 8010c68:	00000706 	br	8010c88 <___vfiprintf_internal_r+0xeb0>
 8010c6c:	27c00084 	addi	ra,r4,2
 8010c70:	84000204 	addi	r16,r16,8
 8010c74:	3009883a 	mov	r4,r6
 8010c78:	18fffc04 	addi	r3,r3,-16
 8010c7c:	19400448 	cmpgei	r5,r3,17
 8010c80:	28002026 	beq	r5,zero,8010d04 <___vfiprintf_internal_r+0xf2c>
 8010c84:	21800044 	addi	r6,r4,1
 8010c88:	10800404 	addi	r2,r2,16
 8010c8c:	81c00015 	stw	r7,0(r16)
 8010c90:	83c00115 	stw	r15,4(r16)
 8010c94:	d8800c15 	stw	r2,48(sp)
 8010c98:	d9800b15 	stw	r6,44(sp)
 8010c9c:	31400208 	cmpgei	r5,r6,8
 8010ca0:	283ff226 	beq	r5,zero,8010c6c <___vfiprintf_internal_r+0xe94>
 8010ca4:	d9800a04 	addi	r6,sp,40
 8010ca8:	a80b883a 	mov	r5,r21
 8010cac:	b009883a 	mov	r4,r22
 8010cb0:	10001f26 	beq	r2,zero,8010d30 <___vfiprintf_internal_r+0xf58>
 8010cb4:	d9c00815 	stw	r7,32(sp)
 8010cb8:	d8c00715 	stw	r3,28(sp)
 8010cbc:	da000615 	stw	r8,24(sp)
 8010cc0:	db400315 	stw	r13,12(sp)
 8010cc4:	db800215 	stw	r14,8(sp)
 8010cc8:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010ccc:	103d571e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010cd0:	d8c00717 	ldw	r3,28(sp)
 8010cd4:	d9000b17 	ldw	r4,44(sp)
 8010cd8:	d8800c17 	ldw	r2,48(sp)
 8010cdc:	18fffc04 	addi	r3,r3,-16
 8010ce0:	19400448 	cmpgei	r5,r3,17
 8010ce4:	d9c00817 	ldw	r7,32(sp)
 8010ce8:	da000617 	ldw	r8,24(sp)
 8010cec:	db400317 	ldw	r13,12(sp)
 8010cf0:	db800217 	ldw	r14,8(sp)
 8010cf4:	9021883a 	mov	r16,r18
 8010cf8:	27c00044 	addi	ra,r4,1
 8010cfc:	03c00404 	movi	r15,16
 8010d00:	283fe01e 	bne	r5,zero,8010c84 <___vfiprintf_internal_r+0xeac>
 8010d04:	10c5883a 	add	r2,r2,r3
 8010d08:	80c00115 	stw	r3,4(r16)
 8010d0c:	81c00015 	stw	r7,0(r16)
 8010d10:	d8800c15 	stw	r2,48(sp)
 8010d14:	dfc00b15 	stw	ra,44(sp)
 8010d18:	f8c00208 	cmpgei	r3,ra,8
 8010d1c:	18002b1e 	bne	r3,zero,8010dcc <___vfiprintf_internal_r+0xff4>
 8010d20:	84000204 	addi	r16,r16,8
 8010d24:	f9400044 	addi	r5,ra,1
 8010d28:	f809883a 	mov	r4,ra
 8010d2c:	003cf206 	br	80100f8 <___vfiprintf_internal_r+0x320>
 8010d30:	0009883a 	mov	r4,zero
 8010d34:	07c00044 	movi	ra,1
 8010d38:	9021883a 	mov	r16,r18
 8010d3c:	003fce06 	br	8010c78 <___vfiprintf_internal_r+0xea0>
 8010d40:	8dc0010e 	bge	r17,r23,8010d48 <___vfiprintf_internal_r+0xf70>
 8010d44:	b823883a 	mov	r17,r23
 8010d48:	d8800117 	ldw	r2,4(sp)
 8010d4c:	1445883a 	add	r2,r2,r17
 8010d50:	d8800115 	stw	r2,4(sp)
 8010d54:	003d2f06 	br	8010214 <___vfiprintf_internal_r+0x43c>
 8010d58:	10007326 	beq	r2,zero,8010f28 <___vfiprintf_internal_r+0x1150>
 8010d5c:	d9800a04 	addi	r6,sp,40
 8010d60:	a80b883a 	mov	r5,r21
 8010d64:	b009883a 	mov	r4,r22
 8010d68:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010d6c:	103d2f1e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010d70:	d9400b17 	ldw	r5,44(sp)
 8010d74:	d8800c17 	ldw	r2,48(sp)
 8010d78:	d9801904 	addi	r6,sp,100
 8010d7c:	29400044 	addi	r5,r5,1
 8010d80:	9021883a 	mov	r16,r18
 8010d84:	003d0906 	br	80101ac <___vfiprintf_internal_r+0x3d4>
 8010d88:	d8000b15 	stw	zero,44(sp)
 8010d8c:	9021883a 	mov	r16,r18
 8010d90:	003d7806 	br	8010374 <___vfiprintf_internal_r+0x59c>
 8010d94:	7000441e 	bne	r14,zero,8010ea8 <___vfiprintf_internal_r+0x10d0>
 8010d98:	0009883a 	mov	r4,zero
 8010d9c:	d9801904 	addi	r6,sp,100
 8010da0:	01400044 	movi	r5,1
 8010da4:	9021883a 	mov	r16,r18
 8010da8:	003cfc06 	br	801019c <___vfiprintf_internal_r+0x3c4>
 8010dac:	d9801904 	addi	r6,sp,100
 8010db0:	01400044 	movi	r5,1
 8010db4:	0009883a 	mov	r4,zero
 8010db8:	9021883a 	mov	r16,r18
 8010dbc:	003cf706 	br	801019c <___vfiprintf_internal_r+0x3c4>
 8010dc0:	0039883a 	mov	fp,zero
 8010dc4:	9027883a 	mov	r19,r18
 8010dc8:	003deb06 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 8010dcc:	10004a26 	beq	r2,zero,8010ef8 <___vfiprintf_internal_r+0x1120>
 8010dd0:	d9800a04 	addi	r6,sp,40
 8010dd4:	a80b883a 	mov	r5,r21
 8010dd8:	b009883a 	mov	r4,r22
 8010ddc:	da000615 	stw	r8,24(sp)
 8010de0:	db400315 	stw	r13,12(sp)
 8010de4:	db800215 	stw	r14,8(sp)
 8010de8:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8010dec:	103d0f1e 	bne	r2,zero,801022c <___vfiprintf_internal_r+0x454>
 8010df0:	d9000b17 	ldw	r4,44(sp)
 8010df4:	d8800c17 	ldw	r2,48(sp)
 8010df8:	da000617 	ldw	r8,24(sp)
 8010dfc:	db400317 	ldw	r13,12(sp)
 8010e00:	db800217 	ldw	r14,8(sp)
 8010e04:	9021883a 	mov	r16,r18
 8010e08:	21400044 	addi	r5,r4,1
 8010e0c:	003cba06 	br	80100f8 <___vfiprintf_internal_r+0x320>
 8010e10:	9027883a 	mov	r19,r18
 8010e14:	003dd806 	br	8010578 <___vfiprintf_internal_r+0x7a0>
 8010e18:	71400044 	addi	r5,r14,1
 8010e1c:	69800204 	addi	r6,r13,8
 8010e20:	7009883a 	mov	r4,r14
 8010e24:	6821883a 	mov	r16,r13
 8010e28:	003cde06 	br	80101a4 <___vfiprintf_internal_r+0x3cc>
 8010e2c:	00c00c04 	movi	r3,48
 8010e30:	d88009c5 	stb	r2,39(sp)
 8010e34:	d8c00985 	stb	r3,38(sp)
 8010e38:	6b400094 	ori	r13,r13,2
 8010e3c:	00800084 	movi	r2,2
 8010e40:	003d2e06 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010e44:	25c00017 	ldw	r23,0(r4)
 8010e48:	0039883a 	mov	fp,zero
 8010e4c:	d8c00415 	stw	r3,16(sp)
 8010e50:	0005883a 	mov	r2,zero
 8010e54:	003d2906 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010e58:	d9400117 	ldw	r5,4(sp)
 8010e5c:	d9000415 	stw	r4,16(sp)
 8010e60:	2805d7fa 	srai	r2,r5,31
 8010e64:	19400015 	stw	r5,0(r3)
 8010e68:	18800115 	stw	r2,4(r3)
 8010e6c:	003c0306 	br	800fe7c <___vfiprintf_internal_r+0xa4>
 8010e70:	25c00017 	ldw	r23,0(r4)
 8010e74:	d8c00415 	stw	r3,16(sp)
 8010e78:	b839d7fa 	srai	fp,r23,31
 8010e7c:	e005883a 	mov	r2,fp
 8010e80:	003da706 	br	8010520 <___vfiprintf_internal_r+0x748>
 8010e84:	2dc00017 	ldw	r23,0(r5)
 8010e88:	0039883a 	mov	fp,zero
 8010e8c:	d9000415 	stw	r4,16(sp)
 8010e90:	003def06 	br	8010650 <___vfiprintf_internal_r+0x878>
 8010e94:	25c00017 	ldw	r23,0(r4)
 8010e98:	0039883a 	mov	fp,zero
 8010e9c:	d8c00415 	stw	r3,16(sp)
 8010ea0:	00800044 	movi	r2,1
 8010ea4:	003d1506 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010ea8:	d8800984 	addi	r2,sp,38
 8010eac:	d8801715 	stw	r2,92(sp)
 8010eb0:	00800084 	movi	r2,2
 8010eb4:	d8801815 	stw	r2,96(sp)
 8010eb8:	dc001904 	addi	r16,sp,100
 8010ebc:	01000044 	movi	r4,1
 8010ec0:	003f5f06 	br	8010c40 <___vfiprintf_internal_r+0xe68>
 8010ec4:	0463c83a 	sub	r17,zero,r17
 8010ec8:	d8c00415 	stw	r3,16(sp)
 8010ecc:	003e3606 	br	80107a8 <___vfiprintf_internal_r+0x9d0>
 8010ed0:	9809883a 	mov	r4,r19
 8010ed4:	d8c00215 	stw	r3,8(sp)
 8010ed8:	db400015 	stw	r13,0(sp)
 8010edc:	80087d00 	call	80087d0 <strlen>
 8010ee0:	d8c00217 	ldw	r3,8(sp)
 8010ee4:	db400017 	ldw	r13,0(sp)
 8010ee8:	1039883a 	mov	fp,r2
 8010eec:	102f883a 	mov	r23,r2
 8010ef0:	d8c00415 	stw	r3,16(sp)
 8010ef4:	003c7106 	br	80100bc <___vfiprintf_internal_r+0x2e4>
 8010ef8:	d8c00947 	ldb	r3,37(sp)
 8010efc:	1800451e 	bne	r3,zero,8011014 <___vfiprintf_internal_r+0x123c>
 8010f00:	703f471e 	bne	r14,zero,8010c20 <___vfiprintf_internal_r+0xe48>
 8010f04:	0009883a 	mov	r4,zero
 8010f08:	d9801904 	addi	r6,sp,100
 8010f0c:	01400044 	movi	r5,1
 8010f10:	9021883a 	mov	r16,r18
 8010f14:	003ca306 	br	80101a4 <___vfiprintf_internal_r+0x3cc>
 8010f18:	d8800117 	ldw	r2,4(sp)
 8010f1c:	18800015 	stw	r2,0(r3)
 8010f20:	d9000415 	stw	r4,16(sp)
 8010f24:	003bd506 	br	800fe7c <___vfiprintf_internal_r+0xa4>
 8010f28:	00c00044 	movi	r3,1
 8010f2c:	e005883a 	mov	r2,fp
 8010f30:	dcc01715 	stw	r19,92(sp)
 8010f34:	df001815 	stw	fp,96(sp)
 8010f38:	df000c15 	stw	fp,48(sp)
 8010f3c:	d8c00b15 	stw	r3,44(sp)
 8010f40:	d9801904 	addi	r6,sp,100
 8010f44:	003ca806 	br	80101e8 <___vfiprintf_internal_r+0x410>
 8010f48:	10c00060 	cmpeqi	r3,r2,1
 8010f4c:	db400017 	ldw	r13,0(sp)
 8010f50:	183de226 	beq	r3,zero,80106dc <___vfiprintf_internal_r+0x904>
 8010f54:	003d8306 	br	8010564 <___vfiprintf_internal_r+0x78c>
 8010f58:	a0800043 	ldbu	r2,1(r20)
 8010f5c:	6b400814 	ori	r13,r13,32
 8010f60:	a5000044 	addi	r20,r20,1
 8010f64:	10803fcc 	andi	r2,r2,255
 8010f68:	1080201c 	xori	r2,r2,128
 8010f6c:	10bfe004 	addi	r2,r2,-128
 8010f70:	003bda06 	br	800fedc <___vfiprintf_internal_r+0x104>
 8010f74:	408001f0 	cmpltui	r2,r8,7
 8010f78:	4039883a 	mov	fp,r8
 8010f7c:	1000011e 	bne	r2,zero,8010f84 <___vfiprintf_internal_r+0x11ac>
 8010f80:	07000184 	movi	fp,6
 8010f84:	04c20074 	movhi	r19,2049
 8010f88:	e02f883a 	mov	r23,fp
 8010f8c:	d8c00415 	stw	r3,16(sp)
 8010f90:	9cdf6204 	addi	r19,r19,32136
 8010f94:	003c4906 	br	80100bc <___vfiprintf_internal_r+0x2e4>
 8010f98:	d8800417 	ldw	r2,16(sp)
 8010f9c:	0039883a 	mov	fp,zero
 8010fa0:	d8c00415 	stw	r3,16(sp)
 8010fa4:	15c00017 	ldw	r23,0(r2)
 8010fa8:	0005883a 	mov	r2,zero
 8010fac:	003cd306 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010fb0:	d8800417 	ldw	r2,16(sp)
 8010fb4:	0039883a 	mov	fp,zero
 8010fb8:	d8c00415 	stw	r3,16(sp)
 8010fbc:	15c00017 	ldw	r23,0(r2)
 8010fc0:	00800044 	movi	r2,1
 8010fc4:	003ccd06 	br	80102fc <___vfiprintf_internal_r+0x524>
 8010fc8:	d8c00417 	ldw	r3,16(sp)
 8010fcc:	0039883a 	mov	fp,zero
 8010fd0:	d9000415 	stw	r4,16(sp)
 8010fd4:	1dc00017 	ldw	r23,0(r3)
 8010fd8:	003d9d06 	br	8010650 <___vfiprintf_internal_r+0x878>
 8010fdc:	d8800417 	ldw	r2,16(sp)
 8010fe0:	d8c00415 	stw	r3,16(sp)
 8010fe4:	15c00017 	ldw	r23,0(r2)
 8010fe8:	b839d7fa 	srai	fp,r23,31
 8010fec:	e005883a 	mov	r2,fp
 8010ff0:	003d4b06 	br	8010520 <___vfiprintf_internal_r+0x748>
 8010ff4:	3009883a 	mov	r4,r6
 8010ff8:	39dfdf04 	addi	r7,r7,32636
 8010ffc:	003edd06 	br	8010b74 <___vfiprintf_internal_r+0xd9c>
 8011000:	d9801904 	addi	r6,sp,100
 8011004:	01400044 	movi	r5,1
 8011008:	0009883a 	mov	r4,zero
 801100c:	9021883a 	mov	r16,r18
 8011010:	003c6406 	br	80101a4 <___vfiprintf_internal_r+0x3cc>
 8011014:	d8800944 	addi	r2,sp,37
 8011018:	d8801715 	stw	r2,92(sp)
 801101c:	00800044 	movi	r2,1
 8011020:	d8801815 	stw	r2,96(sp)
 8011024:	d9801904 	addi	r6,sp,100
 8011028:	01400044 	movi	r5,1
 801102c:	003c3e06 	br	8010128 <___vfiprintf_internal_r+0x350>
 8011030:	d9800945 	stb	r6,37(sp)
 8011034:	003c1b06 	br	80100a4 <___vfiprintf_internal_r+0x2cc>
 8011038:	d9800a04 	addi	r6,sp,40
 801103c:	a80b883a 	mov	r5,r21
 8011040:	b009883a 	mov	r4,r22
 8011044:	800fccc0 	call	800fccc <__sprint_r.part.0>
 8011048:	003c7806 	br	801022c <___vfiprintf_internal_r+0x454>
 801104c:	402f883a 	mov	r23,r8
 8011050:	d8c00415 	stw	r3,16(sp)
 8011054:	4039883a 	mov	fp,r8
 8011058:	003c1806 	br	80100bc <___vfiprintf_internal_r+0x2e4>
 801105c:	d9800945 	stb	r6,37(sp)
 8011060:	003df406 	br	8010834 <___vfiprintf_internal_r+0xa5c>
 8011064:	303f883a 	mov	ra,r6
 8011068:	39dfe304 	addi	r7,r7,32652
 801106c:	003f2506 	br	8010d04 <___vfiprintf_internal_r+0xf2c>
 8011070:	d9800945 	stb	r6,37(sp)
 8011074:	003d7e06 	br	8010670 <___vfiprintf_internal_r+0x898>
 8011078:	d9800945 	stb	r6,37(sp)
 801107c:	003d4c06 	br	80105b0 <___vfiprintf_internal_r+0x7d8>
 8011080:	d9800945 	stb	r6,37(sp)
 8011084:	003d1e06 	br	8010500 <___vfiprintf_internal_r+0x728>
 8011088:	d9800945 	stb	r6,37(sp)
 801108c:	003d6606 	br	8010628 <___vfiprintf_internal_r+0x850>
 8011090:	21400044 	addi	r5,r4,1
 8011094:	39dfe304 	addi	r7,r7,32652
 8011098:	003d0606 	br	80104b4 <___vfiprintf_internal_r+0x6dc>
 801109c:	01c20074 	movhi	r7,2049
 80110a0:	301b883a 	mov	r13,r6
 80110a4:	281d883a 	mov	r14,r5
 80110a8:	39dfdf04 	addi	r7,r7,32636
 80110ac:	003e7406 	br	8010a80 <___vfiprintf_internal_r+0xca8>
 80110b0:	00bfffc4 	movi	r2,-1
 80110b4:	d8800115 	stw	r2,4(sp)
 80110b8:	003c5f06 	br	8010238 <___vfiprintf_internal_r+0x460>
 80110bc:	d8800417 	ldw	r2,16(sp)
 80110c0:	12000017 	ldw	r8,0(r2)
 80110c4:	11000104 	addi	r4,r2,4
 80110c8:	4000010e 	bge	r8,zero,80110d0 <___vfiprintf_internal_r+0x12f8>
 80110cc:	023fffc4 	movi	r8,-1
 80110d0:	a0800043 	ldbu	r2,1(r20)
 80110d4:	d9000415 	stw	r4,16(sp)
 80110d8:	1829883a 	mov	r20,r3
 80110dc:	10803fcc 	andi	r2,r2,255
 80110e0:	1080201c 	xori	r2,r2,128
 80110e4:	10bfe004 	addi	r2,r2,-128
 80110e8:	003b7c06 	br	800fedc <___vfiprintf_internal_r+0x104>

080110ec <__vfiprintf_internal>:
 80110ec:	00c200b4 	movhi	r3,2050
 80110f0:	2005883a 	mov	r2,r4
 80110f4:	1927bf17 	ldw	r4,-24836(r3)
 80110f8:	300f883a 	mov	r7,r6
 80110fc:	280d883a 	mov	r6,r5
 8011100:	100b883a 	mov	r5,r2
 8011104:	800fdd81 	jmpi	800fdd8 <___vfiprintf_internal_r>

08011108 <__sbprintf>:
 8011108:	2880030b 	ldhu	r2,12(r5)
 801110c:	2b001917 	ldw	r12,100(r5)
 8011110:	2ac0038b 	ldhu	r11,14(r5)
 8011114:	2a800717 	ldw	r10,28(r5)
 8011118:	2a400917 	ldw	r9,36(r5)
 801111c:	defee204 	addi	sp,sp,-1144
 8011120:	da001a04 	addi	r8,sp,104
 8011124:	00c10004 	movi	r3,1024
 8011128:	dc011a15 	stw	r16,1128(sp)
 801112c:	10bfff4c 	andi	r2,r2,65533
 8011130:	2821883a 	mov	r16,r5
 8011134:	d80b883a 	mov	r5,sp
 8011138:	dc811c15 	stw	r18,1136(sp)
 801113c:	dc411b15 	stw	r17,1132(sp)
 8011140:	dfc11d15 	stw	ra,1140(sp)
 8011144:	2025883a 	mov	r18,r4
 8011148:	d880030d 	sth	r2,12(sp)
 801114c:	db001915 	stw	r12,100(sp)
 8011150:	dac0038d 	sth	r11,14(sp)
 8011154:	da800715 	stw	r10,28(sp)
 8011158:	da400915 	stw	r9,36(sp)
 801115c:	da000015 	stw	r8,0(sp)
 8011160:	da000415 	stw	r8,16(sp)
 8011164:	d8c00215 	stw	r3,8(sp)
 8011168:	d8c00515 	stw	r3,20(sp)
 801116c:	d8000615 	stw	zero,24(sp)
 8011170:	800fdd80 	call	800fdd8 <___vfiprintf_internal_r>
 8011174:	1023883a 	mov	r17,r2
 8011178:	10000d0e 	bge	r2,zero,80111b0 <__sbprintf+0xa8>
 801117c:	d880030b 	ldhu	r2,12(sp)
 8011180:	1080100c 	andi	r2,r2,64
 8011184:	10000326 	beq	r2,zero,8011194 <__sbprintf+0x8c>
 8011188:	8080030b 	ldhu	r2,12(r16)
 801118c:	10801014 	ori	r2,r2,64
 8011190:	8080030d 	sth	r2,12(r16)
 8011194:	8805883a 	mov	r2,r17
 8011198:	dfc11d17 	ldw	ra,1140(sp)
 801119c:	dc811c17 	ldw	r18,1136(sp)
 80111a0:	dc411b17 	ldw	r17,1132(sp)
 80111a4:	dc011a17 	ldw	r16,1128(sp)
 80111a8:	dec11e04 	addi	sp,sp,1144
 80111ac:	f800283a 	ret
 80111b0:	d80b883a 	mov	r5,sp
 80111b4:	9009883a 	mov	r4,r18
 80111b8:	800c7240 	call	800c724 <_fflush_r>
 80111bc:	103fef26 	beq	r2,zero,801117c <__sbprintf+0x74>
 80111c0:	047fffc4 	movi	r17,-1
 80111c4:	003fed06 	br	801117c <__sbprintf+0x74>

080111c8 <__swbuf_r>:
 80111c8:	defffb04 	addi	sp,sp,-20
 80111cc:	dcc00315 	stw	r19,12(sp)
 80111d0:	dc400115 	stw	r17,4(sp)
 80111d4:	dc000015 	stw	r16,0(sp)
 80111d8:	dfc00415 	stw	ra,16(sp)
 80111dc:	dc800215 	stw	r18,8(sp)
 80111e0:	2027883a 	mov	r19,r4
 80111e4:	2823883a 	mov	r17,r5
 80111e8:	3021883a 	mov	r16,r6
 80111ec:	20000226 	beq	r4,zero,80111f8 <__swbuf_r+0x30>
 80111f0:	20800e17 	ldw	r2,56(r4)
 80111f4:	10003e26 	beq	r2,zero,80112f0 <__swbuf_r+0x128>
 80111f8:	80800617 	ldw	r2,24(r16)
 80111fc:	80c0030b 	ldhu	r3,12(r16)
 8011200:	80800215 	stw	r2,8(r16)
 8011204:	1880020c 	andi	r2,r3,8
 8011208:	10001f26 	beq	r2,zero,8011288 <__swbuf_r+0xc0>
 801120c:	80800417 	ldw	r2,16(r16)
 8011210:	10001d26 	beq	r2,zero,8011288 <__swbuf_r+0xc0>
 8011214:	1948000c 	andi	r5,r3,8192
 8011218:	8c803fcc 	andi	r18,r17,255
 801121c:	28002326 	beq	r5,zero,80112ac <__swbuf_r+0xe4>
 8011220:	80c00017 	ldw	r3,0(r16)
 8011224:	81000517 	ldw	r4,20(r16)
 8011228:	1885c83a 	sub	r2,r3,r2
 801122c:	1100290e 	bge	r2,r4,80112d4 <__swbuf_r+0x10c>
 8011230:	10800044 	addi	r2,r2,1
 8011234:	81400217 	ldw	r5,8(r16)
 8011238:	19000044 	addi	r4,r3,1
 801123c:	81000015 	stw	r4,0(r16)
 8011240:	297fffc4 	addi	r5,r5,-1
 8011244:	81400215 	stw	r5,8(r16)
 8011248:	1c400005 	stb	r17,0(r3)
 801124c:	80c00517 	ldw	r3,20(r16)
 8011250:	18802926 	beq	r3,r2,80112f8 <__swbuf_r+0x130>
 8011254:	8080030b 	ldhu	r2,12(r16)
 8011258:	1080004c 	andi	r2,r2,1
 801125c:	10000226 	beq	r2,zero,8011268 <__swbuf_r+0xa0>
 8011260:	90800298 	cmpnei	r2,r18,10
 8011264:	10002426 	beq	r2,zero,80112f8 <__swbuf_r+0x130>
 8011268:	9005883a 	mov	r2,r18
 801126c:	dfc00417 	ldw	ra,16(sp)
 8011270:	dcc00317 	ldw	r19,12(sp)
 8011274:	dc800217 	ldw	r18,8(sp)
 8011278:	dc400117 	ldw	r17,4(sp)
 801127c:	dc000017 	ldw	r16,0(sp)
 8011280:	dec00504 	addi	sp,sp,20
 8011284:	f800283a 	ret
 8011288:	800b883a 	mov	r5,r16
 801128c:	9809883a 	mov	r4,r19
 8011290:	800aa300 	call	800aa30 <__swsetup_r>
 8011294:	10001c1e 	bne	r2,zero,8011308 <__swbuf_r+0x140>
 8011298:	80c0030b 	ldhu	r3,12(r16)
 801129c:	80800417 	ldw	r2,16(r16)
 80112a0:	8c803fcc 	andi	r18,r17,255
 80112a4:	1948000c 	andi	r5,r3,8192
 80112a8:	283fdd1e 	bne	r5,zero,8011220 <__swbuf_r+0x58>
 80112ac:	81001917 	ldw	r4,100(r16)
 80112b0:	18c80014 	ori	r3,r3,8192
 80112b4:	0177ffc4 	movi	r5,-8193
 80112b8:	2148703a 	and	r4,r4,r5
 80112bc:	80c0030d 	sth	r3,12(r16)
 80112c0:	80c00017 	ldw	r3,0(r16)
 80112c4:	81001915 	stw	r4,100(r16)
 80112c8:	81000517 	ldw	r4,20(r16)
 80112cc:	1885c83a 	sub	r2,r3,r2
 80112d0:	113fd716 	blt	r2,r4,8011230 <__swbuf_r+0x68>
 80112d4:	800b883a 	mov	r5,r16
 80112d8:	9809883a 	mov	r4,r19
 80112dc:	800c7240 	call	800c724 <_fflush_r>
 80112e0:	1000091e 	bne	r2,zero,8011308 <__swbuf_r+0x140>
 80112e4:	80c00017 	ldw	r3,0(r16)
 80112e8:	00800044 	movi	r2,1
 80112ec:	003fd106 	br	8011234 <__swbuf_r+0x6c>
 80112f0:	800cab80 	call	800cab8 <__sinit>
 80112f4:	003fc006 	br	80111f8 <__swbuf_r+0x30>
 80112f8:	800b883a 	mov	r5,r16
 80112fc:	9809883a 	mov	r4,r19
 8011300:	800c7240 	call	800c724 <_fflush_r>
 8011304:	103fd826 	beq	r2,zero,8011268 <__swbuf_r+0xa0>
 8011308:	04bfffc4 	movi	r18,-1
 801130c:	003fd606 	br	8011268 <__swbuf_r+0xa0>

08011310 <__swbuf>:
 8011310:	00c200b4 	movhi	r3,2050
 8011314:	2005883a 	mov	r2,r4
 8011318:	1927bf17 	ldw	r4,-24836(r3)
 801131c:	280d883a 	mov	r6,r5
 8011320:	100b883a 	mov	r5,r2
 8011324:	80111c81 	jmpi	80111c8 <__swbuf_r>

08011328 <_write_r>:
 8011328:	2807883a 	mov	r3,r5
 801132c:	defffe04 	addi	sp,sp,-8
 8011330:	dc000015 	stw	r16,0(sp)
 8011334:	300b883a 	mov	r5,r6
 8011338:	008200b4 	movhi	r2,2050
 801133c:	380d883a 	mov	r6,r7
 8011340:	2021883a 	mov	r16,r4
 8011344:	1809883a 	mov	r4,r3
 8011348:	dfc00115 	stw	ra,4(sp)
 801134c:	102ef315 	stw	zero,-17460(r2)
 8011350:	801381c0 	call	801381c <write>
 8011354:	10ffffd8 	cmpnei	r3,r2,-1
 8011358:	18000426 	beq	r3,zero,801136c <_write_r+0x44>
 801135c:	dfc00117 	ldw	ra,4(sp)
 8011360:	dc000017 	ldw	r16,0(sp)
 8011364:	dec00204 	addi	sp,sp,8
 8011368:	f800283a 	ret
 801136c:	00c200b4 	movhi	r3,2050
 8011370:	18eef317 	ldw	r3,-17460(r3)
 8011374:	183ff926 	beq	r3,zero,801135c <_write_r+0x34>
 8011378:	80c00015 	stw	r3,0(r16)
 801137c:	dfc00117 	ldw	ra,4(sp)
 8011380:	dc000017 	ldw	r16,0(sp)
 8011384:	dec00204 	addi	sp,sp,8
 8011388:	f800283a 	ret

0801138c <_close_r>:
 801138c:	defffe04 	addi	sp,sp,-8
 8011390:	dc000015 	stw	r16,0(sp)
 8011394:	008200b4 	movhi	r2,2050
 8011398:	2021883a 	mov	r16,r4
 801139c:	2809883a 	mov	r4,r5
 80113a0:	dfc00115 	stw	ra,4(sp)
 80113a4:	102ef315 	stw	zero,-17460(r2)
 80113a8:	8012c200 	call	8012c20 <close>
 80113ac:	10ffffd8 	cmpnei	r3,r2,-1
 80113b0:	18000426 	beq	r3,zero,80113c4 <_close_r+0x38>
 80113b4:	dfc00117 	ldw	ra,4(sp)
 80113b8:	dc000017 	ldw	r16,0(sp)
 80113bc:	dec00204 	addi	sp,sp,8
 80113c0:	f800283a 	ret
 80113c4:	00c200b4 	movhi	r3,2050
 80113c8:	18eef317 	ldw	r3,-17460(r3)
 80113cc:	183ff926 	beq	r3,zero,80113b4 <_close_r+0x28>
 80113d0:	80c00015 	stw	r3,0(r16)
 80113d4:	dfc00117 	ldw	ra,4(sp)
 80113d8:	dc000017 	ldw	r16,0(sp)
 80113dc:	dec00204 	addi	sp,sp,8
 80113e0:	f800283a 	ret

080113e4 <__assert_func>:
 80113e4:	008200b4 	movhi	r2,2050
 80113e8:	1227bf17 	ldw	r8,-24836(r2)
 80113ec:	defffc04 	addi	sp,sp,-16
 80113f0:	3807883a 	mov	r3,r7
 80113f4:	3005883a 	mov	r2,r6
 80113f8:	dfc00315 	stw	ra,12(sp)
 80113fc:	42400317 	ldw	r9,12(r8)
 8011400:	200f883a 	mov	r7,r4
 8011404:	2811883a 	mov	r8,r5
 8011408:	180d883a 	mov	r6,r3
 801140c:	10000a26 	beq	r2,zero,8011438 <__assert_func+0x54>
 8011410:	00c20074 	movhi	r3,2049
 8011414:	18dfe704 	addi	r3,r3,32668
 8011418:	01420074 	movhi	r5,2049
 801141c:	295feb04 	addi	r5,r5,32684
 8011420:	4809883a 	mov	r4,r9
 8011424:	d8c00115 	stw	r3,4(sp)
 8011428:	da000015 	stw	r8,0(sp)
 801142c:	d8800215 	stw	r2,8(sp)
 8011430:	80116480 	call	8011648 <fiprintf>
 8011434:	8011cd40 	call	8011cd4 <abort>
 8011438:	00c20074 	movhi	r3,2049
 801143c:	18dfea04 	addi	r3,r3,32680
 8011440:	1805883a 	mov	r2,r3
 8011444:	003ff406 	br	8011418 <__assert_func+0x34>

08011448 <__assert>:
 8011448:	deffff04 	addi	sp,sp,-4
 801144c:	300f883a 	mov	r7,r6
 8011450:	000d883a 	mov	r6,zero
 8011454:	dfc00015 	stw	ra,0(sp)
 8011458:	80113e40 	call	80113e4 <__assert_func>

0801145c <_calloc_r>:
 801145c:	defffe04 	addi	sp,sp,-8
 8011460:	dc000015 	stw	r16,0(sp)
 8011464:	2021883a 	mov	r16,r4
 8011468:	2809883a 	mov	r4,r5
 801146c:	300b883a 	mov	r5,r6
 8011470:	dfc00115 	stw	ra,4(sp)
 8011474:	80052bc0 	call	80052bc <__mulsi3>
 8011478:	8009883a 	mov	r4,r16
 801147c:	100b883a 	mov	r5,r2
 8011480:	800d71c0 	call	800d71c <_malloc_r>
 8011484:	1009883a 	mov	r4,r2
 8011488:	10000c26 	beq	r2,zero,80114bc <_calloc_r+0x60>
 801148c:	11bfff17 	ldw	r6,-4(r2)
 8011490:	00bfff04 	movi	r2,-4
 8011494:	308c703a 	and	r6,r6,r2
 8011498:	31bfff04 	addi	r6,r6,-4
 801149c:	30800968 	cmpgeui	r2,r6,37
 80114a0:	1000151e 	bne	r2,zero,80114f8 <_calloc_r+0x9c>
 80114a4:	30800530 	cmpltui	r2,r6,20
 80114a8:	10000926 	beq	r2,zero,80114d0 <_calloc_r+0x74>
 80114ac:	2005883a 	mov	r2,r4
 80114b0:	10000015 	stw	zero,0(r2)
 80114b4:	10000115 	stw	zero,4(r2)
 80114b8:	10000215 	stw	zero,8(r2)
 80114bc:	2005883a 	mov	r2,r4
 80114c0:	dfc00117 	ldw	ra,4(sp)
 80114c4:	dc000017 	ldw	r16,0(sp)
 80114c8:	dec00204 	addi	sp,sp,8
 80114cc:	f800283a 	ret
 80114d0:	20000015 	stw	zero,0(r4)
 80114d4:	20000115 	stw	zero,4(r4)
 80114d8:	30800728 	cmpgeui	r2,r6,28
 80114dc:	10000a26 	beq	r2,zero,8011508 <_calloc_r+0xac>
 80114e0:	20000215 	stw	zero,8(r4)
 80114e4:	20000315 	stw	zero,12(r4)
 80114e8:	31800920 	cmpeqi	r6,r6,36
 80114ec:	3000081e 	bne	r6,zero,8011510 <_calloc_r+0xb4>
 80114f0:	20800404 	addi	r2,r4,16
 80114f4:	003fee06 	br	80114b0 <_calloc_r+0x54>
 80114f8:	000b883a 	mov	r5,zero
 80114fc:	800e1fc0 	call	800e1fc <memset>
 8011500:	1009883a 	mov	r4,r2
 8011504:	003fed06 	br	80114bc <_calloc_r+0x60>
 8011508:	20800204 	addi	r2,r4,8
 801150c:	003fe806 	br	80114b0 <_calloc_r+0x54>
 8011510:	20000415 	stw	zero,16(r4)
 8011514:	20800604 	addi	r2,r4,24
 8011518:	20000515 	stw	zero,20(r4)
 801151c:	003fe406 	br	80114b0 <_calloc_r+0x54>

08011520 <_fclose_r>:
 8011520:	defffc04 	addi	sp,sp,-16
 8011524:	dfc00315 	stw	ra,12(sp)
 8011528:	dc800215 	stw	r18,8(sp)
 801152c:	dc400115 	stw	r17,4(sp)
 8011530:	dc000015 	stw	r16,0(sp)
 8011534:	28000726 	beq	r5,zero,8011554 <_fclose_r+0x34>
 8011538:	2821883a 	mov	r16,r5
 801153c:	2023883a 	mov	r17,r4
 8011540:	20000226 	beq	r4,zero,801154c <_fclose_r+0x2c>
 8011544:	20800e17 	ldw	r2,56(r4)
 8011548:	10002726 	beq	r2,zero,80115e8 <_fclose_r+0xc8>
 801154c:	8080030f 	ldh	r2,12(r16)
 8011550:	1000081e 	bne	r2,zero,8011574 <_fclose_r+0x54>
 8011554:	0025883a 	mov	r18,zero
 8011558:	9005883a 	mov	r2,r18
 801155c:	dfc00317 	ldw	ra,12(sp)
 8011560:	dc800217 	ldw	r18,8(sp)
 8011564:	dc400117 	ldw	r17,4(sp)
 8011568:	dc000017 	ldw	r16,0(sp)
 801156c:	dec00404 	addi	sp,sp,16
 8011570:	f800283a 	ret
 8011574:	800b883a 	mov	r5,r16
 8011578:	8809883a 	mov	r4,r17
 801157c:	800c4fc0 	call	800c4fc <__sflush_r>
 8011580:	80c00b17 	ldw	r3,44(r16)
 8011584:	1025883a 	mov	r18,r2
 8011588:	18000426 	beq	r3,zero,801159c <_fclose_r+0x7c>
 801158c:	81400717 	ldw	r5,28(r16)
 8011590:	8809883a 	mov	r4,r17
 8011594:	183ee83a 	callr	r3
 8011598:	10001716 	blt	r2,zero,80115f8 <_fclose_r+0xd8>
 801159c:	8080030b 	ldhu	r2,12(r16)
 80115a0:	1080200c 	andi	r2,r2,128
 80115a4:	1000181e 	bne	r2,zero,8011608 <_fclose_r+0xe8>
 80115a8:	81400c17 	ldw	r5,48(r16)
 80115ac:	28000526 	beq	r5,zero,80115c4 <_fclose_r+0xa4>
 80115b0:	80801004 	addi	r2,r16,64
 80115b4:	28800226 	beq	r5,r2,80115c0 <_fclose_r+0xa0>
 80115b8:	8809883a 	mov	r4,r17
 80115bc:	800cc1c0 	call	800cc1c <_free_r>
 80115c0:	80000c15 	stw	zero,48(r16)
 80115c4:	81401117 	ldw	r5,68(r16)
 80115c8:	28000326 	beq	r5,zero,80115d8 <_fclose_r+0xb8>
 80115cc:	8809883a 	mov	r4,r17
 80115d0:	800cc1c0 	call	800cc1c <_free_r>
 80115d4:	80001115 	stw	zero,68(r16)
 80115d8:	800cac80 	call	800cac8 <__sfp_lock_acquire>
 80115dc:	8000030d 	sth	zero,12(r16)
 80115e0:	800cacc0 	call	800cacc <__sfp_lock_release>
 80115e4:	003fdc06 	br	8011558 <_fclose_r+0x38>
 80115e8:	800cab80 	call	800cab8 <__sinit>
 80115ec:	8080030f 	ldh	r2,12(r16)
 80115f0:	103fd826 	beq	r2,zero,8011554 <_fclose_r+0x34>
 80115f4:	003fdf06 	br	8011574 <_fclose_r+0x54>
 80115f8:	8080030b 	ldhu	r2,12(r16)
 80115fc:	04bfffc4 	movi	r18,-1
 8011600:	1080200c 	andi	r2,r2,128
 8011604:	103fe826 	beq	r2,zero,80115a8 <_fclose_r+0x88>
 8011608:	81400417 	ldw	r5,16(r16)
 801160c:	8809883a 	mov	r4,r17
 8011610:	800cc1c0 	call	800cc1c <_free_r>
 8011614:	003fe406 	br	80115a8 <_fclose_r+0x88>

08011618 <fclose>:
 8011618:	008200b4 	movhi	r2,2050
 801161c:	200b883a 	mov	r5,r4
 8011620:	1127bf17 	ldw	r4,-24836(r2)
 8011624:	80115201 	jmpi	8011520 <_fclose_r>

08011628 <_fiprintf_r>:
 8011628:	defffe04 	addi	sp,sp,-8
 801162c:	dfc00015 	stw	ra,0(sp)
 8011630:	d9c00115 	stw	r7,4(sp)
 8011634:	d9c00104 	addi	r7,sp,4
 8011638:	8011ba00 	call	8011ba0 <_vfiprintf_r>
 801163c:	dfc00017 	ldw	ra,0(sp)
 8011640:	dec00204 	addi	sp,sp,8
 8011644:	f800283a 	ret

08011648 <fiprintf>:
 8011648:	defffd04 	addi	sp,sp,-12
 801164c:	2005883a 	mov	r2,r4
 8011650:	dfc00015 	stw	ra,0(sp)
 8011654:	d9800115 	stw	r6,4(sp)
 8011658:	d9c00215 	stw	r7,8(sp)
 801165c:	00c200b4 	movhi	r3,2050
 8011660:	1927bf17 	ldw	r4,-24836(r3)
 8011664:	280d883a 	mov	r6,r5
 8011668:	d9c00104 	addi	r7,sp,4
 801166c:	100b883a 	mov	r5,r2
 8011670:	8011ba00 	call	8011ba0 <_vfiprintf_r>
 8011674:	dfc00017 	ldw	ra,0(sp)
 8011678:	dec00304 	addi	sp,sp,12
 801167c:	f800283a 	ret

08011680 <__fputwc>:
 8011680:	defff904 	addi	sp,sp,-28
 8011684:	dcc00415 	stw	r19,16(sp)
 8011688:	dc800315 	stw	r18,12(sp)
 801168c:	dc000115 	stw	r16,4(sp)
 8011690:	dfc00615 	stw	ra,24(sp)
 8011694:	dd000515 	stw	r20,20(sp)
 8011698:	dc400215 	stw	r17,8(sp)
 801169c:	2025883a 	mov	r18,r4
 80116a0:	2827883a 	mov	r19,r5
 80116a4:	3021883a 	mov	r16,r6
 80116a8:	80119ac0 	call	80119ac <__locale_mb_cur_max>
 80116ac:	10800058 	cmpnei	r2,r2,1
 80116b0:	1000071e 	bne	r2,zero,80116d0 <__fputwc+0x50>
 80116b4:	98bfffc4 	addi	r2,r19,-1
 80116b8:	10803fe8 	cmpgeui	r2,r2,255
 80116bc:	1000041e 	bne	r2,zero,80116d0 <__fputwc+0x50>
 80116c0:	980b883a 	mov	r5,r19
 80116c4:	dcc000c5 	stb	r19,3(sp)
 80116c8:	05000044 	movi	r20,1
 80116cc:	00000a06 	br	80116f8 <__fputwc+0x78>
 80116d0:	81c01704 	addi	r7,r16,92
 80116d4:	980d883a 	mov	r6,r19
 80116d8:	d94000c4 	addi	r5,sp,3
 80116dc:	9009883a 	mov	r4,r18
 80116e0:	8011ba40 	call	8011ba4 <_wcrtomb_r>
 80116e4:	1029883a 	mov	r20,r2
 80116e8:	10bfffd8 	cmpnei	r2,r2,-1
 80116ec:	10003926 	beq	r2,zero,80117d4 <__fputwc+0x154>
 80116f0:	a0001f26 	beq	r20,zero,8011770 <__fputwc+0xf0>
 80116f4:	d94000c3 	ldbu	r5,3(sp)
 80116f8:	0023883a 	mov	r17,zero
 80116fc:	00000a06 	br	8011728 <__fputwc+0xa8>
 8011700:	80800017 	ldw	r2,0(r16)
 8011704:	11400005 	stb	r5,0(r2)
 8011708:	80c00017 	ldw	r3,0(r16)
 801170c:	18c00044 	addi	r3,r3,1
 8011710:	80c00015 	stw	r3,0(r16)
 8011714:	8c400044 	addi	r17,r17,1
 8011718:	d88000c4 	addi	r2,sp,3
 801171c:	1447883a 	add	r3,r2,r17
 8011720:	8d00132e 	bgeu	r17,r20,8011770 <__fputwc+0xf0>
 8011724:	19400003 	ldbu	r5,0(r3)
 8011728:	80c00217 	ldw	r3,8(r16)
 801172c:	18ffffc4 	addi	r3,r3,-1
 8011730:	80c00215 	stw	r3,8(r16)
 8011734:	183ff20e 	bge	r3,zero,8011700 <__fputwc+0x80>
 8011738:	80800617 	ldw	r2,24(r16)
 801173c:	18801616 	blt	r3,r2,8011798 <__fputwc+0x118>
 8011740:	80800017 	ldw	r2,0(r16)
 8011744:	11400005 	stb	r5,0(r2)
 8011748:	80800017 	ldw	r2,0(r16)
 801174c:	10c00003 	ldbu	r3,0(r2)
 8011750:	10800044 	addi	r2,r2,1
 8011754:	18c002a0 	cmpeqi	r3,r3,10
 8011758:	1800181e 	bne	r3,zero,80117bc <__fputwc+0x13c>
 801175c:	80800015 	stw	r2,0(r16)
 8011760:	8c400044 	addi	r17,r17,1
 8011764:	d88000c4 	addi	r2,sp,3
 8011768:	1447883a 	add	r3,r2,r17
 801176c:	8d3fed36 	bltu	r17,r20,8011724 <__fputwc+0xa4>
 8011770:	9829883a 	mov	r20,r19
 8011774:	a005883a 	mov	r2,r20
 8011778:	dfc00617 	ldw	ra,24(sp)
 801177c:	dd000517 	ldw	r20,20(sp)
 8011780:	dcc00417 	ldw	r19,16(sp)
 8011784:	dc800317 	ldw	r18,12(sp)
 8011788:	dc400217 	ldw	r17,8(sp)
 801178c:	dc000117 	ldw	r16,4(sp)
 8011790:	dec00704 	addi	sp,sp,28
 8011794:	f800283a 	ret
 8011798:	29403fcc 	andi	r5,r5,255
 801179c:	800d883a 	mov	r6,r16
 80117a0:	9009883a 	mov	r4,r18
 80117a4:	80111c80 	call	80111c8 <__swbuf_r>
 80117a8:	10ffffe0 	cmpeqi	r3,r2,-1
 80117ac:	18c03fcc 	andi	r3,r3,255
 80117b0:	183fd826 	beq	r3,zero,8011714 <__fputwc+0x94>
 80117b4:	053fffc4 	movi	r20,-1
 80117b8:	003fee06 	br	8011774 <__fputwc+0xf4>
 80117bc:	800d883a 	mov	r6,r16
 80117c0:	01400284 	movi	r5,10
 80117c4:	9009883a 	mov	r4,r18
 80117c8:	80111c80 	call	80111c8 <__swbuf_r>
 80117cc:	10ffffe0 	cmpeqi	r3,r2,-1
 80117d0:	003ff606 	br	80117ac <__fputwc+0x12c>
 80117d4:	8080030b 	ldhu	r2,12(r16)
 80117d8:	10801014 	ori	r2,r2,64
 80117dc:	8080030d 	sth	r2,12(r16)
 80117e0:	003fe406 	br	8011774 <__fputwc+0xf4>

080117e4 <_fputwc_r>:
 80117e4:	3080030b 	ldhu	r2,12(r6)
 80117e8:	10c8000c 	andi	r3,r2,8192
 80117ec:	1800051e 	bne	r3,zero,8011804 <_fputwc_r+0x20>
 80117f0:	30c01917 	ldw	r3,100(r6)
 80117f4:	10880014 	ori	r2,r2,8192
 80117f8:	3080030d 	sth	r2,12(r6)
 80117fc:	18880014 	ori	r2,r3,8192
 8011800:	30801915 	stw	r2,100(r6)
 8011804:	80116801 	jmpi	8011680 <__fputwc>

08011808 <fputwc>:
 8011808:	defffc04 	addi	sp,sp,-16
 801180c:	008200b4 	movhi	r2,2050
 8011810:	dc000215 	stw	r16,8(sp)
 8011814:	1427bf17 	ldw	r16,-24836(r2)
 8011818:	dfc00315 	stw	ra,12(sp)
 801181c:	280d883a 	mov	r6,r5
 8011820:	200b883a 	mov	r5,r4
 8011824:	80000226 	beq	r16,zero,8011830 <fputwc+0x28>
 8011828:	80800e17 	ldw	r2,56(r16)
 801182c:	10000d26 	beq	r2,zero,8011864 <fputwc+0x5c>
 8011830:	3080030b 	ldhu	r2,12(r6)
 8011834:	10c8000c 	andi	r3,r2,8192
 8011838:	1800051e 	bne	r3,zero,8011850 <fputwc+0x48>
 801183c:	30c01917 	ldw	r3,100(r6)
 8011840:	10880014 	ori	r2,r2,8192
 8011844:	3080030d 	sth	r2,12(r6)
 8011848:	18880014 	ori	r2,r3,8192
 801184c:	30801915 	stw	r2,100(r6)
 8011850:	8009883a 	mov	r4,r16
 8011854:	dfc00317 	ldw	ra,12(sp)
 8011858:	dc000217 	ldw	r16,8(sp)
 801185c:	dec00404 	addi	sp,sp,16
 8011860:	80116801 	jmpi	8011680 <__fputwc>
 8011864:	d9000015 	stw	r4,0(sp)
 8011868:	8009883a 	mov	r4,r16
 801186c:	d9800115 	stw	r6,4(sp)
 8011870:	800cab80 	call	800cab8 <__sinit>
 8011874:	d9800117 	ldw	r6,4(sp)
 8011878:	d9400017 	ldw	r5,0(sp)
 801187c:	003fec06 	br	8011830 <fputwc+0x28>

08011880 <_fstat_r>:
 8011880:	2807883a 	mov	r3,r5
 8011884:	defffe04 	addi	sp,sp,-8
 8011888:	dc000015 	stw	r16,0(sp)
 801188c:	008200b4 	movhi	r2,2050
 8011890:	300b883a 	mov	r5,r6
 8011894:	2021883a 	mov	r16,r4
 8011898:	1809883a 	mov	r4,r3
 801189c:	dfc00115 	stw	ra,4(sp)
 80118a0:	102ef315 	stw	zero,-17460(r2)
 80118a4:	8012d9c0 	call	8012d9c <fstat>
 80118a8:	10ffffd8 	cmpnei	r3,r2,-1
 80118ac:	18000426 	beq	r3,zero,80118c0 <_fstat_r+0x40>
 80118b0:	dfc00117 	ldw	ra,4(sp)
 80118b4:	dc000017 	ldw	r16,0(sp)
 80118b8:	dec00204 	addi	sp,sp,8
 80118bc:	f800283a 	ret
 80118c0:	00c200b4 	movhi	r3,2050
 80118c4:	18eef317 	ldw	r3,-17460(r3)
 80118c8:	183ff926 	beq	r3,zero,80118b0 <_fstat_r+0x30>
 80118cc:	80c00015 	stw	r3,0(r16)
 80118d0:	dfc00117 	ldw	ra,4(sp)
 80118d4:	dc000017 	ldw	r16,0(sp)
 80118d8:	dec00204 	addi	sp,sp,8
 80118dc:	f800283a 	ret

080118e0 <_isatty_r>:
 80118e0:	defffe04 	addi	sp,sp,-8
 80118e4:	dc000015 	stw	r16,0(sp)
 80118e8:	008200b4 	movhi	r2,2050
 80118ec:	2021883a 	mov	r16,r4
 80118f0:	2809883a 	mov	r4,r5
 80118f4:	dfc00115 	stw	ra,4(sp)
 80118f8:	102ef315 	stw	zero,-17460(r2)
 80118fc:	8012eb40 	call	8012eb4 <isatty>
 8011900:	10ffffd8 	cmpnei	r3,r2,-1
 8011904:	18000426 	beq	r3,zero,8011918 <_isatty_r+0x38>
 8011908:	dfc00117 	ldw	ra,4(sp)
 801190c:	dc000017 	ldw	r16,0(sp)
 8011910:	dec00204 	addi	sp,sp,8
 8011914:	f800283a 	ret
 8011918:	00c200b4 	movhi	r3,2050
 801191c:	18eef317 	ldw	r3,-17460(r3)
 8011920:	183ff926 	beq	r3,zero,8011908 <_isatty_r+0x28>
 8011924:	80c00015 	stw	r3,0(r16)
 8011928:	dfc00117 	ldw	ra,4(sp)
 801192c:	dc000017 	ldw	r16,0(sp)
 8011930:	dec00204 	addi	sp,sp,8
 8011934:	f800283a 	ret

08011938 <_setlocale_r>:
 8011938:	30001626 	beq	r6,zero,8011994 <_setlocale_r+0x5c>
 801193c:	01420074 	movhi	r5,2049
 8011940:	defffe04 	addi	sp,sp,-8
 8011944:	295ff804 	addi	r5,r5,32736
 8011948:	3009883a 	mov	r4,r6
 801194c:	dc000015 	stw	r16,0(sp)
 8011950:	dfc00115 	stw	ra,4(sp)
 8011954:	3021883a 	mov	r16,r6
 8011958:	8011ae80 	call	8011ae8 <strcmp>
 801195c:	1000061e 	bne	r2,zero,8011978 <_setlocale_r+0x40>
 8011960:	00820074 	movhi	r2,2049
 8011964:	109ff704 	addi	r2,r2,32732
 8011968:	dfc00117 	ldw	ra,4(sp)
 801196c:	dc000017 	ldw	r16,0(sp)
 8011970:	dec00204 	addi	sp,sp,8
 8011974:	f800283a 	ret
 8011978:	80800003 	ldbu	r2,0(r16)
 801197c:	10bfef44 	addi	r2,r2,-67
 8011980:	10000726 	beq	r2,zero,80119a0 <_setlocale_r+0x68>
 8011984:	80800003 	ldbu	r2,0(r16)
 8011988:	103ff526 	beq	r2,zero,8011960 <_setlocale_r+0x28>
 801198c:	0005883a 	mov	r2,zero
 8011990:	003ff506 	br	8011968 <_setlocale_r+0x30>
 8011994:	00820074 	movhi	r2,2049
 8011998:	109ff704 	addi	r2,r2,32732
 801199c:	f800283a 	ret
 80119a0:	80800043 	ldbu	r2,1(r16)
 80119a4:	103fee26 	beq	r2,zero,8011960 <_setlocale_r+0x28>
 80119a8:	003ff606 	br	8011984 <_setlocale_r+0x4c>

080119ac <__locale_mb_cur_max>:
 80119ac:	008200b4 	movhi	r2,2050
 80119b0:	10a31307 	ldb	r2,-29620(r2)
 80119b4:	f800283a 	ret

080119b8 <setlocale>:
 80119b8:	00c200b4 	movhi	r3,2050
 80119bc:	2005883a 	mov	r2,r4
 80119c0:	1927bf17 	ldw	r4,-24836(r3)
 80119c4:	280d883a 	mov	r6,r5
 80119c8:	100b883a 	mov	r5,r2
 80119cc:	80119381 	jmpi	8011938 <_setlocale_r>

080119d0 <_lseek_r>:
 80119d0:	2807883a 	mov	r3,r5
 80119d4:	defffe04 	addi	sp,sp,-8
 80119d8:	dc000015 	stw	r16,0(sp)
 80119dc:	300b883a 	mov	r5,r6
 80119e0:	008200b4 	movhi	r2,2050
 80119e4:	380d883a 	mov	r6,r7
 80119e8:	2021883a 	mov	r16,r4
 80119ec:	1809883a 	mov	r4,r3
 80119f0:	dfc00115 	stw	ra,4(sp)
 80119f4:	102ef315 	stw	zero,-17460(r2)
 80119f8:	80131f40 	call	80131f4 <lseek>
 80119fc:	10ffffd8 	cmpnei	r3,r2,-1
 8011a00:	18000426 	beq	r3,zero,8011a14 <_lseek_r+0x44>
 8011a04:	dfc00117 	ldw	ra,4(sp)
 8011a08:	dc000017 	ldw	r16,0(sp)
 8011a0c:	dec00204 	addi	sp,sp,8
 8011a10:	f800283a 	ret
 8011a14:	00c200b4 	movhi	r3,2050
 8011a18:	18eef317 	ldw	r3,-17460(r3)
 8011a1c:	183ff926 	beq	r3,zero,8011a04 <_lseek_r+0x34>
 8011a20:	80c00015 	stw	r3,0(r16)
 8011a24:	dfc00117 	ldw	ra,4(sp)
 8011a28:	dc000017 	ldw	r16,0(sp)
 8011a2c:	dec00204 	addi	sp,sp,8
 8011a30:	f800283a 	ret

08011a34 <_mbtowc_r>:
 8011a34:	008200b4 	movhi	r2,2050
 8011a38:	10a30217 	ldw	r2,-29688(r2)
 8011a3c:	1000683a 	jmp	r2

08011a40 <__ascii_mbtowc>:
 8011a40:	deffff04 	addi	sp,sp,-4
 8011a44:	28000826 	beq	r5,zero,8011a68 <__ascii_mbtowc+0x28>
 8011a48:	30000926 	beq	r6,zero,8011a70 <__ascii_mbtowc+0x30>
 8011a4c:	38000b26 	beq	r7,zero,8011a7c <__ascii_mbtowc+0x3c>
 8011a50:	30800003 	ldbu	r2,0(r6)
 8011a54:	28800015 	stw	r2,0(r5)
 8011a58:	30800003 	ldbu	r2,0(r6)
 8011a5c:	1004c03a 	cmpne	r2,r2,zero
 8011a60:	dec00104 	addi	sp,sp,4
 8011a64:	f800283a 	ret
 8011a68:	d80b883a 	mov	r5,sp
 8011a6c:	303ff71e 	bne	r6,zero,8011a4c <__ascii_mbtowc+0xc>
 8011a70:	0005883a 	mov	r2,zero
 8011a74:	dec00104 	addi	sp,sp,4
 8011a78:	f800283a 	ret
 8011a7c:	00bfff84 	movi	r2,-2
 8011a80:	003ff706 	br	8011a60 <__ascii_mbtowc+0x20>

08011a84 <_read_r>:
 8011a84:	2807883a 	mov	r3,r5
 8011a88:	defffe04 	addi	sp,sp,-8
 8011a8c:	dc000015 	stw	r16,0(sp)
 8011a90:	300b883a 	mov	r5,r6
 8011a94:	008200b4 	movhi	r2,2050
 8011a98:	380d883a 	mov	r6,r7
 8011a9c:	2021883a 	mov	r16,r4
 8011aa0:	1809883a 	mov	r4,r3
 8011aa4:	dfc00115 	stw	ra,4(sp)
 8011aa8:	102ef315 	stw	zero,-17460(r2)
 8011aac:	80133d40 	call	80133d4 <read>
 8011ab0:	10ffffd8 	cmpnei	r3,r2,-1
 8011ab4:	18000426 	beq	r3,zero,8011ac8 <_read_r+0x44>
 8011ab8:	dfc00117 	ldw	ra,4(sp)
 8011abc:	dc000017 	ldw	r16,0(sp)
 8011ac0:	dec00204 	addi	sp,sp,8
 8011ac4:	f800283a 	ret
 8011ac8:	00c200b4 	movhi	r3,2050
 8011acc:	18eef317 	ldw	r3,-17460(r3)
 8011ad0:	183ff926 	beq	r3,zero,8011ab8 <_read_r+0x34>
 8011ad4:	80c00015 	stw	r3,0(r16)
 8011ad8:	dfc00117 	ldw	ra,4(sp)
 8011adc:	dc000017 	ldw	r16,0(sp)
 8011ae0:	dec00204 	addi	sp,sp,8
 8011ae4:	f800283a 	ret

08011ae8 <strcmp>:
 8011ae8:	2144b03a 	or	r2,r4,r5
 8011aec:	108000cc 	andi	r2,r2,3
 8011af0:	1000141e 	bne	r2,zero,8011b44 <strcmp+0x5c>
 8011af4:	20800017 	ldw	r2,0(r4)
 8011af8:	28c00017 	ldw	r3,0(r5)
 8011afc:	10c0111e 	bne	r2,r3,8011b44 <strcmp+0x5c>
 8011b00:	01ffbff4 	movhi	r7,65279
 8011b04:	01a02074 	movhi	r6,32897
 8011b08:	39ffbfc4 	addi	r7,r7,-257
 8011b0c:	31a02004 	addi	r6,r6,-32640
 8011b10:	00000306 	br	8011b20 <strcmp+0x38>
 8011b14:	20800017 	ldw	r2,0(r4)
 8011b18:	28c00017 	ldw	r3,0(r5)
 8011b1c:	10c0091e 	bne	r2,r3,8011b44 <strcmp+0x5c>
 8011b20:	11c7883a 	add	r3,r2,r7
 8011b24:	0084303a 	nor	r2,zero,r2
 8011b28:	1884703a 	and	r2,r3,r2
 8011b2c:	1184703a 	and	r2,r2,r6
 8011b30:	21000104 	addi	r4,r4,4
 8011b34:	29400104 	addi	r5,r5,4
 8011b38:	103ff626 	beq	r2,zero,8011b14 <strcmp+0x2c>
 8011b3c:	0005883a 	mov	r2,zero
 8011b40:	f800283a 	ret
 8011b44:	20c00003 	ldbu	r3,0(r4)
 8011b48:	18803fcc 	andi	r2,r3,255
 8011b4c:	1080201c 	xori	r2,r2,128
 8011b50:	10bfe004 	addi	r2,r2,-128
 8011b54:	1000071e 	bne	r2,zero,8011b74 <strcmp+0x8c>
 8011b58:	00000a06 	br	8011b84 <strcmp+0x9c>
 8011b5c:	20c00003 	ldbu	r3,0(r4)
 8011b60:	29400044 	addi	r5,r5,1
 8011b64:	18803fcc 	andi	r2,r3,255
 8011b68:	1080201c 	xori	r2,r2,128
 8011b6c:	10bfe004 	addi	r2,r2,-128
 8011b70:	10000726 	beq	r2,zero,8011b90 <strcmp+0xa8>
 8011b74:	29800007 	ldb	r6,0(r5)
 8011b78:	21000044 	addi	r4,r4,1
 8011b7c:	30bff726 	beq	r6,r2,8011b5c <strcmp+0x74>
 8011b80:	18803fcc 	andi	r2,r3,255
 8011b84:	28c00003 	ldbu	r3,0(r5)
 8011b88:	10c5c83a 	sub	r2,r2,r3
 8011b8c:	f800283a 	ret
 8011b90:	28c00003 	ldbu	r3,0(r5)
 8011b94:	0005883a 	mov	r2,zero
 8011b98:	10c5c83a 	sub	r2,r2,r3
 8011b9c:	f800283a 	ret

08011ba0 <_vfiprintf_r>:
 8011ba0:	800fdd81 	jmpi	800fdd8 <___vfiprintf_internal_r>

08011ba4 <_wcrtomb_r>:
 8011ba4:	defffa04 	addi	sp,sp,-24
 8011ba8:	dc400415 	stw	r17,16(sp)
 8011bac:	dc000315 	stw	r16,12(sp)
 8011bb0:	008200b4 	movhi	r2,2050
 8011bb4:	dfc00515 	stw	ra,20(sp)
 8011bb8:	10a30117 	ldw	r2,-29692(r2)
 8011bbc:	2023883a 	mov	r17,r4
 8011bc0:	3821883a 	mov	r16,r7
 8011bc4:	28000826 	beq	r5,zero,8011be8 <_wcrtomb_r+0x44>
 8011bc8:	103ee83a 	callr	r2
 8011bcc:	10ffffd8 	cmpnei	r3,r2,-1
 8011bd0:	18000a26 	beq	r3,zero,8011bfc <_wcrtomb_r+0x58>
 8011bd4:	dfc00517 	ldw	ra,20(sp)
 8011bd8:	dc400417 	ldw	r17,16(sp)
 8011bdc:	dc000317 	ldw	r16,12(sp)
 8011be0:	dec00604 	addi	sp,sp,24
 8011be4:	f800283a 	ret
 8011be8:	000d883a 	mov	r6,zero
 8011bec:	d9400084 	addi	r5,sp,2
 8011bf0:	103ee83a 	callr	r2
 8011bf4:	10ffffd8 	cmpnei	r3,r2,-1
 8011bf8:	183ff61e 	bne	r3,zero,8011bd4 <_wcrtomb_r+0x30>
 8011bfc:	00802284 	movi	r2,138
 8011c00:	80000015 	stw	zero,0(r16)
 8011c04:	88800015 	stw	r2,0(r17)
 8011c08:	00bfffc4 	movi	r2,-1
 8011c0c:	003ff106 	br	8011bd4 <_wcrtomb_r+0x30>

08011c10 <wcrtomb>:
 8011c10:	defffa04 	addi	sp,sp,-24
 8011c14:	00c200b4 	movhi	r3,2050
 8011c18:	dc400415 	stw	r17,16(sp)
 8011c1c:	dc000315 	stw	r16,12(sp)
 8011c20:	1c67bf17 	ldw	r17,-24836(r3)
 8011c24:	dfc00515 	stw	ra,20(sp)
 8011c28:	00c200b4 	movhi	r3,2050
 8011c2c:	18e30117 	ldw	r3,-29692(r3)
 8011c30:	3021883a 	mov	r16,r6
 8011c34:	20000c26 	beq	r4,zero,8011c68 <wcrtomb+0x58>
 8011c38:	280d883a 	mov	r6,r5
 8011c3c:	800f883a 	mov	r7,r16
 8011c40:	200b883a 	mov	r5,r4
 8011c44:	8809883a 	mov	r4,r17
 8011c48:	183ee83a 	callr	r3
 8011c4c:	10ffffd8 	cmpnei	r3,r2,-1
 8011c50:	18000c26 	beq	r3,zero,8011c84 <wcrtomb+0x74>
 8011c54:	dfc00517 	ldw	ra,20(sp)
 8011c58:	dc400417 	ldw	r17,16(sp)
 8011c5c:	dc000317 	ldw	r16,12(sp)
 8011c60:	dec00604 	addi	sp,sp,24
 8011c64:	f800283a 	ret
 8011c68:	300f883a 	mov	r7,r6
 8011c6c:	d9400084 	addi	r5,sp,2
 8011c70:	000d883a 	mov	r6,zero
 8011c74:	8809883a 	mov	r4,r17
 8011c78:	183ee83a 	callr	r3
 8011c7c:	10ffffd8 	cmpnei	r3,r2,-1
 8011c80:	183ff41e 	bne	r3,zero,8011c54 <wcrtomb+0x44>
 8011c84:	00802284 	movi	r2,138
 8011c88:	80000015 	stw	zero,0(r16)
 8011c8c:	88800015 	stw	r2,0(r17)
 8011c90:	00bfffc4 	movi	r2,-1
 8011c94:	003fef06 	br	8011c54 <wcrtomb+0x44>

08011c98 <_wctomb_r>:
 8011c98:	008200b4 	movhi	r2,2050
 8011c9c:	10a30117 	ldw	r2,-29692(r2)
 8011ca0:	1000683a 	jmp	r2

08011ca4 <__ascii_wctomb>:
 8011ca4:	28000926 	beq	r5,zero,8011ccc <__ascii_wctomb+0x28>
 8011ca8:	30804030 	cmpltui	r2,r6,256
 8011cac:	10000326 	beq	r2,zero,8011cbc <__ascii_wctomb+0x18>
 8011cb0:	29800005 	stb	r6,0(r5)
 8011cb4:	00800044 	movi	r2,1
 8011cb8:	f800283a 	ret
 8011cbc:	00802284 	movi	r2,138
 8011cc0:	20800015 	stw	r2,0(r4)
 8011cc4:	00bfffc4 	movi	r2,-1
 8011cc8:	f800283a 	ret
 8011ccc:	0005883a 	mov	r2,zero
 8011cd0:	f800283a 	ret

08011cd4 <abort>:
 8011cd4:	deffff04 	addi	sp,sp,-4
 8011cd8:	01000184 	movi	r4,6
 8011cdc:	dfc00015 	stw	ra,0(sp)
 8011ce0:	8011f4c0 	call	8011f4c <raise>
 8011ce4:	01000044 	movi	r4,1
 8011ce8:	8012d280 	call	8012d28 <_exit>

08011cec <_init_signal_r.part.0>:
 8011cec:	defffe04 	addi	sp,sp,-8
 8011cf0:	01402004 	movi	r5,128
 8011cf4:	dc000015 	stw	r16,0(sp)
 8011cf8:	dfc00115 	stw	ra,4(sp)
 8011cfc:	2021883a 	mov	r16,r4
 8011d00:	800d71c0 	call	800d71c <_malloc_r>
 8011d04:	8080b715 	stw	r2,732(r16)
 8011d08:	10000926 	beq	r2,zero,8011d30 <_init_signal_r.part.0+0x44>
 8011d0c:	10c02004 	addi	r3,r2,128
 8011d10:	10000015 	stw	zero,0(r2)
 8011d14:	10800104 	addi	r2,r2,4
 8011d18:	10fffd1e 	bne	r2,r3,8011d10 <_init_signal_r.part.0+0x24>
 8011d1c:	0005883a 	mov	r2,zero
 8011d20:	dfc00117 	ldw	ra,4(sp)
 8011d24:	dc000017 	ldw	r16,0(sp)
 8011d28:	dec00204 	addi	sp,sp,8
 8011d2c:	f800283a 	ret
 8011d30:	00bfffc4 	movi	r2,-1
 8011d34:	003ffa06 	br	8011d20 <_init_signal_r.part.0+0x34>

08011d38 <_init_signal_r>:
 8011d38:	2080b717 	ldw	r2,732(r4)
 8011d3c:	10000226 	beq	r2,zero,8011d48 <_init_signal_r+0x10>
 8011d40:	0005883a 	mov	r2,zero
 8011d44:	f800283a 	ret
 8011d48:	8011cec1 	jmpi	8011cec <_init_signal_r.part.0>

08011d4c <_signal_r>:
 8011d4c:	defffc04 	addi	sp,sp,-16
 8011d50:	dc000215 	stw	r16,8(sp)
 8011d54:	dfc00315 	stw	ra,12(sp)
 8011d58:	28800830 	cmpltui	r2,r5,32
 8011d5c:	2021883a 	mov	r16,r4
 8011d60:	10000a26 	beq	r2,zero,8011d8c <_signal_r+0x40>
 8011d64:	2080b717 	ldw	r2,732(r4)
 8011d68:	10000f26 	beq	r2,zero,8011da8 <_signal_r+0x5c>
 8011d6c:	280a90ba 	slli	r5,r5,2
 8011d70:	114b883a 	add	r5,r2,r5
 8011d74:	28800017 	ldw	r2,0(r5)
 8011d78:	29800015 	stw	r6,0(r5)
 8011d7c:	dfc00317 	ldw	ra,12(sp)
 8011d80:	dc000217 	ldw	r16,8(sp)
 8011d84:	dec00404 	addi	sp,sp,16
 8011d88:	f800283a 	ret
 8011d8c:	00800584 	movi	r2,22
 8011d90:	20800015 	stw	r2,0(r4)
 8011d94:	00bfffc4 	movi	r2,-1
 8011d98:	dfc00317 	ldw	ra,12(sp)
 8011d9c:	dc000217 	ldw	r16,8(sp)
 8011da0:	dec00404 	addi	sp,sp,16
 8011da4:	f800283a 	ret
 8011da8:	d9800115 	stw	r6,4(sp)
 8011dac:	d9400015 	stw	r5,0(sp)
 8011db0:	8011cec0 	call	8011cec <_init_signal_r.part.0>
 8011db4:	1000041e 	bne	r2,zero,8011dc8 <_signal_r+0x7c>
 8011db8:	8080b717 	ldw	r2,732(r16)
 8011dbc:	d9800117 	ldw	r6,4(sp)
 8011dc0:	d9400017 	ldw	r5,0(sp)
 8011dc4:	003fe906 	br	8011d6c <_signal_r+0x20>
 8011dc8:	00bfffc4 	movi	r2,-1
 8011dcc:	003feb06 	br	8011d7c <_signal_r+0x30>

08011dd0 <_raise_r>:
 8011dd0:	28800830 	cmpltui	r2,r5,32
 8011dd4:	10002b26 	beq	r2,zero,8011e84 <_raise_r+0xb4>
 8011dd8:	2080b717 	ldw	r2,732(r4)
 8011ddc:	defffd04 	addi	sp,sp,-12
 8011de0:	dc000115 	stw	r16,4(sp)
 8011de4:	dfc00215 	stw	ra,8(sp)
 8011de8:	2821883a 	mov	r16,r5
 8011dec:	10001026 	beq	r2,zero,8011e30 <_raise_r+0x60>
 8011df0:	280690ba 	slli	r3,r5,2
 8011df4:	10c5883a 	add	r2,r2,r3
 8011df8:	10c00017 	ldw	r3,0(r2)
 8011dfc:	18000c26 	beq	r3,zero,8011e30 <_raise_r+0x60>
 8011e00:	19400060 	cmpeqi	r5,r3,1
 8011e04:	28001a1e 	bne	r5,zero,8011e70 <_raise_r+0xa0>
 8011e08:	197fffd8 	cmpnei	r5,r3,-1
 8011e0c:	28001126 	beq	r5,zero,8011e54 <_raise_r+0x84>
 8011e10:	10000015 	stw	zero,0(r2)
 8011e14:	8009883a 	mov	r4,r16
 8011e18:	183ee83a 	callr	r3
 8011e1c:	0005883a 	mov	r2,zero
 8011e20:	dfc00217 	ldw	ra,8(sp)
 8011e24:	dc000117 	ldw	r16,4(sp)
 8011e28:	dec00304 	addi	sp,sp,12
 8011e2c:	f800283a 	ret
 8011e30:	d9000015 	stw	r4,0(sp)
 8011e34:	80120000 	call	8012000 <_getpid_r>
 8011e38:	d9000017 	ldw	r4,0(sp)
 8011e3c:	800d883a 	mov	r6,r16
 8011e40:	100b883a 	mov	r5,r2
 8011e44:	dfc00217 	ldw	ra,8(sp)
 8011e48:	dc000117 	ldw	r16,4(sp)
 8011e4c:	dec00304 	addi	sp,sp,12
 8011e50:	8011fa01 	jmpi	8011fa0 <_kill_r>
 8011e54:	00800584 	movi	r2,22
 8011e58:	20800015 	stw	r2,0(r4)
 8011e5c:	00800044 	movi	r2,1
 8011e60:	dfc00217 	ldw	ra,8(sp)
 8011e64:	dc000117 	ldw	r16,4(sp)
 8011e68:	dec00304 	addi	sp,sp,12
 8011e6c:	f800283a 	ret
 8011e70:	0005883a 	mov	r2,zero
 8011e74:	dfc00217 	ldw	ra,8(sp)
 8011e78:	dc000117 	ldw	r16,4(sp)
 8011e7c:	dec00304 	addi	sp,sp,12
 8011e80:	f800283a 	ret
 8011e84:	00800584 	movi	r2,22
 8011e88:	20800015 	stw	r2,0(r4)
 8011e8c:	00bfffc4 	movi	r2,-1
 8011e90:	f800283a 	ret

08011e94 <__sigtramp_r>:
 8011e94:	28800830 	cmpltui	r2,r5,32
 8011e98:	10002a26 	beq	r2,zero,8011f44 <__sigtramp_r+0xb0>
 8011e9c:	2080b717 	ldw	r2,732(r4)
 8011ea0:	defffd04 	addi	sp,sp,-12
 8011ea4:	dc400115 	stw	r17,4(sp)
 8011ea8:	dfc00215 	stw	ra,8(sp)
 8011eac:	2023883a 	mov	r17,r4
 8011eb0:	10001526 	beq	r2,zero,8011f08 <__sigtramp_r+0x74>
 8011eb4:	280690ba 	slli	r3,r5,2
 8011eb8:	10c5883a 	add	r2,r2,r3
 8011ebc:	10c00017 	ldw	r3,0(r2)
 8011ec0:	18000c26 	beq	r3,zero,8011ef4 <__sigtramp_r+0x60>
 8011ec4:	193fffe0 	cmpeqi	r4,r3,-1
 8011ec8:	20001a1e 	bne	r4,zero,8011f34 <__sigtramp_r+0xa0>
 8011ecc:	19000060 	cmpeqi	r4,r3,1
 8011ed0:	2000131e 	bne	r4,zero,8011f20 <__sigtramp_r+0x8c>
 8011ed4:	10000015 	stw	zero,0(r2)
 8011ed8:	2809883a 	mov	r4,r5
 8011edc:	183ee83a 	callr	r3
 8011ee0:	0005883a 	mov	r2,zero
 8011ee4:	dfc00217 	ldw	ra,8(sp)
 8011ee8:	dc400117 	ldw	r17,4(sp)
 8011eec:	dec00304 	addi	sp,sp,12
 8011ef0:	f800283a 	ret
 8011ef4:	00800044 	movi	r2,1
 8011ef8:	dfc00217 	ldw	ra,8(sp)
 8011efc:	dc400117 	ldw	r17,4(sp)
 8011f00:	dec00304 	addi	sp,sp,12
 8011f04:	f800283a 	ret
 8011f08:	d9400015 	stw	r5,0(sp)
 8011f0c:	8011cec0 	call	8011cec <_init_signal_r.part.0>
 8011f10:	10000a1e 	bne	r2,zero,8011f3c <__sigtramp_r+0xa8>
 8011f14:	8880b717 	ldw	r2,732(r17)
 8011f18:	d9400017 	ldw	r5,0(sp)
 8011f1c:	003fe506 	br	8011eb4 <__sigtramp_r+0x20>
 8011f20:	008000c4 	movi	r2,3
 8011f24:	dfc00217 	ldw	ra,8(sp)
 8011f28:	dc400117 	ldw	r17,4(sp)
 8011f2c:	dec00304 	addi	sp,sp,12
 8011f30:	f800283a 	ret
 8011f34:	00800084 	movi	r2,2
 8011f38:	003fea06 	br	8011ee4 <__sigtramp_r+0x50>
 8011f3c:	00bfffc4 	movi	r2,-1
 8011f40:	003fe806 	br	8011ee4 <__sigtramp_r+0x50>
 8011f44:	00bfffc4 	movi	r2,-1
 8011f48:	f800283a 	ret

08011f4c <raise>:
 8011f4c:	008200b4 	movhi	r2,2050
 8011f50:	200b883a 	mov	r5,r4
 8011f54:	1127bf17 	ldw	r4,-24836(r2)
 8011f58:	8011dd01 	jmpi	8011dd0 <_raise_r>

08011f5c <signal>:
 8011f5c:	00c200b4 	movhi	r3,2050
 8011f60:	2005883a 	mov	r2,r4
 8011f64:	1927bf17 	ldw	r4,-24836(r3)
 8011f68:	280d883a 	mov	r6,r5
 8011f6c:	100b883a 	mov	r5,r2
 8011f70:	8011d4c1 	jmpi	8011d4c <_signal_r>

08011f74 <_init_signal>:
 8011f74:	008200b4 	movhi	r2,2050
 8011f78:	1127bf17 	ldw	r4,-24836(r2)
 8011f7c:	2080b717 	ldw	r2,732(r4)
 8011f80:	10000226 	beq	r2,zero,8011f8c <_init_signal+0x18>
 8011f84:	0005883a 	mov	r2,zero
 8011f88:	f800283a 	ret
 8011f8c:	8011cec1 	jmpi	8011cec <_init_signal_r.part.0>

08011f90 <__sigtramp>:
 8011f90:	008200b4 	movhi	r2,2050
 8011f94:	200b883a 	mov	r5,r4
 8011f98:	1127bf17 	ldw	r4,-24836(r2)
 8011f9c:	8011e941 	jmpi	8011e94 <__sigtramp_r>

08011fa0 <_kill_r>:
 8011fa0:	2807883a 	mov	r3,r5
 8011fa4:	defffe04 	addi	sp,sp,-8
 8011fa8:	dc000015 	stw	r16,0(sp)
 8011fac:	008200b4 	movhi	r2,2050
 8011fb0:	300b883a 	mov	r5,r6
 8011fb4:	2021883a 	mov	r16,r4
 8011fb8:	1809883a 	mov	r4,r3
 8011fbc:	dfc00115 	stw	ra,4(sp)
 8011fc0:	102ef315 	stw	zero,-17460(r2)
 8011fc4:	8012fa00 	call	8012fa0 <kill>
 8011fc8:	10ffffd8 	cmpnei	r3,r2,-1
 8011fcc:	18000426 	beq	r3,zero,8011fe0 <_kill_r+0x40>
 8011fd0:	dfc00117 	ldw	ra,4(sp)
 8011fd4:	dc000017 	ldw	r16,0(sp)
 8011fd8:	dec00204 	addi	sp,sp,8
 8011fdc:	f800283a 	ret
 8011fe0:	00c200b4 	movhi	r3,2050
 8011fe4:	18eef317 	ldw	r3,-17460(r3)
 8011fe8:	183ff926 	beq	r3,zero,8011fd0 <_kill_r+0x30>
 8011fec:	80c00015 	stw	r3,0(r16)
 8011ff0:	dfc00117 	ldw	ra,4(sp)
 8011ff4:	dc000017 	ldw	r16,0(sp)
 8011ff8:	dec00204 	addi	sp,sp,8
 8011ffc:	f800283a 	ret

08012000 <_getpid_r>:
 8012000:	8012e581 	jmpi	8012e58 <getpid>

08012004 <__udivdi3>:
 8012004:	defff504 	addi	sp,sp,-44
 8012008:	dd000515 	stw	r20,20(sp)
 801200c:	dc800315 	stw	r18,12(sp)
 8012010:	dfc00a15 	stw	ra,40(sp)
 8012014:	df000915 	stw	fp,36(sp)
 8012018:	ddc00815 	stw	r23,32(sp)
 801201c:	dd800715 	stw	r22,28(sp)
 8012020:	dd400615 	stw	r21,24(sp)
 8012024:	dcc00415 	stw	r19,16(sp)
 8012028:	dc400215 	stw	r17,8(sp)
 801202c:	dc000115 	stw	r16,4(sp)
 8012030:	2029883a 	mov	r20,r4
 8012034:	2825883a 	mov	r18,r5
 8012038:	3800461e 	bne	r7,zero,8012154 <__udivdi3+0x150>
 801203c:	3823883a 	mov	r17,r7
 8012040:	3021883a 	mov	r16,r6
 8012044:	2027883a 	mov	r19,r4
 8012048:	2980622e 	bgeu	r5,r6,80121d4 <__udivdi3+0x1d0>
 801204c:	00bfffd4 	movui	r2,65535
 8012050:	282b883a 	mov	r21,r5
 8012054:	1180aa2e 	bgeu	r2,r6,8012300 <__udivdi3+0x2fc>
 8012058:	00804034 	movhi	r2,256
 801205c:	30815936 	bltu	r6,r2,80125c4 <__udivdi3+0x5c0>
 8012060:	3006d63a 	srli	r3,r6,24
 8012064:	04400604 	movi	r17,24
 8012068:	00820074 	movhi	r2,2049
 801206c:	1885883a 	add	r2,r3,r2
 8012070:	111f1303 	ldbu	r4,31820(r2)
 8012074:	00800804 	movi	r2,32
 8012078:	2463883a 	add	r17,r4,r17
 801207c:	1449c83a 	sub	r4,r2,r17
 8012080:	14400526 	beq	r2,r17,8012098 <__udivdi3+0x94>
 8012084:	9106983a 	sll	r3,r18,r4
 8012088:	a462d83a 	srl	r17,r20,r17
 801208c:	3120983a 	sll	r16,r6,r4
 8012090:	a126983a 	sll	r19,r20,r4
 8012094:	88eab03a 	or	r21,r17,r3
 8012098:	802cd43a 	srli	r22,r16,16
 801209c:	a809883a 	mov	r4,r21
 80120a0:	853fffcc 	andi	r20,r16,65535
 80120a4:	b00b883a 	mov	r5,r22
 80120a8:	80052600 	call	8005260 <__umodsi3>
 80120ac:	a809883a 	mov	r4,r21
 80120b0:	b00b883a 	mov	r5,r22
 80120b4:	1025883a 	mov	r18,r2
 80120b8:	80051fc0 	call	80051fc <__udivsi3>
 80120bc:	a009883a 	mov	r4,r20
 80120c0:	100b883a 	mov	r5,r2
 80120c4:	102b883a 	mov	r21,r2
 80120c8:	80052bc0 	call	80052bc <__mulsi3>
 80120cc:	9024943a 	slli	r18,r18,16
 80120d0:	9808d43a 	srli	r4,r19,16
 80120d4:	9108b03a 	or	r4,r18,r4
 80120d8:	2080052e 	bgeu	r4,r2,80120f0 <__udivdi3+0xec>
 80120dc:	2409883a 	add	r4,r4,r16
 80120e0:	a8ffffc4 	addi	r3,r21,-1
 80120e4:	24000136 	bltu	r4,r16,80120ec <__udivdi3+0xe8>
 80120e8:	20814736 	bltu	r4,r2,8012608 <__udivdi3+0x604>
 80120ec:	182b883a 	mov	r21,r3
 80120f0:	20a3c83a 	sub	r17,r4,r2
 80120f4:	8809883a 	mov	r4,r17
 80120f8:	b00b883a 	mov	r5,r22
 80120fc:	80052600 	call	8005260 <__umodsi3>
 8012100:	8809883a 	mov	r4,r17
 8012104:	1023883a 	mov	r17,r2
 8012108:	b00b883a 	mov	r5,r22
 801210c:	8822943a 	slli	r17,r17,16
 8012110:	80051fc0 	call	80051fc <__udivsi3>
 8012114:	100b883a 	mov	r5,r2
 8012118:	a009883a 	mov	r4,r20
 801211c:	9cffffcc 	andi	r19,r19,65535
 8012120:	1025883a 	mov	r18,r2
 8012124:	8ce6b03a 	or	r19,r17,r19
 8012128:	80052bc0 	call	80052bc <__mulsi3>
 801212c:	9880052e 	bgeu	r19,r2,8012144 <__udivdi3+0x140>
 8012130:	84e7883a 	add	r19,r16,r19
 8012134:	90ffffc4 	addi	r3,r18,-1
 8012138:	9c000136 	bltu	r19,r16,8012140 <__udivdi3+0x13c>
 801213c:	98813036 	bltu	r19,r2,8012600 <__udivdi3+0x5fc>
 8012140:	1825883a 	mov	r18,r3
 8012144:	a80c943a 	slli	r6,r21,16
 8012148:	0007883a 	mov	r3,zero
 801214c:	3484b03a 	or	r2,r6,r18
 8012150:	00000306 	br	8012160 <__udivdi3+0x15c>
 8012154:	29c00e2e 	bgeu	r5,r7,8012190 <__udivdi3+0x18c>
 8012158:	0007883a 	mov	r3,zero
 801215c:	0005883a 	mov	r2,zero
 8012160:	dfc00a17 	ldw	ra,40(sp)
 8012164:	df000917 	ldw	fp,36(sp)
 8012168:	ddc00817 	ldw	r23,32(sp)
 801216c:	dd800717 	ldw	r22,28(sp)
 8012170:	dd400617 	ldw	r21,24(sp)
 8012174:	dd000517 	ldw	r20,20(sp)
 8012178:	dcc00417 	ldw	r19,16(sp)
 801217c:	dc800317 	ldw	r18,12(sp)
 8012180:	dc400217 	ldw	r17,8(sp)
 8012184:	dc000117 	ldw	r16,4(sp)
 8012188:	dec00b04 	addi	sp,sp,44
 801218c:	f800283a 	ret
 8012190:	00bfffd4 	movui	r2,65535
 8012194:	11c05f2e 	bgeu	r2,r7,8012314 <__udivdi3+0x310>
 8012198:	00804034 	movhi	r2,256
 801219c:	3880fb36 	bltu	r7,r2,801258c <__udivdi3+0x588>
 80121a0:	3806d63a 	srli	r3,r7,24
 80121a4:	01000604 	movi	r4,24
 80121a8:	00820074 	movhi	r2,2049
 80121ac:	1885883a 	add	r2,r3,r2
 80121b0:	10df1303 	ldbu	r3,31820(r2)
 80121b4:	00800804 	movi	r2,32
 80121b8:	1907883a 	add	r3,r3,r4
 80121bc:	10e3c83a 	sub	r17,r2,r3
 80121c0:	10c0901e 	bne	r2,r3,8012404 <__udivdi3+0x400>
 80121c4:	3c80f636 	bltu	r7,r18,80125a0 <__udivdi3+0x59c>
 80121c8:	a185403a 	cmpgeu	r2,r20,r6
 80121cc:	0007883a 	mov	r3,zero
 80121d0:	003fe306 	br	8012160 <__udivdi3+0x15c>
 80121d4:	3000041e 	bne	r6,zero,80121e8 <__udivdi3+0x1e4>
 80121d8:	000b883a 	mov	r5,zero
 80121dc:	01000044 	movi	r4,1
 80121e0:	80051fc0 	call	80051fc <__udivsi3>
 80121e4:	1021883a 	mov	r16,r2
 80121e8:	00bfffd4 	movui	r2,65535
 80121ec:	14003f2e 	bgeu	r2,r16,80122ec <__udivdi3+0x2e8>
 80121f0:	00804034 	movhi	r2,256
 80121f4:	8080f036 	bltu	r16,r2,80125b8 <__udivdi3+0x5b4>
 80121f8:	8006d63a 	srli	r3,r16,24
 80121fc:	04400604 	movi	r17,24
 8012200:	00820074 	movhi	r2,2049
 8012204:	1885883a 	add	r2,r3,r2
 8012208:	109f1303 	ldbu	r2,31820(r2)
 801220c:	00c00804 	movi	r3,32
 8012210:	1463883a 	add	r17,r2,r17
 8012214:	1c45c83a 	sub	r2,r3,r17
 8012218:	1c40431e 	bne	r3,r17,8012328 <__udivdi3+0x324>
 801221c:	802cd43a 	srli	r22,r16,16
 8012220:	9423c83a 	sub	r17,r18,r16
 8012224:	853fffcc 	andi	r20,r16,65535
 8012228:	00c00044 	movi	r3,1
 801222c:	b00b883a 	mov	r5,r22
 8012230:	8809883a 	mov	r4,r17
 8012234:	d8c00015 	stw	r3,0(sp)
 8012238:	80052600 	call	8005260 <__umodsi3>
 801223c:	b00b883a 	mov	r5,r22
 8012240:	8809883a 	mov	r4,r17
 8012244:	1025883a 	mov	r18,r2
 8012248:	80051fc0 	call	80051fc <__udivsi3>
 801224c:	1009883a 	mov	r4,r2
 8012250:	a00b883a 	mov	r5,r20
 8012254:	102b883a 	mov	r21,r2
 8012258:	80052bc0 	call	80052bc <__mulsi3>
 801225c:	9024943a 	slli	r18,r18,16
 8012260:	9808d43a 	srli	r4,r19,16
 8012264:	d8c00017 	ldw	r3,0(sp)
 8012268:	9108b03a 	or	r4,r18,r4
 801226c:	2080052e 	bgeu	r4,r2,8012284 <__udivdi3+0x280>
 8012270:	2409883a 	add	r4,r4,r16
 8012274:	a97fffc4 	addi	r5,r21,-1
 8012278:	24000136 	bltu	r4,r16,8012280 <__udivdi3+0x27c>
 801227c:	2080e536 	bltu	r4,r2,8012614 <__udivdi3+0x610>
 8012280:	282b883a 	mov	r21,r5
 8012284:	20a3c83a 	sub	r17,r4,r2
 8012288:	8809883a 	mov	r4,r17
 801228c:	b00b883a 	mov	r5,r22
 8012290:	d8c00015 	stw	r3,0(sp)
 8012294:	80052600 	call	8005260 <__umodsi3>
 8012298:	8809883a 	mov	r4,r17
 801229c:	1023883a 	mov	r17,r2
 80122a0:	b00b883a 	mov	r5,r22
 80122a4:	8822943a 	slli	r17,r17,16
 80122a8:	80051fc0 	call	80051fc <__udivsi3>
 80122ac:	a00b883a 	mov	r5,r20
 80122b0:	1009883a 	mov	r4,r2
 80122b4:	9cffffcc 	andi	r19,r19,65535
 80122b8:	1025883a 	mov	r18,r2
 80122bc:	8ce6b03a 	or	r19,r17,r19
 80122c0:	80052bc0 	call	80052bc <__mulsi3>
 80122c4:	d8c00017 	ldw	r3,0(sp)
 80122c8:	9880052e 	bgeu	r19,r2,80122e0 <__udivdi3+0x2dc>
 80122cc:	84e7883a 	add	r19,r16,r19
 80122d0:	913fffc4 	addi	r4,r18,-1
 80122d4:	9c000136 	bltu	r19,r16,80122dc <__udivdi3+0x2d8>
 80122d8:	9880c736 	bltu	r19,r2,80125f8 <__udivdi3+0x5f4>
 80122dc:	2025883a 	mov	r18,r4
 80122e0:	a80c943a 	slli	r6,r21,16
 80122e4:	3484b03a 	or	r2,r6,r18
 80122e8:	003f9d06 	br	8012160 <__udivdi3+0x15c>
 80122ec:	80804030 	cmpltui	r2,r16,256
 80122f0:	1000b71e 	bne	r2,zero,80125d0 <__udivdi3+0x5cc>
 80122f4:	8006d23a 	srli	r3,r16,8
 80122f8:	04400204 	movi	r17,8
 80122fc:	003fc006 	br	8012200 <__udivdi3+0x1fc>
 8012300:	30804030 	cmpltui	r2,r6,256
 8012304:	1000a41e 	bne	r2,zero,8012598 <__udivdi3+0x594>
 8012308:	3006d23a 	srli	r3,r6,8
 801230c:	04400204 	movi	r17,8
 8012310:	003f5506 	br	8012068 <__udivdi3+0x64>
 8012314:	38804030 	cmpltui	r2,r7,256
 8012318:	1000a41e 	bne	r2,zero,80125ac <__udivdi3+0x5a8>
 801231c:	3806d23a 	srli	r3,r7,8
 8012320:	01000204 	movi	r4,8
 8012324:	003fa006 	br	80121a8 <__udivdi3+0x1a4>
 8012328:	80a0983a 	sll	r16,r16,r2
 801232c:	946ed83a 	srl	r23,r18,r17
 8012330:	9086983a 	sll	r3,r18,r2
 8012334:	802cd43a 	srli	r22,r16,16
 8012338:	a462d83a 	srl	r17,r20,r17
 801233c:	b809883a 	mov	r4,r23
 8012340:	b00b883a 	mov	r5,r22
 8012344:	88eab03a 	or	r21,r17,r3
 8012348:	a0a6983a 	sll	r19,r20,r2
 801234c:	80052600 	call	8005260 <__umodsi3>
 8012350:	b809883a 	mov	r4,r23
 8012354:	b00b883a 	mov	r5,r22
 8012358:	1025883a 	mov	r18,r2
 801235c:	853fffcc 	andi	r20,r16,65535
 8012360:	80051fc0 	call	80051fc <__udivsi3>
 8012364:	a009883a 	mov	r4,r20
 8012368:	100b883a 	mov	r5,r2
 801236c:	102f883a 	mov	r23,r2
 8012370:	80052bc0 	call	80052bc <__mulsi3>
 8012374:	9024943a 	slli	r18,r18,16
 8012378:	a808d43a 	srli	r4,r21,16
 801237c:	9108b03a 	or	r4,r18,r4
 8012380:	2080062e 	bgeu	r4,r2,801239c <__udivdi3+0x398>
 8012384:	2409883a 	add	r4,r4,r16
 8012388:	b8ffffc4 	addi	r3,r23,-1
 801238c:	24009836 	bltu	r4,r16,80125f0 <__udivdi3+0x5ec>
 8012390:	2080972e 	bgeu	r4,r2,80125f0 <__udivdi3+0x5ec>
 8012394:	bdffff84 	addi	r23,r23,-2
 8012398:	2409883a 	add	r4,r4,r16
 801239c:	20a3c83a 	sub	r17,r4,r2
 80123a0:	8809883a 	mov	r4,r17
 80123a4:	b00b883a 	mov	r5,r22
 80123a8:	80052600 	call	8005260 <__umodsi3>
 80123ac:	1025883a 	mov	r18,r2
 80123b0:	8809883a 	mov	r4,r17
 80123b4:	b00b883a 	mov	r5,r22
 80123b8:	9024943a 	slli	r18,r18,16
 80123bc:	80051fc0 	call	80051fc <__udivsi3>
 80123c0:	100b883a 	mov	r5,r2
 80123c4:	a009883a 	mov	r4,r20
 80123c8:	ac7fffcc 	andi	r17,r21,65535
 80123cc:	1039883a 	mov	fp,r2
 80123d0:	9462b03a 	or	r17,r18,r17
 80123d4:	80052bc0 	call	80052bc <__mulsi3>
 80123d8:	8880062e 	bgeu	r17,r2,80123f4 <__udivdi3+0x3f0>
 80123dc:	8c23883a 	add	r17,r17,r16
 80123e0:	e0ffffc4 	addi	r3,fp,-1
 80123e4:	8c007e36 	bltu	r17,r16,80125e0 <__udivdi3+0x5dc>
 80123e8:	88807d2e 	bgeu	r17,r2,80125e0 <__udivdi3+0x5dc>
 80123ec:	e73fff84 	addi	fp,fp,-2
 80123f0:	8c23883a 	add	r17,r17,r16
 80123f4:	b806943a 	slli	r3,r23,16
 80123f8:	88a3c83a 	sub	r17,r17,r2
 80123fc:	1f06b03a 	or	r3,r3,fp
 8012400:	003f8a06 	br	801222c <__udivdi3+0x228>
 8012404:	30e6d83a 	srl	r19,r6,r3
 8012408:	3c4e983a 	sll	r7,r7,r17
 801240c:	90e0d83a 	srl	r16,r18,r3
 8012410:	a0c4d83a 	srl	r2,r20,r3
 8012414:	99e6b03a 	or	r19,r19,r7
 8012418:	9446983a 	sll	r3,r18,r17
 801241c:	9838d43a 	srli	fp,r19,16
 8012420:	8009883a 	mov	r4,r16
 8012424:	10eab03a 	or	r21,r2,r3
 8012428:	e00b883a 	mov	r5,fp
 801242c:	346c983a 	sll	r22,r6,r17
 8012430:	dd400015 	stw	r21,0(sp)
 8012434:	80052600 	call	8005260 <__umodsi3>
 8012438:	8009883a 	mov	r4,r16
 801243c:	e00b883a 	mov	r5,fp
 8012440:	102f883a 	mov	r23,r2
 8012444:	9cbfffcc 	andi	r18,r19,65535
 8012448:	80051fc0 	call	80051fc <__udivsi3>
 801244c:	9009883a 	mov	r4,r18
 8012450:	100b883a 	mov	r5,r2
 8012454:	1021883a 	mov	r16,r2
 8012458:	80052bc0 	call	80052bc <__mulsi3>
 801245c:	b82e943a 	slli	r23,r23,16
 8012460:	a808d43a 	srli	r4,r21,16
 8012464:	b908b03a 	or	r4,r23,r4
 8012468:	2080062e 	bgeu	r4,r2,8012484 <__udivdi3+0x480>
 801246c:	24c9883a 	add	r4,r4,r19
 8012470:	817fffc4 	addi	r5,r16,-1
 8012474:	24c05c36 	bltu	r4,r19,80125e8 <__udivdi3+0x5e4>
 8012478:	20805b2e 	bgeu	r4,r2,80125e8 <__udivdi3+0x5e4>
 801247c:	843fff84 	addi	r16,r16,-2
 8012480:	24c9883a 	add	r4,r4,r19
 8012484:	20abc83a 	sub	r21,r4,r2
 8012488:	a809883a 	mov	r4,r21
 801248c:	e00b883a 	mov	r5,fp
 8012490:	80052600 	call	8005260 <__umodsi3>
 8012494:	a809883a 	mov	r4,r21
 8012498:	e00b883a 	mov	r5,fp
 801249c:	102b883a 	mov	r21,r2
 80124a0:	80051fc0 	call	80051fc <__udivsi3>
 80124a4:	9009883a 	mov	r4,r18
 80124a8:	100b883a 	mov	r5,r2
 80124ac:	102f883a 	mov	r23,r2
 80124b0:	80052bc0 	call	80052bc <__mulsi3>
 80124b4:	d8c00017 	ldw	r3,0(sp)
 80124b8:	a82a943a 	slli	r21,r21,16
 80124bc:	1cbfffcc 	andi	r18,r3,65535
 80124c0:	aca4b03a 	or	r18,r21,r18
 80124c4:	9080062e 	bgeu	r18,r2,80124e0 <__udivdi3+0x4dc>
 80124c8:	94e5883a 	add	r18,r18,r19
 80124cc:	b8ffffc4 	addi	r3,r23,-1
 80124d0:	94c04136 	bltu	r18,r19,80125d8 <__udivdi3+0x5d4>
 80124d4:	9080402e 	bgeu	r18,r2,80125d8 <__udivdi3+0x5d4>
 80124d8:	bdffff84 	addi	r23,r23,-2
 80124dc:	94e5883a 	add	r18,r18,r19
 80124e0:	8020943a 	slli	r16,r16,16
 80124e4:	bd7fffcc 	andi	r21,r23,65535
 80124e8:	b73fffcc 	andi	fp,r22,65535
 80124ec:	85e0b03a 	or	r16,r16,r23
 80124f0:	8026d43a 	srli	r19,r16,16
 80124f4:	a809883a 	mov	r4,r21
 80124f8:	e00b883a 	mov	r5,fp
 80124fc:	b02cd43a 	srli	r22,r22,16
 8012500:	90a5c83a 	sub	r18,r18,r2
 8012504:	80052bc0 	call	80052bc <__mulsi3>
 8012508:	9809883a 	mov	r4,r19
 801250c:	e00b883a 	mov	r5,fp
 8012510:	102f883a 	mov	r23,r2
 8012514:	80052bc0 	call	80052bc <__mulsi3>
 8012518:	9809883a 	mov	r4,r19
 801251c:	b00b883a 	mov	r5,r22
 8012520:	1027883a 	mov	r19,r2
 8012524:	80052bc0 	call	80052bc <__mulsi3>
 8012528:	a809883a 	mov	r4,r21
 801252c:	b00b883a 	mov	r5,r22
 8012530:	102b883a 	mov	r21,r2
 8012534:	80052bc0 	call	80052bc <__mulsi3>
 8012538:	b806d43a 	srli	r3,r23,16
 801253c:	14c5883a 	add	r2,r2,r19
 8012540:	1887883a 	add	r3,r3,r2
 8012544:	1cc0022e 	bgeu	r3,r19,8012550 <__udivdi3+0x54c>
 8012548:	00800074 	movhi	r2,1
 801254c:	a8ab883a 	add	r21,r21,r2
 8012550:	1804d43a 	srli	r2,r3,16
 8012554:	156b883a 	add	r21,r2,r21
 8012558:	95400936 	bltu	r18,r21,8012580 <__udivdi3+0x57c>
 801255c:	95400326 	beq	r18,r21,801256c <__udivdi3+0x568>
 8012560:	8005883a 	mov	r2,r16
 8012564:	0007883a 	mov	r3,zero
 8012568:	003efd06 	br	8012160 <__udivdi3+0x15c>
 801256c:	1806943a 	slli	r3,r3,16
 8012570:	a44c983a 	sll	r6,r20,r17
 8012574:	bdffffcc 	andi	r23,r23,65535
 8012578:	1dc7883a 	add	r3,r3,r23
 801257c:	30fff82e 	bgeu	r6,r3,8012560 <__udivdi3+0x55c>
 8012580:	80bfffc4 	addi	r2,r16,-1
 8012584:	0007883a 	mov	r3,zero
 8012588:	003ef506 	br	8012160 <__udivdi3+0x15c>
 801258c:	3806d43a 	srli	r3,r7,16
 8012590:	01000404 	movi	r4,16
 8012594:	003f0406 	br	80121a8 <__udivdi3+0x1a4>
 8012598:	3007883a 	mov	r3,r6
 801259c:	003eb206 	br	8012068 <__udivdi3+0x64>
 80125a0:	0007883a 	mov	r3,zero
 80125a4:	00800044 	movi	r2,1
 80125a8:	003eed06 	br	8012160 <__udivdi3+0x15c>
 80125ac:	3807883a 	mov	r3,r7
 80125b0:	0009883a 	mov	r4,zero
 80125b4:	003efc06 	br	80121a8 <__udivdi3+0x1a4>
 80125b8:	8006d43a 	srli	r3,r16,16
 80125bc:	04400404 	movi	r17,16
 80125c0:	003f0f06 	br	8012200 <__udivdi3+0x1fc>
 80125c4:	3006d43a 	srli	r3,r6,16
 80125c8:	04400404 	movi	r17,16
 80125cc:	003ea606 	br	8012068 <__udivdi3+0x64>
 80125d0:	8007883a 	mov	r3,r16
 80125d4:	003f0a06 	br	8012200 <__udivdi3+0x1fc>
 80125d8:	182f883a 	mov	r23,r3
 80125dc:	003fc006 	br	80124e0 <__udivdi3+0x4dc>
 80125e0:	1839883a 	mov	fp,r3
 80125e4:	003f8306 	br	80123f4 <__udivdi3+0x3f0>
 80125e8:	2821883a 	mov	r16,r5
 80125ec:	003fa506 	br	8012484 <__udivdi3+0x480>
 80125f0:	182f883a 	mov	r23,r3
 80125f4:	003f6906 	br	801239c <__udivdi3+0x398>
 80125f8:	94bfff84 	addi	r18,r18,-2
 80125fc:	003f3806 	br	80122e0 <__udivdi3+0x2dc>
 8012600:	94bfff84 	addi	r18,r18,-2
 8012604:	003ecf06 	br	8012144 <__udivdi3+0x140>
 8012608:	ad7fff84 	addi	r21,r21,-2
 801260c:	2409883a 	add	r4,r4,r16
 8012610:	003eb706 	br	80120f0 <__udivdi3+0xec>
 8012614:	ad7fff84 	addi	r21,r21,-2
 8012618:	2409883a 	add	r4,r4,r16
 801261c:	003f1906 	br	8012284 <__udivdi3+0x280>

08012620 <__umoddi3>:
 8012620:	defff304 	addi	sp,sp,-52
 8012624:	dc400415 	stw	r17,16(sp)
 8012628:	dc000315 	stw	r16,12(sp)
 801262c:	dfc00c15 	stw	ra,48(sp)
 8012630:	df000b15 	stw	fp,44(sp)
 8012634:	ddc00a15 	stw	r23,40(sp)
 8012638:	dd800915 	stw	r22,36(sp)
 801263c:	dd400815 	stw	r21,32(sp)
 8012640:	dd000715 	stw	r20,28(sp)
 8012644:	dcc00615 	stw	r19,24(sp)
 8012648:	dc800515 	stw	r18,20(sp)
 801264c:	2823883a 	mov	r17,r5
 8012650:	2021883a 	mov	r16,r4
 8012654:	38003b1e 	bne	r7,zero,8012744 <__umoddi3+0x124>
 8012658:	3825883a 	mov	r18,r7
 801265c:	3029883a 	mov	r20,r6
 8012660:	2027883a 	mov	r19,r4
 8012664:	29805b2e 	bgeu	r5,r6,80127d4 <__umoddi3+0x1b4>
 8012668:	00bfffd4 	movui	r2,65535
 801266c:	282d883a 	mov	r22,r5
 8012670:	11809a2e 	bgeu	r2,r6,80128dc <__umoddi3+0x2bc>
 8012674:	00804034 	movhi	r2,256
 8012678:	30814436 	bltu	r6,r2,8012b8c <__umoddi3+0x56c>
 801267c:	3006d63a 	srli	r3,r6,24
 8012680:	04800604 	movi	r18,24
 8012684:	00820074 	movhi	r2,2049
 8012688:	1885883a 	add	r2,r3,r2
 801268c:	111f1303 	ldbu	r4,31820(r2)
 8012690:	00800804 	movi	r2,32
 8012694:	2489883a 	add	r4,r4,r18
 8012698:	1125c83a 	sub	r18,r2,r4
 801269c:	11000526 	beq	r2,r4,80126b4 <__umoddi3+0x94>
 80126a0:	8ca2983a 	sll	r17,r17,r18
 80126a4:	8108d83a 	srl	r4,r16,r4
 80126a8:	34a8983a 	sll	r20,r6,r18
 80126ac:	84a6983a 	sll	r19,r16,r18
 80126b0:	246cb03a 	or	r22,r4,r17
 80126b4:	a02ed43a 	srli	r23,r20,16
 80126b8:	b009883a 	mov	r4,r22
 80126bc:	a57fffcc 	andi	r21,r20,65535
 80126c0:	b80b883a 	mov	r5,r23
 80126c4:	80052600 	call	8005260 <__umodsi3>
 80126c8:	b80b883a 	mov	r5,r23
 80126cc:	b009883a 	mov	r4,r22
 80126d0:	1023883a 	mov	r17,r2
 80126d4:	80051fc0 	call	80051fc <__udivsi3>
 80126d8:	a809883a 	mov	r4,r21
 80126dc:	100b883a 	mov	r5,r2
 80126e0:	80052bc0 	call	80052bc <__mulsi3>
 80126e4:	8822943a 	slli	r17,r17,16
 80126e8:	9808d43a 	srli	r4,r19,16
 80126ec:	8908b03a 	or	r4,r17,r4
 80126f0:	2080042e 	bgeu	r4,r2,8012704 <__umoddi3+0xe4>
 80126f4:	2509883a 	add	r4,r4,r20
 80126f8:	25000236 	bltu	r4,r20,8012704 <__umoddi3+0xe4>
 80126fc:	2080012e 	bgeu	r4,r2,8012704 <__umoddi3+0xe4>
 8012700:	2509883a 	add	r4,r4,r20
 8012704:	20a1c83a 	sub	r16,r4,r2
 8012708:	b80b883a 	mov	r5,r23
 801270c:	8009883a 	mov	r4,r16
 8012710:	80052600 	call	8005260 <__umodsi3>
 8012714:	b80b883a 	mov	r5,r23
 8012718:	8009883a 	mov	r4,r16
 801271c:	1023883a 	mov	r17,r2
 8012720:	80051fc0 	call	80051fc <__udivsi3>
 8012724:	8822943a 	slli	r17,r17,16
 8012728:	100b883a 	mov	r5,r2
 801272c:	a809883a 	mov	r4,r21
 8012730:	80052bc0 	call	80052bc <__mulsi3>
 8012734:	98ffffcc 	andi	r3,r19,65535
 8012738:	88c6b03a 	or	r3,r17,r3
 801273c:	18805e2e 	bgeu	r3,r2,80128b8 <__umoddi3+0x298>
 8012740:	00005906 	br	80128a8 <__umoddi3+0x288>
 8012744:	2005883a 	mov	r2,r4
 8012748:	29c00d2e 	bgeu	r5,r7,8012780 <__umoddi3+0x160>
 801274c:	2807883a 	mov	r3,r5
 8012750:	dfc00c17 	ldw	ra,48(sp)
 8012754:	df000b17 	ldw	fp,44(sp)
 8012758:	ddc00a17 	ldw	r23,40(sp)
 801275c:	dd800917 	ldw	r22,36(sp)
 8012760:	dd400817 	ldw	r21,32(sp)
 8012764:	dd000717 	ldw	r20,28(sp)
 8012768:	dcc00617 	ldw	r19,24(sp)
 801276c:	dc800517 	ldw	r18,20(sp)
 8012770:	dc400417 	ldw	r17,16(sp)
 8012774:	dc000317 	ldw	r16,12(sp)
 8012778:	dec00d04 	addi	sp,sp,52
 801277c:	f800283a 	ret
 8012780:	013fffd4 	movui	r4,65535
 8012784:	2807883a 	mov	r3,r5
 8012788:	21c0592e 	bgeu	r4,r7,80128f0 <__umoddi3+0x2d0>
 801278c:	01004034 	movhi	r4,256
 8012790:	39010336 	bltu	r7,r4,8012ba0 <__umoddi3+0x580>
 8012794:	3808d63a 	srli	r4,r7,24
 8012798:	02000604 	movi	r8,24
 801279c:	01420074 	movhi	r5,2049
 80127a0:	214b883a 	add	r5,r4,r5
 80127a4:	2d1f1303 	ldbu	r20,31820(r5)
 80127a8:	01000804 	movi	r4,32
 80127ac:	a229883a 	add	r20,r20,r8
 80127b0:	252bc83a 	sub	r21,r4,r20
 80127b4:	2500531e 	bne	r4,r20,8012904 <__umoddi3+0x2e4>
 80127b8:	3c400136 	bltu	r7,r17,80127c0 <__umoddi3+0x1a0>
 80127bc:	81bfe436 	bltu	r16,r6,8012750 <__umoddi3+0x130>
 80127c0:	8185c83a 	sub	r2,r16,r6
 80127c4:	89cfc83a 	sub	r7,r17,r7
 80127c8:	8087803a 	cmpltu	r3,r16,r2
 80127cc:	38c7c83a 	sub	r3,r7,r3
 80127d0:	003fdf06 	br	8012750 <__umoddi3+0x130>
 80127d4:	3000041e 	bne	r6,zero,80127e8 <__umoddi3+0x1c8>
 80127d8:	000b883a 	mov	r5,zero
 80127dc:	01000044 	movi	r4,1
 80127e0:	80051fc0 	call	80051fc <__udivsi3>
 80127e4:	1029883a 	mov	r20,r2
 80127e8:	00bfffd4 	movui	r2,65535
 80127ec:	1500362e 	bgeu	r2,r20,80128c8 <__umoddi3+0x2a8>
 80127f0:	00804034 	movhi	r2,256
 80127f4:	a080ed36 	bltu	r20,r2,8012bac <__umoddi3+0x58c>
 80127f8:	a006d63a 	srli	r3,r20,24
 80127fc:	04800604 	movi	r18,24
 8012800:	00820074 	movhi	r2,2049
 8012804:	1885883a 	add	r2,r3,r2
 8012808:	159f1303 	ldbu	r22,31820(r2)
 801280c:	00800804 	movi	r2,32
 8012810:	b4ad883a 	add	r22,r22,r18
 8012814:	15a5c83a 	sub	r18,r2,r22
 8012818:	1580a51e 	bne	r2,r22,8012ab0 <__umoddi3+0x490>
 801281c:	a02ed43a 	srli	r23,r20,16
 8012820:	8d23c83a 	sub	r17,r17,r20
 8012824:	a57fffcc 	andi	r21,r20,65535
 8012828:	8809883a 	mov	r4,r17
 801282c:	b80b883a 	mov	r5,r23
 8012830:	80052600 	call	8005260 <__umodsi3>
 8012834:	8809883a 	mov	r4,r17
 8012838:	b80b883a 	mov	r5,r23
 801283c:	1023883a 	mov	r17,r2
 8012840:	80051fc0 	call	80051fc <__udivsi3>
 8012844:	1009883a 	mov	r4,r2
 8012848:	a80b883a 	mov	r5,r21
 801284c:	80052bc0 	call	80052bc <__mulsi3>
 8012850:	8822943a 	slli	r17,r17,16
 8012854:	9808d43a 	srli	r4,r19,16
 8012858:	8908b03a 	or	r4,r17,r4
 801285c:	2080032e 	bgeu	r4,r2,801286c <__umoddi3+0x24c>
 8012860:	2509883a 	add	r4,r4,r20
 8012864:	25000136 	bltu	r4,r20,801286c <__umoddi3+0x24c>
 8012868:	2080dc36 	bltu	r4,r2,8012bdc <__umoddi3+0x5bc>
 801286c:	20a1c83a 	sub	r16,r4,r2
 8012870:	b80b883a 	mov	r5,r23
 8012874:	8009883a 	mov	r4,r16
 8012878:	80052600 	call	8005260 <__umodsi3>
 801287c:	b80b883a 	mov	r5,r23
 8012880:	8009883a 	mov	r4,r16
 8012884:	1023883a 	mov	r17,r2
 8012888:	8822943a 	slli	r17,r17,16
 801288c:	80051fc0 	call	80051fc <__udivsi3>
 8012890:	a80b883a 	mov	r5,r21
 8012894:	1009883a 	mov	r4,r2
 8012898:	80052bc0 	call	80052bc <__mulsi3>
 801289c:	9cffffcc 	andi	r19,r19,65535
 80128a0:	8cc6b03a 	or	r3,r17,r19
 80128a4:	1880042e 	bgeu	r3,r2,80128b8 <__umoddi3+0x298>
 80128a8:	1d07883a 	add	r3,r3,r20
 80128ac:	1d000236 	bltu	r3,r20,80128b8 <__umoddi3+0x298>
 80128b0:	1880012e 	bgeu	r3,r2,80128b8 <__umoddi3+0x298>
 80128b4:	1d07883a 	add	r3,r3,r20
 80128b8:	1885c83a 	sub	r2,r3,r2
 80128bc:	1484d83a 	srl	r2,r2,r18
 80128c0:	0007883a 	mov	r3,zero
 80128c4:	003fa206 	br	8012750 <__umoddi3+0x130>
 80128c8:	a0804030 	cmpltui	r2,r20,256
 80128cc:	1000ba1e 	bne	r2,zero,8012bb8 <__umoddi3+0x598>
 80128d0:	a006d23a 	srli	r3,r20,8
 80128d4:	04800204 	movi	r18,8
 80128d8:	003fc906 	br	8012800 <__umoddi3+0x1e0>
 80128dc:	30804030 	cmpltui	r2,r6,256
 80128e0:	1000ad1e 	bne	r2,zero,8012b98 <__umoddi3+0x578>
 80128e4:	3006d23a 	srli	r3,r6,8
 80128e8:	04800204 	movi	r18,8
 80128ec:	003f6506 	br	8012684 <__umoddi3+0x64>
 80128f0:	39004030 	cmpltui	r4,r7,256
 80128f4:	2000b21e 	bne	r4,zero,8012bc0 <__umoddi3+0x5a0>
 80128f8:	3808d23a 	srli	r4,r7,8
 80128fc:	02000204 	movi	r8,8
 8012900:	003fa606 	br	801279c <__umoddi3+0x17c>
 8012904:	3d4e983a 	sll	r7,r7,r21
 8012908:	3508d83a 	srl	r4,r6,r20
 801290c:	8d2cd83a 	srl	r22,r17,r20
 8012910:	8504d83a 	srl	r2,r16,r20
 8012914:	21e4b03a 	or	r18,r4,r7
 8012918:	8d62983a 	sll	r17,r17,r21
 801291c:	9026d43a 	srli	r19,r18,16
 8012920:	354c983a 	sll	r6,r6,r21
 8012924:	1444b03a 	or	r2,r2,r17
 8012928:	b009883a 	mov	r4,r22
 801292c:	980b883a 	mov	r5,r19
 8012930:	d9800115 	stw	r6,4(sp)
 8012934:	d8800015 	stw	r2,0(sp)
 8012938:	80052600 	call	8005260 <__umodsi3>
 801293c:	980b883a 	mov	r5,r19
 8012940:	b009883a 	mov	r4,r22
 8012944:	102f883a 	mov	r23,r2
 8012948:	947fffcc 	andi	r17,r18,65535
 801294c:	80051fc0 	call	80051fc <__udivsi3>
 8012950:	8809883a 	mov	r4,r17
 8012954:	100b883a 	mov	r5,r2
 8012958:	1039883a 	mov	fp,r2
 801295c:	80052bc0 	call	80052bc <__mulsi3>
 8012960:	d8c00017 	ldw	r3,0(sp)
 8012964:	b82e943a 	slli	r23,r23,16
 8012968:	8560983a 	sll	r16,r16,r21
 801296c:	1808d43a 	srli	r4,r3,16
 8012970:	b908b03a 	or	r4,r23,r4
 8012974:	2080062e 	bgeu	r4,r2,8012990 <__umoddi3+0x370>
 8012978:	2489883a 	add	r4,r4,r18
 801297c:	e17fffc4 	addi	r5,fp,-1
 8012980:	24809436 	bltu	r4,r18,8012bd4 <__umoddi3+0x5b4>
 8012984:	2080932e 	bgeu	r4,r2,8012bd4 <__umoddi3+0x5b4>
 8012988:	e73fff84 	addi	fp,fp,-2
 801298c:	2489883a 	add	r4,r4,r18
 8012990:	20adc83a 	sub	r22,r4,r2
 8012994:	980b883a 	mov	r5,r19
 8012998:	b009883a 	mov	r4,r22
 801299c:	80052600 	call	8005260 <__umodsi3>
 80129a0:	980b883a 	mov	r5,r19
 80129a4:	b009883a 	mov	r4,r22
 80129a8:	102f883a 	mov	r23,r2
 80129ac:	80051fc0 	call	80051fc <__udivsi3>
 80129b0:	100b883a 	mov	r5,r2
 80129b4:	8809883a 	mov	r4,r17
 80129b8:	d8800215 	stw	r2,8(sp)
 80129bc:	80052bc0 	call	80052bc <__mulsi3>
 80129c0:	d8c00017 	ldw	r3,0(sp)
 80129c4:	b82e943a 	slli	r23,r23,16
 80129c8:	d9400217 	ldw	r5,8(sp)
 80129cc:	1c7fffcc 	andi	r17,r3,65535
 80129d0:	bc62b03a 	or	r17,r23,r17
 80129d4:	8880062e 	bgeu	r17,r2,80129f0 <__umoddi3+0x3d0>
 80129d8:	8ca3883a 	add	r17,r17,r18
 80129dc:	28ffffc4 	addi	r3,r5,-1
 80129e0:	8c807a36 	bltu	r17,r18,8012bcc <__umoddi3+0x5ac>
 80129e4:	8880792e 	bgeu	r17,r2,8012bcc <__umoddi3+0x5ac>
 80129e8:	297fff84 	addi	r5,r5,-2
 80129ec:	8ca3883a 	add	r17,r17,r18
 80129f0:	e02c943a 	slli	r22,fp,16
 80129f4:	d9c00117 	ldw	r7,4(sp)
 80129f8:	29bfffcc 	andi	r6,r5,65535
 80129fc:	b16cb03a 	or	r22,r22,r5
 8012a00:	38ffffcc 	andi	r3,r7,65535
 8012a04:	b02cd43a 	srli	r22,r22,16
 8012a08:	180b883a 	mov	r5,r3
 8012a0c:	3009883a 	mov	r4,r6
 8012a10:	3838d43a 	srli	fp,r7,16
 8012a14:	182f883a 	mov	r23,r3
 8012a18:	d9800015 	stw	r6,0(sp)
 8012a1c:	88a3c83a 	sub	r17,r17,r2
 8012a20:	80052bc0 	call	80052bc <__mulsi3>
 8012a24:	b80b883a 	mov	r5,r23
 8012a28:	b009883a 	mov	r4,r22
 8012a2c:	102f883a 	mov	r23,r2
 8012a30:	80052bc0 	call	80052bc <__mulsi3>
 8012a34:	e00b883a 	mov	r5,fp
 8012a38:	b009883a 	mov	r4,r22
 8012a3c:	102d883a 	mov	r22,r2
 8012a40:	80052bc0 	call	80052bc <__mulsi3>
 8012a44:	d9800017 	ldw	r6,0(sp)
 8012a48:	e00b883a 	mov	r5,fp
 8012a4c:	1039883a 	mov	fp,r2
 8012a50:	3009883a 	mov	r4,r6
 8012a54:	80052bc0 	call	80052bc <__mulsi3>
 8012a58:	b808d43a 	srli	r4,r23,16
 8012a5c:	1585883a 	add	r2,r2,r22
 8012a60:	2089883a 	add	r4,r4,r2
 8012a64:	2580022e 	bgeu	r4,r22,8012a70 <__umoddi3+0x450>
 8012a68:	00800074 	movhi	r2,1
 8012a6c:	e0b9883a 	add	fp,fp,r2
 8012a70:	2006d43a 	srli	r3,r4,16
 8012a74:	2008943a 	slli	r4,r4,16
 8012a78:	bdffffcc 	andi	r23,r23,65535
 8012a7c:	1f07883a 	add	r3,r3,fp
 8012a80:	25c9883a 	add	r4,r4,r23
 8012a84:	88c03a36 	bltu	r17,r3,8012b70 <__umoddi3+0x550>
 8012a88:	88c03826 	beq	r17,r3,8012b6c <__umoddi3+0x54c>
 8012a8c:	8109c83a 	sub	r4,r16,r4
 8012a90:	8121803a 	cmpltu	r16,r16,r4
 8012a94:	88c7c83a 	sub	r3,r17,r3
 8012a98:	1c07c83a 	sub	r3,r3,r16
 8012a9c:	1d04983a 	sll	r2,r3,r20
 8012aa0:	2548d83a 	srl	r4,r4,r21
 8012aa4:	1d46d83a 	srl	r3,r3,r21
 8012aa8:	1104b03a 	or	r2,r2,r4
 8012aac:	003f2806 	br	8012750 <__umoddi3+0x130>
 8012ab0:	a4a8983a 	sll	r20,r20,r18
 8012ab4:	8da6d83a 	srl	r19,r17,r22
 8012ab8:	8ca2983a 	sll	r17,r17,r18
 8012abc:	a02ed43a 	srli	r23,r20,16
 8012ac0:	9809883a 	mov	r4,r19
 8012ac4:	85acd83a 	srl	r22,r16,r22
 8012ac8:	b80b883a 	mov	r5,r23
 8012acc:	80052600 	call	8005260 <__umodsi3>
 8012ad0:	9809883a 	mov	r4,r19
 8012ad4:	b80b883a 	mov	r5,r23
 8012ad8:	b46cb03a 	or	r22,r22,r17
 8012adc:	a57fffcc 	andi	r21,r20,65535
 8012ae0:	1023883a 	mov	r17,r2
 8012ae4:	80051fc0 	call	80051fc <__udivsi3>
 8012ae8:	a809883a 	mov	r4,r21
 8012aec:	100b883a 	mov	r5,r2
 8012af0:	80052bc0 	call	80052bc <__mulsi3>
 8012af4:	8822943a 	slli	r17,r17,16
 8012af8:	b008d43a 	srli	r4,r22,16
 8012afc:	84a6983a 	sll	r19,r16,r18
 8012b00:	8908b03a 	or	r4,r17,r4
 8012b04:	2080042e 	bgeu	r4,r2,8012b18 <__umoddi3+0x4f8>
 8012b08:	2509883a 	add	r4,r4,r20
 8012b0c:	25000236 	bltu	r4,r20,8012b18 <__umoddi3+0x4f8>
 8012b10:	2080012e 	bgeu	r4,r2,8012b18 <__umoddi3+0x4f8>
 8012b14:	2509883a 	add	r4,r4,r20
 8012b18:	20a1c83a 	sub	r16,r4,r2
 8012b1c:	8009883a 	mov	r4,r16
 8012b20:	b80b883a 	mov	r5,r23
 8012b24:	80052600 	call	8005260 <__umodsi3>
 8012b28:	8009883a 	mov	r4,r16
 8012b2c:	1021883a 	mov	r16,r2
 8012b30:	b80b883a 	mov	r5,r23
 8012b34:	8020943a 	slli	r16,r16,16
 8012b38:	80051fc0 	call	80051fc <__udivsi3>
 8012b3c:	100b883a 	mov	r5,r2
 8012b40:	a809883a 	mov	r4,r21
 8012b44:	b47fffcc 	andi	r17,r22,65535
 8012b48:	80052bc0 	call	80052bc <__mulsi3>
 8012b4c:	8462b03a 	or	r17,r16,r17
 8012b50:	8880042e 	bgeu	r17,r2,8012b64 <__umoddi3+0x544>
 8012b54:	8d23883a 	add	r17,r17,r20
 8012b58:	8d000236 	bltu	r17,r20,8012b64 <__umoddi3+0x544>
 8012b5c:	8880012e 	bgeu	r17,r2,8012b64 <__umoddi3+0x544>
 8012b60:	8d23883a 	add	r17,r17,r20
 8012b64:	88a3c83a 	sub	r17,r17,r2
 8012b68:	003f2f06 	br	8012828 <__umoddi3+0x208>
 8012b6c:	813fc72e 	bgeu	r16,r4,8012a8c <__umoddi3+0x46c>
 8012b70:	d8800117 	ldw	r2,4(sp)
 8012b74:	20a7c83a 	sub	r19,r4,r2
 8012b78:	24c9803a 	cmpltu	r4,r4,r19
 8012b7c:	2489883a 	add	r4,r4,r18
 8012b80:	1907c83a 	sub	r3,r3,r4
 8012b84:	9809883a 	mov	r4,r19
 8012b88:	003fc006 	br	8012a8c <__umoddi3+0x46c>
 8012b8c:	3006d43a 	srli	r3,r6,16
 8012b90:	04800404 	movi	r18,16
 8012b94:	003ebb06 	br	8012684 <__umoddi3+0x64>
 8012b98:	3007883a 	mov	r3,r6
 8012b9c:	003eb906 	br	8012684 <__umoddi3+0x64>
 8012ba0:	3808d43a 	srli	r4,r7,16
 8012ba4:	02000404 	movi	r8,16
 8012ba8:	003efc06 	br	801279c <__umoddi3+0x17c>
 8012bac:	a006d43a 	srli	r3,r20,16
 8012bb0:	04800404 	movi	r18,16
 8012bb4:	003f1206 	br	8012800 <__umoddi3+0x1e0>
 8012bb8:	a007883a 	mov	r3,r20
 8012bbc:	003f1006 	br	8012800 <__umoddi3+0x1e0>
 8012bc0:	3809883a 	mov	r4,r7
 8012bc4:	0011883a 	mov	r8,zero
 8012bc8:	003ef406 	br	801279c <__umoddi3+0x17c>
 8012bcc:	180b883a 	mov	r5,r3
 8012bd0:	003f8706 	br	80129f0 <__umoddi3+0x3d0>
 8012bd4:	2839883a 	mov	fp,r5
 8012bd8:	003f6d06 	br	8012990 <__umoddi3+0x370>
 8012bdc:	2509883a 	add	r4,r4,r20
 8012be0:	003f2206 	br	801286c <__umoddi3+0x24c>

08012be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012be4:	defffe04 	addi	sp,sp,-8
 8012be8:	dfc00115 	stw	ra,4(sp)
 8012bec:	df000015 	stw	fp,0(sp)
 8012bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012bf4:	d0a01317 	ldw	r2,-32692(gp)
 8012bf8:	10000326 	beq	r2,zero,8012c08 <alt_get_errno+0x24>
 8012bfc:	d0a01317 	ldw	r2,-32692(gp)
 8012c00:	103ee83a 	callr	r2
 8012c04:	00000106 	br	8012c0c <alt_get_errno+0x28>
 8012c08:	d0a73f04 	addi	r2,gp,-25348
}
 8012c0c:	e037883a 	mov	sp,fp
 8012c10:	dfc00117 	ldw	ra,4(sp)
 8012c14:	df000017 	ldw	fp,0(sp)
 8012c18:	dec00204 	addi	sp,sp,8
 8012c1c:	f800283a 	ret

08012c20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012c20:	defffb04 	addi	sp,sp,-20
 8012c24:	dfc00415 	stw	ra,16(sp)
 8012c28:	df000315 	stw	fp,12(sp)
 8012c2c:	df000304 	addi	fp,sp,12
 8012c30:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8012c34:	e0bffd17 	ldw	r2,-12(fp)
 8012c38:	10000916 	blt	r2,zero,8012c60 <close+0x40>
 8012c3c:	e0fffd17 	ldw	r3,-12(fp)
 8012c40:	1805883a 	mov	r2,r3
 8012c44:	1085883a 	add	r2,r2,r2
 8012c48:	10c5883a 	add	r2,r2,r3
 8012c4c:	100490ba 	slli	r2,r2,2
 8012c50:	00c200b4 	movhi	r3,2050
 8012c54:	18e32e04 	addi	r3,r3,-29512
 8012c58:	10c5883a 	add	r2,r2,r3
 8012c5c:	00000106 	br	8012c64 <close+0x44>
 8012c60:	0005883a 	mov	r2,zero
 8012c64:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 8012c68:	e0bfff17 	ldw	r2,-4(fp)
 8012c6c:	10001926 	beq	r2,zero,8012cd4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012c70:	e0bfff17 	ldw	r2,-4(fp)
 8012c74:	10800017 	ldw	r2,0(r2)
 8012c78:	10800417 	ldw	r2,16(r2)
 8012c7c:	10000626 	beq	r2,zero,8012c98 <close+0x78>
 8012c80:	e0bfff17 	ldw	r2,-4(fp)
 8012c84:	10800017 	ldw	r2,0(r2)
 8012c88:	10800417 	ldw	r2,16(r2)
 8012c8c:	e13fff17 	ldw	r4,-4(fp)
 8012c90:	103ee83a 	callr	r2
 8012c94:	00000106 	br	8012c9c <close+0x7c>
 8012c98:	0005883a 	mov	r2,zero
 8012c9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012ca0:	e13ffd17 	ldw	r4,-12(fp)
 8012ca4:	80134dc0 	call	80134dc <alt_release_fd>
    if (rval < 0)
 8012ca8:	e0bffe17 	ldw	r2,-8(fp)
 8012cac:	1000070e 	bge	r2,zero,8012ccc <close+0xac>
    {
      ALT_ERRNO = -rval;
 8012cb0:	8012be40 	call	8012be4 <alt_get_errno>
 8012cb4:	1007883a 	mov	r3,r2
 8012cb8:	e0bffe17 	ldw	r2,-8(fp)
 8012cbc:	0085c83a 	sub	r2,zero,r2
 8012cc0:	18800015 	stw	r2,0(r3)
      return -1;
 8012cc4:	00bfffc4 	movi	r2,-1
 8012cc8:	00000706 	br	8012ce8 <close+0xc8>
    }
    return 0;
 8012ccc:	0005883a 	mov	r2,zero
 8012cd0:	00000506 	br	8012ce8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012cd4:	8012be40 	call	8012be4 <alt_get_errno>
 8012cd8:	1007883a 	mov	r3,r2
 8012cdc:	00801444 	movi	r2,81
 8012ce0:	18800015 	stw	r2,0(r3)
    return -1;
 8012ce4:	00bfffc4 	movi	r2,-1
  }
}
 8012ce8:	e037883a 	mov	sp,fp
 8012cec:	dfc00117 	ldw	ra,4(sp)
 8012cf0:	df000017 	ldw	fp,0(sp)
 8012cf4:	dec00204 	addi	sp,sp,8
 8012cf8:	f800283a 	ret

08012cfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012cfc:	defffc04 	addi	sp,sp,-16
 8012d00:	df000315 	stw	fp,12(sp)
 8012d04:	df000304 	addi	fp,sp,12
 8012d08:	e13fff15 	stw	r4,-4(fp)
 8012d0c:	e17ffe15 	stw	r5,-8(fp)
 8012d10:	e1bffd15 	stw	r6,-12(fp)
  return len;
 8012d14:	e0bffd17 	ldw	r2,-12(fp)
}
 8012d18:	e037883a 	mov	sp,fp
 8012d1c:	df000017 	ldw	fp,0(sp)
 8012d20:	dec00104 	addi	sp,sp,4
 8012d24:	f800283a 	ret

08012d28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8012d28:	defffd04 	addi	sp,sp,-12
 8012d2c:	df000215 	stw	fp,8(sp)
 8012d30:	df000204 	addi	fp,sp,8
 8012d34:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8012d38:	0001883a 	nop
 8012d3c:	e0bffe17 	ldw	r2,-8(fp)
 8012d40:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8012d44:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8012d48:	10000226 	beq	r2,zero,8012d54 <_exit+0x2c>
    ALT_SIM_FAIL();
 8012d4c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 8012d50:	00000106 	br	8012d58 <_exit+0x30>
    ALT_SIM_PASS();
 8012d54:	002af0b0 	cmpltui	zero,zero,43970
}
 8012d58:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8012d5c:	003fff06 	br	8012d5c <_exit+0x34>

08012d60 <alt_get_errno>:
{
 8012d60:	defffe04 	addi	sp,sp,-8
 8012d64:	dfc00115 	stw	ra,4(sp)
 8012d68:	df000015 	stw	fp,0(sp)
 8012d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012d70:	d0a01317 	ldw	r2,-32692(gp)
 8012d74:	10000326 	beq	r2,zero,8012d84 <alt_get_errno+0x24>
 8012d78:	d0a01317 	ldw	r2,-32692(gp)
 8012d7c:	103ee83a 	callr	r2
 8012d80:	00000106 	br	8012d88 <alt_get_errno+0x28>
 8012d84:	d0a73f04 	addi	r2,gp,-25348
}
 8012d88:	e037883a 	mov	sp,fp
 8012d8c:	dfc00117 	ldw	ra,4(sp)
 8012d90:	df000017 	ldw	fp,0(sp)
 8012d94:	dec00204 	addi	sp,sp,8
 8012d98:	f800283a 	ret

08012d9c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8012d9c:	defffb04 	addi	sp,sp,-20
 8012da0:	dfc00415 	stw	ra,16(sp)
 8012da4:	df000315 	stw	fp,12(sp)
 8012da8:	df000304 	addi	fp,sp,12
 8012dac:	e13ffe15 	stw	r4,-8(fp)
 8012db0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012db4:	e0bffe17 	ldw	r2,-8(fp)
 8012db8:	10000916 	blt	r2,zero,8012de0 <fstat+0x44>
 8012dbc:	e0fffe17 	ldw	r3,-8(fp)
 8012dc0:	1805883a 	mov	r2,r3
 8012dc4:	1085883a 	add	r2,r2,r2
 8012dc8:	10c5883a 	add	r2,r2,r3
 8012dcc:	100490ba 	slli	r2,r2,2
 8012dd0:	00c200b4 	movhi	r3,2050
 8012dd4:	18e32e04 	addi	r3,r3,-29512
 8012dd8:	10c5883a 	add	r2,r2,r3
 8012ddc:	00000106 	br	8012de4 <fstat+0x48>
 8012de0:	0005883a 	mov	r2,zero
 8012de4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8012de8:	e0bfff17 	ldw	r2,-4(fp)
 8012dec:	10001026 	beq	r2,zero,8012e30 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012df0:	e0bfff17 	ldw	r2,-4(fp)
 8012df4:	10800017 	ldw	r2,0(r2)
 8012df8:	10800817 	ldw	r2,32(r2)
 8012dfc:	10000726 	beq	r2,zero,8012e1c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 8012e00:	e0bfff17 	ldw	r2,-4(fp)
 8012e04:	10800017 	ldw	r2,0(r2)
 8012e08:	10800817 	ldw	r2,32(r2)
 8012e0c:	e17ffd17 	ldw	r5,-12(fp)
 8012e10:	e13fff17 	ldw	r4,-4(fp)
 8012e14:	103ee83a 	callr	r2
 8012e18:	00000a06 	br	8012e44 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8012e1c:	e0bffd17 	ldw	r2,-12(fp)
 8012e20:	00c80004 	movi	r3,8192
 8012e24:	10c00115 	stw	r3,4(r2)
      return 0;
 8012e28:	0005883a 	mov	r2,zero
 8012e2c:	00000506 	br	8012e44 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012e30:	8012d600 	call	8012d60 <alt_get_errno>
 8012e34:	1007883a 	mov	r3,r2
 8012e38:	00801444 	movi	r2,81
 8012e3c:	18800015 	stw	r2,0(r3)
    return -1;
 8012e40:	00bfffc4 	movi	r2,-1
  }
}
 8012e44:	e037883a 	mov	sp,fp
 8012e48:	dfc00117 	ldw	ra,4(sp)
 8012e4c:	df000017 	ldw	fp,0(sp)
 8012e50:	dec00204 	addi	sp,sp,8
 8012e54:	f800283a 	ret

08012e58 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 8012e58:	deffff04 	addi	sp,sp,-4
 8012e5c:	df000015 	stw	fp,0(sp)
 8012e60:	d839883a 	mov	fp,sp
  return 0;
 8012e64:	0005883a 	mov	r2,zero
}
 8012e68:	e037883a 	mov	sp,fp
 8012e6c:	df000017 	ldw	fp,0(sp)
 8012e70:	dec00104 	addi	sp,sp,4
 8012e74:	f800283a 	ret

08012e78 <alt_get_errno>:
{
 8012e78:	defffe04 	addi	sp,sp,-8
 8012e7c:	dfc00115 	stw	ra,4(sp)
 8012e80:	df000015 	stw	fp,0(sp)
 8012e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012e88:	d0a01317 	ldw	r2,-32692(gp)
 8012e8c:	10000326 	beq	r2,zero,8012e9c <alt_get_errno+0x24>
 8012e90:	d0a01317 	ldw	r2,-32692(gp)
 8012e94:	103ee83a 	callr	r2
 8012e98:	00000106 	br	8012ea0 <alt_get_errno+0x28>
 8012e9c:	d0a73f04 	addi	r2,gp,-25348
}
 8012ea0:	e037883a 	mov	sp,fp
 8012ea4:	dfc00117 	ldw	ra,4(sp)
 8012ea8:	df000017 	ldw	fp,0(sp)
 8012eac:	dec00204 	addi	sp,sp,8
 8012eb0:	f800283a 	ret

08012eb4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8012eb4:	deffea04 	addi	sp,sp,-88
 8012eb8:	dfc01515 	stw	ra,84(sp)
 8012ebc:	df001415 	stw	fp,80(sp)
 8012ec0:	df001404 	addi	fp,sp,80
 8012ec4:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012ec8:	e0bfec17 	ldw	r2,-80(fp)
 8012ecc:	10000916 	blt	r2,zero,8012ef4 <isatty+0x40>
 8012ed0:	e0ffec17 	ldw	r3,-80(fp)
 8012ed4:	1805883a 	mov	r2,r3
 8012ed8:	1085883a 	add	r2,r2,r2
 8012edc:	10c5883a 	add	r2,r2,r3
 8012ee0:	100490ba 	slli	r2,r2,2
 8012ee4:	00c200b4 	movhi	r3,2050
 8012ee8:	18e32e04 	addi	r3,r3,-29512
 8012eec:	10c5883a 	add	r2,r2,r3
 8012ef0:	00000106 	br	8012ef8 <isatty+0x44>
 8012ef4:	0005883a 	mov	r2,zero
 8012ef8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8012efc:	e0bfff17 	ldw	r2,-4(fp)
 8012f00:	10000e26 	beq	r2,zero,8012f3c <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8012f04:	e0bfff17 	ldw	r2,-4(fp)
 8012f08:	10800017 	ldw	r2,0(r2)
 8012f0c:	10800817 	ldw	r2,32(r2)
 8012f10:	1000021e 	bne	r2,zero,8012f1c <isatty+0x68>
    {
      return 1;
 8012f14:	00800044 	movi	r2,1
 8012f18:	00000d06 	br	8012f50 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8012f1c:	e0bfed04 	addi	r2,fp,-76
 8012f20:	100b883a 	mov	r5,r2
 8012f24:	e13fec17 	ldw	r4,-80(fp)
 8012f28:	8012d9c0 	call	8012d9c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8012f2c:	e0bfee17 	ldw	r2,-72(fp)
 8012f30:	10880020 	cmpeqi	r2,r2,8192
 8012f34:	10803fcc 	andi	r2,r2,255
 8012f38:	00000506 	br	8012f50 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012f3c:	8012e780 	call	8012e78 <alt_get_errno>
 8012f40:	1007883a 	mov	r3,r2
 8012f44:	00801444 	movi	r2,81
 8012f48:	18800015 	stw	r2,0(r3)
    return 0;
 8012f4c:	0005883a 	mov	r2,zero
  }
}
 8012f50:	e037883a 	mov	sp,fp
 8012f54:	dfc00117 	ldw	ra,4(sp)
 8012f58:	df000017 	ldw	fp,0(sp)
 8012f5c:	dec00204 	addi	sp,sp,8
 8012f60:	f800283a 	ret

08012f64 <alt_get_errno>:
{
 8012f64:	defffe04 	addi	sp,sp,-8
 8012f68:	dfc00115 	stw	ra,4(sp)
 8012f6c:	df000015 	stw	fp,0(sp)
 8012f70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012f74:	d0a01317 	ldw	r2,-32692(gp)
 8012f78:	10000326 	beq	r2,zero,8012f88 <alt_get_errno+0x24>
 8012f7c:	d0a01317 	ldw	r2,-32692(gp)
 8012f80:	103ee83a 	callr	r2
 8012f84:	00000106 	br	8012f8c <alt_get_errno+0x28>
 8012f88:	d0a73f04 	addi	r2,gp,-25348
}
 8012f8c:	e037883a 	mov	sp,fp
 8012f90:	dfc00117 	ldw	ra,4(sp)
 8012f94:	df000017 	ldw	fp,0(sp)
 8012f98:	dec00204 	addi	sp,sp,8
 8012f9c:	f800283a 	ret

08012fa0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8012fa0:	defffb04 	addi	sp,sp,-20
 8012fa4:	dfc00415 	stw	ra,16(sp)
 8012fa8:	df000315 	stw	fp,12(sp)
 8012fac:	df000304 	addi	fp,sp,12
 8012fb0:	e13ffe15 	stw	r4,-8(fp)
 8012fb4:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 8012fb8:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 8012fbc:	e0bffe17 	ldw	r2,-8(fp)
 8012fc0:	00802e16 	blt	zero,r2,801307c <kill+0xdc>
 8012fc4:	e0bffd17 	ldw	r2,-12(fp)
 8012fc8:	10800828 	cmpgeui	r2,r2,32
 8012fcc:	1000281e 	bne	r2,zero,8013070 <kill+0xd0>
 8012fd0:	e0bffd17 	ldw	r2,-12(fp)
 8012fd4:	100690ba 	slli	r3,r2,2
 8012fd8:	00820074 	movhi	r2,2049
 8012fdc:	1885883a 	add	r2,r3,r2
 8012fe0:	108bfa17 	ldw	r2,12264(r2)
 8012fe4:	1000683a 	jmp	r2
 8012fe8:	08013090 	cmplti	zero,at,1218
 8012fec:	08013070 	cmpltui	zero,at,1217
 8012ff0:	08013070 	cmpltui	zero,at,1217
 8012ff4:	08013068 	cmpgeui	zero,at,1217
 8012ff8:	08013068 	cmpgeui	zero,at,1217
 8012ffc:	08013068 	cmpgeui	zero,at,1217
 8013000:	08013068 	cmpgeui	zero,at,1217
 8013004:	08013070 	cmpltui	zero,at,1217
 8013008:	08013068 	cmpgeui	zero,at,1217
 801300c:	08013068 	cmpgeui	zero,at,1217
 8013010:	08013068 	cmpgeui	zero,at,1217
 8013014:	08013068 	cmpgeui	zero,at,1217
 8013018:	08013068 	cmpgeui	zero,at,1217
 801301c:	08013068 	cmpgeui	zero,at,1217
 8013020:	08013068 	cmpgeui	zero,at,1217
 8013024:	08013068 	cmpgeui	zero,at,1217
 8013028:	08013090 	cmplti	zero,at,1218
 801302c:	08013070 	cmpltui	zero,at,1217
 8013030:	08013070 	cmpltui	zero,at,1217
 8013034:	08013070 	cmpltui	zero,at,1217
 8013038:	08013090 	cmplti	zero,at,1218
 801303c:	08013070 	cmpltui	zero,at,1217
 8013040:	08013070 	cmpltui	zero,at,1217
 8013044:	08013068 	cmpgeui	zero,at,1217
 8013048:	08013068 	cmpgeui	zero,at,1217
 801304c:	08013068 	cmpgeui	zero,at,1217
 8013050:	08013068 	cmpgeui	zero,at,1217
 8013054:	08013068 	cmpgeui	zero,at,1217
 8013058:	08013070 	cmpltui	zero,at,1217
 801305c:	08013070 	cmpltui	zero,at,1217
 8013060:	08013068 	cmpgeui	zero,at,1217
 8013064:	08013068 	cmpgeui	zero,at,1217
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 8013068:	0009883a 	mov	r4,zero
 801306c:	8012d280 	call	8012d28 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8013070:	00800584 	movi	r2,22
 8013074:	e0bfff15 	stw	r2,-4(fp)
 8013078:	00000606 	br	8013094 <kill+0xf4>
    }
  }

  else if (pid > 0)
 801307c:	e0bffe17 	ldw	r2,-8(fp)
 8013080:	0080040e 	bge	zero,r2,8013094 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8013084:	008000c4 	movi	r2,3
 8013088:	e0bfff15 	stw	r2,-4(fp)
 801308c:	00000106 	br	8013094 <kill+0xf4>
      break;
 8013090:	0001883a 	nop
  }

  if (status)
 8013094:	e0bfff17 	ldw	r2,-4(fp)
 8013098:	10000626 	beq	r2,zero,80130b4 <kill+0x114>
  {
    ALT_ERRNO = status;
 801309c:	8012f640 	call	8012f64 <alt_get_errno>
 80130a0:	1007883a 	mov	r3,r2
 80130a4:	e0bfff17 	ldw	r2,-4(fp)
 80130a8:	18800015 	stw	r2,0(r3)
    return -1;
 80130ac:	00bfffc4 	movi	r2,-1
 80130b0:	00000106 	br	80130b8 <kill+0x118>
  }

  return 0;
 80130b4:	0005883a 	mov	r2,zero
}
 80130b8:	e037883a 	mov	sp,fp
 80130bc:	dfc00117 	ldw	ra,4(sp)
 80130c0:	df000017 	ldw	fp,0(sp)
 80130c4:	dec00204 	addi	sp,sp,8
 80130c8:	f800283a 	ret

080130cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80130cc:	defffc04 	addi	sp,sp,-16
 80130d0:	df000315 	stw	fp,12(sp)
 80130d4:	df000304 	addi	fp,sp,12
 80130d8:	e13fff15 	stw	r4,-4(fp)
 80130dc:	e17ffe15 	stw	r5,-8(fp)
 80130e0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 80130e4:	e0fffe17 	ldw	r3,-8(fp)
 80130e8:	e0bfff17 	ldw	r2,-4(fp)
 80130ec:	18800c26 	beq	r3,r2,8013120 <alt_load_section+0x54>
  {
    while( to != end )
 80130f0:	00000806 	br	8013114 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80130f4:	e0ffff17 	ldw	r3,-4(fp)
 80130f8:	18800104 	addi	r2,r3,4
 80130fc:	e0bfff15 	stw	r2,-4(fp)
 8013100:	e0bffe17 	ldw	r2,-8(fp)
 8013104:	11000104 	addi	r4,r2,4
 8013108:	e13ffe15 	stw	r4,-8(fp)
 801310c:	18c00017 	ldw	r3,0(r3)
 8013110:	10c00015 	stw	r3,0(r2)
    while( to != end )
 8013114:	e0fffe17 	ldw	r3,-8(fp)
 8013118:	e0bffd17 	ldw	r2,-12(fp)
 801311c:	18bff51e 	bne	r3,r2,80130f4 <alt_load_section+0x28>
    }
  }
}
 8013120:	0001883a 	nop
 8013124:	e037883a 	mov	sp,fp
 8013128:	df000017 	ldw	fp,0(sp)
 801312c:	dec00104 	addi	sp,sp,4
 8013130:	f800283a 	ret

08013134 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8013134:	defffe04 	addi	sp,sp,-8
 8013138:	dfc00115 	stw	ra,4(sp)
 801313c:	df000015 	stw	fp,0(sp)
 8013140:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8013144:	018200b4 	movhi	r6,2050
 8013148:	31a7ce04 	addi	r6,r6,-24776
 801314c:	014200b4 	movhi	r5,2050
 8013150:	2960b204 	addi	r5,r5,-32056
 8013154:	010200b4 	movhi	r4,2050
 8013158:	2127ce04 	addi	r4,r4,-24776
 801315c:	80130cc0 	call	80130cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8013160:	01820034 	movhi	r6,2048
 8013164:	31808904 	addi	r6,r6,548
 8013168:	01420034 	movhi	r5,2048
 801316c:	29400804 	addi	r5,r5,32
 8013170:	01020034 	movhi	r4,2048
 8013174:	21000804 	addi	r4,r4,32
 8013178:	80130cc0 	call	80130cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 801317c:	018200b4 	movhi	r6,2050
 8013180:	31a0b204 	addi	r6,r6,-32056
 8013184:	01420074 	movhi	r5,2049
 8013188:	295d9304 	addi	r5,r5,30284
 801318c:	01020074 	movhi	r4,2049
 8013190:	211d9304 	addi	r4,r4,30284
 8013194:	80130cc0 	call	80130cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8013198:	80166280 	call	8016628 <alt_dcache_flush_all>
  alt_icache_flush_all();
 801319c:	80168840 	call	8016884 <alt_icache_flush_all>
}
 80131a0:	0001883a 	nop
 80131a4:	e037883a 	mov	sp,fp
 80131a8:	dfc00117 	ldw	ra,4(sp)
 80131ac:	df000017 	ldw	fp,0(sp)
 80131b0:	dec00204 	addi	sp,sp,8
 80131b4:	f800283a 	ret

080131b8 <alt_get_errno>:
{
 80131b8:	defffe04 	addi	sp,sp,-8
 80131bc:	dfc00115 	stw	ra,4(sp)
 80131c0:	df000015 	stw	fp,0(sp)
 80131c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80131c8:	d0a01317 	ldw	r2,-32692(gp)
 80131cc:	10000326 	beq	r2,zero,80131dc <alt_get_errno+0x24>
 80131d0:	d0a01317 	ldw	r2,-32692(gp)
 80131d4:	103ee83a 	callr	r2
 80131d8:	00000106 	br	80131e0 <alt_get_errno+0x28>
 80131dc:	d0a73f04 	addi	r2,gp,-25348
}
 80131e0:	e037883a 	mov	sp,fp
 80131e4:	dfc00117 	ldw	ra,4(sp)
 80131e8:	df000017 	ldw	fp,0(sp)
 80131ec:	dec00204 	addi	sp,sp,8
 80131f0:	f800283a 	ret

080131f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80131f4:	defff904 	addi	sp,sp,-28
 80131f8:	dfc00615 	stw	ra,24(sp)
 80131fc:	df000515 	stw	fp,20(sp)
 8013200:	df000504 	addi	fp,sp,20
 8013204:	e13ffd15 	stw	r4,-12(fp)
 8013208:	e17ffc15 	stw	r5,-16(fp)
 801320c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8013210:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013214:	e0bffd17 	ldw	r2,-12(fp)
 8013218:	10000916 	blt	r2,zero,8013240 <lseek+0x4c>
 801321c:	e0fffd17 	ldw	r3,-12(fp)
 8013220:	1805883a 	mov	r2,r3
 8013224:	1085883a 	add	r2,r2,r2
 8013228:	10c5883a 	add	r2,r2,r3
 801322c:	100490ba 	slli	r2,r2,2
 8013230:	00c200b4 	movhi	r3,2050
 8013234:	18e32e04 	addi	r3,r3,-29512
 8013238:	10c5883a 	add	r2,r2,r3
 801323c:	00000106 	br	8013244 <lseek+0x50>
 8013240:	0005883a 	mov	r2,zero
 8013244:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8013248:	e0bffe17 	ldw	r2,-8(fp)
 801324c:	10001026 	beq	r2,zero,8013290 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8013250:	e0bffe17 	ldw	r2,-8(fp)
 8013254:	10800017 	ldw	r2,0(r2)
 8013258:	10800717 	ldw	r2,28(r2)
 801325c:	10000926 	beq	r2,zero,8013284 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8013260:	e0bffe17 	ldw	r2,-8(fp)
 8013264:	10800017 	ldw	r2,0(r2)
 8013268:	10800717 	ldw	r2,28(r2)
 801326c:	e1bffb17 	ldw	r6,-20(fp)
 8013270:	e17ffc17 	ldw	r5,-16(fp)
 8013274:	e13ffe17 	ldw	r4,-8(fp)
 8013278:	103ee83a 	callr	r2
 801327c:	e0bfff15 	stw	r2,-4(fp)
 8013280:	00000506 	br	8013298 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8013284:	00bfde84 	movi	r2,-134
 8013288:	e0bfff15 	stw	r2,-4(fp)
 801328c:	00000206 	br	8013298 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 8013290:	00bfebc4 	movi	r2,-81
 8013294:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 8013298:	e0bfff17 	ldw	r2,-4(fp)
 801329c:	1000070e 	bge	r2,zero,80132bc <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 80132a0:	80131b80 	call	80131b8 <alt_get_errno>
 80132a4:	1007883a 	mov	r3,r2
 80132a8:	e0bfff17 	ldw	r2,-4(fp)
 80132ac:	0085c83a 	sub	r2,zero,r2
 80132b0:	18800015 	stw	r2,0(r3)
    rc = -1;
 80132b4:	00bfffc4 	movi	r2,-1
 80132b8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 80132bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80132c0:	e037883a 	mov	sp,fp
 80132c4:	dfc00117 	ldw	ra,4(sp)
 80132c8:	df000017 	ldw	fp,0(sp)
 80132cc:	dec00204 	addi	sp,sp,8
 80132d0:	f800283a 	ret

080132d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80132d4:	defffd04 	addi	sp,sp,-12
 80132d8:	dfc00215 	stw	ra,8(sp)
 80132dc:	df000115 	stw	fp,4(sp)
 80132e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80132e4:	0009883a 	mov	r4,zero
 80132e8:	80139540 	call	8013954 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80132ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80132f0:	80139900 	call	8013990 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80132f4:	018200b4 	movhi	r6,2050
 80132f8:	31a09f04 	addi	r6,r6,-32132
 80132fc:	014200b4 	movhi	r5,2050
 8013300:	29609f04 	addi	r5,r5,-32132
 8013304:	010200b4 	movhi	r4,2050
 8013308:	21209f04 	addi	r4,r4,-32132
 801330c:	8016c100 	call	8016c10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8013310:	801672c0 	call	801672c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8013314:	01020074 	movhi	r4,2049
 8013318:	2119e404 	addi	r4,r4,26512
 801331c:	80173dc0 	call	80173dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8013320:	d0a74117 	ldw	r2,-25340(gp)
 8013324:	d0e74217 	ldw	r3,-25336(gp)
 8013328:	d1274317 	ldw	r4,-25332(gp)
 801332c:	200d883a 	mov	r6,r4
 8013330:	180b883a 	mov	r5,r3
 8013334:	1009883a 	mov	r4,r2
 8013338:	8000cac0 	call	8000cac <main>
 801333c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8013340:	01000044 	movi	r4,1
 8013344:	8012c200 	call	8012c20 <close>
  exit (result);
 8013348:	e13fff17 	ldw	r4,-4(fp)
 801334c:	80173f00 	call	80173f0 <exit>

08013350 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8013350:	defffe04 	addi	sp,sp,-8
 8013354:	df000115 	stw	fp,4(sp)
 8013358:	df000104 	addi	fp,sp,4
 801335c:	e13fff15 	stw	r4,-4(fp)
}
 8013360:	0001883a 	nop
 8013364:	e037883a 	mov	sp,fp
 8013368:	df000017 	ldw	fp,0(sp)
 801336c:	dec00104 	addi	sp,sp,4
 8013370:	f800283a 	ret

08013374 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8013374:	defffe04 	addi	sp,sp,-8
 8013378:	df000115 	stw	fp,4(sp)
 801337c:	df000104 	addi	fp,sp,4
 8013380:	e13fff15 	stw	r4,-4(fp)
}
 8013384:	0001883a 	nop
 8013388:	e037883a 	mov	sp,fp
 801338c:	df000017 	ldw	fp,0(sp)
 8013390:	dec00104 	addi	sp,sp,4
 8013394:	f800283a 	ret

08013398 <alt_get_errno>:
{
 8013398:	defffe04 	addi	sp,sp,-8
 801339c:	dfc00115 	stw	ra,4(sp)
 80133a0:	df000015 	stw	fp,0(sp)
 80133a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80133a8:	d0a01317 	ldw	r2,-32692(gp)
 80133ac:	10000326 	beq	r2,zero,80133bc <alt_get_errno+0x24>
 80133b0:	d0a01317 	ldw	r2,-32692(gp)
 80133b4:	103ee83a 	callr	r2
 80133b8:	00000106 	br	80133c0 <alt_get_errno+0x28>
 80133bc:	d0a73f04 	addi	r2,gp,-25348
}
 80133c0:	e037883a 	mov	sp,fp
 80133c4:	dfc00117 	ldw	ra,4(sp)
 80133c8:	df000017 	ldw	fp,0(sp)
 80133cc:	dec00204 	addi	sp,sp,8
 80133d0:	f800283a 	ret

080133d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80133d4:	defff904 	addi	sp,sp,-28
 80133d8:	dfc00615 	stw	ra,24(sp)
 80133dc:	df000515 	stw	fp,20(sp)
 80133e0:	df000504 	addi	fp,sp,20
 80133e4:	e13ffd15 	stw	r4,-12(fp)
 80133e8:	e17ffc15 	stw	r5,-16(fp)
 80133ec:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80133f0:	e0bffd17 	ldw	r2,-12(fp)
 80133f4:	10000916 	blt	r2,zero,801341c <read+0x48>
 80133f8:	e0fffd17 	ldw	r3,-12(fp)
 80133fc:	1805883a 	mov	r2,r3
 8013400:	1085883a 	add	r2,r2,r2
 8013404:	10c5883a 	add	r2,r2,r3
 8013408:	100490ba 	slli	r2,r2,2
 801340c:	00c200b4 	movhi	r3,2050
 8013410:	18e32e04 	addi	r3,r3,-29512
 8013414:	10c5883a 	add	r2,r2,r3
 8013418:	00000106 	br	8013420 <read+0x4c>
 801341c:	0005883a 	mov	r2,zero
 8013420:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8013424:	e0bfff17 	ldw	r2,-4(fp)
 8013428:	10002226 	beq	r2,zero,80134b4 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801342c:	e0bfff17 	ldw	r2,-4(fp)
 8013430:	10800217 	ldw	r2,8(r2)
 8013434:	108000cc 	andi	r2,r2,3
 8013438:	10800060 	cmpeqi	r2,r2,1
 801343c:	1000181e 	bne	r2,zero,80134a0 <read+0xcc>
        (fd->dev->read))
 8013440:	e0bfff17 	ldw	r2,-4(fp)
 8013444:	10800017 	ldw	r2,0(r2)
 8013448:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801344c:	10001426 	beq	r2,zero,80134a0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8013450:	e0bfff17 	ldw	r2,-4(fp)
 8013454:	10800017 	ldw	r2,0(r2)
 8013458:	10800517 	ldw	r2,20(r2)
 801345c:	e0fffb17 	ldw	r3,-20(fp)
 8013460:	180d883a 	mov	r6,r3
 8013464:	e17ffc17 	ldw	r5,-16(fp)
 8013468:	e13fff17 	ldw	r4,-4(fp)
 801346c:	103ee83a 	callr	r2
 8013470:	e0bffe15 	stw	r2,-8(fp)
 8013474:	e0bffe17 	ldw	r2,-8(fp)
 8013478:	1000070e 	bge	r2,zero,8013498 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 801347c:	80133980 	call	8013398 <alt_get_errno>
 8013480:	1007883a 	mov	r3,r2
 8013484:	e0bffe17 	ldw	r2,-8(fp)
 8013488:	0085c83a 	sub	r2,zero,r2
 801348c:	18800015 	stw	r2,0(r3)
          return -1;
 8013490:	00bfffc4 	movi	r2,-1
 8013494:	00000c06 	br	80134c8 <read+0xf4>
        }
        return rval;
 8013498:	e0bffe17 	ldw	r2,-8(fp)
 801349c:	00000a06 	br	80134c8 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80134a0:	80133980 	call	8013398 <alt_get_errno>
 80134a4:	1007883a 	mov	r3,r2
 80134a8:	00800344 	movi	r2,13
 80134ac:	18800015 	stw	r2,0(r3)
 80134b0:	00000406 	br	80134c4 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80134b4:	80133980 	call	8013398 <alt_get_errno>
 80134b8:	1007883a 	mov	r3,r2
 80134bc:	00801444 	movi	r2,81
 80134c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80134c4:	00bfffc4 	movi	r2,-1
}
 80134c8:	e037883a 	mov	sp,fp
 80134cc:	dfc00117 	ldw	ra,4(sp)
 80134d0:	df000017 	ldw	fp,0(sp)
 80134d4:	dec00204 	addi	sp,sp,8
 80134d8:	f800283a 	ret

080134dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80134dc:	defffe04 	addi	sp,sp,-8
 80134e0:	df000115 	stw	fp,4(sp)
 80134e4:	df000104 	addi	fp,sp,4
 80134e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80134ec:	e0bfff17 	ldw	r2,-4(fp)
 80134f0:	108000d0 	cmplti	r2,r2,3
 80134f4:	1000101e 	bne	r2,zero,8013538 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 80134f8:	e0ffff17 	ldw	r3,-4(fp)
 80134fc:	1805883a 	mov	r2,r3
 8013500:	1085883a 	add	r2,r2,r2
 8013504:	10c5883a 	add	r2,r2,r3
 8013508:	100490ba 	slli	r2,r2,2
 801350c:	00c200b4 	movhi	r3,2050
 8013510:	10c7883a 	add	r3,r2,r3
 8013514:	18233015 	stw	zero,-29504(r3)
    alt_fd_list[fd].dev      = 0;
 8013518:	e0ffff17 	ldw	r3,-4(fp)
 801351c:	1805883a 	mov	r2,r3
 8013520:	1085883a 	add	r2,r2,r2
 8013524:	10c5883a 	add	r2,r2,r3
 8013528:	100490ba 	slli	r2,r2,2
 801352c:	00c200b4 	movhi	r3,2050
 8013530:	10c7883a 	add	r3,r2,r3
 8013534:	18232e15 	stw	zero,-29512(r3)
  }
}
 8013538:	0001883a 	nop
 801353c:	e037883a 	mov	sp,fp
 8013540:	df000017 	ldw	fp,0(sp)
 8013544:	dec00104 	addi	sp,sp,4
 8013548:	f800283a 	ret

0801354c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801354c:	defff904 	addi	sp,sp,-28
 8013550:	df000615 	stw	fp,24(sp)
 8013554:	df000604 	addi	fp,sp,24
 8013558:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 801355c:	0005303a 	rdctl	r2,status
 8013560:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013564:	e0fffd17 	ldw	r3,-12(fp)
 8013568:	00bfff84 	movi	r2,-2
 801356c:	1884703a 	and	r2,r3,r2
 8013570:	1001703a 	wrctl	status,r2
  return context;
 8013574:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8013578:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801357c:	d0a01417 	ldw	r2,-32688(gp)
 8013580:	10c000c4 	addi	r3,r2,3
 8013584:	00bfff04 	movi	r2,-4
 8013588:	1884703a 	and	r2,r3,r2
 801358c:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8013590:	d0e01417 	ldw	r3,-32688(gp)
 8013594:	e0bffa17 	ldw	r2,-24(fp)
 8013598:	1887883a 	add	r3,r3,r2
 801359c:	00830034 	movhi	r2,3072
 80135a0:	10800004 	addi	r2,r2,0
 80135a4:	10c0072e 	bgeu	r2,r3,80135c4 <sbrk+0x78>
 80135a8:	e0bfff17 	ldw	r2,-4(fp)
 80135ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80135b0:	e0bffc17 	ldw	r2,-16(fp)
 80135b4:	1001703a 	wrctl	status,r2
}
 80135b8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80135bc:	00bfffc4 	movi	r2,-1
 80135c0:	00000c06 	br	80135f4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 80135c4:	d0a01417 	ldw	r2,-32688(gp)
 80135c8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 80135cc:	d0e01417 	ldw	r3,-32688(gp)
 80135d0:	e0bffa17 	ldw	r2,-24(fp)
 80135d4:	1885883a 	add	r2,r3,r2
 80135d8:	d0a01415 	stw	r2,-32688(gp)
 80135dc:	e0bfff17 	ldw	r2,-4(fp)
 80135e0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80135e4:	e0bffb17 	ldw	r2,-20(fp)
 80135e8:	1001703a 	wrctl	status,r2
}
 80135ec:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80135f0:	e0bffe17 	ldw	r2,-8(fp)
} 
 80135f4:	e037883a 	mov	sp,fp
 80135f8:	df000017 	ldw	fp,0(sp)
 80135fc:	dec00104 	addi	sp,sp,4
 8013600:	f800283a 	ret

08013604 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8013604:	defffa04 	addi	sp,sp,-24
 8013608:	df000515 	stw	fp,20(sp)
 801360c:	df000504 	addi	fp,sp,20
 8013610:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8013614:	0005303a 	rdctl	r2,status
 8013618:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801361c:	e0fffc17 	ldw	r3,-16(fp)
 8013620:	00bfff84 	movi	r2,-2
 8013624:	1884703a 	and	r2,r3,r2
 8013628:	1001703a 	wrctl	status,r2
  return context;
 801362c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8013630:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8013634:	e0bffb17 	ldw	r2,-20(fp)
 8013638:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801363c:	e0bffd17 	ldw	r2,-12(fp)
 8013640:	10800017 	ldw	r2,0(r2)
 8013644:	e0fffd17 	ldw	r3,-12(fp)
 8013648:	18c00117 	ldw	r3,4(r3)
 801364c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8013650:	e0bffd17 	ldw	r2,-12(fp)
 8013654:	10800117 	ldw	r2,4(r2)
 8013658:	e0fffd17 	ldw	r3,-12(fp)
 801365c:	18c00017 	ldw	r3,0(r3)
 8013660:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8013664:	e0bffd17 	ldw	r2,-12(fp)
 8013668:	e0fffd17 	ldw	r3,-12(fp)
 801366c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8013670:	e0bffd17 	ldw	r2,-12(fp)
 8013674:	e0fffd17 	ldw	r3,-12(fp)
 8013678:	10c00015 	stw	r3,0(r2)
} 
 801367c:	0001883a 	nop
 8013680:	e0bfff17 	ldw	r2,-4(fp)
 8013684:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8013688:	e0bffe17 	ldw	r2,-8(fp)
 801368c:	1001703a 	wrctl	status,r2
}
 8013690:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 8013694:	0001883a 	nop
 8013698:	e037883a 	mov	sp,fp
 801369c:	df000017 	ldw	fp,0(sp)
 80136a0:	dec00104 	addi	sp,sp,4
 80136a4:	f800283a 	ret

080136a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80136a8:	defffb04 	addi	sp,sp,-20
 80136ac:	dfc00415 	stw	ra,16(sp)
 80136b0:	df000315 	stw	fp,12(sp)
 80136b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80136b8:	d0a01517 	ldw	r2,-32684(gp)
 80136bc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80136c0:	d0a74517 	ldw	r2,-25324(gp)
 80136c4:	10800044 	addi	r2,r2,1
 80136c8:	d0a74515 	stw	r2,-25324(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80136cc:	00002e06 	br	8013788 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80136d0:	e0bfff17 	ldw	r2,-4(fp)
 80136d4:	10800017 	ldw	r2,0(r2)
 80136d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80136dc:	e0bfff17 	ldw	r2,-4(fp)
 80136e0:	10800403 	ldbu	r2,16(r2)
 80136e4:	10803fcc 	andi	r2,r2,255
 80136e8:	10000426 	beq	r2,zero,80136fc <alt_tick+0x54>
 80136ec:	d0a74517 	ldw	r2,-25324(gp)
 80136f0:	1000021e 	bne	r2,zero,80136fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80136f4:	e0bfff17 	ldw	r2,-4(fp)
 80136f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80136fc:	e0bfff17 	ldw	r2,-4(fp)
 8013700:	10800217 	ldw	r2,8(r2)
 8013704:	d0e74517 	ldw	r3,-25324(gp)
 8013708:	18801d36 	bltu	r3,r2,8013780 <alt_tick+0xd8>
 801370c:	e0bfff17 	ldw	r2,-4(fp)
 8013710:	10800403 	ldbu	r2,16(r2)
 8013714:	10803fcc 	andi	r2,r2,255
 8013718:	1000191e 	bne	r2,zero,8013780 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801371c:	e0bfff17 	ldw	r2,-4(fp)
 8013720:	10800317 	ldw	r2,12(r2)
 8013724:	e0ffff17 	ldw	r3,-4(fp)
 8013728:	18c00517 	ldw	r3,20(r3)
 801372c:	1809883a 	mov	r4,r3
 8013730:	103ee83a 	callr	r2
 8013734:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8013738:	e0bffd17 	ldw	r2,-12(fp)
 801373c:	1000031e 	bne	r2,zero,801374c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8013740:	e13fff17 	ldw	r4,-4(fp)
 8013744:	80136040 	call	8013604 <alt_alarm_stop>
 8013748:	00000d06 	br	8013780 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801374c:	e0bfff17 	ldw	r2,-4(fp)
 8013750:	10c00217 	ldw	r3,8(r2)
 8013754:	e0bffd17 	ldw	r2,-12(fp)
 8013758:	1887883a 	add	r3,r3,r2
 801375c:	e0bfff17 	ldw	r2,-4(fp)
 8013760:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8013764:	e0bfff17 	ldw	r2,-4(fp)
 8013768:	10c00217 	ldw	r3,8(r2)
 801376c:	d0a74517 	ldw	r2,-25324(gp)
 8013770:	1880032e 	bgeu	r3,r2,8013780 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8013774:	e0bfff17 	ldw	r2,-4(fp)
 8013778:	00c00044 	movi	r3,1
 801377c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8013780:	e0bffe17 	ldw	r2,-8(fp)
 8013784:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 8013788:	e0ffff17 	ldw	r3,-4(fp)
 801378c:	d0a01504 	addi	r2,gp,-32684
 8013790:	18bfcf1e 	bne	r3,r2,80136d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8013794:	0001883a 	nop
}
 8013798:	0001883a 	nop
 801379c:	e037883a 	mov	sp,fp
 80137a0:	dfc00117 	ldw	ra,4(sp)
 80137a4:	df000017 	ldw	fp,0(sp)
 80137a8:	dec00204 	addi	sp,sp,8
 80137ac:	f800283a 	ret

080137b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80137b0:	defffd04 	addi	sp,sp,-12
 80137b4:	dfc00215 	stw	ra,8(sp)
 80137b8:	df000115 	stw	fp,4(sp)
 80137bc:	df000104 	addi	fp,sp,4
 80137c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 80137c4:	e13fff17 	ldw	r4,-4(fp)
 80137c8:	80164d00 	call	80164d0 <alt_busy_sleep>
}
 80137cc:	e037883a 	mov	sp,fp
 80137d0:	dfc00117 	ldw	ra,4(sp)
 80137d4:	df000017 	ldw	fp,0(sp)
 80137d8:	dec00204 	addi	sp,sp,8
 80137dc:	f800283a 	ret

080137e0 <alt_get_errno>:
{
 80137e0:	defffe04 	addi	sp,sp,-8
 80137e4:	dfc00115 	stw	ra,4(sp)
 80137e8:	df000015 	stw	fp,0(sp)
 80137ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80137f0:	d0a01317 	ldw	r2,-32692(gp)
 80137f4:	10000326 	beq	r2,zero,8013804 <alt_get_errno+0x24>
 80137f8:	d0a01317 	ldw	r2,-32692(gp)
 80137fc:	103ee83a 	callr	r2
 8013800:	00000106 	br	8013808 <alt_get_errno+0x28>
 8013804:	d0a73f04 	addi	r2,gp,-25348
}
 8013808:	e037883a 	mov	sp,fp
 801380c:	dfc00117 	ldw	ra,4(sp)
 8013810:	df000017 	ldw	fp,0(sp)
 8013814:	dec00204 	addi	sp,sp,8
 8013818:	f800283a 	ret

0801381c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801381c:	defff904 	addi	sp,sp,-28
 8013820:	dfc00615 	stw	ra,24(sp)
 8013824:	df000515 	stw	fp,20(sp)
 8013828:	df000504 	addi	fp,sp,20
 801382c:	e13ffd15 	stw	r4,-12(fp)
 8013830:	e17ffc15 	stw	r5,-16(fp)
 8013834:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013838:	e0bffd17 	ldw	r2,-12(fp)
 801383c:	10000916 	blt	r2,zero,8013864 <write+0x48>
 8013840:	e0fffd17 	ldw	r3,-12(fp)
 8013844:	1805883a 	mov	r2,r3
 8013848:	1085883a 	add	r2,r2,r2
 801384c:	10c5883a 	add	r2,r2,r3
 8013850:	100490ba 	slli	r2,r2,2
 8013854:	00c200b4 	movhi	r3,2050
 8013858:	18e32e04 	addi	r3,r3,-29512
 801385c:	10c5883a 	add	r2,r2,r3
 8013860:	00000106 	br	8013868 <write+0x4c>
 8013864:	0005883a 	mov	r2,zero
 8013868:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 801386c:	e0bfff17 	ldw	r2,-4(fp)
 8013870:	10002126 	beq	r2,zero,80138f8 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8013874:	e0bfff17 	ldw	r2,-4(fp)
 8013878:	10800217 	ldw	r2,8(r2)
 801387c:	108000cc 	andi	r2,r2,3
 8013880:	10001826 	beq	r2,zero,80138e4 <write+0xc8>
 8013884:	e0bfff17 	ldw	r2,-4(fp)
 8013888:	10800017 	ldw	r2,0(r2)
 801388c:	10800617 	ldw	r2,24(r2)
 8013890:	10001426 	beq	r2,zero,80138e4 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8013894:	e0bfff17 	ldw	r2,-4(fp)
 8013898:	10800017 	ldw	r2,0(r2)
 801389c:	10800617 	ldw	r2,24(r2)
 80138a0:	e0fffb17 	ldw	r3,-20(fp)
 80138a4:	180d883a 	mov	r6,r3
 80138a8:	e17ffc17 	ldw	r5,-16(fp)
 80138ac:	e13fff17 	ldw	r4,-4(fp)
 80138b0:	103ee83a 	callr	r2
 80138b4:	e0bffe15 	stw	r2,-8(fp)
 80138b8:	e0bffe17 	ldw	r2,-8(fp)
 80138bc:	1000070e 	bge	r2,zero,80138dc <write+0xc0>
      {
        ALT_ERRNO = -rval;
 80138c0:	80137e00 	call	80137e0 <alt_get_errno>
 80138c4:	1007883a 	mov	r3,r2
 80138c8:	e0bffe17 	ldw	r2,-8(fp)
 80138cc:	0085c83a 	sub	r2,zero,r2
 80138d0:	18800015 	stw	r2,0(r3)
        return -1;
 80138d4:	00bfffc4 	movi	r2,-1
 80138d8:	00000c06 	br	801390c <write+0xf0>
      }
      return rval;
 80138dc:	e0bffe17 	ldw	r2,-8(fp)
 80138e0:	00000a06 	br	801390c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80138e4:	80137e00 	call	80137e0 <alt_get_errno>
 80138e8:	1007883a 	mov	r3,r2
 80138ec:	00800344 	movi	r2,13
 80138f0:	18800015 	stw	r2,0(r3)
 80138f4:	00000406 	br	8013908 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80138f8:	80137e00 	call	80137e0 <alt_get_errno>
 80138fc:	1007883a 	mov	r3,r2
 8013900:	00801444 	movi	r2,81
 8013904:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013908:	00bfffc4 	movi	r2,-1
}
 801390c:	e037883a 	mov	sp,fp
 8013910:	dfc00117 	ldw	ra,4(sp)
 8013914:	df000017 	ldw	fp,0(sp)
 8013918:	dec00204 	addi	sp,sp,8
 801391c:	f800283a 	ret

08013920 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8013920:	defffd04 	addi	sp,sp,-12
 8013924:	dfc00215 	stw	ra,8(sp)
 8013928:	df000115 	stw	fp,4(sp)
 801392c:	df000104 	addi	fp,sp,4
 8013930:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8013934:	d1601004 	addi	r5,gp,-32704
 8013938:	e13fff17 	ldw	r4,-4(fp)
 801393c:	80166840 	call	8016684 <alt_dev_llist_insert>
}
 8013940:	e037883a 	mov	sp,fp
 8013944:	dfc00117 	ldw	ra,4(sp)
 8013948:	df000017 	ldw	fp,0(sp)
 801394c:	dec00204 	addi	sp,sp,8
 8013950:	f800283a 	ret

08013954 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8013954:	defffd04 	addi	sp,sp,-12
 8013958:	dfc00215 	stw	ra,8(sp)
 801395c:	df000115 	stw	fp,4(sp)
 8013960:	df000104 	addi	fp,sp,4
 8013964:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8013968:	80171600 	call	8017160 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801396c:	00800044 	movi	r2,1
 8013970:	1001703a 	wrctl	status,r2
}
 8013974:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8013978:	0001883a 	nop
 801397c:	e037883a 	mov	sp,fp
 8013980:	dfc00117 	ldw	ra,4(sp)
 8013984:	df000017 	ldw	fp,0(sp)
 8013988:	dec00204 	addi	sp,sp,8
 801398c:	f800283a 	ret

08013990 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8013990:	defffe04 	addi	sp,sp,-8
 8013994:	dfc00115 	stw	ra,4(sp)
 8013998:	df000015 	stw	fp,0(sp)
 801399c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 80139a0:	01c0fa04 	movi	r7,1000
 80139a4:	01800084 	movi	r6,2
 80139a8:	000b883a 	mov	r5,zero
 80139ac:	01001004 	movi	r4,64
 80139b0:	80163180 	call	8016318 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 80139b4:	010200b4 	movhi	r4,2050
 80139b8:	21238e04 	addi	r4,r4,-29128
 80139bc:	8013c540 	call	8013c54 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 80139c0:	01800044 	movi	r6,1
 80139c4:	000b883a 	mov	r5,zero
 80139c8:	010200b4 	movhi	r4,2050
 80139cc:	2123a604 	addi	r4,r4,-29032
 80139d0:	80157900 	call	8015790 <altera_avalon_jtag_uart_init>
 80139d4:	010200b4 	movhi	r4,2050
 80139d8:	21239c04 	addi	r4,r4,-29072
 80139dc:	80139200 	call	8013920 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 80139e0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80139e4:	0001883a 	nop
}
 80139e8:	0001883a 	nop
 80139ec:	e037883a 	mov	sp,fp
 80139f0:	dfc00117 	ldw	ra,4(sp)
 80139f4:	df000017 	ldw	fp,0(sp)
 80139f8:	dec00204 	addi	sp,sp,8
 80139fc:	f800283a 	ret

08013a00 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 8013a00:	defff904 	addi	sp,sp,-28
 8013a04:	dfc00615 	stw	ra,24(sp)
 8013a08:	df000515 	stw	fp,20(sp)
 8013a0c:	df000504 	addi	fp,sp,20
 8013a10:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
 8013a14:	008000b4 	movhi	r2,2
 8013a18:	10a1a804 	addi	r2,r2,-31072
 8013a1c:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 8013a20:	e0bffb17 	ldw	r2,-20(fp)
 8013a24:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8013a28:	e0bffe17 	ldw	r2,-8(fp)
 8013a2c:	10800717 	ldw	r2,28(r2)
 8013a30:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8013a34:	e0bffd17 	ldw	r2,-12(fp)
 8013a38:	10800217 	ldw	r2,8(r2)
 8013a3c:	10800098 	cmpnei	r2,r2,2
 8013a40:	1000251e 	bne	r2,zero,8013ad8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8013a44:	e0bffd17 	ldw	r2,-12(fp)
 8013a48:	10c00017 	ldw	r3,0(r2)
 8013a4c:	e0bffd17 	ldw	r2,-12(fp)
 8013a50:	10800117 	ldw	r2,4(r2)
 8013a54:	e13ffc04 	addi	r4,fp,-16
 8013a58:	200f883a 	mov	r7,r4
 8013a5c:	100d883a 	mov	r6,r2
 8013a60:	180b883a 	mov	r5,r3
 8013a64:	e13ffe17 	ldw	r4,-8(fp)
 8013a68:	80141b40 	call	80141b4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 8013a6c:	e0bffd17 	ldw	r2,-12(fp)
 8013a70:	10c00117 	ldw	r3,4(r2)
 8013a74:	e0bffc17 	ldw	r2,-16(fp)
 8013a78:	1887c83a 	sub	r3,r3,r2
 8013a7c:	e0bffd17 	ldw	r2,-12(fp)
 8013a80:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 8013a84:	e0bffd17 	ldw	r2,-12(fp)
 8013a88:	10c00017 	ldw	r3,0(r2)
 8013a8c:	e0bffc17 	ldw	r2,-16(fp)
 8013a90:	1887883a 	add	r3,r3,r2
 8013a94:	e0bffd17 	ldw	r2,-12(fp)
 8013a98:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 8013a9c:	e0bffd17 	ldw	r2,-12(fp)
 8013aa0:	10800117 	ldw	r2,4(r2)
 8013aa4:	10000c26 	beq	r2,zero,8013ad8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013aa8:	01400704 	movi	r5,28
 8013aac:	e13ffe17 	ldw	r4,-8(fp)
 8013ab0:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8013ab4:	01400084 	movi	r5,2
 8013ab8:	e13ffe17 	ldw	r4,-8(fp)
 8013abc:	80154200 	call	8015420 <alt_avalon_i2c_int_enable>
 8013ac0:	00000e06 	br	8013afc <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 8013ac4:	e0bfff17 	ldw	r2,-4(fp)
 8013ac8:	10bfffc4 	addi	r2,r2,-1
 8013acc:	e0bfff15 	stw	r2,-4(fp)
 8013ad0:	e0bfff17 	ldw	r2,-4(fp)
 8013ad4:	10000426 	beq	r2,zero,8013ae8 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 8013ad8:	e13ffe17 	ldw	r4,-8(fp)
 8013adc:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 8013ae0:	103ff81e 	bne	r2,zero,8013ac4 <optional_irq_callback+0xc4>
 8013ae4:	00000106 	br	8013aec <optional_irq_callback+0xec>
      {
         break;
 8013ae8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 8013aec:	e13ffe17 	ldw	r4,-8(fp)
 8013af0:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 8013af4:	e0bffd17 	ldw	r2,-12(fp)
 8013af8:	10000215 	stw	zero,8(r2)
}
 8013afc:	e037883a 	mov	sp,fp
 8013b00:	dfc00117 	ldw	ra,4(sp)
 8013b04:	df000017 	ldw	fp,0(sp)
 8013b08:	dec00204 	addi	sp,sp,8
 8013b0c:	f800283a 	ret

08013b10 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8013b10:	defffc04 	addi	sp,sp,-16
 8013b14:	dfc00315 	stw	ra,12(sp)
 8013b18:	df000215 	stw	fp,8(sp)
 8013b1c:	df000204 	addi	fp,sp,8
 8013b20:	e13fff15 	stw	r4,-4(fp)
 8013b24:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
 8013b28:	e0bffe17 	ldw	r2,-8(fp)
 8013b2c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8013b30:	e1fffe17 	ldw	r7,-8(fp)
 8013b34:	000d883a 	mov	r6,zero
 8013b38:	01420074 	movhi	r5,2049
 8013b3c:	294e8004 	addi	r5,r5,14848
 8013b40:	e13fff17 	ldw	r4,-4(fp)
 8013b44:	8013c000 	call	8013c00 <alt_avalon_i2c_register_callback>
}
 8013b48:	0001883a 	nop
 8013b4c:	e037883a 	mov	sp,fp
 8013b50:	dfc00117 	ldw	ra,4(sp)
 8013b54:	df000017 	ldw	fp,0(sp)
 8013b58:	dec00204 	addi	sp,sp,8
 8013b5c:	f800283a 	ret

08013b60 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 8013b60:	defff904 	addi	sp,sp,-28
 8013b64:	dfc00615 	stw	ra,24(sp)
 8013b68:	df000515 	stw	fp,20(sp)
 8013b6c:	df000504 	addi	fp,sp,20
 8013b70:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8013b74:	e0bffb17 	ldw	r2,-20(fp)
 8013b78:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8013b7c:	014007c4 	movi	r5,31
 8013b80:	e13fff17 	ldw	r4,-4(fp)
 8013b84:	80153b40 	call	80153b4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013b88:	01400704 	movi	r5,28
 8013b8c:	e13fff17 	ldw	r4,-4(fp)
 8013b90:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8013b94:	e0bfff17 	ldw	r2,-4(fp)
 8013b98:	10800617 	ldw	r2,24(r2)
 8013b9c:	10001226 	beq	r2,zero,8013be8 <alt_avalon_i2c_irq+0x88>
  NIOS2_READ_STATUS (context);
 8013ba0:	0005303a 	rdctl	r2,status
 8013ba4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013ba8:	e0fffc17 	ldw	r3,-16(fp)
 8013bac:	00bfff84 	movi	r2,-2
 8013bb0:	1884703a 	and	r2,r3,r2
 8013bb4:	1001703a 	wrctl	status,r2
  return context;
 8013bb8:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8013bbc:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
 8013bc0:	e0bfff17 	ldw	r2,-4(fp)
 8013bc4:	10800617 	ldw	r2,24(r2)
 8013bc8:	e13fff17 	ldw	r4,-4(fp)
 8013bcc:	103ee83a 	callr	r2
 8013bd0:	e0bffe17 	ldw	r2,-8(fp)
 8013bd4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8013bd8:	e0bffd17 	ldw	r2,-12(fp)
 8013bdc:	1001703a 	wrctl	status,r2
}
 8013be0:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    return;
 8013be4:	0001883a 	nop
 8013be8:	0001883a 	nop
}
 8013bec:	e037883a 	mov	sp,fp
 8013bf0:	dfc00117 	ldw	ra,4(sp)
 8013bf4:	df000017 	ldw	fp,0(sp)
 8013bf8:	dec00204 	addi	sp,sp,8
 8013bfc:	f800283a 	ret

08013c00 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 8013c00:	defffb04 	addi	sp,sp,-20
 8013c04:	df000415 	stw	fp,16(sp)
 8013c08:	df000404 	addi	fp,sp,16
 8013c0c:	e13fff15 	stw	r4,-4(fp)
 8013c10:	e17ffe15 	stw	r5,-8(fp)
 8013c14:	e1bffd15 	stw	r6,-12(fp)
 8013c18:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 8013c1c:	e0bfff17 	ldw	r2,-4(fp)
 8013c20:	e0fffe17 	ldw	r3,-8(fp)
 8013c24:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 8013c28:	e0bfff17 	ldw	r2,-4(fp)
 8013c2c:	e0fffc17 	ldw	r3,-16(fp)
 8013c30:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 8013c34:	e0bfff17 	ldw	r2,-4(fp)
 8013c38:	e0fffd17 	ldw	r3,-12(fp)
 8013c3c:	10c00815 	stw	r3,32(r2)

    return ;
 8013c40:	0001883a 	nop
}
 8013c44:	e037883a 	mov	sp,fp
 8013c48:	df000017 	ldw	fp,0(sp)
 8013c4c:	dec00104 	addi	sp,sp,4
 8013c50:	f800283a 	ret

08013c54 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8013c54:	defff704 	addi	sp,sp,-36
 8013c58:	dfc00815 	stw	ra,32(sp)
 8013c5c:	df000715 	stw	fp,28(sp)
 8013c60:	df000704 	addi	fp,sp,28
 8013c64:	e13ffa15 	stw	r4,-24(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8013c68:	e13ffa17 	ldw	r4,-24(fp)
 8013c6c:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8013c70:	014007c4 	movi	r5,31
 8013c74:	e13ffa17 	ldw	r4,-24(fp)
 8013c78:	80153b40 	call	80153b4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013c7c:	01400704 	movi	r5,28
 8013c80:	e13ffa17 	ldw	r4,-24(fp)
 8013c84:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8013c88:	014000c4 	movi	r5,3
 8013c8c:	e13ffa17 	ldw	r4,-24(fp)
 8013c90:	80155c80 	call	80155c8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8013c94:	014000c4 	movi	r5,3
 8013c98:	e13ffa17 	ldw	r4,-24(fp)
 8013c9c:	80155180 	call	8015518 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 8013ca0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 8013ca4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 8013ca8:	e0bffb04 	addi	r2,fp,-20
 8013cac:	018000b4 	movhi	r6,2
 8013cb0:	31a1a804 	addi	r6,r6,-31072
 8013cb4:	100b883a 	mov	r5,r2
 8013cb8:	e13ffa17 	ldw	r4,-24(fp)
 8013cbc:	80140740 	call	8014074 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 8013cc0:	e0bffb04 	addi	r2,fp,-20
 8013cc4:	100b883a 	mov	r5,r2
 8013cc8:	e13ffa17 	ldw	r4,-24(fp)
 8013ccc:	8013f140 	call	8013f14 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 8013cd0:	d1601704 	addi	r5,gp,-32676
 8013cd4:	e13ffa17 	ldw	r4,-24(fp)
 8013cd8:	80166840 	call	8016684 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8013cdc:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8013ce0:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
 8013ce4:	e0bfff17 	ldw	r2,-4(fp)
 8013ce8:	10000c1e 	bne	r2,zero,8013d1c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 8013cec:	e0bffa17 	ldw	r2,-24(fp)
 8013cf0:	10c00417 	ldw	r3,16(r2)
 8013cf4:	e0bffa17 	ldw	r2,-24(fp)
 8013cf8:	10800517 	ldw	r2,20(r2)
 8013cfc:	d8000015 	stw	zero,0(sp)
 8013d00:	e1fffa17 	ldw	r7,-24(fp)
 8013d04:	01820074 	movhi	r6,2049
 8013d08:	318ed804 	addi	r6,r6,15200
 8013d0c:	100b883a 	mov	r5,r2
 8013d10:	1809883a 	mov	r4,r3
 8013d14:	80168a40 	call	80168a4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8013d18:	00000406 	br	8013d2c <alt_avalon_i2c_init+0xd8>
        alt_printf("failed to create semaphores\n");
 8013d1c:	010200b4 	movhi	r4,2050
 8013d20:	2120aa04 	addi	r4,r4,-32088
 8013d24:	8016f040 	call	8016f04 <alt_printf>
    return;
 8013d28:	0001883a 	nop

}
 8013d2c:	e037883a 	mov	sp,fp
 8013d30:	dfc00117 	ldw	ra,4(sp)
 8013d34:	df000017 	ldw	fp,0(sp)
 8013d38:	dec00204 	addi	sp,sp,8
 8013d3c:	f800283a 	ret

08013d40 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 8013d40:	defffc04 	addi	sp,sp,-16
 8013d44:	dfc00315 	stw	ra,12(sp)
 8013d48:	df000215 	stw	fp,8(sp)
 8013d4c:	df000204 	addi	fp,sp,8
 8013d50:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8013d54:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8013d58:	d1601704 	addi	r5,gp,-32676
 8013d5c:	e13ffe17 	ldw	r4,-8(fp)
 8013d60:	80167f40 	call	80167f4 <alt_find_dev>
 8013d64:	e0bfff15 	stw	r2,-4(fp)

    return dev;
 8013d68:	e0bfff17 	ldw	r2,-4(fp)
}
 8013d6c:	e037883a 	mov	sp,fp
 8013d70:	dfc00117 	ldw	ra,4(sp)
 8013d74:	df000017 	ldw	fp,0(sp)
 8013d78:	dec00204 	addi	sp,sp,8
 8013d7c:	f800283a 	ret

08013d80 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8013d80:	defffc04 	addi	sp,sp,-16
 8013d84:	df000315 	stw	fp,12(sp)
 8013d88:	df000304 	addi	fp,sp,12
 8013d8c:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8013d90:	e0bffd17 	ldw	r2,-12(fp)
 8013d94:	10800717 	ldw	r2,28(r2)
 8013d98:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 8013d9c:	e0bffd17 	ldw	r2,-12(fp)
 8013da0:	10800317 	ldw	r2,12(r2)
 8013da4:	10800204 	addi	r2,r2,8
 8013da8:	10800037 	ldwio	r2,0(r2)
 8013dac:	1080004c 	andi	r2,r2,1
 8013db0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 8013db4:	e0bffe17 	ldw	r2,-8(fp)
 8013db8:	10000226 	beq	r2,zero,8013dc4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 8013dbc:	00bffe44 	movi	r2,-7
 8013dc0:	00001106 	br	8013e08 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 8013dc4:	e0bffd17 	ldw	r2,-12(fp)
 8013dc8:	10c00617 	ldw	r3,24(r2)
 8013dcc:	00820074 	movhi	r2,2049
 8013dd0:	108e8004 	addi	r2,r2,14848
 8013dd4:	1880021e 	bne	r3,r2,8013de0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 8013dd8:	e0bfff17 	ldw	r2,-4(fp)
 8013ddc:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 8013de0:	e0bffd17 	ldw	r2,-12(fp)
 8013de4:	10800317 	ldw	r2,12(r2)
 8013de8:	10800204 	addi	r2,r2,8
 8013dec:	e0fffd17 	ldw	r3,-12(fp)
 8013df0:	18c00317 	ldw	r3,12(r3)
 8013df4:	18c00204 	addi	r3,r3,8
 8013df8:	18c00037 	ldwio	r3,0(r3)
 8013dfc:	18c00054 	ori	r3,r3,1
 8013e00:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8013e04:	0005883a 	mov	r2,zero
}
 8013e08:	e037883a 	mov	sp,fp
 8013e0c:	df000017 	ldw	fp,0(sp)
 8013e10:	dec00104 	addi	sp,sp,4
 8013e14:	f800283a 	ret

08013e18 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8013e18:	defffe04 	addi	sp,sp,-8
 8013e1c:	df000115 	stw	fp,4(sp)
 8013e20:	df000104 	addi	fp,sp,4
 8013e24:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8013e28:	e0bfff17 	ldw	r2,-4(fp)
 8013e2c:	10800317 	ldw	r2,12(r2)
 8013e30:	10800204 	addi	r2,r2,8
 8013e34:	e0ffff17 	ldw	r3,-4(fp)
 8013e38:	18c00317 	ldw	r3,12(r3)
 8013e3c:	18c00204 	addi	r3,r3,8
 8013e40:	19000037 	ldwio	r4,0(r3)
 8013e44:	00ffff84 	movi	r3,-2
 8013e48:	20c6703a 	and	r3,r4,r3
 8013e4c:	10c00035 	stwio	r3,0(r2)

}
 8013e50:	0001883a 	nop
 8013e54:	e037883a 	mov	sp,fp
 8013e58:	df000017 	ldw	fp,0(sp)
 8013e5c:	dec00104 	addi	sp,sp,4
 8013e60:	f800283a 	ret

08013e64 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8013e64:	defffd04 	addi	sp,sp,-12
 8013e68:	df000215 	stw	fp,8(sp)
 8013e6c:	df000204 	addi	fp,sp,8
 8013e70:	e13fff15 	stw	r4,-4(fp)
 8013e74:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8013e78:	e0bfff17 	ldw	r2,-4(fp)
 8013e7c:	10c00d17 	ldw	r3,52(r2)
 8013e80:	e0bffe17 	ldw	r2,-8(fp)
 8013e84:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8013e88:	e0bfff17 	ldw	r2,-4(fp)
 8013e8c:	10800317 	ldw	r2,12(r2)
 8013e90:	10800204 	addi	r2,r2,8
 8013e94:	10800037 	ldwio	r2,0(r2)
 8013e98:	1005d07a 	srai	r2,r2,1
 8013e9c:	1080004c 	andi	r2,r2,1
 8013ea0:	1007883a 	mov	r3,r2
 8013ea4:	e0bffe17 	ldw	r2,-8(fp)
 8013ea8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 8013eac:	e0bfff17 	ldw	r2,-4(fp)
 8013eb0:	10800317 	ldw	r2,12(r2)
 8013eb4:	10800904 	addi	r2,r2,36
 8013eb8:	10800037 	ldwio	r2,0(r2)
 8013ebc:	1007883a 	mov	r3,r2
 8013ec0:	e0bffe17 	ldw	r2,-8(fp)
 8013ec4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 8013ec8:	e0bfff17 	ldw	r2,-4(fp)
 8013ecc:	10800317 	ldw	r2,12(r2)
 8013ed0:	10800804 	addi	r2,r2,32
 8013ed4:	10800037 	ldwio	r2,0(r2)
 8013ed8:	1007883a 	mov	r3,r2
 8013edc:	e0bffe17 	ldw	r2,-8(fp)
 8013ee0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 8013ee4:	e0bfff17 	ldw	r2,-4(fp)
 8013ee8:	10800317 	ldw	r2,12(r2)
 8013eec:	10800a04 	addi	r2,r2,40
 8013ef0:	10800037 	ldwio	r2,0(r2)
 8013ef4:	1007883a 	mov	r3,r2
 8013ef8:	e0bffe17 	ldw	r2,-8(fp)
 8013efc:	10c0030d 	sth	r3,12(r2)
}
 8013f00:	0001883a 	nop
 8013f04:	e037883a 	mov	sp,fp
 8013f08:	df000017 	ldw	fp,0(sp)
 8013f0c:	dec00104 	addi	sp,sp,4
 8013f10:	f800283a 	ret

08013f14 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8013f14:	defffd04 	addi	sp,sp,-12
 8013f18:	df000215 	stw	fp,8(sp)
 8013f1c:	df000204 	addi	fp,sp,8
 8013f20:	e13fff15 	stw	r4,-4(fp)
 8013f24:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8013f28:	e0bffe17 	ldw	r2,-8(fp)
 8013f2c:	10c00017 	ldw	r3,0(r2)
 8013f30:	e0bfff17 	ldw	r2,-4(fp)
 8013f34:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8013f38:	e0bfff17 	ldw	r2,-4(fp)
 8013f3c:	10800317 	ldw	r2,12(r2)
 8013f40:	10c00204 	addi	r3,r2,8
 8013f44:	e0bfff17 	ldw	r2,-4(fp)
 8013f48:	10800317 	ldw	r2,12(r2)
 8013f4c:	10800204 	addi	r2,r2,8
 8013f50:	10800037 	ldwio	r2,0(r2)
 8013f54:	1009883a 	mov	r4,r2
 8013f58:	00bfff44 	movi	r2,-3
 8013f5c:	2088703a 	and	r4,r4,r2
 8013f60:	e0bffe17 	ldw	r2,-8(fp)
 8013f64:	10800117 	ldw	r2,4(r2)
 8013f68:	1085883a 	add	r2,r2,r2
 8013f6c:	1080008c 	andi	r2,r2,2
 8013f70:	2084b03a 	or	r2,r4,r2
 8013f74:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8013f78:	e0bfff17 	ldw	r2,-4(fp)
 8013f7c:	10800317 	ldw	r2,12(r2)
 8013f80:	10800904 	addi	r2,r2,36
 8013f84:	e0fffe17 	ldw	r3,-8(fp)
 8013f88:	18c0020b 	ldhu	r3,8(r3)
 8013f8c:	18ffffcc 	andi	r3,r3,65535
 8013f90:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 8013f94:	e0bfff17 	ldw	r2,-4(fp)
 8013f98:	10800317 	ldw	r2,12(r2)
 8013f9c:	10800804 	addi	r2,r2,32
 8013fa0:	e0fffe17 	ldw	r3,-8(fp)
 8013fa4:	18c0028b 	ldhu	r3,10(r3)
 8013fa8:	18ffffcc 	andi	r3,r3,65535
 8013fac:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 8013fb0:	e0bfff17 	ldw	r2,-4(fp)
 8013fb4:	10800317 	ldw	r2,12(r2)
 8013fb8:	10800a04 	addi	r2,r2,40
 8013fbc:	e0fffe17 	ldw	r3,-8(fp)
 8013fc0:	18c0030b 	ldhu	r3,12(r3)
 8013fc4:	18ffffcc 	andi	r3,r3,65535
 8013fc8:	10c00035 	stwio	r3,0(r2)
}
 8013fcc:	0001883a 	nop
 8013fd0:	e037883a 	mov	sp,fp
 8013fd4:	df000017 	ldw	fp,0(sp)
 8013fd8:	dec00104 	addi	sp,sp,4
 8013fdc:	f800283a 	ret

08013fe0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 8013fe0:	defffb04 	addi	sp,sp,-20
 8013fe4:	dfc00415 	stw	ra,16(sp)
 8013fe8:	df000315 	stw	fp,12(sp)
 8013fec:	df000304 	addi	fp,sp,12
 8013ff0:	e13fff15 	stw	r4,-4(fp)
 8013ff4:	e17ffe15 	stw	r5,-8(fp)
 8013ff8:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 8013ffc:	e0bffe17 	ldw	r2,-8(fp)
 8014000:	1080028b 	ldhu	r2,10(r2)
 8014004:	10bfffcc 	andi	r2,r2,65535
 8014008:	10000426 	beq	r2,zero,801401c <alt_avalon_i2c_master_config_speed_get+0x3c>
 801400c:	e0bffe17 	ldw	r2,-8(fp)
 8014010:	1080020b 	ldhu	r2,8(r2)
 8014014:	10bfffcc 	andi	r2,r2,65535
 8014018:	1000021e 	bne	r2,zero,8014024 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 801401c:	00bfff44 	movi	r2,-3
 8014020:	00000f06 	br	8014060 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8014024:	e0bfff17 	ldw	r2,-4(fp)
 8014028:	11000c17 	ldw	r4,48(r2)
 801402c:	e0bffe17 	ldw	r2,-8(fp)
 8014030:	1080028b 	ldhu	r2,10(r2)
 8014034:	10ffffcc 	andi	r3,r2,65535
 8014038:	e0bffe17 	ldw	r2,-8(fp)
 801403c:	1080020b 	ldhu	r2,8(r2)
 8014040:	10bfffcc 	andi	r2,r2,65535
 8014044:	1885883a 	add	r2,r3,r2
 8014048:	100b883a 	mov	r5,r2
 801404c:	80051fc0 	call	80051fc <__udivsi3>
 8014050:	1007883a 	mov	r3,r2
 8014054:	e0bffd17 	ldw	r2,-12(fp)
 8014058:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 801405c:	0005883a 	mov	r2,zero
}
 8014060:	e037883a 	mov	sp,fp
 8014064:	dfc00117 	ldw	ra,4(sp)
 8014068:	df000017 	ldw	fp,0(sp)
 801406c:	dec00204 	addi	sp,sp,8
 8014070:	f800283a 	ret

08014074 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8014074:	defff904 	addi	sp,sp,-28
 8014078:	dfc00615 	stw	ra,24(sp)
 801407c:	df000515 	stw	fp,20(sp)
 8014080:	df000504 	addi	fp,sp,20
 8014084:	e13ffd15 	stw	r4,-12(fp)
 8014088:	e17ffc15 	stw	r5,-16(fp)
 801408c:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 8014090:	e0fffb17 	ldw	r3,-20(fp)
 8014094:	008001b4 	movhi	r2,6
 8014098:	1086a004 	addi	r2,r2,6784
 801409c:	10c00436 	bltu	r2,r3,80140b0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 80140a0:	e0bffb17 	ldw	r2,-20(fp)
 80140a4:	10000226 	beq	r2,zero,80140b0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 80140a8:	e0bffb17 	ldw	r2,-20(fp)
 80140ac:	1000021e 	bne	r2,zero,80140b8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 80140b0:	00bfff04 	movi	r2,-4
 80140b4:	00002906 	br	801415c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 80140b8:	e0bffd17 	ldw	r2,-12(fp)
 80140bc:	10c00c17 	ldw	r3,48(r2)
 80140c0:	e0bffb17 	ldw	r2,-20(fp)
 80140c4:	1085883a 	add	r2,r2,r2
 80140c8:	100b883a 	mov	r5,r2
 80140cc:	1809883a 	mov	r4,r3
 80140d0:	80051fc0 	call	80051fc <__udivsi3>
 80140d4:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80140d8:	e0bfff17 	ldw	r2,-4(fp)
 80140dc:	10800f04 	addi	r2,r2,60
 80140e0:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80140e4:	e0bfff17 	ldw	r2,-4(fp)
 80140e8:	10bff104 	addi	r2,r2,-60
 80140ec:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 80140f0:	e0fffb17 	ldw	r3,-20(fp)
 80140f4:	008000b4 	movhi	r2,2
 80140f8:	10a1a804 	addi	r2,r2,-31072
 80140fc:	10c0042e 	bgeu	r2,r3,8014110 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 8014100:	e0bffc17 	ldw	r2,-16(fp)
 8014104:	00c00044 	movi	r3,1
 8014108:	10c00115 	stw	r3,4(r2)
 801410c:	00000206 	br	8014118 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 8014110:	e0bffc17 	ldw	r2,-16(fp)
 8014114:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8014118:	e0bfff17 	ldw	r2,-4(fp)
 801411c:	1007883a 	mov	r3,r2
 8014120:	e0bffc17 	ldw	r2,-16(fp)
 8014124:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8014128:	e0bffe17 	ldw	r2,-8(fp)
 801412c:	1007883a 	mov	r3,r2
 8014130:	e0bffc17 	ldw	r2,-16(fp)
 8014134:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8014138:	e0bfff17 	ldw	r2,-4(fp)
 801413c:	1007883a 	mov	r3,r2
 8014140:	e0bfff17 	ldw	r2,-4(fp)
 8014144:	1004d07a 	srli	r2,r2,1
 8014148:	1885c83a 	sub	r2,r3,r2
 801414c:	1007883a 	mov	r3,r2
 8014150:	e0bffc17 	ldw	r2,-16(fp)
 8014154:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 8014158:	0005883a 	mov	r2,zero

}
 801415c:	e037883a 	mov	sp,fp
 8014160:	dfc00117 	ldw	ra,4(sp)
 8014164:	df000017 	ldw	fp,0(sp)
 8014168:	dec00204 	addi	sp,sp,8
 801416c:	f800283a 	ret

08014170 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8014170:	defffe04 	addi	sp,sp,-8
 8014174:	df000115 	stw	fp,4(sp)
 8014178:	df000104 	addi	fp,sp,4
 801417c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 8014180:	e0bfff17 	ldw	r2,-4(fp)
 8014184:	10800317 	ldw	r2,12(r2)
 8014188:	10800504 	addi	r2,r2,20
 801418c:	10800037 	ldwio	r2,0(r2)
 8014190:	1080004c 	andi	r2,r2,1
 8014194:	10000226 	beq	r2,zero,80141a0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 8014198:	00800044 	movi	r2,1
 801419c:	00000106 	br	80141a4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 80141a0:	0005883a 	mov	r2,zero
}
 80141a4:	e037883a 	mov	sp,fp
 80141a8:	df000017 	ldw	fp,0(sp)
 80141ac:	dec00104 	addi	sp,sp,4
 80141b0:	f800283a 	ret

080141b4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 80141b4:	defffb04 	addi	sp,sp,-20
 80141b8:	df000415 	stw	fp,16(sp)
 80141bc:	df000404 	addi	fp,sp,16
 80141c0:	e13fff15 	stw	r4,-4(fp)
 80141c4:	e17ffe15 	stw	r5,-8(fp)
 80141c8:	e1bffd15 	stw	r6,-12(fp)
 80141cc:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
 80141d0:	e0bffc17 	ldw	r2,-16(fp)
 80141d4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 80141d8:	00001506 	br	8014230 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80141dc:	e0bfff17 	ldw	r2,-4(fp)
 80141e0:	10800317 	ldw	r2,12(r2)
 80141e4:	10800104 	addi	r2,r2,4
 80141e8:	11000037 	ldwio	r4,0(r2)
 80141ec:	e0bffc17 	ldw	r2,-16(fp)
 80141f0:	10800017 	ldw	r2,0(r2)
 80141f4:	e0fffe17 	ldw	r3,-8(fp)
 80141f8:	1885883a 	add	r2,r3,r2
 80141fc:	2007883a 	mov	r3,r4
 8014200:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 8014204:	e0bffc17 	ldw	r2,-16(fp)
 8014208:	10800017 	ldw	r2,0(r2)
 801420c:	10c00044 	addi	r3,r2,1
 8014210:	e0bffc17 	ldw	r2,-16(fp)
 8014214:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8014218:	e0bffc17 	ldw	r2,-16(fp)
 801421c:	10800017 	ldw	r2,0(r2)
 8014220:	e0fffd17 	ldw	r3,-12(fp)
 8014224:	1880021e 	bne	r3,r2,8014230 <alt_avalon_i2c_rx_read_available+0x7c>
 8014228:	e0bffd17 	ldw	r2,-12(fp)
 801422c:	1000061e 	bne	r2,zero,8014248 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8014230:	e0bfff17 	ldw	r2,-4(fp)
 8014234:	10800317 	ldw	r2,12(r2)
 8014238:	10800704 	addi	r2,r2,28
 801423c:	10800037 	ldwio	r2,0(r2)
 8014240:	103fe61e 	bne	r2,zero,80141dc <alt_avalon_i2c_rx_read_available+0x28>
    }
}
 8014244:	00000106 	br	801424c <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8014248:	0001883a 	nop
}
 801424c:	0001883a 	nop
 8014250:	e037883a 	mov	sp,fp
 8014254:	df000017 	ldw	fp,0(sp)
 8014258:	dec00104 	addi	sp,sp,4
 801425c:	f800283a 	ret

08014260 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 8014260:	defffa04 	addi	sp,sp,-24
 8014264:	dfc00515 	stw	ra,20(sp)
 8014268:	df000415 	stw	fp,16(sp)
 801426c:	df000404 	addi	fp,sp,16
 8014270:	e13ffd15 	stw	r4,-12(fp)
 8014274:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 8014278:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
 801427c:	008000b4 	movhi	r2,2
 8014280:	10a1a804 	addi	r2,r2,-31072
 8014284:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8014288:	00000d06 	br	80142c0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 801428c:	e0bffe17 	ldw	r2,-8(fp)
 8014290:	108002a8 	cmpgeui	r2,r2,10
 8014294:	1000021e 	bne	r2,zero,80142a0 <alt_avalon_i2c_rx_read+0x40>
 8014298:	0109c404 	movi	r4,10000
 801429c:	80164d00 	call	80164d0 <alt_busy_sleep>
      if (--timeout == 0)
 80142a0:	e0bffe17 	ldw	r2,-8(fp)
 80142a4:	10bfffc4 	addi	r2,r2,-1
 80142a8:	e0bffe15 	stw	r2,-8(fp)
 80142ac:	e0bffe17 	ldw	r2,-8(fp)
 80142b0:	1000031e 	bne	r2,zero,80142c0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 80142b4:	00bfff84 	movi	r2,-2
 80142b8:	e0bfff15 	stw	r2,-4(fp)
        break;
 80142bc:	00000506 	br	80142d4 <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80142c0:	e0bffd17 	ldw	r2,-12(fp)
 80142c4:	10800317 	ldw	r2,12(r2)
 80142c8:	10800704 	addi	r2,r2,28
 80142cc:	10800037 	ldwio	r2,0(r2)
 80142d0:	103fee26 	beq	r2,zero,801428c <alt_avalon_i2c_rx_read+0x2c>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80142d4:	e0bffd17 	ldw	r2,-12(fp)
 80142d8:	10800317 	ldw	r2,12(r2)
 80142dc:	10800104 	addi	r2,r2,4
 80142e0:	10800037 	ldwio	r2,0(r2)
 80142e4:	1007883a 	mov	r3,r2
 80142e8:	e0bffc17 	ldw	r2,-16(fp)
 80142ec:	10c00005 	stb	r3,0(r2)
        
    return status;
 80142f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80142f4:	e037883a 	mov	sp,fp
 80142f8:	dfc00117 	ldw	ra,4(sp)
 80142fc:	df000017 	ldw	fp,0(sp)
 8014300:	dec00204 	addi	sp,sp,8
 8014304:	f800283a 	ret

08014308 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 8014308:	defff804 	addi	sp,sp,-32
 801430c:	dfc00715 	stw	ra,28(sp)
 8014310:	df000615 	stw	fp,24(sp)
 8014314:	df000604 	addi	fp,sp,24
 8014318:	e13ffd15 	stw	r4,-12(fp)
 801431c:	2805883a 	mov	r2,r5
 8014320:	3009883a 	mov	r4,r6
 8014324:	3807883a 	mov	r3,r7
 8014328:	e0bffc05 	stb	r2,-16(fp)
 801432c:	2005883a 	mov	r2,r4
 8014330:	e0bffb05 	stb	r2,-20(fp)
 8014334:	1805883a 	mov	r2,r3
 8014338:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
 801433c:	0089c404 	movi	r2,10000
 8014340:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014344:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8014348:	00000c06 	br	801437c <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 801434c:	e0bfff17 	ldw	r2,-4(fp)
 8014350:	108002a8 	cmpgeui	r2,r2,10
 8014354:	1000021e 	bne	r2,zero,8014360 <alt_avalon_i2c_cmd_write+0x58>
 8014358:	0109c404 	movi	r4,10000
 801435c:	80164d00 	call	80164d0 <alt_busy_sleep>
      if (--timeout == 0)
 8014360:	e0bfff17 	ldw	r2,-4(fp)
 8014364:	10bfffc4 	addi	r2,r2,-1
 8014368:	e0bfff15 	stw	r2,-4(fp)
 801436c:	e0bfff17 	ldw	r2,-4(fp)
 8014370:	1000021e 	bne	r2,zero,801437c <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 8014374:	00bfff84 	movi	r2,-2
 8014378:	00001906 	br	80143e0 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 801437c:	e0bffd17 	ldw	r2,-12(fp)
 8014380:	10800317 	ldw	r2,12(r2)
 8014384:	10800404 	addi	r2,r2,16
 8014388:	10800037 	ldwio	r2,0(r2)
 801438c:	1080004c 	andi	r2,r2,1
 8014390:	103fee26 	beq	r2,zero,801434c <alt_avalon_i2c_cmd_write+0x44>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 8014394:	e0bffd17 	ldw	r2,-12(fp)
 8014398:	10800317 	ldw	r2,12(r2)
 801439c:	e13ffc03 	ldbu	r4,-16(fp)
 80143a0:	e0fffb03 	ldbu	r3,-20(fp)
 80143a4:	1806927a 	slli	r3,r3,9
 80143a8:	20c8b03a 	or	r4,r4,r3
 80143ac:	e0fffa03 	ldbu	r3,-24(fp)
 80143b0:	1806923a 	slli	r3,r3,8
 80143b4:	20c6b03a 	or	r3,r4,r3
 80143b8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 80143bc:	e0bffe04 	addi	r2,fp,-8
 80143c0:	100b883a 	mov	r5,r2
 80143c4:	e13ffd17 	ldw	r4,-12(fp)
 80143c8:	80145500 	call	8014550 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 80143cc:	e0bffe04 	addi	r2,fp,-8
 80143d0:	100b883a 	mov	r5,r2
 80143d4:	e13ffd17 	ldw	r4,-12(fp)
 80143d8:	801459c0 	call	801459c <alt_avalon_i2c_check_arblost>
    
    return status;
 80143dc:	e0bffe17 	ldw	r2,-8(fp)
}
 80143e0:	e037883a 	mov	sp,fp
 80143e4:	dfc00117 	ldw	ra,4(sp)
 80143e8:	df000017 	ldw	fp,0(sp)
 80143ec:	dec00204 	addi	sp,sp,8
 80143f0:	f800283a 	ret

080143f4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 80143f4:	defffa04 	addi	sp,sp,-24
 80143f8:	dfc00515 	stw	ra,20(sp)
 80143fc:	df000415 	stw	fp,16(sp)
 8014400:	df000404 	addi	fp,sp,16
 8014404:	e13ffe15 	stw	r4,-8(fp)
 8014408:	e17ffd15 	stw	r5,-12(fp)
 801440c:	3005883a 	mov	r2,r6
 8014410:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8014414:	e0bffe17 	ldw	r2,-8(fp)
 8014418:	10800d17 	ldw	r2,52(r2)
 801441c:	10800058 	cmpnei	r2,r2,1
 8014420:	10001c1e 	bne	r2,zero,8014494 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8014424:	e0bffe17 	ldw	r2,-8(fp)
 8014428:	10800917 	ldw	r2,36(r2)
 801442c:	1004d1fa 	srli	r2,r2,7
 8014430:	1080038c 	andi	r2,r2,14
 8014434:	1007883a 	mov	r3,r2
 8014438:	e0bffd17 	ldw	r2,-12(fp)
 801443c:	1884b03a 	or	r2,r3,r2
 8014440:	1007883a 	mov	r3,r2
 8014444:	00bffc04 	movi	r2,-16
 8014448:	1884b03a 	or	r2,r3,r2
 801444c:	10803fcc 	andi	r2,r2,255
 8014450:	e0fffc03 	ldbu	r3,-16(fp)
 8014454:	000f883a 	mov	r7,zero
 8014458:	180d883a 	mov	r6,r3
 801445c:	100b883a 	mov	r5,r2
 8014460:	e13ffe17 	ldw	r4,-8(fp)
 8014464:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014468:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 801446c:	e0bffe17 	ldw	r2,-8(fp)
 8014470:	10800917 	ldw	r2,36(r2)
 8014474:	10803fcc 	andi	r2,r2,255
 8014478:	000f883a 	mov	r7,zero
 801447c:	000d883a 	mov	r6,zero
 8014480:	100b883a 	mov	r5,r2
 8014484:	e13ffe17 	ldw	r4,-8(fp)
 8014488:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 801448c:	e0bfff15 	stw	r2,-4(fp)
 8014490:	00000e06 	br	80144cc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8014494:	e0bffe17 	ldw	r2,-8(fp)
 8014498:	10800917 	ldw	r2,36(r2)
 801449c:	1085883a 	add	r2,r2,r2
 80144a0:	1007883a 	mov	r3,r2
 80144a4:	e0bffd17 	ldw	r2,-12(fp)
 80144a8:	1884b03a 	or	r2,r3,r2
 80144ac:	10803fcc 	andi	r2,r2,255
 80144b0:	e0fffc03 	ldbu	r3,-16(fp)
 80144b4:	000f883a 	mov	r7,zero
 80144b8:	180d883a 	mov	r6,r3
 80144bc:	100b883a 	mov	r5,r2
 80144c0:	e13ffe17 	ldw	r4,-8(fp)
 80144c4:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 80144c8:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
 80144cc:	e0bfff17 	ldw	r2,-4(fp)
}
 80144d0:	e037883a 	mov	sp,fp
 80144d4:	dfc00117 	ldw	ra,4(sp)
 80144d8:	df000017 	ldw	fp,0(sp)
 80144dc:	dec00204 	addi	sp,sp,8
 80144e0:	f800283a 	ret

080144e4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 80144e4:	defffd04 	addi	sp,sp,-12
 80144e8:	df000215 	stw	fp,8(sp)
 80144ec:	df000204 	addi	fp,sp,8
 80144f0:	e13fff15 	stw	r4,-4(fp)
 80144f4:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
 80144f8:	e0bfff17 	ldw	r2,-4(fp)
 80144fc:	10c00917 	ldw	r3,36(r2)
 8014500:	e0bffe17 	ldw	r2,-8(fp)
 8014504:	10c00015 	stw	r3,0(r2)
}
 8014508:	0001883a 	nop
 801450c:	e037883a 	mov	sp,fp
 8014510:	df000017 	ldw	fp,0(sp)
 8014514:	dec00104 	addi	sp,sp,4
 8014518:	f800283a 	ret

0801451c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 801451c:	defffd04 	addi	sp,sp,-12
 8014520:	df000215 	stw	fp,8(sp)
 8014524:	df000204 	addi	fp,sp,8
 8014528:	e13fff15 	stw	r4,-4(fp)
 801452c:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
 8014530:	e0bfff17 	ldw	r2,-4(fp)
 8014534:	e0fffe17 	ldw	r3,-8(fp)
 8014538:	10c00915 	stw	r3,36(r2)
}
 801453c:	0001883a 	nop
 8014540:	e037883a 	mov	sp,fp
 8014544:	df000017 	ldw	fp,0(sp)
 8014548:	dec00104 	addi	sp,sp,4
 801454c:	f800283a 	ret

08014550 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 8014550:	defffd04 	addi	sp,sp,-12
 8014554:	df000215 	stw	fp,8(sp)
 8014558:	df000204 	addi	fp,sp,8
 801455c:	e13fff15 	stw	r4,-4(fp)
 8014560:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 8014564:	e0bfff17 	ldw	r2,-4(fp)
 8014568:	10800317 	ldw	r2,12(r2)
 801456c:	10800404 	addi	r2,r2,16
 8014570:	10800037 	ldwio	r2,0(r2)
 8014574:	1080010c 	andi	r2,r2,4
 8014578:	10000326 	beq	r2,zero,8014588 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 801457c:	e0bffe17 	ldw	r2,-8(fp)
 8014580:	00fffec4 	movi	r3,-5
 8014584:	10c00015 	stw	r3,0(r2)
    }
}
 8014588:	0001883a 	nop
 801458c:	e037883a 	mov	sp,fp
 8014590:	df000017 	ldw	fp,0(sp)
 8014594:	dec00104 	addi	sp,sp,4
 8014598:	f800283a 	ret

0801459c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 801459c:	defffd04 	addi	sp,sp,-12
 80145a0:	df000215 	stw	fp,8(sp)
 80145a4:	df000204 	addi	fp,sp,8
 80145a8:	e13fff15 	stw	r4,-4(fp)
 80145ac:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 80145b0:	e0bfff17 	ldw	r2,-4(fp)
 80145b4:	10800317 	ldw	r2,12(r2)
 80145b8:	10800404 	addi	r2,r2,16
 80145bc:	10800037 	ldwio	r2,0(r2)
 80145c0:	1080020c 	andi	r2,r2,8
 80145c4:	10000326 	beq	r2,zero,80145d4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 80145c8:	e0bffe17 	ldw	r2,-8(fp)
 80145cc:	00fffe84 	movi	r3,-6
 80145d0:	10c00015 	stw	r3,0(r2)
    }
}
 80145d4:	0001883a 	nop
 80145d8:	e037883a 	mov	sp,fp
 80145dc:	df000017 	ldw	fp,0(sp)
 80145e0:	dec00104 	addi	sp,sp,4
 80145e4:	f800283a 	ret

080145e8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 80145e8:	defff804 	addi	sp,sp,-32
 80145ec:	dfc00715 	stw	ra,28(sp)
 80145f0:	df000615 	stw	fp,24(sp)
 80145f4:	df000604 	addi	fp,sp,24
 80145f8:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 80145fc:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8014600:	e0bffa17 	ldw	r2,-24(fp)
 8014604:	10800717 	ldw	r2,28(r2)
 8014608:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 801460c:	e0bffe17 	ldw	r2,-8(fp)
 8014610:	10800117 	ldw	r2,4(r2)
 8014614:	10800044 	addi	r2,r2,1
 8014618:	0149c404 	movi	r5,10000
 801461c:	1009883a 	mov	r4,r2
 8014620:	80052bc0 	call	80052bc <__mulsi3>
 8014624:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 8014628:	e0bffc04 	addi	r2,fp,-16
 801462c:	100b883a 	mov	r5,r2
 8014630:	e13ffa17 	ldw	r4,-24(fp)
 8014634:	80154880 	call	8015488 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 8014638:	e0bffc17 	ldw	r2,-16(fp)
 801463c:	100b883a 	mov	r5,r2
 8014640:	e13ffa17 	ldw	r4,-24(fp)
 8014644:	80153b40 	call	80153b4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8014648:	e0bffd04 	addi	r2,fp,-12
 801464c:	100b883a 	mov	r5,r2
 8014650:	e13ffa17 	ldw	r4,-24(fp)
 8014654:	80145500 	call	8014550 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 8014658:	e0bffd17 	ldw	r2,-12(fp)
 801465c:	10002226 	beq	r2,zero,80146e8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 8014660:	e0bffe17 	ldw	r2,-8(fp)
 8014664:	10800217 	ldw	r2,8(r2)
 8014668:	10001d26 	beq	r2,zero,80146e0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801466c:	00000d06 	br	80146a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 8014670:	e0bfff17 	ldw	r2,-4(fp)
 8014674:	108002a8 	cmpgeui	r2,r2,10
 8014678:	1000021e 	bne	r2,zero,8014684 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 801467c:	0109c404 	movi	r4,10000
 8014680:	80164d00 	call	80164d0 <alt_busy_sleep>
              if (--timeout == 0)
 8014684:	e0bfff17 	ldw	r2,-4(fp)
 8014688:	10bfffc4 	addi	r2,r2,-1
 801468c:	e0bfff15 	stw	r2,-4(fp)
 8014690:	e0bfff17 	ldw	r2,-4(fp)
 8014694:	1000031e 	bne	r2,zero,80146a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 8014698:	00bfff84 	movi	r2,-2
 801469c:	e0bffd15 	stw	r2,-12(fp)
                 break;
 80146a0:	00000306 	br	80146b0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80146a4:	e13ffa17 	ldw	r4,-24(fp)
 80146a8:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 80146ac:	103ff01e 	bne	r2,zero,8014670 <alt_avalon_i2c_interrupt_transaction_status+0x88>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 80146b0:	e0bffe17 	ldw	r2,-8(fp)
 80146b4:	10800017 	ldw	r2,0(r2)
 80146b8:	e0fffb04 	addi	r3,fp,-20
 80146bc:	180f883a 	mov	r7,r3
 80146c0:	000d883a 	mov	r6,zero
 80146c4:	100b883a 	mov	r5,r2
 80146c8:	e13ffa17 	ldw	r4,-24(fp)
 80146cc:	80141b40 	call	80141b4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 80146d0:	e13ffa17 	ldw	r4,-24(fp)
 80146d4:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 80146d8:	e0bffe17 	ldw	r2,-8(fp)
 80146dc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 80146e0:	e0bffd17 	ldw	r2,-12(fp)
 80146e4:	00000a06 	br	8014710 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 80146e8:	e0bffe17 	ldw	r2,-8(fp)
 80146ec:	10800217 	ldw	r2,8(r2)
 80146f0:	10000626 	beq	r2,zero,801470c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 80146f4:	e0bffc17 	ldw	r2,-16(fp)
 80146f8:	100b883a 	mov	r5,r2
 80146fc:	e13ffa17 	ldw	r4,-24(fp)
 8014700:	80154200 	call	8015420 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8014704:	00bffe44 	movi	r2,-7
 8014708:	00000106 	br	8014710 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 801470c:	0005883a 	mov	r2,zero
}
 8014710:	e037883a 	mov	sp,fp
 8014714:	dfc00117 	ldw	ra,4(sp)
 8014718:	df000017 	ldw	fp,0(sp)
 801471c:	dec00204 	addi	sp,sp,8
 8014720:	f800283a 	ret

08014724 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8014724:	defff704 	addi	sp,sp,-36
 8014728:	dfc00815 	stw	ra,32(sp)
 801472c:	df000715 	stw	fp,28(sp)
 8014730:	df000704 	addi	fp,sp,28
 8014734:	e13ffd15 	stw	r4,-12(fp)
 8014738:	e17ffc15 	stw	r5,-16(fp)
 801473c:	e1bffb15 	stw	r6,-20(fp)
 8014740:	3805883a 	mov	r2,r7
 8014744:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8014748:	0089c404 	movi	r2,10000
 801474c:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
 8014750:	00002206 	br	80147dc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8014754:	e0bffe17 	ldw	r2,-8(fp)
 8014758:	108002a8 	cmpgeui	r2,r2,10
 801475c:	1000021e 	bne	r2,zero,8014768 <alt_avalon_i2c_master_tx+0x44>
 8014760:	0109c404 	movi	r4,10000
 8014764:	80164d00 	call	80164d0 <alt_busy_sleep>
      if (use_interrupts)
 8014768:	e0bffa03 	ldbu	r2,-24(fp)
 801476c:	10000926 	beq	r2,zero,8014794 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 8014770:	00800044 	movi	r2,1
 8014774:	d8800015 	stw	r2,0(sp)
 8014778:	000f883a 	mov	r7,zero
 801477c:	e1bffb17 	ldw	r6,-20(fp)
 8014780:	e17ffc17 	ldw	r5,-16(fp)
 8014784:	e13ffd17 	ldw	r4,-12(fp)
 8014788:	8014cd00 	call	8014cd0 <alt_avalon_i2c_master_transmit_using_interrupts>
 801478c:	e0bfff15 	stw	r2,-4(fp)
 8014790:	00000806 	br	80147b4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 8014794:	00800044 	movi	r2,1
 8014798:	d8800015 	stw	r2,0(sp)
 801479c:	000f883a 	mov	r7,zero
 80147a0:	e1bffb17 	ldw	r6,-20(fp)
 80147a4:	e17ffc17 	ldw	r5,-16(fp)
 80147a8:	e13ffd17 	ldw	r4,-12(fp)
 80147ac:	8014b100 	call	8014b10 <alt_avalon_i2c_master_transmit>
 80147b0:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80147b4:	e0bfff17 	ldw	r2,-4(fp)
 80147b8:	10bffea0 	cmpeqi	r2,r2,-6
 80147bc:	1000061e 	bne	r2,zero,80147d8 <alt_avalon_i2c_master_tx+0xb4>
 80147c0:	e0bfff17 	ldw	r2,-4(fp)
 80147c4:	10bffee0 	cmpeqi	r2,r2,-5
 80147c8:	1000031e 	bne	r2,zero,80147d8 <alt_avalon_i2c_master_tx+0xb4>
 80147cc:	e0bfff17 	ldw	r2,-4(fp)
 80147d0:	10bffe58 	cmpnei	r2,r2,-7
 80147d4:	1000061e 	bne	r2,zero,80147f0 <alt_avalon_i2c_master_tx+0xcc>
 80147d8:	0001883a 	nop
    while (retry--)
 80147dc:	e0bffe17 	ldw	r2,-8(fp)
 80147e0:	10ffffc4 	addi	r3,r2,-1
 80147e4:	e0fffe15 	stw	r3,-8(fp)
 80147e8:	103fda1e 	bne	r2,zero,8014754 <alt_avalon_i2c_master_tx+0x30>
 80147ec:	00000106 	br	80147f4 <alt_avalon_i2c_master_tx+0xd0>
      break;
 80147f0:	0001883a 	nop
    }

    return status;
 80147f4:	e0bfff17 	ldw	r2,-4(fp)
}        
 80147f8:	e037883a 	mov	sp,fp
 80147fc:	dfc00117 	ldw	ra,4(sp)
 8014800:	df000017 	ldw	fp,0(sp)
 8014804:	dec00204 	addi	sp,sp,8
 8014808:	f800283a 	ret

0801480c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 801480c:	defff704 	addi	sp,sp,-36
 8014810:	dfc00815 	stw	ra,32(sp)
 8014814:	df000715 	stw	fp,28(sp)
 8014818:	df000704 	addi	fp,sp,28
 801481c:	e13ffd15 	stw	r4,-12(fp)
 8014820:	e17ffc15 	stw	r5,-16(fp)
 8014824:	e1bffb15 	stw	r6,-20(fp)
 8014828:	3805883a 	mov	r2,r7
 801482c:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8014830:	0089c404 	movi	r2,10000
 8014834:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
 8014838:	e0bffa03 	ldbu	r2,-24(fp)
 801483c:	10003426 	beq	r2,zero,8014910 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 8014840:	00001706 	br	80148a0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8014844:	e0bffe17 	ldw	r2,-8(fp)
 8014848:	108002a8 	cmpgeui	r2,r2,10
 801484c:	1000021e 	bne	r2,zero,8014858 <alt_avalon_i2c_master_rx+0x4c>
 8014850:	0109c404 	movi	r4,10000
 8014854:	80164d00 	call	80164d0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8014858:	00800044 	movi	r2,1
 801485c:	d8800015 	stw	r2,0(sp)
 8014860:	000f883a 	mov	r7,zero
 8014864:	e1bffb17 	ldw	r6,-20(fp)
 8014868:	e17ffc17 	ldw	r5,-16(fp)
 801486c:	e13ffd17 	ldw	r4,-12(fp)
 8014870:	80150ec0 	call	80150ec <alt_avalon_i2c_master_receive_using_interrupts>
 8014874:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014878:	e0bfff17 	ldw	r2,-4(fp)
 801487c:	10bffea0 	cmpeqi	r2,r2,-6
 8014880:	1000061e 	bne	r2,zero,801489c <alt_avalon_i2c_master_rx+0x90>
 8014884:	e0bfff17 	ldw	r2,-4(fp)
 8014888:	10bffee0 	cmpeqi	r2,r2,-5
 801488c:	1000031e 	bne	r2,zero,801489c <alt_avalon_i2c_master_rx+0x90>
 8014890:	e0bfff17 	ldw	r2,-4(fp)
 8014894:	10bffe58 	cmpnei	r2,r2,-7
 8014898:	1000221e 	bne	r2,zero,8014924 <alt_avalon_i2c_master_rx+0x118>
 801489c:	0001883a 	nop
      while (retry--) 
 80148a0:	e0bffe17 	ldw	r2,-8(fp)
 80148a4:	10ffffc4 	addi	r3,r2,-1
 80148a8:	e0fffe15 	stw	r3,-8(fp)
 80148ac:	103fe51e 	bne	r2,zero,8014844 <alt_avalon_i2c_master_rx+0x38>
 80148b0:	00001f06 	br	8014930 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 80148b4:	e0bffe17 	ldw	r2,-8(fp)
 80148b8:	108002a8 	cmpgeui	r2,r2,10
 80148bc:	1000021e 	bne	r2,zero,80148c8 <alt_avalon_i2c_master_rx+0xbc>
 80148c0:	0109c404 	movi	r4,10000
 80148c4:	80164d00 	call	80164d0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 80148c8:	00800044 	movi	r2,1
 80148cc:	d8800015 	stw	r2,0(sp)
 80148d0:	000f883a 	mov	r7,zero
 80148d4:	e1bffb17 	ldw	r6,-20(fp)
 80148d8:	e17ffc17 	ldw	r5,-16(fp)
 80148dc:	e13ffd17 	ldw	r4,-12(fp)
 80148e0:	8014edc0 	call	8014edc <alt_avalon_i2c_master_receive>
 80148e4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80148e8:	e0bfff17 	ldw	r2,-4(fp)
 80148ec:	10bffea0 	cmpeqi	r2,r2,-6
 80148f0:	1000061e 	bne	r2,zero,801490c <alt_avalon_i2c_master_rx+0x100>
 80148f4:	e0bfff17 	ldw	r2,-4(fp)
 80148f8:	10bffee0 	cmpeqi	r2,r2,-5
 80148fc:	1000031e 	bne	r2,zero,801490c <alt_avalon_i2c_master_rx+0x100>
 8014900:	e0bfff17 	ldw	r2,-4(fp)
 8014904:	10bffe58 	cmpnei	r2,r2,-7
 8014908:	1000081e 	bne	r2,zero,801492c <alt_avalon_i2c_master_rx+0x120>
 801490c:	0001883a 	nop
      while (retry--) 
 8014910:	e0bffe17 	ldw	r2,-8(fp)
 8014914:	10ffffc4 	addi	r3,r2,-1
 8014918:	e0fffe15 	stw	r3,-8(fp)
 801491c:	103fe51e 	bne	r2,zero,80148b4 <alt_avalon_i2c_master_rx+0xa8>
 8014920:	00000306 	br	8014930 <alt_avalon_i2c_master_rx+0x124>
        break;
 8014924:	0001883a 	nop
 8014928:	00000106 	br	8014930 <alt_avalon_i2c_master_rx+0x124>
        break;
 801492c:	0001883a 	nop
      }
    }
    
    return status;
 8014930:	e0bfff17 	ldw	r2,-4(fp)
}        
 8014934:	e037883a 	mov	sp,fp
 8014938:	dfc00117 	ldw	ra,4(sp)
 801493c:	df000017 	ldw	fp,0(sp)
 8014940:	dec00204 	addi	sp,sp,8
 8014944:	f800283a 	ret

08014948 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8014948:	defff604 	addi	sp,sp,-40
 801494c:	dfc00915 	stw	ra,36(sp)
 8014950:	df000815 	stw	fp,32(sp)
 8014954:	df000804 	addi	fp,sp,32
 8014958:	e13ffd15 	stw	r4,-12(fp)
 801495c:	e17ffc15 	stw	r5,-16(fp)
 8014960:	e1bffb15 	stw	r6,-20(fp)
 8014964:	e1fffa15 	stw	r7,-24(fp)
 8014968:	e0800317 	ldw	r2,12(fp)
 801496c:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8014970:	0089c404 	movi	r2,10000
 8014974:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
 8014978:	e0bff903 	ldbu	r2,-28(fp)
 801497c:	10005626 	beq	r2,zero,8014ad8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 8014980:	00002806 	br	8014a24 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8014984:	e0bffe17 	ldw	r2,-8(fp)
 8014988:	108002a8 	cmpgeui	r2,r2,10
 801498c:	1000021e 	bne	r2,zero,8014998 <alt_avalon_i2c_master_tx_rx+0x50>
 8014990:	0109c404 	movi	r4,10000
 8014994:	80164d00 	call	80164d0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8014998:	d8000015 	stw	zero,0(sp)
 801499c:	000f883a 	mov	r7,zero
 80149a0:	e1bffb17 	ldw	r6,-20(fp)
 80149a4:	e17ffc17 	ldw	r5,-16(fp)
 80149a8:	e13ffd17 	ldw	r4,-12(fp)
 80149ac:	8014cd00 	call	8014cd0 <alt_avalon_i2c_master_transmit_using_interrupts>
 80149b0:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80149b4:	e0bfff17 	ldw	r2,-4(fp)
 80149b8:	10bffea0 	cmpeqi	r2,r2,-6
 80149bc:	1000191e 	bne	r2,zero,8014a24 <alt_avalon_i2c_master_tx_rx+0xdc>
 80149c0:	e0bfff17 	ldw	r2,-4(fp)
 80149c4:	10bffee0 	cmpeqi	r2,r2,-5
 80149c8:	1000161e 	bne	r2,zero,8014a24 <alt_avalon_i2c_master_tx_rx+0xdc>
 80149cc:	e0bfff17 	ldw	r2,-4(fp)
 80149d0:	10bffe58 	cmpnei	r2,r2,-7
 80149d4:	1000011e 	bne	r2,zero,80149dc <alt_avalon_i2c_master_tx_rx+0x94>
 80149d8:	00001206 	br	8014a24 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 80149dc:	00800044 	movi	r2,1
 80149e0:	d8800015 	stw	r2,0(sp)
 80149e4:	01c00044 	movi	r7,1
 80149e8:	e1800217 	ldw	r6,8(fp)
 80149ec:	e17ffa17 	ldw	r5,-24(fp)
 80149f0:	e13ffd17 	ldw	r4,-12(fp)
 80149f4:	80150ec0 	call	80150ec <alt_avalon_i2c_master_receive_using_interrupts>
 80149f8:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80149fc:	e0bfff17 	ldw	r2,-4(fp)
 8014a00:	10bffea0 	cmpeqi	r2,r2,-6
 8014a04:	1000061e 	bne	r2,zero,8014a20 <alt_avalon_i2c_master_tx_rx+0xd8>
 8014a08:	e0bfff17 	ldw	r2,-4(fp)
 8014a0c:	10bffee0 	cmpeqi	r2,r2,-5
 8014a10:	1000031e 	bne	r2,zero,8014a20 <alt_avalon_i2c_master_tx_rx+0xd8>
 8014a14:	e0bfff17 	ldw	r2,-4(fp)
 8014a18:	10bffe58 	cmpnei	r2,r2,-7
 8014a1c:	1000331e 	bne	r2,zero,8014aec <alt_avalon_i2c_master_tx_rx+0x1a4>
 8014a20:	0001883a 	nop
      while (retry--) 
 8014a24:	e0bffe17 	ldw	r2,-8(fp)
 8014a28:	10ffffc4 	addi	r3,r2,-1
 8014a2c:	e0fffe15 	stw	r3,-8(fp)
 8014a30:	103fd41e 	bne	r2,zero,8014984 <alt_avalon_i2c_master_tx_rx+0x3c>
 8014a34:	00003006 	br	8014af8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8014a38:	e0bffe17 	ldw	r2,-8(fp)
 8014a3c:	108002a8 	cmpgeui	r2,r2,10
 8014a40:	1000021e 	bne	r2,zero,8014a4c <alt_avalon_i2c_master_tx_rx+0x104>
 8014a44:	0109c404 	movi	r4,10000
 8014a48:	80164d00 	call	80164d0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8014a4c:	d8000015 	stw	zero,0(sp)
 8014a50:	000f883a 	mov	r7,zero
 8014a54:	e1bffb17 	ldw	r6,-20(fp)
 8014a58:	e17ffc17 	ldw	r5,-16(fp)
 8014a5c:	e13ffd17 	ldw	r4,-12(fp)
 8014a60:	8014b100 	call	8014b10 <alt_avalon_i2c_master_transmit>
 8014a64:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014a68:	e0bfff17 	ldw	r2,-4(fp)
 8014a6c:	10bffea0 	cmpeqi	r2,r2,-6
 8014a70:	1000191e 	bne	r2,zero,8014ad8 <alt_avalon_i2c_master_tx_rx+0x190>
 8014a74:	e0bfff17 	ldw	r2,-4(fp)
 8014a78:	10bffee0 	cmpeqi	r2,r2,-5
 8014a7c:	1000161e 	bne	r2,zero,8014ad8 <alt_avalon_i2c_master_tx_rx+0x190>
 8014a80:	e0bfff17 	ldw	r2,-4(fp)
 8014a84:	10bffe58 	cmpnei	r2,r2,-7
 8014a88:	1000011e 	bne	r2,zero,8014a90 <alt_avalon_i2c_master_tx_rx+0x148>
 8014a8c:	00001206 	br	8014ad8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8014a90:	00800044 	movi	r2,1
 8014a94:	d8800015 	stw	r2,0(sp)
 8014a98:	01c00044 	movi	r7,1
 8014a9c:	e1800217 	ldw	r6,8(fp)
 8014aa0:	e17ffa17 	ldw	r5,-24(fp)
 8014aa4:	e13ffd17 	ldw	r4,-12(fp)
 8014aa8:	8014edc0 	call	8014edc <alt_avalon_i2c_master_receive>
 8014aac:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014ab0:	e0bfff17 	ldw	r2,-4(fp)
 8014ab4:	10bffea0 	cmpeqi	r2,r2,-6
 8014ab8:	1000061e 	bne	r2,zero,8014ad4 <alt_avalon_i2c_master_tx_rx+0x18c>
 8014abc:	e0bfff17 	ldw	r2,-4(fp)
 8014ac0:	10bffee0 	cmpeqi	r2,r2,-5
 8014ac4:	1000031e 	bne	r2,zero,8014ad4 <alt_avalon_i2c_master_tx_rx+0x18c>
 8014ac8:	e0bfff17 	ldw	r2,-4(fp)
 8014acc:	10bffe58 	cmpnei	r2,r2,-7
 8014ad0:	1000081e 	bne	r2,zero,8014af4 <alt_avalon_i2c_master_tx_rx+0x1ac>
 8014ad4:	0001883a 	nop
      while (retry--) 
 8014ad8:	e0bffe17 	ldw	r2,-8(fp)
 8014adc:	10ffffc4 	addi	r3,r2,-1
 8014ae0:	e0fffe15 	stw	r3,-8(fp)
 8014ae4:	103fd41e 	bne	r2,zero,8014a38 <alt_avalon_i2c_master_tx_rx+0xf0>
 8014ae8:	00000306 	br	8014af8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
 8014aec:	0001883a 	nop
 8014af0:	00000106 	br	8014af8 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
 8014af4:	0001883a 	nop
      }
    }
    
    return status;
 8014af8:	e0bfff17 	ldw	r2,-4(fp)
}                                       
 8014afc:	e037883a 	mov	sp,fp
 8014b00:	dfc00117 	ldw	ra,4(sp)
 8014b04:	df000017 	ldw	fp,0(sp)
 8014b08:	dec00204 	addi	sp,sp,8
 8014b0c:	f800283a 	ret

08014b10 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8014b10:	defff704 	addi	sp,sp,-36
 8014b14:	dfc00815 	stw	ra,32(sp)
 8014b18:	df000715 	stw	fp,28(sp)
 8014b1c:	df000704 	addi	fp,sp,28
 8014b20:	e13ffd15 	stw	r4,-12(fp)
 8014b24:	e17ffc15 	stw	r5,-16(fp)
 8014b28:	e1bffb15 	stw	r6,-20(fp)
 8014b2c:	3807883a 	mov	r3,r7
 8014b30:	e0800217 	ldw	r2,8(fp)
 8014b34:	e0fffa05 	stb	r3,-24(fp)
 8014b38:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014b3c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
 8014b40:	0149c404 	movi	r5,10000
 8014b44:	e13ffb17 	ldw	r4,-20(fp)
 8014b48:	80052bc0 	call	80052bc <__mulsi3>
 8014b4c:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
 8014b50:	e0bffb17 	ldw	r2,-20(fp)
 8014b54:	1000021e 	bne	r2,zero,8014b60 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014b58:	0005883a 	mov	r2,zero
 8014b5c:	00005706 	br	8014cbc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014b60:	e0bffa03 	ldbu	r2,-24(fp)
 8014b64:	10000a1e 	bne	r2,zero,8014b90 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014b68:	e13ffd17 	ldw	r4,-12(fp)
 8014b6c:	8013d800 	call	8013d80 <alt_avalon_i2c_enable>
 8014b70:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014b74:	e0bffe17 	ldw	r2,-8(fp)
 8014b78:	10000226 	beq	r2,zero,8014b84 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 8014b7c:	e0bffe17 	ldw	r2,-8(fp)
 8014b80:	00004e06 	br	8014cbc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014b84:	01400704 	movi	r5,28
 8014b88:	e13ffd17 	ldw	r4,-12(fp)
 8014b8c:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8014b90:	e0bffa03 	ldbu	r2,-24(fp)
 8014b94:	100d883a 	mov	r6,r2
 8014b98:	000b883a 	mov	r5,zero
 8014b9c:	e13ffd17 	ldw	r4,-12(fp)
 8014ba0:	80143f40 	call	80143f4 <alt_avalon_i2c_send_address>
 8014ba4:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 8014ba8:	e0bffe17 	ldw	r2,-8(fp)
 8014bac:	1000271e 	bne	r2,zero,8014c4c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014bb0:	00000f06 	br	8014bf0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014bb4:	e0bffc17 	ldw	r2,-16(fp)
 8014bb8:	10800003 	ldbu	r2,0(r2)
 8014bbc:	10803fcc 	andi	r2,r2,255
 8014bc0:	000f883a 	mov	r7,zero
 8014bc4:	000d883a 	mov	r6,zero
 8014bc8:	100b883a 	mov	r5,r2
 8014bcc:	e13ffd17 	ldw	r4,-12(fp)
 8014bd0:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014bd4:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
 8014bd8:	e0bffc17 	ldw	r2,-16(fp)
 8014bdc:	10800044 	addi	r2,r2,1
 8014be0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014be4:	e0bffb17 	ldw	r2,-20(fp)
 8014be8:	10bfffc4 	addi	r2,r2,-1
 8014bec:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014bf0:	e0bffb17 	ldw	r2,-20(fp)
 8014bf4:	108000b0 	cmpltui	r2,r2,2
 8014bf8:	1000021e 	bne	r2,zero,8014c04 <alt_avalon_i2c_master_transmit+0xf4>
 8014bfc:	e0bffe17 	ldw	r2,-8(fp)
 8014c00:	103fec26 	beq	r2,zero,8014bb4 <alt_avalon_i2c_master_transmit+0xa4>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014c04:	e0bffe17 	ldw	r2,-8(fp)
 8014c08:	1000101e 	bne	r2,zero,8014c4c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014c0c:	e0bffc17 	ldw	r2,-16(fp)
 8014c10:	10800003 	ldbu	r2,0(r2)
 8014c14:	10803fcc 	andi	r2,r2,255
 8014c18:	e0fff903 	ldbu	r3,-28(fp)
 8014c1c:	180f883a 	mov	r7,r3
 8014c20:	000d883a 	mov	r6,zero
 8014c24:	100b883a 	mov	r5,r2
 8014c28:	e13ffd17 	ldw	r4,-12(fp)
 8014c2c:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014c30:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
 8014c34:	e0bffc17 	ldw	r2,-16(fp)
 8014c38:	10800044 	addi	r2,r2,1
 8014c3c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014c40:	e0bffb17 	ldw	r2,-20(fp)
 8014c44:	10bfffc4 	addi	r2,r2,-1
 8014c48:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8014c4c:	e0bff903 	ldbu	r2,-28(fp)
 8014c50:	1000101e 	bne	r2,zero,8014c94 <alt_avalon_i2c_master_transmit+0x184>
 8014c54:	e0bffe17 	ldw	r2,-8(fp)
 8014c58:	10001726 	beq	r2,zero,8014cb8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014c5c:	00000d06 	br	8014c94 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8014c60:	e0bfff17 	ldw	r2,-4(fp)
 8014c64:	108002a8 	cmpgeui	r2,r2,10
 8014c68:	1000021e 	bne	r2,zero,8014c74 <alt_avalon_i2c_master_transmit+0x164>
 8014c6c:	0109c404 	movi	r4,10000
 8014c70:	80164d00 	call	80164d0 <alt_busy_sleep>
            if (--timeout == 0)
 8014c74:	e0bfff17 	ldw	r2,-4(fp)
 8014c78:	10bfffc4 	addi	r2,r2,-1
 8014c7c:	e0bfff15 	stw	r2,-4(fp)
 8014c80:	e0bfff17 	ldw	r2,-4(fp)
 8014c84:	1000031e 	bne	r2,zero,8014c94 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8014c88:	00bfff84 	movi	r2,-2
 8014c8c:	e0bffe15 	stw	r2,-8(fp)
               break;
 8014c90:	00000306 	br	8014ca0 <alt_avalon_i2c_master_transmit+0x190>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014c94:	e13ffd17 	ldw	r4,-12(fp)
 8014c98:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 8014c9c:	103ff01e 	bne	r2,zero,8014c60 <alt_avalon_i2c_master_transmit+0x150>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 8014ca0:	e0bffe04 	addi	r2,fp,-8
 8014ca4:	100b883a 	mov	r5,r2
 8014ca8:	e13ffd17 	ldw	r4,-12(fp)
 8014cac:	80145500 	call	8014550 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8014cb0:	e13ffd17 	ldw	r4,-12(fp)
 8014cb4:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>
    }


    return status;
 8014cb8:	e0bffe17 	ldw	r2,-8(fp)
}
 8014cbc:	e037883a 	mov	sp,fp
 8014cc0:	dfc00117 	ldw	ra,4(sp)
 8014cc4:	df000017 	ldw	fp,0(sp)
 8014cc8:	dec00204 	addi	sp,sp,8
 8014ccc:	f800283a 	ret

08014cd0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8014cd0:	defff604 	addi	sp,sp,-40
 8014cd4:	dfc00915 	stw	ra,36(sp)
 8014cd8:	df000815 	stw	fp,32(sp)
 8014cdc:	df000804 	addi	fp,sp,32
 8014ce0:	e13ffc15 	stw	r4,-16(fp)
 8014ce4:	e17ffb15 	stw	r5,-20(fp)
 8014ce8:	e1bffa15 	stw	r6,-24(fp)
 8014cec:	3807883a 	mov	r3,r7
 8014cf0:	e0800217 	ldw	r2,8(fp)
 8014cf4:	e0fff905 	stb	r3,-28(fp)
 8014cf8:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014cfc:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
 8014d00:	0149c404 	movi	r5,10000
 8014d04:	e13ffa17 	ldw	r4,-24(fp)
 8014d08:	80052bc0 	call	80052bc <__mulsi3>
 8014d0c:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8014d10:	e0bffc17 	ldw	r2,-16(fp)
 8014d14:	10800717 	ldw	r2,28(r2)
 8014d18:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
 8014d1c:	e0bffa17 	ldw	r2,-24(fp)
 8014d20:	1000021e 	bne	r2,zero,8014d2c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014d24:	0005883a 	mov	r2,zero
 8014d28:	00006706 	br	8014ec8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8014d2c:	e0bffc17 	ldw	r2,-16(fp)
 8014d30:	10c00617 	ldw	r3,24(r2)
 8014d34:	00820074 	movhi	r2,2049
 8014d38:	108e8004 	addi	r2,r2,14848
 8014d3c:	18800226 	beq	r3,r2,8014d48 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8014d40:	00bfff44 	movi	r2,-3
 8014d44:	00006006 	br	8014ec8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014d48:	e0bff903 	ldbu	r2,-28(fp)
 8014d4c:	10000a1e 	bne	r2,zero,8014d78 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014d50:	e13ffc17 	ldw	r4,-16(fp)
 8014d54:	8013d800 	call	8013d80 <alt_avalon_i2c_enable>
 8014d58:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014d5c:	e0bfff17 	ldw	r2,-4(fp)
 8014d60:	10000226 	beq	r2,zero,8014d6c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 8014d64:	e0bfff17 	ldw	r2,-4(fp)
 8014d68:	00005706 	br	8014ec8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014d6c:	01400704 	movi	r5,28
 8014d70:	e13ffc17 	ldw	r4,-16(fp)
 8014d74:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8014d78:	e0bff903 	ldbu	r2,-28(fp)
 8014d7c:	100d883a 	mov	r6,r2
 8014d80:	000b883a 	mov	r5,zero
 8014d84:	e13ffc17 	ldw	r4,-16(fp)
 8014d88:	80143f40 	call	80143f4 <alt_avalon_i2c_send_address>
 8014d8c:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 8014d90:	e0bfff17 	ldw	r2,-4(fp)
 8014d94:	1000271e 	bne	r2,zero,8014e34 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014d98:	00000f06 	br	8014dd8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014d9c:	e0bffb17 	ldw	r2,-20(fp)
 8014da0:	10800003 	ldbu	r2,0(r2)
 8014da4:	10803fcc 	andi	r2,r2,255
 8014da8:	000f883a 	mov	r7,zero
 8014dac:	000d883a 	mov	r6,zero
 8014db0:	100b883a 	mov	r5,r2
 8014db4:	e13ffc17 	ldw	r4,-16(fp)
 8014db8:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014dbc:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
 8014dc0:	e0bffb17 	ldw	r2,-20(fp)
 8014dc4:	10800044 	addi	r2,r2,1
 8014dc8:	e0bffb15 	stw	r2,-20(fp)
            --size;
 8014dcc:	e0bffa17 	ldw	r2,-24(fp)
 8014dd0:	10bfffc4 	addi	r2,r2,-1
 8014dd4:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014dd8:	e0bffa17 	ldw	r2,-24(fp)
 8014ddc:	108000b0 	cmpltui	r2,r2,2
 8014de0:	1000021e 	bne	r2,zero,8014dec <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 8014de4:	e0bfff17 	ldw	r2,-4(fp)
 8014de8:	103fec26 	beq	r2,zero,8014d9c <alt_avalon_i2c_master_transmit_using_interrupts+0xcc>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014dec:	e0bfff17 	ldw	r2,-4(fp)
 8014df0:	1000101e 	bne	r2,zero,8014e34 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014df4:	e0bffb17 	ldw	r2,-20(fp)
 8014df8:	10800003 	ldbu	r2,0(r2)
 8014dfc:	10803fcc 	andi	r2,r2,255
 8014e00:	e0fff803 	ldbu	r3,-32(fp)
 8014e04:	180f883a 	mov	r7,r3
 8014e08:	000d883a 	mov	r6,zero
 8014e0c:	100b883a 	mov	r5,r2
 8014e10:	e13ffc17 	ldw	r4,-16(fp)
 8014e14:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014e18:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
 8014e1c:	e0bffb17 	ldw	r2,-20(fp)
 8014e20:	10800044 	addi	r2,r2,1
 8014e24:	e0bffb15 	stw	r2,-20(fp)
            --size;
 8014e28:	e0bffa17 	ldw	r2,-24(fp)
 8014e2c:	10bfffc4 	addi	r2,r2,-1
 8014e30:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8014e34:	e0bfff17 	ldw	r2,-4(fp)
 8014e38:	10001426 	beq	r2,zero,8014e8c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014e3c:	00000d06 	br	8014e74 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 8014e40:	e0bffe17 	ldw	r2,-8(fp)
 8014e44:	108002a8 	cmpgeui	r2,r2,10
 8014e48:	1000021e 	bne	r2,zero,8014e54 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 8014e4c:	0109c404 	movi	r4,10000
 8014e50:	80164d00 	call	80164d0 <alt_busy_sleep>
            if (--timeout == 0)
 8014e54:	e0bffe17 	ldw	r2,-8(fp)
 8014e58:	10bfffc4 	addi	r2,r2,-1
 8014e5c:	e0bffe15 	stw	r2,-8(fp)
 8014e60:	e0bffe17 	ldw	r2,-8(fp)
 8014e64:	1000031e 	bne	r2,zero,8014e74 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8014e68:	00bfff84 	movi	r2,-2
 8014e6c:	e0bfff15 	stw	r2,-4(fp)
               break;
 8014e70:	00000306 	br	8014e80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014e74:	e13ffc17 	ldw	r4,-16(fp)
 8014e78:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 8014e7c:	103ff01e 	bne	r2,zero,8014e40 <alt_avalon_i2c_master_transmit_using_interrupts+0x170>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8014e80:	e13ffc17 	ldw	r4,-16(fp)
 8014e84:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>
 8014e88:	00000e06 	br	8014ec4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 8014e8c:	e0bff803 	ldbu	r2,-32(fp)
 8014e90:	10000c26 	beq	r2,zero,8014ec4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014e94:	01400704 	movi	r5,28
 8014e98:	e13ffc17 	ldw	r4,-16(fp)
 8014e9c:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 8014ea0:	000b883a 	mov	r5,zero
 8014ea4:	e13ffc17 	ldw	r4,-16(fp)
 8014ea8:	80155c80 	call	80155c8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 8014eac:	e0bffd17 	ldw	r2,-12(fp)
 8014eb0:	00c00044 	movi	r3,1
 8014eb4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 8014eb8:	01400044 	movi	r5,1
 8014ebc:	e13ffc17 	ldw	r4,-16(fp)
 8014ec0:	80154200 	call	8015420 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 8014ec4:	e0bfff17 	ldw	r2,-4(fp)
}
 8014ec8:	e037883a 	mov	sp,fp
 8014ecc:	dfc00117 	ldw	ra,4(sp)
 8014ed0:	df000017 	ldw	fp,0(sp)
 8014ed4:	dec00204 	addi	sp,sp,8
 8014ed8:	f800283a 	ret

08014edc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8014edc:	defff404 	addi	sp,sp,-48
 8014ee0:	dfc00b15 	stw	ra,44(sp)
 8014ee4:	df000a15 	stw	fp,40(sp)
 8014ee8:	df000a04 	addi	fp,sp,40
 8014eec:	e13ffa15 	stw	r4,-24(fp)
 8014ef0:	e17ff915 	stw	r5,-28(fp)
 8014ef4:	e1bff815 	stw	r6,-32(fp)
 8014ef8:	3807883a 	mov	r3,r7
 8014efc:	e0800217 	ldw	r2,8(fp)
 8014f00:	e0fff705 	stb	r3,-36(fp)
 8014f04:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014f08:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 8014f0c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
 8014f10:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 8014f14:	e0bff817 	ldw	r2,-32(fp)
 8014f18:	1000021e 	bne	r2,zero,8014f24 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014f1c:	0005883a 	mov	r2,zero
 8014f20:	00006d06 	br	80150d8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014f24:	e0bff703 	ldbu	r2,-36(fp)
 8014f28:	10000a1e 	bne	r2,zero,8014f54 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014f2c:	e13ffa17 	ldw	r4,-24(fp)
 8014f30:	8013d800 	call	8013d80 <alt_avalon_i2c_enable>
 8014f34:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014f38:	e0bffc17 	ldw	r2,-16(fp)
 8014f3c:	10000226 	beq	r2,zero,8014f48 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 8014f40:	e0bffc17 	ldw	r2,-16(fp)
 8014f44:	00006406 	br	80150d8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014f48:	01400704 	movi	r5,28
 8014f4c:	e13ffa17 	ldw	r4,-24(fp)
 8014f50:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8014f54:	e0bff703 	ldbu	r2,-36(fp)
 8014f58:	100d883a 	mov	r6,r2
 8014f5c:	01400044 	movi	r5,1
 8014f60:	e13ffa17 	ldw	r4,-24(fp)
 8014f64:	80143f40 	call	80143f4 <alt_avalon_i2c_send_address>
 8014f68:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8014f6c:	e0bffc17 	ldw	r2,-16(fp)
 8014f70:	1000341e 	bne	r2,zero,8015044 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8014f74:	00001906 	br	8014fdc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014f78:	000f883a 	mov	r7,zero
 8014f7c:	000d883a 	mov	r6,zero
 8014f80:	000b883a 	mov	r5,zero
 8014f84:	e13ffa17 	ldw	r4,-24(fp)
 8014f88:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8014f8c:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
 8014f90:	e0bffd17 	ldw	r2,-12(fp)
 8014f94:	10800044 	addi	r2,r2,1
 8014f98:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 8014f9c:	e0bffc17 	ldw	r2,-16(fp)
 8014fa0:	10000e1e 	bne	r2,zero,8014fdc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 8014fa4:	e0bffb04 	addi	r2,fp,-20
 8014fa8:	100f883a 	mov	r7,r2
 8014fac:	000d883a 	mov	r6,zero
 8014fb0:	e17ff917 	ldw	r5,-28(fp)
 8014fb4:	e13ffa17 	ldw	r4,-24(fp)
 8014fb8:	80141b40 	call	80141b4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 8014fbc:	e0bffb17 	ldw	r2,-20(fp)
 8014fc0:	e0fff917 	ldw	r3,-28(fp)
 8014fc4:	1885883a 	add	r2,r3,r2
 8014fc8:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
 8014fcc:	e0bffb17 	ldw	r2,-20(fp)
 8014fd0:	e0fffe17 	ldw	r3,-8(fp)
 8014fd4:	1885883a 	add	r2,r3,r2
 8014fd8:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8014fdc:	e0bff817 	ldw	r2,-32(fp)
 8014fe0:	10bfffc4 	addi	r2,r2,-1
 8014fe4:	e0fffd17 	ldw	r3,-12(fp)
 8014fe8:	1880022e 	bgeu	r3,r2,8014ff4 <alt_avalon_i2c_master_receive+0x118>
 8014fec:	e0bffc17 	ldw	r2,-16(fp)
 8014ff0:	103fe126 	beq	r2,zero,8014f78 <alt_avalon_i2c_master_receive+0x9c>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014ff4:	e0bffc17 	ldw	r2,-16(fp)
 8014ff8:	1000121e 	bne	r2,zero,8015044 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014ffc:	e0bff603 	ldbu	r2,-40(fp)
 8015000:	100f883a 	mov	r7,r2
 8015004:	000d883a 	mov	r6,zero
 8015008:	000b883a 	mov	r5,zero
 801500c:	e13ffa17 	ldw	r4,-24(fp)
 8015010:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8015014:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8015018:	00000a06 	br	8015044 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 801501c:	e17ff917 	ldw	r5,-28(fp)
 8015020:	e13ffa17 	ldw	r4,-24(fp)
 8015024:	80142600 	call	8014260 <alt_avalon_i2c_rx_read>
 8015028:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
 801502c:	e0bff917 	ldw	r2,-28(fp)
 8015030:	10800044 	addi	r2,r2,1
 8015034:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
 8015038:	e0bffe17 	ldw	r2,-8(fp)
 801503c:	10800044 	addi	r2,r2,1
 8015040:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8015044:	e0fffe17 	ldw	r3,-8(fp)
 8015048:	e0bff817 	ldw	r2,-32(fp)
 801504c:	1880022e 	bgeu	r3,r2,8015058 <alt_avalon_i2c_master_receive+0x17c>
 8015050:	e0bffc17 	ldw	r2,-16(fp)
 8015054:	103ff126 	beq	r2,zero,801501c <alt_avalon_i2c_master_receive+0x140>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8015058:	e0bff603 	ldbu	r2,-40(fp)
 801505c:	1000021e 	bne	r2,zero,8015068 <alt_avalon_i2c_master_receive+0x18c>
 8015060:	e0bffc17 	ldw	r2,-16(fp)
 8015064:	10001b26 	beq	r2,zero,80150d4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 8015068:	0149c404 	movi	r5,10000
 801506c:	e13ff817 	ldw	r4,-32(fp)
 8015070:	80052bc0 	call	80052bc <__mulsi3>
 8015074:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8015078:	00000d06 	br	80150b0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801507c:	e0bfff17 	ldw	r2,-4(fp)
 8015080:	108002a8 	cmpgeui	r2,r2,10
 8015084:	1000021e 	bne	r2,zero,8015090 <alt_avalon_i2c_master_receive+0x1b4>
 8015088:	0109c404 	movi	r4,10000
 801508c:	80164d00 	call	80164d0 <alt_busy_sleep>
            if (--timeout == 0)
 8015090:	e0bfff17 	ldw	r2,-4(fp)
 8015094:	10bfffc4 	addi	r2,r2,-1
 8015098:	e0bfff15 	stw	r2,-4(fp)
 801509c:	e0bfff17 	ldw	r2,-4(fp)
 80150a0:	1000031e 	bne	r2,zero,80150b0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 80150a4:	00bfff84 	movi	r2,-2
 80150a8:	e0bffc15 	stw	r2,-16(fp)
               break;
 80150ac:	00000306 	br	80150bc <alt_avalon_i2c_master_receive+0x1e0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80150b0:	e13ffa17 	ldw	r4,-24(fp)
 80150b4:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 80150b8:	103ff01e 	bne	r2,zero,801507c <alt_avalon_i2c_master_receive+0x1a0>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 80150bc:	e0bffc04 	addi	r2,fp,-16
 80150c0:	100b883a 	mov	r5,r2
 80150c4:	e13ffa17 	ldw	r4,-24(fp)
 80150c8:	80145500 	call	8014550 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80150cc:	e13ffa17 	ldw	r4,-24(fp)
 80150d0:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>
    }

    return status;
 80150d4:	e0bffc17 	ldw	r2,-16(fp)
}
 80150d8:	e037883a 	mov	sp,fp
 80150dc:	dfc00117 	ldw	ra,4(sp)
 80150e0:	df000017 	ldw	fp,0(sp)
 80150e4:	dec00204 	addi	sp,sp,8
 80150e8:	f800283a 	ret

080150ec <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 80150ec:	defff504 	addi	sp,sp,-44
 80150f0:	dfc00a15 	stw	ra,40(sp)
 80150f4:	df000915 	stw	fp,36(sp)
 80150f8:	df000904 	addi	fp,sp,36
 80150fc:	e13ffb15 	stw	r4,-20(fp)
 8015100:	e17ffa15 	stw	r5,-24(fp)
 8015104:	e1bff915 	stw	r6,-28(fp)
 8015108:	3807883a 	mov	r3,r7
 801510c:	e0800217 	ldw	r2,8(fp)
 8015110:	e0fff805 	stb	r3,-32(fp)
 8015114:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8015118:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801511c:	e0bffb17 	ldw	r2,-20(fp)
 8015120:	10800717 	ldw	r2,28(r2)
 8015124:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 8015128:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
 801512c:	e0bff917 	ldw	r2,-28(fp)
 8015130:	1000021e 	bne	r2,zero,801513c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8015134:	0005883a 	mov	r2,zero
 8015138:	00006306 	br	80152c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801513c:	e0bffb17 	ldw	r2,-20(fp)
 8015140:	10c00617 	ldw	r3,24(r2)
 8015144:	00820074 	movhi	r2,2049
 8015148:	108e8004 	addi	r2,r2,14848
 801514c:	18800226 	beq	r3,r2,8015158 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8015150:	00bfff44 	movi	r2,-3
 8015154:	00005c06 	br	80152c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8015158:	e0bff803 	ldbu	r2,-32(fp)
 801515c:	10000a1e 	bne	r2,zero,8015188 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8015160:	e13ffb17 	ldw	r4,-20(fp)
 8015164:	8013d800 	call	8013d80 <alt_avalon_i2c_enable>
 8015168:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801516c:	e0bfff17 	ldw	r2,-4(fp)
 8015170:	10000226 	beq	r2,zero,801517c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 8015174:	e0bfff17 	ldw	r2,-4(fp)
 8015178:	00005306 	br	80152c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801517c:	01400704 	movi	r5,28
 8015180:	e13ffb17 	ldw	r4,-20(fp)
 8015184:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8015188:	e0bff803 	ldbu	r2,-32(fp)
 801518c:	100d883a 	mov	r6,r2
 8015190:	01400044 	movi	r5,1
 8015194:	e13ffb17 	ldw	r4,-20(fp)
 8015198:	80143f40 	call	80143f4 <alt_avalon_i2c_send_address>
 801519c:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 80151a0:	e0bfff17 	ldw	r2,-4(fp)
 80151a4:	1000191e 	bne	r2,zero,801520c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80151a8:	00000906 	br	80151d0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80151ac:	000f883a 	mov	r7,zero
 80151b0:	000d883a 	mov	r6,zero
 80151b4:	000b883a 	mov	r5,zero
 80151b8:	e13ffb17 	ldw	r4,-20(fp)
 80151bc:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 80151c0:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
 80151c4:	e0bffd17 	ldw	r2,-12(fp)
 80151c8:	10800044 	addi	r2,r2,1
 80151cc:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80151d0:	e0bff917 	ldw	r2,-28(fp)
 80151d4:	10bfffc4 	addi	r2,r2,-1
 80151d8:	e0fffd17 	ldw	r3,-12(fp)
 80151dc:	1880022e 	bgeu	r3,r2,80151e8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 80151e0:	e0bfff17 	ldw	r2,-4(fp)
 80151e4:	103ff126 	beq	r2,zero,80151ac <alt_avalon_i2c_master_receive_using_interrupts+0xc0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80151e8:	e0bfff17 	ldw	r2,-4(fp)
 80151ec:	1000071e 	bne	r2,zero,801520c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80151f0:	e0bff703 	ldbu	r2,-36(fp)
 80151f4:	100f883a 	mov	r7,r2
 80151f8:	000d883a 	mov	r6,zero
 80151fc:	000b883a 	mov	r5,zero
 8015200:	e13ffb17 	ldw	r4,-20(fp)
 8015204:	80143080 	call	8014308 <alt_avalon_i2c_cmd_write>
 8015208:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801520c:	e0bfff17 	ldw	r2,-4(fp)
 8015210:	10001826 	beq	r2,zero,8015274 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 8015214:	0149c404 	movi	r5,10000
 8015218:	e13ff917 	ldw	r4,-28(fp)
 801521c:	80052bc0 	call	80052bc <__mulsi3>
 8015220:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8015224:	00000d06 	br	801525c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8015228:	e0bffe17 	ldw	r2,-8(fp)
 801522c:	108002a8 	cmpgeui	r2,r2,10
 8015230:	1000021e 	bne	r2,zero,801523c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 8015234:	0109c404 	movi	r4,10000
 8015238:	80164d00 	call	80164d0 <alt_busy_sleep>
            if (--timeout == 0)
 801523c:	e0bffe17 	ldw	r2,-8(fp)
 8015240:	10bfffc4 	addi	r2,r2,-1
 8015244:	e0bffe15 	stw	r2,-8(fp)
 8015248:	e0bffe17 	ldw	r2,-8(fp)
 801524c:	1000031e 	bne	r2,zero,801525c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8015250:	00bfff84 	movi	r2,-2
 8015254:	e0bfff15 	stw	r2,-4(fp)
               break;
 8015258:	00000306 	br	8015268 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801525c:	e13ffb17 	ldw	r4,-20(fp)
 8015260:	80141700 	call	8014170 <alt_avalon_i2c_is_busy>
 8015264:	103ff01e 	bne	r2,zero,8015228 <alt_avalon_i2c_master_receive_using_interrupts+0x13c>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8015268:	e13ffb17 	ldw	r4,-20(fp)
 801526c:	8013e180 	call	8013e18 <alt_avalon_i2c_disable>
 8015270:	00001406 	br	80152c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 8015274:	e0bff703 	ldbu	r2,-36(fp)
 8015278:	10001226 	beq	r2,zero,80152c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801527c:	01400704 	movi	r5,28
 8015280:	e13ffb17 	ldw	r4,-20(fp)
 8015284:	80153780 	call	8015378 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 8015288:	000b883a 	mov	r5,zero
 801528c:	e13ffb17 	ldw	r4,-20(fp)
 8015290:	80155180 	call	8015518 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 8015294:	e0bffc17 	ldw	r2,-16(fp)
 8015298:	00c00084 	movi	r3,2
 801529c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 80152a0:	e0bffc17 	ldw	r2,-16(fp)
 80152a4:	e0fffa17 	ldw	r3,-24(fp)
 80152a8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 80152ac:	e0bffc17 	ldw	r2,-16(fp)
 80152b0:	e0fff917 	ldw	r3,-28(fp)
 80152b4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80152b8:	01400084 	movi	r5,2
 80152bc:	e13ffb17 	ldw	r4,-20(fp)
 80152c0:	80154200 	call	8015420 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 80152c4:	e0bfff17 	ldw	r2,-4(fp)
}
 80152c8:	e037883a 	mov	sp,fp
 80152cc:	dfc00117 	ldw	ra,4(sp)
 80152d0:	df000017 	ldw	fp,0(sp)
 80152d4:	dec00204 	addi	sp,sp,8
 80152d8:	f800283a 	ret

080152dc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 80152dc:	defffd04 	addi	sp,sp,-12
 80152e0:	df000215 	stw	fp,8(sp)
 80152e4:	df000204 	addi	fp,sp,8
 80152e8:	e13fff15 	stw	r4,-4(fp)
 80152ec:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 80152f0:	e0bfff17 	ldw	r2,-4(fp)
 80152f4:	10800317 	ldw	r2,12(r2)
 80152f8:	10800404 	addi	r2,r2,16
 80152fc:	10c00037 	ldwio	r3,0(r2)
 8015300:	e0bfff17 	ldw	r2,-4(fp)
 8015304:	10800317 	ldw	r2,12(r2)
 8015308:	10800304 	addi	r2,r2,12
 801530c:	10800037 	ldwio	r2,0(r2)
 8015310:	1884703a 	and	r2,r3,r2
 8015314:	1007883a 	mov	r3,r2
 8015318:	e0bffe17 	ldw	r2,-8(fp)
 801531c:	10c00015 	stw	r3,0(r2)
}
 8015320:	0001883a 	nop
 8015324:	e037883a 	mov	sp,fp
 8015328:	df000017 	ldw	fp,0(sp)
 801532c:	dec00104 	addi	sp,sp,4
 8015330:	f800283a 	ret

08015334 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 8015334:	defffd04 	addi	sp,sp,-12
 8015338:	df000215 	stw	fp,8(sp)
 801533c:	df000204 	addi	fp,sp,8
 8015340:	e13fff15 	stw	r4,-4(fp)
 8015344:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 8015348:	e0bfff17 	ldw	r2,-4(fp)
 801534c:	10800317 	ldw	r2,12(r2)
 8015350:	10800404 	addi	r2,r2,16
 8015354:	10800037 	ldwio	r2,0(r2)
 8015358:	1007883a 	mov	r3,r2
 801535c:	e0bffe17 	ldw	r2,-8(fp)
 8015360:	10c00015 	stw	r3,0(r2)
}
 8015364:	0001883a 	nop
 8015368:	e037883a 	mov	sp,fp
 801536c:	df000017 	ldw	fp,0(sp)
 8015370:	dec00104 	addi	sp,sp,4
 8015374:	f800283a 	ret

08015378 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8015378:	defffd04 	addi	sp,sp,-12
 801537c:	df000215 	stw	fp,8(sp)
 8015380:	df000204 	addi	fp,sp,8
 8015384:	e13fff15 	stw	r4,-4(fp)
 8015388:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 801538c:	e0bfff17 	ldw	r2,-4(fp)
 8015390:	10800317 	ldw	r2,12(r2)
 8015394:	10800404 	addi	r2,r2,16
 8015398:	e0fffe17 	ldw	r3,-8(fp)
 801539c:	10c00035 	stwio	r3,0(r2)
}
 80153a0:	0001883a 	nop
 80153a4:	e037883a 	mov	sp,fp
 80153a8:	df000017 	ldw	fp,0(sp)
 80153ac:	dec00104 	addi	sp,sp,4
 80153b0:	f800283a 	ret

080153b4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80153b4:	defffb04 	addi	sp,sp,-20
 80153b8:	dfc00415 	stw	ra,16(sp)
 80153bc:	df000315 	stw	fp,12(sp)
 80153c0:	df000304 	addi	fp,sp,12
 80153c4:	e13ffe15 	stw	r4,-8(fp)
 80153c8:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 80153cc:	e0bfff04 	addi	r2,fp,-4
 80153d0:	100b883a 	mov	r5,r2
 80153d4:	e13ffe17 	ldw	r4,-8(fp)
 80153d8:	80154880 	call	8015488 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 80153dc:	e0bffd17 	ldw	r2,-12(fp)
 80153e0:	0086303a 	nor	r3,zero,r2
 80153e4:	e0bfff17 	ldw	r2,-4(fp)
 80153e8:	1884703a 	and	r2,r3,r2
 80153ec:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 80153f0:	e0bffe17 	ldw	r2,-8(fp)
 80153f4:	10800317 	ldw	r2,12(r2)
 80153f8:	10800304 	addi	r2,r2,12
 80153fc:	e0ffff17 	ldw	r3,-4(fp)
 8015400:	18c007cc 	andi	r3,r3,31
 8015404:	10c00035 	stwio	r3,0(r2)
}
 8015408:	0001883a 	nop
 801540c:	e037883a 	mov	sp,fp
 8015410:	dfc00117 	ldw	ra,4(sp)
 8015414:	df000017 	ldw	fp,0(sp)
 8015418:	dec00204 	addi	sp,sp,8
 801541c:	f800283a 	ret

08015420 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8015420:	defffb04 	addi	sp,sp,-20
 8015424:	dfc00415 	stw	ra,16(sp)
 8015428:	df000315 	stw	fp,12(sp)
 801542c:	df000304 	addi	fp,sp,12
 8015430:	e13ffe15 	stw	r4,-8(fp)
 8015434:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8015438:	e0bfff04 	addi	r2,fp,-4
 801543c:	100b883a 	mov	r5,r2
 8015440:	e13ffe17 	ldw	r4,-8(fp)
 8015444:	80154880 	call	8015488 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 8015448:	e0ffff17 	ldw	r3,-4(fp)
 801544c:	e0bffd17 	ldw	r2,-12(fp)
 8015450:	1884b03a 	or	r2,r3,r2
 8015454:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8015458:	e0bffe17 	ldw	r2,-8(fp)
 801545c:	10800317 	ldw	r2,12(r2)
 8015460:	10800304 	addi	r2,r2,12
 8015464:	e0ffff17 	ldw	r3,-4(fp)
 8015468:	18c007cc 	andi	r3,r3,31
 801546c:	10c00035 	stwio	r3,0(r2)
}
 8015470:	0001883a 	nop
 8015474:	e037883a 	mov	sp,fp
 8015478:	dfc00117 	ldw	ra,4(sp)
 801547c:	df000017 	ldw	fp,0(sp)
 8015480:	dec00204 	addi	sp,sp,8
 8015484:	f800283a 	ret

08015488 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 8015488:	defffd04 	addi	sp,sp,-12
 801548c:	df000215 	stw	fp,8(sp)
 8015490:	df000204 	addi	fp,sp,8
 8015494:	e13fff15 	stw	r4,-4(fp)
 8015498:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 801549c:	e0bfff17 	ldw	r2,-4(fp)
 80154a0:	10800317 	ldw	r2,12(r2)
 80154a4:	10800304 	addi	r2,r2,12
 80154a8:	10800037 	ldwio	r2,0(r2)
 80154ac:	10c007cc 	andi	r3,r2,31
 80154b0:	e0bffe17 	ldw	r2,-8(fp)
 80154b4:	10c00015 	stw	r3,0(r2)
}
 80154b8:	0001883a 	nop
 80154bc:	e037883a 	mov	sp,fp
 80154c0:	df000017 	ldw	fp,0(sp)
 80154c4:	dec00104 	addi	sp,sp,4
 80154c8:	f800283a 	ret

080154cc <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 80154cc:	defffd04 	addi	sp,sp,-12
 80154d0:	df000215 	stw	fp,8(sp)
 80154d4:	df000204 	addi	fp,sp,8
 80154d8:	e13fff15 	stw	r4,-4(fp)
 80154dc:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 80154e0:	e0bfff17 	ldw	r2,-4(fp)
 80154e4:	10800317 	ldw	r2,12(r2)
 80154e8:	10800204 	addi	r2,r2,8
 80154ec:	10800037 	ldwio	r2,0(r2)
 80154f0:	1005d13a 	srai	r2,r2,4
 80154f4:	108000cc 	andi	r2,r2,3
 80154f8:	1007883a 	mov	r3,r2
 80154fc:	e0bffe17 	ldw	r2,-8(fp)
 8015500:	10c00015 	stw	r3,0(r2)
}
 8015504:	0001883a 	nop
 8015508:	e037883a 	mov	sp,fp
 801550c:	df000017 	ldw	fp,0(sp)
 8015510:	dec00104 	addi	sp,sp,4
 8015514:	f800283a 	ret

08015518 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 8015518:	defffd04 	addi	sp,sp,-12
 801551c:	df000215 	stw	fp,8(sp)
 8015520:	df000204 	addi	fp,sp,8
 8015524:	e13fff15 	stw	r4,-4(fp)
 8015528:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 801552c:	e0bfff17 	ldw	r2,-4(fp)
 8015530:	10800317 	ldw	r2,12(r2)
 8015534:	10800204 	addi	r2,r2,8
 8015538:	e0ffff17 	ldw	r3,-4(fp)
 801553c:	18c00317 	ldw	r3,12(r3)
 8015540:	18c00204 	addi	r3,r3,8
 8015544:	18c00037 	ldwio	r3,0(r3)
 8015548:	1809883a 	mov	r4,r3
 801554c:	00fff3c4 	movi	r3,-49
 8015550:	20c8703a 	and	r4,r4,r3
 8015554:	e0fffe17 	ldw	r3,-8(fp)
 8015558:	1806913a 	slli	r3,r3,4
 801555c:	18c00c0c 	andi	r3,r3,48
 8015560:	20c6b03a 	or	r3,r4,r3
 8015564:	10c00035 	stwio	r3,0(r2)
}
 8015568:	0001883a 	nop
 801556c:	e037883a 	mov	sp,fp
 8015570:	df000017 	ldw	fp,0(sp)
 8015574:	dec00104 	addi	sp,sp,4
 8015578:	f800283a 	ret

0801557c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 801557c:	defffd04 	addi	sp,sp,-12
 8015580:	df000215 	stw	fp,8(sp)
 8015584:	df000204 	addi	fp,sp,8
 8015588:	e13fff15 	stw	r4,-4(fp)
 801558c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 8015590:	e0bfff17 	ldw	r2,-4(fp)
 8015594:	10800317 	ldw	r2,12(r2)
 8015598:	10800204 	addi	r2,r2,8
 801559c:	10800037 	ldwio	r2,0(r2)
 80155a0:	1005d0ba 	srai	r2,r2,2
 80155a4:	108000cc 	andi	r2,r2,3
 80155a8:	1007883a 	mov	r3,r2
 80155ac:	e0bffe17 	ldw	r2,-8(fp)
 80155b0:	10c00015 	stw	r3,0(r2)
}
 80155b4:	0001883a 	nop
 80155b8:	e037883a 	mov	sp,fp
 80155bc:	df000017 	ldw	fp,0(sp)
 80155c0:	dec00104 	addi	sp,sp,4
 80155c4:	f800283a 	ret

080155c8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 80155c8:	defffd04 	addi	sp,sp,-12
 80155cc:	df000215 	stw	fp,8(sp)
 80155d0:	df000204 	addi	fp,sp,8
 80155d4:	e13fff15 	stw	r4,-4(fp)
 80155d8:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 80155dc:	e0bfff17 	ldw	r2,-4(fp)
 80155e0:	10800317 	ldw	r2,12(r2)
 80155e4:	10800204 	addi	r2,r2,8
 80155e8:	e0ffff17 	ldw	r3,-4(fp)
 80155ec:	18c00317 	ldw	r3,12(r3)
 80155f0:	18c00204 	addi	r3,r3,8
 80155f4:	18c00037 	ldwio	r3,0(r3)
 80155f8:	1809883a 	mov	r4,r3
 80155fc:	00fffcc4 	movi	r3,-13
 8015600:	20c8703a 	and	r4,r4,r3
 8015604:	e0fffe17 	ldw	r3,-8(fp)
 8015608:	180690ba 	slli	r3,r3,2
 801560c:	18c0030c 	andi	r3,r3,12
 8015610:	20c6b03a 	or	r3,r4,r3
 8015614:	10c00035 	stwio	r3,0(r2)
}
 8015618:	0001883a 	nop
 801561c:	e037883a 	mov	sp,fp
 8015620:	df000017 	ldw	fp,0(sp)
 8015624:	dec00104 	addi	sp,sp,4
 8015628:	f800283a 	ret

0801562c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801562c:	defffa04 	addi	sp,sp,-24
 8015630:	dfc00515 	stw	ra,20(sp)
 8015634:	df000415 	stw	fp,16(sp)
 8015638:	df000404 	addi	fp,sp,16
 801563c:	e13ffe15 	stw	r4,-8(fp)
 8015640:	e17ffd15 	stw	r5,-12(fp)
 8015644:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015648:	e0bffe17 	ldw	r2,-8(fp)
 801564c:	10800017 	ldw	r2,0(r2)
 8015650:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8015654:	e0bfff17 	ldw	r2,-4(fp)
 8015658:	10c00a04 	addi	r3,r2,40
 801565c:	e0bffe17 	ldw	r2,-8(fp)
 8015660:	10800217 	ldw	r2,8(r2)
 8015664:	100f883a 	mov	r7,r2
 8015668:	e1bffc17 	ldw	r6,-16(fp)
 801566c:	e17ffd17 	ldw	r5,-12(fp)
 8015670:	1809883a 	mov	r4,r3
 8015674:	8015c580 	call	8015c58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015678:	e037883a 	mov	sp,fp
 801567c:	dfc00117 	ldw	ra,4(sp)
 8015680:	df000017 	ldw	fp,0(sp)
 8015684:	dec00204 	addi	sp,sp,8
 8015688:	f800283a 	ret

0801568c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801568c:	defffa04 	addi	sp,sp,-24
 8015690:	dfc00515 	stw	ra,20(sp)
 8015694:	df000415 	stw	fp,16(sp)
 8015698:	df000404 	addi	fp,sp,16
 801569c:	e13ffe15 	stw	r4,-8(fp)
 80156a0:	e17ffd15 	stw	r5,-12(fp)
 80156a4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80156a8:	e0bffe17 	ldw	r2,-8(fp)
 80156ac:	10800017 	ldw	r2,0(r2)
 80156b0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80156b4:	e0bfff17 	ldw	r2,-4(fp)
 80156b8:	10c00a04 	addi	r3,r2,40
 80156bc:	e0bffe17 	ldw	r2,-8(fp)
 80156c0:	10800217 	ldw	r2,8(r2)
 80156c4:	100f883a 	mov	r7,r2
 80156c8:	e1bffc17 	ldw	r6,-16(fp)
 80156cc:	e17ffd17 	ldw	r5,-12(fp)
 80156d0:	1809883a 	mov	r4,r3
 80156d4:	8015e780 	call	8015e78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80156d8:	e037883a 	mov	sp,fp
 80156dc:	dfc00117 	ldw	ra,4(sp)
 80156e0:	df000017 	ldw	fp,0(sp)
 80156e4:	dec00204 	addi	sp,sp,8
 80156e8:	f800283a 	ret

080156ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80156ec:	defffc04 	addi	sp,sp,-16
 80156f0:	dfc00315 	stw	ra,12(sp)
 80156f4:	df000215 	stw	fp,8(sp)
 80156f8:	df000204 	addi	fp,sp,8
 80156fc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015700:	e0bffe17 	ldw	r2,-8(fp)
 8015704:	10800017 	ldw	r2,0(r2)
 8015708:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801570c:	e0bfff17 	ldw	r2,-4(fp)
 8015710:	10c00a04 	addi	r3,r2,40
 8015714:	e0bffe17 	ldw	r2,-8(fp)
 8015718:	10800217 	ldw	r2,8(r2)
 801571c:	100b883a 	mov	r5,r2
 8015720:	1809883a 	mov	r4,r3
 8015724:	8015afc0 	call	8015afc <altera_avalon_jtag_uart_close>
}
 8015728:	e037883a 	mov	sp,fp
 801572c:	dfc00117 	ldw	ra,4(sp)
 8015730:	df000017 	ldw	fp,0(sp)
 8015734:	dec00204 	addi	sp,sp,8
 8015738:	f800283a 	ret

0801573c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801573c:	defffa04 	addi	sp,sp,-24
 8015740:	dfc00515 	stw	ra,20(sp)
 8015744:	df000415 	stw	fp,16(sp)
 8015748:	df000404 	addi	fp,sp,16
 801574c:	e13ffe15 	stw	r4,-8(fp)
 8015750:	e17ffd15 	stw	r5,-12(fp)
 8015754:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015758:	e0bffe17 	ldw	r2,-8(fp)
 801575c:	10800017 	ldw	r2,0(r2)
 8015760:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8015764:	e0bfff17 	ldw	r2,-4(fp)
 8015768:	10800a04 	addi	r2,r2,40
 801576c:	e1bffc17 	ldw	r6,-16(fp)
 8015770:	e17ffd17 	ldw	r5,-12(fp)
 8015774:	1009883a 	mov	r4,r2
 8015778:	8015b640 	call	8015b64 <altera_avalon_jtag_uart_ioctl>
}
 801577c:	e037883a 	mov	sp,fp
 8015780:	dfc00117 	ldw	ra,4(sp)
 8015784:	df000017 	ldw	fp,0(sp)
 8015788:	dec00204 	addi	sp,sp,8
 801578c:	f800283a 	ret

08015790 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8015790:	defffa04 	addi	sp,sp,-24
 8015794:	dfc00515 	stw	ra,20(sp)
 8015798:	df000415 	stw	fp,16(sp)
 801579c:	df000404 	addi	fp,sp,16
 80157a0:	e13fff15 	stw	r4,-4(fp)
 80157a4:	e17ffe15 	stw	r5,-8(fp)
 80157a8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80157ac:	e0bfff17 	ldw	r2,-4(fp)
 80157b0:	00c00044 	movi	r3,1
 80157b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80157b8:	e0bfff17 	ldw	r2,-4(fp)
 80157bc:	10800017 	ldw	r2,0(r2)
 80157c0:	10800104 	addi	r2,r2,4
 80157c4:	1007883a 	mov	r3,r2
 80157c8:	e0bfff17 	ldw	r2,-4(fp)
 80157cc:	10800817 	ldw	r2,32(r2)
 80157d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80157d4:	e0bffe17 	ldw	r2,-8(fp)
 80157d8:	e0fffd17 	ldw	r3,-12(fp)
 80157dc:	d8000015 	stw	zero,0(sp)
 80157e0:	e1ffff17 	ldw	r7,-4(fp)
 80157e4:	01820074 	movhi	r6,2049
 80157e8:	31961404 	addi	r6,r6,22608
 80157ec:	180b883a 	mov	r5,r3
 80157f0:	1009883a 	mov	r4,r2
 80157f4:	80168a40 	call	80168a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80157f8:	e0bfff17 	ldw	r2,-4(fp)
 80157fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8015800:	e0bfff17 	ldw	r2,-4(fp)
 8015804:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015808:	d0e74417 	ldw	r3,-25328(gp)
 801580c:	e1ffff17 	ldw	r7,-4(fp)
 8015810:	01820074 	movhi	r6,2049
 8015814:	31969704 	addi	r6,r6,23132
 8015818:	180b883a 	mov	r5,r3
 801581c:	1009883a 	mov	r4,r2
 8015820:	801639c0 	call	801639c <alt_alarm_start>
 8015824:	1000040e 	bge	r2,zero,8015838 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8015828:	e0ffff17 	ldw	r3,-4(fp)
 801582c:	00a00034 	movhi	r2,32768
 8015830:	10bfffc4 	addi	r2,r2,-1
 8015834:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8015838:	0001883a 	nop
 801583c:	e037883a 	mov	sp,fp
 8015840:	dfc00117 	ldw	ra,4(sp)
 8015844:	df000017 	ldw	fp,0(sp)
 8015848:	dec00204 	addi	sp,sp,8
 801584c:	f800283a 	ret

08015850 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8015850:	defff804 	addi	sp,sp,-32
 8015854:	df000715 	stw	fp,28(sp)
 8015858:	df000704 	addi	fp,sp,28
 801585c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8015860:	e0bff917 	ldw	r2,-28(fp)
 8015864:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8015868:	e0bffd17 	ldw	r2,-12(fp)
 801586c:	10800017 	ldw	r2,0(r2)
 8015870:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015874:	e0bffc17 	ldw	r2,-16(fp)
 8015878:	10800104 	addi	r2,r2,4
 801587c:	10800037 	ldwio	r2,0(r2)
 8015880:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8015884:	e0bffb17 	ldw	r2,-20(fp)
 8015888:	1080c00c 	andi	r2,r2,768
 801588c:	10006d26 	beq	r2,zero,8015a44 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8015890:	e0bffb17 	ldw	r2,-20(fp)
 8015894:	1080400c 	andi	r2,r2,256
 8015898:	10003526 	beq	r2,zero,8015970 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801589c:	00800074 	movhi	r2,1
 80158a0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80158a4:	e0bffd17 	ldw	r2,-12(fp)
 80158a8:	10800a17 	ldw	r2,40(r2)
 80158ac:	10800044 	addi	r2,r2,1
 80158b0:	1081ffcc 	andi	r2,r2,2047
 80158b4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 80158b8:	e0bffd17 	ldw	r2,-12(fp)
 80158bc:	10800b17 	ldw	r2,44(r2)
 80158c0:	e0fffa17 	ldw	r3,-24(fp)
 80158c4:	18801526 	beq	r3,r2,801591c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80158c8:	e0bffc17 	ldw	r2,-16(fp)
 80158cc:	10800037 	ldwio	r2,0(r2)
 80158d0:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80158d4:	e0bfff17 	ldw	r2,-4(fp)
 80158d8:	10a0000c 	andi	r2,r2,32768
 80158dc:	10001126 	beq	r2,zero,8015924 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80158e0:	e0bffd17 	ldw	r2,-12(fp)
 80158e4:	10800a17 	ldw	r2,40(r2)
 80158e8:	e0ffff17 	ldw	r3,-4(fp)
 80158ec:	1809883a 	mov	r4,r3
 80158f0:	e0fffd17 	ldw	r3,-12(fp)
 80158f4:	1885883a 	add	r2,r3,r2
 80158f8:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80158fc:	e0bffd17 	ldw	r2,-12(fp)
 8015900:	10800a17 	ldw	r2,40(r2)
 8015904:	10800044 	addi	r2,r2,1
 8015908:	10c1ffcc 	andi	r3,r2,2047
 801590c:	e0bffd17 	ldw	r2,-12(fp)
 8015910:	10c00a15 	stw	r3,40(r2)
 8015914:	0001883a 	nop
      {
 8015918:	003fe206 	br	80158a4 <altera_avalon_jtag_uart_irq+0x54>
          break;
 801591c:	0001883a 	nop
 8015920:	00000106 	br	8015928 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 8015924:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8015928:	e0bfff17 	ldw	r2,-4(fp)
 801592c:	10bfffec 	andhi	r2,r2,65535
 8015930:	10000f26 	beq	r2,zero,8015970 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8015934:	e0bffd17 	ldw	r2,-12(fp)
 8015938:	10c00817 	ldw	r3,32(r2)
 801593c:	00bfff84 	movi	r2,-2
 8015940:	1886703a 	and	r3,r3,r2
 8015944:	e0bffd17 	ldw	r2,-12(fp)
 8015948:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801594c:	e0bffc17 	ldw	r2,-16(fp)
 8015950:	10800104 	addi	r2,r2,4
 8015954:	1007883a 	mov	r3,r2
 8015958:	e0bffd17 	ldw	r2,-12(fp)
 801595c:	10800817 	ldw	r2,32(r2)
 8015960:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015964:	e0bffc17 	ldw	r2,-16(fp)
 8015968:	10800104 	addi	r2,r2,4
 801596c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8015970:	e0bffb17 	ldw	r2,-20(fp)
 8015974:	1080800c 	andi	r2,r2,512
 8015978:	103fbe26 	beq	r2,zero,8015874 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801597c:	e0bffb17 	ldw	r2,-20(fp)
 8015980:	1004d43a 	srli	r2,r2,16
 8015984:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8015988:	00001406 	br	80159dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801598c:	e0bffc17 	ldw	r2,-16(fp)
 8015990:	e0fffd17 	ldw	r3,-12(fp)
 8015994:	18c00d17 	ldw	r3,52(r3)
 8015998:	e13ffd17 	ldw	r4,-12(fp)
 801599c:	20c7883a 	add	r3,r4,r3
 80159a0:	18c20e03 	ldbu	r3,2104(r3)
 80159a4:	18c03fcc 	andi	r3,r3,255
 80159a8:	18c0201c 	xori	r3,r3,128
 80159ac:	18ffe004 	addi	r3,r3,-128
 80159b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80159b4:	e0bffd17 	ldw	r2,-12(fp)
 80159b8:	10800d17 	ldw	r2,52(r2)
 80159bc:	10800044 	addi	r2,r2,1
 80159c0:	10c1ffcc 	andi	r3,r2,2047
 80159c4:	e0bffd17 	ldw	r2,-12(fp)
 80159c8:	10c00d15 	stw	r3,52(r2)
 80159cc:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80159d0:	e0bffe17 	ldw	r2,-8(fp)
 80159d4:	10bfffc4 	addi	r2,r2,-1
 80159d8:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 80159dc:	e0bffe17 	ldw	r2,-8(fp)
 80159e0:	10000526 	beq	r2,zero,80159f8 <altera_avalon_jtag_uart_irq+0x1a8>
 80159e4:	e0bffd17 	ldw	r2,-12(fp)
 80159e8:	10c00d17 	ldw	r3,52(r2)
 80159ec:	e0bffd17 	ldw	r2,-12(fp)
 80159f0:	10800c17 	ldw	r2,48(r2)
 80159f4:	18bfe51e 	bne	r3,r2,801598c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 80159f8:	e0bffe17 	ldw	r2,-8(fp)
 80159fc:	103f9d26 	beq	r2,zero,8015874 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015a00:	e0bffd17 	ldw	r2,-12(fp)
 8015a04:	10c00817 	ldw	r3,32(r2)
 8015a08:	00bfff44 	movi	r2,-3
 8015a0c:	1886703a 	and	r3,r3,r2
 8015a10:	e0bffd17 	ldw	r2,-12(fp)
 8015a14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015a18:	e0bffd17 	ldw	r2,-12(fp)
 8015a1c:	10800017 	ldw	r2,0(r2)
 8015a20:	10800104 	addi	r2,r2,4
 8015a24:	1007883a 	mov	r3,r2
 8015a28:	e0bffd17 	ldw	r2,-12(fp)
 8015a2c:	10800817 	ldw	r2,32(r2)
 8015a30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8015a34:	e0bffc17 	ldw	r2,-16(fp)
 8015a38:	10800104 	addi	r2,r2,4
 8015a3c:	10800037 	ldwio	r2,0(r2)
  {
 8015a40:	003f8c06 	br	8015874 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8015a44:	0001883a 	nop
      }
    }
  }
}
 8015a48:	0001883a 	nop
 8015a4c:	e037883a 	mov	sp,fp
 8015a50:	df000017 	ldw	fp,0(sp)
 8015a54:	dec00104 	addi	sp,sp,4
 8015a58:	f800283a 	ret

08015a5c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8015a5c:	defffc04 	addi	sp,sp,-16
 8015a60:	df000315 	stw	fp,12(sp)
 8015a64:	df000304 	addi	fp,sp,12
 8015a68:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8015a6c:	e0bffd17 	ldw	r2,-12(fp)
 8015a70:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8015a74:	e0bfff17 	ldw	r2,-4(fp)
 8015a78:	10800017 	ldw	r2,0(r2)
 8015a7c:	10800104 	addi	r2,r2,4
 8015a80:	10800037 	ldwio	r2,0(r2)
 8015a84:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8015a88:	e0bffe17 	ldw	r2,-8(fp)
 8015a8c:	1081000c 	andi	r2,r2,1024
 8015a90:	10000b26 	beq	r2,zero,8015ac0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8015a94:	e0bfff17 	ldw	r2,-4(fp)
 8015a98:	10800017 	ldw	r2,0(r2)
 8015a9c:	10800104 	addi	r2,r2,4
 8015aa0:	1007883a 	mov	r3,r2
 8015aa4:	e0bfff17 	ldw	r2,-4(fp)
 8015aa8:	10800817 	ldw	r2,32(r2)
 8015aac:	10810014 	ori	r2,r2,1024
 8015ab0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8015ab4:	e0bfff17 	ldw	r2,-4(fp)
 8015ab8:	10000915 	stw	zero,36(r2)
 8015abc:	00000a06 	br	8015ae8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8015ac0:	e0bfff17 	ldw	r2,-4(fp)
 8015ac4:	10c00917 	ldw	r3,36(r2)
 8015ac8:	00a00034 	movhi	r2,32768
 8015acc:	10bfff04 	addi	r2,r2,-4
 8015ad0:	10c00536 	bltu	r2,r3,8015ae8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8015ad4:	e0bfff17 	ldw	r2,-4(fp)
 8015ad8:	10800917 	ldw	r2,36(r2)
 8015adc:	10c00044 	addi	r3,r2,1
 8015ae0:	e0bfff17 	ldw	r2,-4(fp)
 8015ae4:	10c00915 	stw	r3,36(r2)
 8015ae8:	d0a74417 	ldw	r2,-25328(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8015aec:	e037883a 	mov	sp,fp
 8015af0:	df000017 	ldw	fp,0(sp)
 8015af4:	dec00104 	addi	sp,sp,4
 8015af8:	f800283a 	ret

08015afc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8015afc:	defffd04 	addi	sp,sp,-12
 8015b00:	df000215 	stw	fp,8(sp)
 8015b04:	df000204 	addi	fp,sp,8
 8015b08:	e13fff15 	stw	r4,-4(fp)
 8015b0c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8015b10:	00000506 	br	8015b28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8015b14:	e0bffe17 	ldw	r2,-8(fp)
 8015b18:	1090000c 	andi	r2,r2,16384
 8015b1c:	10000226 	beq	r2,zero,8015b28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8015b20:	00bffd44 	movi	r2,-11
 8015b24:	00000b06 	br	8015b54 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8015b28:	e0bfff17 	ldw	r2,-4(fp)
 8015b2c:	10c00d17 	ldw	r3,52(r2)
 8015b30:	e0bfff17 	ldw	r2,-4(fp)
 8015b34:	10800c17 	ldw	r2,48(r2)
 8015b38:	18800526 	beq	r3,r2,8015b50 <altera_avalon_jtag_uart_close+0x54>
 8015b3c:	e0bfff17 	ldw	r2,-4(fp)
 8015b40:	10c00917 	ldw	r3,36(r2)
 8015b44:	e0bfff17 	ldw	r2,-4(fp)
 8015b48:	10800117 	ldw	r2,4(r2)
 8015b4c:	18bff136 	bltu	r3,r2,8015b14 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 8015b50:	0005883a 	mov	r2,zero
}
 8015b54:	e037883a 	mov	sp,fp
 8015b58:	df000017 	ldw	fp,0(sp)
 8015b5c:	dec00104 	addi	sp,sp,4
 8015b60:	f800283a 	ret

08015b64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8015b64:	defffa04 	addi	sp,sp,-24
 8015b68:	df000515 	stw	fp,20(sp)
 8015b6c:	df000504 	addi	fp,sp,20
 8015b70:	e13ffd15 	stw	r4,-12(fp)
 8015b74:	e17ffc15 	stw	r5,-16(fp)
 8015b78:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 8015b7c:	00bff9c4 	movi	r2,-25
 8015b80:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8015b84:	e0bffc17 	ldw	r2,-16(fp)
 8015b88:	109a8060 	cmpeqi	r2,r2,27137
 8015b8c:	1000041e 	bne	r2,zero,8015ba0 <altera_avalon_jtag_uart_ioctl+0x3c>
 8015b90:	e0bffc17 	ldw	r2,-16(fp)
 8015b94:	109a80a0 	cmpeqi	r2,r2,27138
 8015b98:	1000181e 	bne	r2,zero,8015bfc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8015b9c:	00002906 	br	8015c44 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 8015ba0:	e0bffd17 	ldw	r2,-12(fp)
 8015ba4:	10c00117 	ldw	r3,4(r2)
 8015ba8:	00a00034 	movhi	r2,32768
 8015bac:	10bfffc4 	addi	r2,r2,-1
 8015bb0:	18802126 	beq	r3,r2,8015c38 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 8015bb4:	e0bffb17 	ldw	r2,-20(fp)
 8015bb8:	10800017 	ldw	r2,0(r2)
 8015bbc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8015bc0:	e0bffe17 	ldw	r2,-8(fp)
 8015bc4:	10800090 	cmplti	r2,r2,2
 8015bc8:	1000061e 	bne	r2,zero,8015be4 <altera_avalon_jtag_uart_ioctl+0x80>
 8015bcc:	e0fffe17 	ldw	r3,-8(fp)
 8015bd0:	00a00034 	movhi	r2,32768
 8015bd4:	10bfffc4 	addi	r2,r2,-1
 8015bd8:	18800226 	beq	r3,r2,8015be4 <altera_avalon_jtag_uart_ioctl+0x80>
 8015bdc:	e0bffe17 	ldw	r2,-8(fp)
 8015be0:	00000206 	br	8015bec <altera_avalon_jtag_uart_ioctl+0x88>
 8015be4:	00a00034 	movhi	r2,32768
 8015be8:	10bfff84 	addi	r2,r2,-2
 8015bec:	e0fffd17 	ldw	r3,-12(fp)
 8015bf0:	18800115 	stw	r2,4(r3)
      rc = 0;
 8015bf4:	e03fff15 	stw	zero,-4(fp)
    break;
 8015bf8:	00000f06 	br	8015c38 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 8015bfc:	e0bffd17 	ldw	r2,-12(fp)
 8015c00:	10c00117 	ldw	r3,4(r2)
 8015c04:	00a00034 	movhi	r2,32768
 8015c08:	10bfffc4 	addi	r2,r2,-1
 8015c0c:	18800c26 	beq	r3,r2,8015c40 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8015c10:	e0bffd17 	ldw	r2,-12(fp)
 8015c14:	10c00917 	ldw	r3,36(r2)
 8015c18:	e0bffd17 	ldw	r2,-12(fp)
 8015c1c:	10800117 	ldw	r2,4(r2)
 8015c20:	1885803a 	cmpltu	r2,r3,r2
 8015c24:	10c03fcc 	andi	r3,r2,255
 8015c28:	e0bffb17 	ldw	r2,-20(fp)
 8015c2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8015c30:	e03fff15 	stw	zero,-4(fp)
    break;
 8015c34:	00000206 	br	8015c40 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8015c38:	0001883a 	nop
 8015c3c:	00000106 	br	8015c44 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 8015c40:	0001883a 	nop
  }

  return rc;
 8015c44:	e0bfff17 	ldw	r2,-4(fp)
}
 8015c48:	e037883a 	mov	sp,fp
 8015c4c:	df000017 	ldw	fp,0(sp)
 8015c50:	dec00104 	addi	sp,sp,4
 8015c54:	f800283a 	ret

08015c58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8015c58:	defff304 	addi	sp,sp,-52
 8015c5c:	dfc00c15 	stw	ra,48(sp)
 8015c60:	df000b15 	stw	fp,44(sp)
 8015c64:	df000b04 	addi	fp,sp,44
 8015c68:	e13ff815 	stw	r4,-32(fp)
 8015c6c:	e17ff715 	stw	r5,-36(fp)
 8015c70:	e1bff615 	stw	r6,-40(fp)
 8015c74:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 8015c78:	e0bff717 	ldw	r2,-36(fp)
 8015c7c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015c80:	00004706 	br	8015da0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8015c84:	e0bff817 	ldw	r2,-32(fp)
 8015c88:	10800a17 	ldw	r2,40(r2)
 8015c8c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 8015c90:	e0bff817 	ldw	r2,-32(fp)
 8015c94:	10800b17 	ldw	r2,44(r2)
 8015c98:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 8015c9c:	e0fffd17 	ldw	r3,-12(fp)
 8015ca0:	e0bffc17 	ldw	r2,-16(fp)
 8015ca4:	18800536 	bltu	r3,r2,8015cbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8015ca8:	e0fffd17 	ldw	r3,-12(fp)
 8015cac:	e0bffc17 	ldw	r2,-16(fp)
 8015cb0:	1885c83a 	sub	r2,r3,r2
 8015cb4:	e0bffe15 	stw	r2,-8(fp)
 8015cb8:	00000406 	br	8015ccc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8015cbc:	00c20004 	movi	r3,2048
 8015cc0:	e0bffc17 	ldw	r2,-16(fp)
 8015cc4:	1885c83a 	sub	r2,r3,r2
 8015cc8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8015ccc:	e0bffe17 	ldw	r2,-8(fp)
 8015cd0:	10001e26 	beq	r2,zero,8015d4c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8015cd4:	e0fff617 	ldw	r3,-40(fp)
 8015cd8:	e0bffe17 	ldw	r2,-8(fp)
 8015cdc:	1880022e 	bgeu	r3,r2,8015ce8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8015ce0:	e0bff617 	ldw	r2,-40(fp)
 8015ce4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8015ce8:	e0bff817 	ldw	r2,-32(fp)
 8015cec:	10c00e04 	addi	r3,r2,56
 8015cf0:	e0bffc17 	ldw	r2,-16(fp)
 8015cf4:	1885883a 	add	r2,r3,r2
 8015cf8:	e1bffe17 	ldw	r6,-8(fp)
 8015cfc:	100b883a 	mov	r5,r2
 8015d00:	e13fff17 	ldw	r4,-4(fp)
 8015d04:	800dfd00 	call	800dfd0 <memcpy>
      ptr   += n;
 8015d08:	e0ffff17 	ldw	r3,-4(fp)
 8015d0c:	e0bffe17 	ldw	r2,-8(fp)
 8015d10:	1885883a 	add	r2,r3,r2
 8015d14:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8015d18:	e0fff617 	ldw	r3,-40(fp)
 8015d1c:	e0bffe17 	ldw	r2,-8(fp)
 8015d20:	1885c83a 	sub	r2,r3,r2
 8015d24:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015d28:	e0fffc17 	ldw	r3,-16(fp)
 8015d2c:	e0bffe17 	ldw	r2,-8(fp)
 8015d30:	1885883a 	add	r2,r3,r2
 8015d34:	10c1ffcc 	andi	r3,r2,2047
 8015d38:	e0bff817 	ldw	r2,-32(fp)
 8015d3c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8015d40:	e0bff617 	ldw	r2,-40(fp)
 8015d44:	00bfcf16 	blt	zero,r2,8015c84 <altera_avalon_jtag_uart_read+0x2c>
 8015d48:	00000106 	br	8015d50 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 8015d4c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8015d50:	e0ffff17 	ldw	r3,-4(fp)
 8015d54:	e0bff717 	ldw	r2,-36(fp)
 8015d58:	1880141e 	bne	r3,r2,8015dac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8015d5c:	e0bff517 	ldw	r2,-44(fp)
 8015d60:	1090000c 	andi	r2,r2,16384
 8015d64:	1000131e 	bne	r2,zero,8015db4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8015d68:	0001883a 	nop
 8015d6c:	e0bff817 	ldw	r2,-32(fp)
 8015d70:	10800a17 	ldw	r2,40(r2)
 8015d74:	e0fffd17 	ldw	r3,-12(fp)
 8015d78:	1880051e 	bne	r3,r2,8015d90 <altera_avalon_jtag_uart_read+0x138>
 8015d7c:	e0bff817 	ldw	r2,-32(fp)
 8015d80:	10c00917 	ldw	r3,36(r2)
 8015d84:	e0bff817 	ldw	r2,-32(fp)
 8015d88:	10800117 	ldw	r2,4(r2)
 8015d8c:	18bff736 	bltu	r3,r2,8015d6c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8015d90:	e0bff817 	ldw	r2,-32(fp)
 8015d94:	10800a17 	ldw	r2,40(r2)
 8015d98:	e0fffd17 	ldw	r3,-12(fp)
 8015d9c:	18800726 	beq	r3,r2,8015dbc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 8015da0:	e0bff617 	ldw	r2,-40(fp)
 8015da4:	00bfb716 	blt	zero,r2,8015c84 <altera_avalon_jtag_uart_read+0x2c>
 8015da8:	00000506 	br	8015dc0 <altera_avalon_jtag_uart_read+0x168>
      break;
 8015dac:	0001883a 	nop
 8015db0:	00000306 	br	8015dc0 <altera_avalon_jtag_uart_read+0x168>
      break;
 8015db4:	0001883a 	nop
 8015db8:	00000106 	br	8015dc0 <altera_avalon_jtag_uart_read+0x168>
      break;
 8015dbc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8015dc0:	e0ffff17 	ldw	r3,-4(fp)
 8015dc4:	e0bff717 	ldw	r2,-36(fp)
 8015dc8:	18801926 	beq	r3,r2,8015e30 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 8015dcc:	0005303a 	rdctl	r2,status
 8015dd0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015dd4:	e0fff917 	ldw	r3,-28(fp)
 8015dd8:	00bfff84 	movi	r2,-2
 8015ddc:	1884703a 	and	r2,r3,r2
 8015de0:	1001703a 	wrctl	status,r2
  return context;
 8015de4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8015de8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8015dec:	e0bff817 	ldw	r2,-32(fp)
 8015df0:	10800817 	ldw	r2,32(r2)
 8015df4:	10c00054 	ori	r3,r2,1
 8015df8:	e0bff817 	ldw	r2,-32(fp)
 8015dfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015e00:	e0bff817 	ldw	r2,-32(fp)
 8015e04:	10800017 	ldw	r2,0(r2)
 8015e08:	10800104 	addi	r2,r2,4
 8015e0c:	1007883a 	mov	r3,r2
 8015e10:	e0bff817 	ldw	r2,-32(fp)
 8015e14:	10800817 	ldw	r2,32(r2)
 8015e18:	18800035 	stwio	r2,0(r3)
 8015e1c:	e0bffb17 	ldw	r2,-20(fp)
 8015e20:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8015e24:	e0bffa17 	ldw	r2,-24(fp)
 8015e28:	1001703a 	wrctl	status,r2
}
 8015e2c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8015e30:	e0ffff17 	ldw	r3,-4(fp)
 8015e34:	e0bff717 	ldw	r2,-36(fp)
 8015e38:	18800426 	beq	r3,r2,8015e4c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 8015e3c:	e0ffff17 	ldw	r3,-4(fp)
 8015e40:	e0bff717 	ldw	r2,-36(fp)
 8015e44:	1885c83a 	sub	r2,r3,r2
 8015e48:	00000606 	br	8015e64 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8015e4c:	e0bff517 	ldw	r2,-44(fp)
 8015e50:	1090000c 	andi	r2,r2,16384
 8015e54:	10000226 	beq	r2,zero,8015e60 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 8015e58:	00bffd44 	movi	r2,-11
 8015e5c:	00000106 	br	8015e64 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8015e60:	00bffec4 	movi	r2,-5
}
 8015e64:	e037883a 	mov	sp,fp
 8015e68:	dfc00117 	ldw	ra,4(sp)
 8015e6c:	df000017 	ldw	fp,0(sp)
 8015e70:	dec00204 	addi	sp,sp,8
 8015e74:	f800283a 	ret

08015e78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8015e78:	defff304 	addi	sp,sp,-52
 8015e7c:	dfc00c15 	stw	ra,48(sp)
 8015e80:	df000b15 	stw	fp,44(sp)
 8015e84:	df000b04 	addi	fp,sp,44
 8015e88:	e13ff815 	stw	r4,-32(fp)
 8015e8c:	e17ff715 	stw	r5,-36(fp)
 8015e90:	e1bff615 	stw	r6,-40(fp)
 8015e94:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8015e98:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8015e9c:	e0bff717 	ldw	r2,-36(fp)
 8015ea0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015ea4:	00003706 	br	8015f84 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8015ea8:	e0bff817 	ldw	r2,-32(fp)
 8015eac:	10800c17 	ldw	r2,48(r2)
 8015eb0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8015eb4:	e0bff817 	ldw	r2,-32(fp)
 8015eb8:	10800d17 	ldw	r2,52(r2)
 8015ebc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8015ec0:	e0fffc17 	ldw	r3,-16(fp)
 8015ec4:	e0bfff17 	ldw	r2,-4(fp)
 8015ec8:	1880062e 	bgeu	r3,r2,8015ee4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8015ecc:	e0ffff17 	ldw	r3,-4(fp)
 8015ed0:	e0bffc17 	ldw	r2,-16(fp)
 8015ed4:	1885c83a 	sub	r2,r3,r2
 8015ed8:	10bfffc4 	addi	r2,r2,-1
 8015edc:	e0bffe15 	stw	r2,-8(fp)
 8015ee0:	00000b06 	br	8015f10 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8015ee4:	e0bfff17 	ldw	r2,-4(fp)
 8015ee8:	10000526 	beq	r2,zero,8015f00 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8015eec:	00c20004 	movi	r3,2048
 8015ef0:	e0bffc17 	ldw	r2,-16(fp)
 8015ef4:	1885c83a 	sub	r2,r3,r2
 8015ef8:	e0bffe15 	stw	r2,-8(fp)
 8015efc:	00000406 	br	8015f10 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8015f00:	00c1ffc4 	movi	r3,2047
 8015f04:	e0bffc17 	ldw	r2,-16(fp)
 8015f08:	1885c83a 	sub	r2,r3,r2
 8015f0c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8015f10:	e0bffe17 	ldw	r2,-8(fp)
 8015f14:	10001e26 	beq	r2,zero,8015f90 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8015f18:	e0fff617 	ldw	r3,-40(fp)
 8015f1c:	e0bffe17 	ldw	r2,-8(fp)
 8015f20:	1880022e 	bgeu	r3,r2,8015f2c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8015f24:	e0bff617 	ldw	r2,-40(fp)
 8015f28:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8015f2c:	e0bff817 	ldw	r2,-32(fp)
 8015f30:	10c20e04 	addi	r3,r2,2104
 8015f34:	e0bffc17 	ldw	r2,-16(fp)
 8015f38:	1885883a 	add	r2,r3,r2
 8015f3c:	e1bffe17 	ldw	r6,-8(fp)
 8015f40:	e17ff717 	ldw	r5,-36(fp)
 8015f44:	1009883a 	mov	r4,r2
 8015f48:	800dfd00 	call	800dfd0 <memcpy>
      ptr   += n;
 8015f4c:	e0fff717 	ldw	r3,-36(fp)
 8015f50:	e0bffe17 	ldw	r2,-8(fp)
 8015f54:	1885883a 	add	r2,r3,r2
 8015f58:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 8015f5c:	e0fff617 	ldw	r3,-40(fp)
 8015f60:	e0bffe17 	ldw	r2,-8(fp)
 8015f64:	1885c83a 	sub	r2,r3,r2
 8015f68:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015f6c:	e0fffc17 	ldw	r3,-16(fp)
 8015f70:	e0bffe17 	ldw	r2,-8(fp)
 8015f74:	1885883a 	add	r2,r3,r2
 8015f78:	10c1ffcc 	andi	r3,r2,2047
 8015f7c:	e0bff817 	ldw	r2,-32(fp)
 8015f80:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8015f84:	e0bff617 	ldw	r2,-40(fp)
 8015f88:	00bfc716 	blt	zero,r2,8015ea8 <altera_avalon_jtag_uart_write+0x30>
 8015f8c:	00000106 	br	8015f94 <altera_avalon_jtag_uart_write+0x11c>
        break;
 8015f90:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8015f94:	0005303a 	rdctl	r2,status
 8015f98:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015f9c:	e0fff917 	ldw	r3,-28(fp)
 8015fa0:	00bfff84 	movi	r2,-2
 8015fa4:	1884703a 	and	r2,r3,r2
 8015fa8:	1001703a 	wrctl	status,r2
  return context;
 8015fac:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8015fb0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015fb4:	e0bff817 	ldw	r2,-32(fp)
 8015fb8:	10800817 	ldw	r2,32(r2)
 8015fbc:	10c00094 	ori	r3,r2,2
 8015fc0:	e0bff817 	ldw	r2,-32(fp)
 8015fc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015fc8:	e0bff817 	ldw	r2,-32(fp)
 8015fcc:	10800017 	ldw	r2,0(r2)
 8015fd0:	10800104 	addi	r2,r2,4
 8015fd4:	1007883a 	mov	r3,r2
 8015fd8:	e0bff817 	ldw	r2,-32(fp)
 8015fdc:	10800817 	ldw	r2,32(r2)
 8015fe0:	18800035 	stwio	r2,0(r3)
 8015fe4:	e0bffb17 	ldw	r2,-20(fp)
 8015fe8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8015fec:	e0bffa17 	ldw	r2,-24(fp)
 8015ff0:	1001703a 	wrctl	status,r2
}
 8015ff4:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8015ff8:	e0bff617 	ldw	r2,-40(fp)
 8015ffc:	0080100e 	bge	zero,r2,8016040 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8016000:	e0bff517 	ldw	r2,-44(fp)
 8016004:	1090000c 	andi	r2,r2,16384
 8016008:	1000101e 	bne	r2,zero,801604c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801600c:	0001883a 	nop
 8016010:	e0bff817 	ldw	r2,-32(fp)
 8016014:	10800d17 	ldw	r2,52(r2)
 8016018:	e0ffff17 	ldw	r3,-4(fp)
 801601c:	1880051e 	bne	r3,r2,8016034 <altera_avalon_jtag_uart_write+0x1bc>
 8016020:	e0bff817 	ldw	r2,-32(fp)
 8016024:	10c00917 	ldw	r3,36(r2)
 8016028:	e0bff817 	ldw	r2,-32(fp)
 801602c:	10800117 	ldw	r2,4(r2)
 8016030:	18bff736 	bltu	r3,r2,8016010 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8016034:	e0bff817 	ldw	r2,-32(fp)
 8016038:	10800917 	ldw	r2,36(r2)
 801603c:	1000051e 	bne	r2,zero,8016054 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8016040:	e0bff617 	ldw	r2,-40(fp)
 8016044:	00bfcf16 	blt	zero,r2,8015f84 <altera_avalon_jtag_uart_write+0x10c>
 8016048:	00000306 	br	8016058 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 801604c:	0001883a 	nop
 8016050:	00000106 	br	8016058 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8016054:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8016058:	e0fff717 	ldw	r3,-36(fp)
 801605c:	e0bffd17 	ldw	r2,-12(fp)
 8016060:	18800426 	beq	r3,r2,8016074 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8016064:	e0fff717 	ldw	r3,-36(fp)
 8016068:	e0bffd17 	ldw	r2,-12(fp)
 801606c:	1885c83a 	sub	r2,r3,r2
 8016070:	00000606 	br	801608c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 8016074:	e0bff517 	ldw	r2,-44(fp)
 8016078:	1090000c 	andi	r2,r2,16384
 801607c:	10000226 	beq	r2,zero,8016088 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 8016080:	00bffd44 	movi	r2,-11
 8016084:	00000106 	br	801608c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8016088:	00bffec4 	movi	r2,-5
}
 801608c:	e037883a 	mov	sp,fp
 8016090:	dfc00117 	ldw	ra,4(sp)
 8016094:	df000017 	ldw	fp,0(sp)
 8016098:	dec00204 	addi	sp,sp,8
 801609c:	f800283a 	ret

080160a0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 80160a0:	defff404 	addi	sp,sp,-48
 80160a4:	df000b15 	stw	fp,44(sp)
 80160a8:	df000b04 	addi	fp,sp,44
 80160ac:	e13ff815 	stw	r4,-32(fp)
 80160b0:	e17ff715 	stw	r5,-36(fp)
 80160b4:	e1bff615 	stw	r6,-40(fp)
 80160b8:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
 80160bc:	e0fff517 	ldw	r3,-44(fp)
 80160c0:	e0bff617 	ldw	r2,-40(fp)
 80160c4:	1885883a 	add	r2,r3,r2
 80160c8:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
 80160cc:	e0c00217 	ldw	r3,8(fp)
 80160d0:	e0800117 	ldw	r2,4(fp)
 80160d4:	1885883a 	add	r2,r3,r2
 80160d8:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
 80160dc:	e0800117 	ldw	r2,4(fp)
 80160e0:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
 80160e4:	e0bff617 	ldw	r2,-40(fp)
 80160e8:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 80160ec:	00800044 	movi	r2,1
 80160f0:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 80160f4:	e0bff817 	ldw	r2,-32(fp)
 80160f8:	10800504 	addi	r2,r2,20
 80160fc:	1009883a 	mov	r4,r2
 8016100:	00c00044 	movi	r3,1
 8016104:	e0bff717 	ldw	r2,-36(fp)
 8016108:	1884983a 	sll	r2,r3,r2
 801610c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8016110:	e0800317 	ldw	r2,12(fp)
 8016114:	1080008c 	andi	r2,r2,2
 8016118:	1000051e 	bne	r2,zero,8016130 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801611c:	e0bff817 	ldw	r2,-32(fp)
 8016120:	10800304 	addi	r2,r2,12
 8016124:	1007883a 	mov	r3,r2
 8016128:	00810004 	movi	r2,1024
 801612c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8016130:	e0bff817 	ldw	r2,-32(fp)
 8016134:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8016138:	e0bff817 	ldw	r2,-32(fp)
 801613c:	10800204 	addi	r2,r2,8
 8016140:	10800037 	ldwio	r2,0(r2)
 8016144:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016148:	e0bffa17 	ldw	r2,-24(fp)
 801614c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8016150:	10000226 	beq	r2,zero,801615c <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016154:	e0bffd17 	ldw	r2,-12(fp)
 8016158:	1000031e 	bne	r2,zero,8016168 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801615c:	e0bffa17 	ldw	r2,-24(fp)
 8016160:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016164:	103ff426 	beq	r2,zero,8016138 <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8016168:	e0bffa17 	ldw	r2,-24(fp)
 801616c:	1080100c 	andi	r2,r2,64
 8016170:	10001e26 	beq	r2,zero,80161ec <alt_avalon_spi_command+0x14c>
 8016174:	e0bffd17 	ldw	r2,-12(fp)
 8016178:	00801c0e 	bge	zero,r2,80161ec <alt_avalon_spi_command+0x14c>
    {
      credits--;
 801617c:	e0bffd17 	ldw	r2,-12(fp)
 8016180:	10bfffc4 	addi	r2,r2,-1
 8016184:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
 8016188:	e0fff517 	ldw	r3,-44(fp)
 801618c:	e0bffc17 	ldw	r2,-16(fp)
 8016190:	18800a2e 	bgeu	r3,r2,80161bc <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8016194:	e0bff817 	ldw	r2,-32(fp)
 8016198:	10800104 	addi	r2,r2,4
 801619c:	1009883a 	mov	r4,r2
 80161a0:	e0bff517 	ldw	r2,-44(fp)
 80161a4:	10c00044 	addi	r3,r2,1
 80161a8:	e0fff515 	stw	r3,-44(fp)
 80161ac:	10800003 	ldbu	r2,0(r2)
 80161b0:	10803fcc 	andi	r2,r2,255
 80161b4:	20800035 	stwio	r2,0(r4)
 80161b8:	00000c06 	br	80161ec <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 80161bc:	e0bfff17 	ldw	r2,-4(fp)
 80161c0:	10000826 	beq	r2,zero,80161e4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 80161c4:	e0bfff17 	ldw	r2,-4(fp)
 80161c8:	10bfffc4 	addi	r2,r2,-1
 80161cc:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 80161d0:	e0bff817 	ldw	r2,-32(fp)
 80161d4:	10800104 	addi	r2,r2,4
 80161d8:	0007883a 	mov	r3,zero
 80161dc:	10c00035 	stwio	r3,0(r2)
 80161e0:	00000206 	br	80161ec <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 80161e4:	00bf0004 	movi	r2,-1024
 80161e8:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 80161ec:	e0bffa17 	ldw	r2,-24(fp)
 80161f0:	1080200c 	andi	r2,r2,128
 80161f4:	103fd026 	beq	r2,zero,8016138 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 80161f8:	e0bff817 	ldw	r2,-32(fp)
 80161fc:	10800037 	ldwio	r2,0(r2)
 8016200:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
 8016204:	e0bffe17 	ldw	r2,-8(fp)
 8016208:	10000426 	beq	r2,zero,801621c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 801620c:	e0bffe17 	ldw	r2,-8(fp)
 8016210:	10bfffc4 	addi	r2,r2,-1
 8016214:	e0bffe15 	stw	r2,-8(fp)
 8016218:	00000506 	br	8016230 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801621c:	e0800217 	ldw	r2,8(fp)
 8016220:	10c00044 	addi	r3,r2,1
 8016224:	e0c00215 	stw	r3,8(fp)
 8016228:	e0fff917 	ldw	r3,-28(fp)
 801622c:	10c00005 	stb	r3,0(r2)
      credits++;
 8016230:	e0bffd17 	ldw	r2,-12(fp)
 8016234:	10800044 	addi	r2,r2,1
 8016238:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
 801623c:	e0bffe17 	ldw	r2,-8(fp)
 8016240:	103fbd1e 	bne	r2,zero,8016138 <alt_avalon_spi_command+0x98>
 8016244:	e0c00217 	ldw	r3,8(fp)
 8016248:	e0bffb17 	ldw	r2,-20(fp)
 801624c:	18bfba1e 	bne	r3,r2,8016138 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8016250:	e0bff817 	ldw	r2,-32(fp)
 8016254:	10800204 	addi	r2,r2,8
 8016258:	10800037 	ldwio	r2,0(r2)
 801625c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8016260:	e0bffa17 	ldw	r2,-24(fp)
 8016264:	1080080c 	andi	r2,r2,32
 8016268:	103ff926 	beq	r2,zero,8016250 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 801626c:	e0800317 	ldw	r2,12(fp)
 8016270:	1080004c 	andi	r2,r2,1
 8016274:	1000041e 	bne	r2,zero,8016288 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8016278:	e0bff817 	ldw	r2,-32(fp)
 801627c:	10800304 	addi	r2,r2,12
 8016280:	0007883a 	mov	r3,zero
 8016284:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8016288:	e0800117 	ldw	r2,4(fp)
}
 801628c:	e037883a 	mov	sp,fp
 8016290:	df000017 	ldw	fp,0(sp)
 8016294:	dec00104 	addi	sp,sp,4
 8016298:	f800283a 	ret

0801629c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801629c:	defffa04 	addi	sp,sp,-24
 80162a0:	dfc00515 	stw	ra,20(sp)
 80162a4:	df000415 	stw	fp,16(sp)
 80162a8:	df000404 	addi	fp,sp,16
 80162ac:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80162b0:	0007883a 	mov	r3,zero
 80162b4:	e0bffc17 	ldw	r2,-16(fp)
 80162b8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80162bc:	e0bffc17 	ldw	r2,-16(fp)
 80162c0:	10800104 	addi	r2,r2,4
 80162c4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 80162c8:	0005303a 	rdctl	r2,status
 80162cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80162d0:	e0fffd17 	ldw	r3,-12(fp)
 80162d4:	00bfff84 	movi	r2,-2
 80162d8:	1884703a 	and	r2,r3,r2
 80162dc:	1001703a 	wrctl	status,r2
  return context;
 80162e0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80162e4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 80162e8:	80136a80 	call	80136a8 <alt_tick>
 80162ec:	e0bfff17 	ldw	r2,-4(fp)
 80162f0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 80162f4:	e0bffe17 	ldw	r2,-8(fp)
 80162f8:	1001703a 	wrctl	status,r2
}
 80162fc:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 8016300:	0001883a 	nop
 8016304:	e037883a 	mov	sp,fp
 8016308:	dfc00117 	ldw	ra,4(sp)
 801630c:	df000017 	ldw	fp,0(sp)
 8016310:	dec00204 	addi	sp,sp,8
 8016314:	f800283a 	ret

08016318 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016318:	defff804 	addi	sp,sp,-32
 801631c:	dfc00715 	stw	ra,28(sp)
 8016320:	df000615 	stw	fp,24(sp)
 8016324:	df000604 	addi	fp,sp,24
 8016328:	e13ffe15 	stw	r4,-8(fp)
 801632c:	e17ffd15 	stw	r5,-12(fp)
 8016330:	e1bffc15 	stw	r6,-16(fp)
 8016334:	e1fffb15 	stw	r7,-20(fp)
 8016338:	e0bffb17 	ldw	r2,-20(fp)
 801633c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8016340:	d0a74417 	ldw	r2,-25328(gp)
 8016344:	1000031e 	bne	r2,zero,8016354 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 8016348:	e0bfff17 	ldw	r2,-4(fp)
 801634c:	d0a74415 	stw	r2,-25328(gp)
    return 0;
 8016350:	00000106 	br	8016358 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 8016354:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8016358:	e0bffe17 	ldw	r2,-8(fp)
 801635c:	10800104 	addi	r2,r2,4
 8016360:	00c001c4 	movi	r3,7
 8016364:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8016368:	d8000015 	stw	zero,0(sp)
 801636c:	e1fffe17 	ldw	r7,-8(fp)
 8016370:	01820074 	movhi	r6,2049
 8016374:	3198a704 	addi	r6,r6,25244
 8016378:	e17ffc17 	ldw	r5,-16(fp)
 801637c:	e13ffd17 	ldw	r4,-12(fp)
 8016380:	80168a40 	call	80168a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016384:	0001883a 	nop
 8016388:	e037883a 	mov	sp,fp
 801638c:	dfc00117 	ldw	ra,4(sp)
 8016390:	df000017 	ldw	fp,0(sp)
 8016394:	dec00204 	addi	sp,sp,8
 8016398:	f800283a 	ret

0801639c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801639c:	defff504 	addi	sp,sp,-44
 80163a0:	df000a15 	stw	fp,40(sp)
 80163a4:	df000a04 	addi	fp,sp,40
 80163a8:	e13ff915 	stw	r4,-28(fp)
 80163ac:	e17ff815 	stw	r5,-32(fp)
 80163b0:	e1bff715 	stw	r6,-36(fp)
 80163b4:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80163b8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 80163bc:	d0a74417 	ldw	r2,-25328(gp)
  
  if (alt_ticks_per_second ())
 80163c0:	10003e26 	beq	r2,zero,80164bc <alt_alarm_start+0x120>
  {
    if (alarm)
 80163c4:	e0bff917 	ldw	r2,-28(fp)
 80163c8:	10003a26 	beq	r2,zero,80164b4 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 80163cc:	e0bff917 	ldw	r2,-28(fp)
 80163d0:	e0fff717 	ldw	r3,-36(fp)
 80163d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80163d8:	e0bff917 	ldw	r2,-28(fp)
 80163dc:	e0fff617 	ldw	r3,-40(fp)
 80163e0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 80163e4:	0005303a 	rdctl	r2,status
 80163e8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80163ec:	e0fffd17 	ldw	r3,-12(fp)
 80163f0:	00bfff84 	movi	r2,-2
 80163f4:	1884703a 	and	r2,r3,r2
 80163f8:	1001703a 	wrctl	status,r2
  return context;
 80163fc:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8016400:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016404:	d0a74517 	ldw	r2,-25324(gp)
      
      current_nticks = alt_nticks();
 8016408:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801640c:	e0fff817 	ldw	r3,-32(fp)
 8016410:	e0bfff17 	ldw	r2,-4(fp)
 8016414:	1885883a 	add	r2,r3,r2
 8016418:	10c00044 	addi	r3,r2,1
 801641c:	e0bff917 	ldw	r2,-28(fp)
 8016420:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016424:	e0bff917 	ldw	r2,-28(fp)
 8016428:	10c00217 	ldw	r3,8(r2)
 801642c:	e0bfff17 	ldw	r2,-4(fp)
 8016430:	1880042e 	bgeu	r3,r2,8016444 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8016434:	e0bff917 	ldw	r2,-28(fp)
 8016438:	00c00044 	movi	r3,1
 801643c:	10c00405 	stb	r3,16(r2)
 8016440:	00000206 	br	801644c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8016444:	e0bff917 	ldw	r2,-28(fp)
 8016448:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801644c:	e0bff917 	ldw	r2,-28(fp)
 8016450:	d0e01504 	addi	r3,gp,-32684
 8016454:	e0fffb15 	stw	r3,-20(fp)
 8016458:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 801645c:	e0bffa17 	ldw	r2,-24(fp)
 8016460:	e0fffb17 	ldw	r3,-20(fp)
 8016464:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016468:	e0bffb17 	ldw	r2,-20(fp)
 801646c:	10c00017 	ldw	r3,0(r2)
 8016470:	e0bffa17 	ldw	r2,-24(fp)
 8016474:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8016478:	e0bffb17 	ldw	r2,-20(fp)
 801647c:	10800017 	ldw	r2,0(r2)
 8016480:	e0fffa17 	ldw	r3,-24(fp)
 8016484:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016488:	e0bffb17 	ldw	r2,-20(fp)
 801648c:	e0fffa17 	ldw	r3,-24(fp)
 8016490:	10c00015 	stw	r3,0(r2)
}
 8016494:	0001883a 	nop
 8016498:	e0bffe17 	ldw	r2,-8(fp)
 801649c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80164a0:	e0bffc17 	ldw	r2,-16(fp)
 80164a4:	1001703a 	wrctl	status,r2
}
 80164a8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 80164ac:	0005883a 	mov	r2,zero
 80164b0:	00000306 	br	80164c0 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 80164b4:	00bffa84 	movi	r2,-22
 80164b8:	00000106 	br	80164c0 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 80164bc:	00bfde84 	movi	r2,-134
  }
}
 80164c0:	e037883a 	mov	sp,fp
 80164c4:	df000017 	ldw	fp,0(sp)
 80164c8:	dec00104 	addi	sp,sp,4
 80164cc:	f800283a 	ret

080164d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80164d0:	defffa04 	addi	sp,sp,-24
 80164d4:	dfc00515 	stw	ra,20(sp)
 80164d8:	df000415 	stw	fp,16(sp)
 80164dc:	df000404 	addi	fp,sp,16
 80164e0:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80164e4:	00800244 	movi	r2,9
 80164e8:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80164ec:	014003f4 	movhi	r5,15
 80164f0:	29509004 	addi	r5,r5,16960
 80164f4:	e13ffe17 	ldw	r4,-8(fp)
 80164f8:	80052bc0 	call	80052bc <__mulsi3>
 80164fc:	100b883a 	mov	r5,r2
 8016500:	0100bef4 	movhi	r4,763
 8016504:	213c2004 	addi	r4,r4,-3968
 8016508:	80051fc0 	call	80051fc <__udivsi3>
  big_loops = us / (INT_MAX/
 801650c:	100b883a 	mov	r5,r2
 8016510:	01200034 	movhi	r4,32768
 8016514:	213fffc4 	addi	r4,r4,-1
 8016518:	80051fc0 	call	80051fc <__udivsi3>
 801651c:	100b883a 	mov	r5,r2
 8016520:	e13ffc17 	ldw	r4,-16(fp)
 8016524:	80051fc0 	call	80051fc <__udivsi3>
 8016528:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 801652c:	e0bffd17 	ldw	r2,-12(fp)
 8016530:	10002a26 	beq	r2,zero,80165dc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016534:	e03fff15 	stw	zero,-4(fp)
 8016538:	00001706 	br	8016598 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801653c:	00a00034 	movhi	r2,32768
 8016540:	10bfffc4 	addi	r2,r2,-1
 8016544:	10bfffc4 	addi	r2,r2,-1
 8016548:	103ffe1e 	bne	r2,zero,8016544 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801654c:	014003f4 	movhi	r5,15
 8016550:	29509004 	addi	r5,r5,16960
 8016554:	e13ffe17 	ldw	r4,-8(fp)
 8016558:	80052bc0 	call	80052bc <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801655c:	100b883a 	mov	r5,r2
 8016560:	0100bef4 	movhi	r4,763
 8016564:	213c2004 	addi	r4,r4,-3968
 8016568:	80051fc0 	call	80051fc <__udivsi3>
 801656c:	100b883a 	mov	r5,r2
 8016570:	01200034 	movhi	r4,32768
 8016574:	213fffc4 	addi	r4,r4,-1
 8016578:	80051fc0 	call	80051fc <__udivsi3>
 801657c:	1007883a 	mov	r3,r2
 8016580:	e0bffc17 	ldw	r2,-16(fp)
 8016584:	10c5c83a 	sub	r2,r2,r3
 8016588:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 801658c:	e0bfff17 	ldw	r2,-4(fp)
 8016590:	10800044 	addi	r2,r2,1
 8016594:	e0bfff15 	stw	r2,-4(fp)
 8016598:	e0ffff17 	ldw	r3,-4(fp)
 801659c:	e0bffd17 	ldw	r2,-12(fp)
 80165a0:	18bfe616 	blt	r3,r2,801653c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80165a4:	014003f4 	movhi	r5,15
 80165a8:	29509004 	addi	r5,r5,16960
 80165ac:	e13ffe17 	ldw	r4,-8(fp)
 80165b0:	80052bc0 	call	80052bc <__mulsi3>
 80165b4:	100b883a 	mov	r5,r2
 80165b8:	0100bef4 	movhi	r4,763
 80165bc:	213c2004 	addi	r4,r4,-3968
 80165c0:	80051fc0 	call	80051fc <__udivsi3>
 80165c4:	e17ffc17 	ldw	r5,-16(fp)
 80165c8:	1009883a 	mov	r4,r2
 80165cc:	80052bc0 	call	80052bc <__mulsi3>
    __asm__ volatile (
 80165d0:	10bfffc4 	addi	r2,r2,-1
 80165d4:	103ffe1e 	bne	r2,zero,80165d0 <alt_busy_sleep+0x100>
 80165d8:	00000d06 	br	8016610 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80165dc:	014003f4 	movhi	r5,15
 80165e0:	29509004 	addi	r5,r5,16960
 80165e4:	e13ffe17 	ldw	r4,-8(fp)
 80165e8:	80052bc0 	call	80052bc <__mulsi3>
 80165ec:	100b883a 	mov	r5,r2
 80165f0:	0100bef4 	movhi	r4,763
 80165f4:	213c2004 	addi	r4,r4,-3968
 80165f8:	80051fc0 	call	80051fc <__udivsi3>
 80165fc:	e17ffc17 	ldw	r5,-16(fp)
 8016600:	1009883a 	mov	r4,r2
 8016604:	80052bc0 	call	80052bc <__mulsi3>
    __asm__ volatile (
 8016608:	10bfffc4 	addi	r2,r2,-1
 801660c:	00bffe16 	blt	zero,r2,8016608 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8016610:	0005883a 	mov	r2,zero
}
 8016614:	e037883a 	mov	sp,fp
 8016618:	dfc00117 	ldw	ra,4(sp)
 801661c:	df000017 	ldw	fp,0(sp)
 8016620:	dec00204 	addi	sp,sp,8
 8016624:	f800283a 	ret

08016628 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8016628:	deffff04 	addi	sp,sp,-4
 801662c:	df000015 	stw	fp,0(sp)
 8016630:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8016634:	0001883a 	nop
 8016638:	e037883a 	mov	sp,fp
 801663c:	df000017 	ldw	fp,0(sp)
 8016640:	dec00104 	addi	sp,sp,4
 8016644:	f800283a 	ret

08016648 <alt_get_errno>:
{
 8016648:	defffe04 	addi	sp,sp,-8
 801664c:	dfc00115 	stw	ra,4(sp)
 8016650:	df000015 	stw	fp,0(sp)
 8016654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016658:	d0a01317 	ldw	r2,-32692(gp)
 801665c:	10000326 	beq	r2,zero,801666c <alt_get_errno+0x24>
 8016660:	d0a01317 	ldw	r2,-32692(gp)
 8016664:	103ee83a 	callr	r2
 8016668:	00000106 	br	8016670 <alt_get_errno+0x28>
 801666c:	d0a73f04 	addi	r2,gp,-25348
}
 8016670:	e037883a 	mov	sp,fp
 8016674:	dfc00117 	ldw	ra,4(sp)
 8016678:	df000017 	ldw	fp,0(sp)
 801667c:	dec00204 	addi	sp,sp,8
 8016680:	f800283a 	ret

08016684 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8016684:	defffa04 	addi	sp,sp,-24
 8016688:	dfc00515 	stw	ra,20(sp)
 801668c:	df000415 	stw	fp,16(sp)
 8016690:	df000404 	addi	fp,sp,16
 8016694:	e13ffd15 	stw	r4,-12(fp)
 8016698:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801669c:	e0bffd17 	ldw	r2,-12(fp)
 80166a0:	10000326 	beq	r2,zero,80166b0 <alt_dev_llist_insert+0x2c>
 80166a4:	e0bffd17 	ldw	r2,-12(fp)
 80166a8:	10800217 	ldw	r2,8(r2)
 80166ac:	1000061e 	bne	r2,zero,80166c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80166b0:	80166480 	call	8016648 <alt_get_errno>
 80166b4:	1007883a 	mov	r3,r2
 80166b8:	00800584 	movi	r2,22
 80166bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80166c0:	00bffa84 	movi	r2,-22
 80166c4:	00001406 	br	8016718 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80166c8:	e0bffd17 	ldw	r2,-12(fp)
 80166cc:	e0fffc17 	ldw	r3,-16(fp)
 80166d0:	e0ffff15 	stw	r3,-4(fp)
 80166d4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 80166d8:	e0bffe17 	ldw	r2,-8(fp)
 80166dc:	e0ffff17 	ldw	r3,-4(fp)
 80166e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80166e4:	e0bfff17 	ldw	r2,-4(fp)
 80166e8:	10c00017 	ldw	r3,0(r2)
 80166ec:	e0bffe17 	ldw	r2,-8(fp)
 80166f0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 80166f4:	e0bfff17 	ldw	r2,-4(fp)
 80166f8:	10800017 	ldw	r2,0(r2)
 80166fc:	e0fffe17 	ldw	r3,-8(fp)
 8016700:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016704:	e0bfff17 	ldw	r2,-4(fp)
 8016708:	e0fffe17 	ldw	r3,-8(fp)
 801670c:	10c00015 	stw	r3,0(r2)
}
 8016710:	0001883a 	nop

  return 0;  
 8016714:	0005883a 	mov	r2,zero
}
 8016718:	e037883a 	mov	sp,fp
 801671c:	dfc00117 	ldw	ra,4(sp)
 8016720:	df000017 	ldw	fp,0(sp)
 8016724:	dec00204 	addi	sp,sp,8
 8016728:	f800283a 	ret

0801672c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801672c:	defffd04 	addi	sp,sp,-12
 8016730:	dfc00215 	stw	ra,8(sp)
 8016734:	df000115 	stw	fp,4(sp)
 8016738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801673c:	00820074 	movhi	r2,2049
 8016740:	109d9204 	addi	r2,r2,30280
 8016744:	e0bfff15 	stw	r2,-4(fp)
 8016748:	00000606 	br	8016764 <_do_ctors+0x38>
        (*ctor) (); 
 801674c:	e0bfff17 	ldw	r2,-4(fp)
 8016750:	10800017 	ldw	r2,0(r2)
 8016754:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8016758:	e0bfff17 	ldw	r2,-4(fp)
 801675c:	10bfff04 	addi	r2,r2,-4
 8016760:	e0bfff15 	stw	r2,-4(fp)
 8016764:	e0ffff17 	ldw	r3,-4(fp)
 8016768:	00820074 	movhi	r2,2049
 801676c:	109d9304 	addi	r2,r2,30284
 8016770:	18bff62e 	bgeu	r3,r2,801674c <_do_ctors+0x20>
}
 8016774:	0001883a 	nop
 8016778:	0001883a 	nop
 801677c:	e037883a 	mov	sp,fp
 8016780:	dfc00117 	ldw	ra,4(sp)
 8016784:	df000017 	ldw	fp,0(sp)
 8016788:	dec00204 	addi	sp,sp,8
 801678c:	f800283a 	ret

08016790 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8016790:	defffd04 	addi	sp,sp,-12
 8016794:	dfc00215 	stw	ra,8(sp)
 8016798:	df000115 	stw	fp,4(sp)
 801679c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80167a0:	00820074 	movhi	r2,2049
 80167a4:	109d9204 	addi	r2,r2,30280
 80167a8:	e0bfff15 	stw	r2,-4(fp)
 80167ac:	00000606 	br	80167c8 <_do_dtors+0x38>
        (*dtor) (); 
 80167b0:	e0bfff17 	ldw	r2,-4(fp)
 80167b4:	10800017 	ldw	r2,0(r2)
 80167b8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80167bc:	e0bfff17 	ldw	r2,-4(fp)
 80167c0:	10bfff04 	addi	r2,r2,-4
 80167c4:	e0bfff15 	stw	r2,-4(fp)
 80167c8:	e0ffff17 	ldw	r3,-4(fp)
 80167cc:	00820074 	movhi	r2,2049
 80167d0:	109d9304 	addi	r2,r2,30284
 80167d4:	18bff62e 	bgeu	r3,r2,80167b0 <_do_dtors+0x20>
}
 80167d8:	0001883a 	nop
 80167dc:	0001883a 	nop
 80167e0:	e037883a 	mov	sp,fp
 80167e4:	dfc00117 	ldw	ra,4(sp)
 80167e8:	df000017 	ldw	fp,0(sp)
 80167ec:	dec00204 	addi	sp,sp,8
 80167f0:	f800283a 	ret

080167f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80167f4:	defffa04 	addi	sp,sp,-24
 80167f8:	dfc00515 	stw	ra,20(sp)
 80167fc:	df000415 	stw	fp,16(sp)
 8016800:	df000404 	addi	fp,sp,16
 8016804:	e13ffd15 	stw	r4,-12(fp)
 8016808:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801680c:	e0bffc17 	ldw	r2,-16(fp)
 8016810:	10800017 	ldw	r2,0(r2)
 8016814:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8016818:	e13ffd17 	ldw	r4,-12(fp)
 801681c:	80087d00 	call	80087d0 <strlen>
 8016820:	10800044 	addi	r2,r2,1
 8016824:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8016828:	00000d06 	br	8016860 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801682c:	e0bfff17 	ldw	r2,-4(fp)
 8016830:	10800217 	ldw	r2,8(r2)
 8016834:	e0fffe17 	ldw	r3,-8(fp)
 8016838:	180d883a 	mov	r6,r3
 801683c:	e17ffd17 	ldw	r5,-12(fp)
 8016840:	1009883a 	mov	r4,r2
 8016844:	80174240 	call	8017424 <memcmp>
 8016848:	1000021e 	bne	r2,zero,8016854 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801684c:	e0bfff17 	ldw	r2,-4(fp)
 8016850:	00000706 	br	8016870 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8016854:	e0bfff17 	ldw	r2,-4(fp)
 8016858:	10800017 	ldw	r2,0(r2)
 801685c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8016860:	e0ffff17 	ldw	r3,-4(fp)
 8016864:	e0bffc17 	ldw	r2,-16(fp)
 8016868:	18bff01e 	bne	r3,r2,801682c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 801686c:	0005883a 	mov	r2,zero
}
 8016870:	e037883a 	mov	sp,fp
 8016874:	dfc00117 	ldw	ra,4(sp)
 8016878:	df000017 	ldw	fp,0(sp)
 801687c:	dec00204 	addi	sp,sp,8
 8016880:	f800283a 	ret

08016884 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8016884:	deffff04 	addi	sp,sp,-4
 8016888:	df000015 	stw	fp,0(sp)
 801688c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8016890:	0001883a 	nop
 8016894:	e037883a 	mov	sp,fp
 8016898:	df000017 	ldw	fp,0(sp)
 801689c:	dec00104 	addi	sp,sp,4
 80168a0:	f800283a 	ret

080168a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80168a4:	defff904 	addi	sp,sp,-28
 80168a8:	dfc00615 	stw	ra,24(sp)
 80168ac:	df000515 	stw	fp,20(sp)
 80168b0:	df000504 	addi	fp,sp,20
 80168b4:	e13fff15 	stw	r4,-4(fp)
 80168b8:	e17ffe15 	stw	r5,-8(fp)
 80168bc:	e1bffd15 	stw	r6,-12(fp)
 80168c0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80168c4:	e0800217 	ldw	r2,8(fp)
 80168c8:	d8800015 	stw	r2,0(sp)
 80168cc:	e1fffc17 	ldw	r7,-16(fp)
 80168d0:	e1bffd17 	ldw	r6,-12(fp)
 80168d4:	e17ffe17 	ldw	r5,-8(fp)
 80168d8:	e13fff17 	ldw	r4,-4(fp)
 80168dc:	8016a540 	call	8016a54 <alt_iic_isr_register>
}  
 80168e0:	e037883a 	mov	sp,fp
 80168e4:	dfc00117 	ldw	ra,4(sp)
 80168e8:	df000017 	ldw	fp,0(sp)
 80168ec:	dec00204 	addi	sp,sp,8
 80168f0:	f800283a 	ret

080168f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80168f4:	defff904 	addi	sp,sp,-28
 80168f8:	df000615 	stw	fp,24(sp)
 80168fc:	df000604 	addi	fp,sp,24
 8016900:	e13ffb15 	stw	r4,-20(fp)
 8016904:	e17ffa15 	stw	r5,-24(fp)
 8016908:	e0bffa17 	ldw	r2,-24(fp)
 801690c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8016910:	0005303a 	rdctl	r2,status
 8016914:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016918:	e0fffe17 	ldw	r3,-8(fp)
 801691c:	00bfff84 	movi	r2,-2
 8016920:	1884703a 	and	r2,r3,r2
 8016924:	1001703a 	wrctl	status,r2
  return context;
 8016928:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801692c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8016930:	00c00044 	movi	r3,1
 8016934:	e0bfff17 	ldw	r2,-4(fp)
 8016938:	1884983a 	sll	r2,r3,r2
 801693c:	1007883a 	mov	r3,r2
 8016940:	d0a74617 	ldw	r2,-25320(gp)
 8016944:	1884b03a 	or	r2,r3,r2
 8016948:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801694c:	d0a74617 	ldw	r2,-25320(gp)
 8016950:	100170fa 	wrctl	ienable,r2
 8016954:	e0bffd17 	ldw	r2,-12(fp)
 8016958:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801695c:	e0bffc17 	ldw	r2,-16(fp)
 8016960:	1001703a 	wrctl	status,r2
}
 8016964:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 8016968:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 801696c:	e037883a 	mov	sp,fp
 8016970:	df000017 	ldw	fp,0(sp)
 8016974:	dec00104 	addi	sp,sp,4
 8016978:	f800283a 	ret

0801697c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801697c:	defff904 	addi	sp,sp,-28
 8016980:	df000615 	stw	fp,24(sp)
 8016984:	df000604 	addi	fp,sp,24
 8016988:	e13ffb15 	stw	r4,-20(fp)
 801698c:	e17ffa15 	stw	r5,-24(fp)
 8016990:	e0bffa17 	ldw	r2,-24(fp)
 8016994:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8016998:	0005303a 	rdctl	r2,status
 801699c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80169a0:	e0fffe17 	ldw	r3,-8(fp)
 80169a4:	00bfff84 	movi	r2,-2
 80169a8:	1884703a 	and	r2,r3,r2
 80169ac:	1001703a 	wrctl	status,r2
  return context;
 80169b0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 80169b4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 80169b8:	00c00044 	movi	r3,1
 80169bc:	e0bfff17 	ldw	r2,-4(fp)
 80169c0:	1884983a 	sll	r2,r3,r2
 80169c4:	0084303a 	nor	r2,zero,r2
 80169c8:	1007883a 	mov	r3,r2
 80169cc:	d0a74617 	ldw	r2,-25320(gp)
 80169d0:	1884703a 	and	r2,r3,r2
 80169d4:	d0a74615 	stw	r2,-25320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80169d8:	d0a74617 	ldw	r2,-25320(gp)
 80169dc:	100170fa 	wrctl	ienable,r2
 80169e0:	e0bffd17 	ldw	r2,-12(fp)
 80169e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80169e8:	e0bffc17 	ldw	r2,-16(fp)
 80169ec:	1001703a 	wrctl	status,r2
}
 80169f0:	0001883a 	nop
  return 0;
 80169f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 80169f8:	e037883a 	mov	sp,fp
 80169fc:	df000017 	ldw	fp,0(sp)
 8016a00:	dec00104 	addi	sp,sp,4
 8016a04:	f800283a 	ret

08016a08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8016a08:	defffc04 	addi	sp,sp,-16
 8016a0c:	df000315 	stw	fp,12(sp)
 8016a10:	df000304 	addi	fp,sp,12
 8016a14:	e13ffe15 	stw	r4,-8(fp)
 8016a18:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8016a1c:	000530fa 	rdctl	r2,ienable
 8016a20:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8016a24:	00c00044 	movi	r3,1
 8016a28:	e0bffd17 	ldw	r2,-12(fp)
 8016a2c:	1884983a 	sll	r2,r3,r2
 8016a30:	1007883a 	mov	r3,r2
 8016a34:	e0bfff17 	ldw	r2,-4(fp)
 8016a38:	1884703a 	and	r2,r3,r2
 8016a3c:	1004c03a 	cmpne	r2,r2,zero
 8016a40:	10803fcc 	andi	r2,r2,255
}
 8016a44:	e037883a 	mov	sp,fp
 8016a48:	df000017 	ldw	fp,0(sp)
 8016a4c:	dec00104 	addi	sp,sp,4
 8016a50:	f800283a 	ret

08016a54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016a54:	defff504 	addi	sp,sp,-44
 8016a58:	dfc00a15 	stw	ra,40(sp)
 8016a5c:	df000915 	stw	fp,36(sp)
 8016a60:	df000904 	addi	fp,sp,36
 8016a64:	e13ffa15 	stw	r4,-24(fp)
 8016a68:	e17ff915 	stw	r5,-28(fp)
 8016a6c:	e1bff815 	stw	r6,-32(fp)
 8016a70:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8016a74:	00bffa84 	movi	r2,-22
 8016a78:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8016a7c:	e0bff917 	ldw	r2,-28(fp)
 8016a80:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8016a84:	e0bffe17 	ldw	r2,-8(fp)
 8016a88:	10800808 	cmpgei	r2,r2,32
 8016a8c:	1000251e 	bne	r2,zero,8016b24 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 8016a90:	0005303a 	rdctl	r2,status
 8016a94:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016a98:	e0fffc17 	ldw	r3,-16(fp)
 8016a9c:	00bfff84 	movi	r2,-2
 8016aa0:	1884703a 	and	r2,r3,r2
 8016aa4:	1001703a 	wrctl	status,r2
  return context;
 8016aa8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8016aac:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 8016ab0:	e0bffe17 	ldw	r2,-8(fp)
 8016ab4:	100890fa 	slli	r4,r2,3
 8016ab8:	e0fff817 	ldw	r3,-32(fp)
 8016abc:	008200b4 	movhi	r2,2050
 8016ac0:	2085883a 	add	r2,r4,r2
 8016ac4:	10ef8115 	stw	r3,-16892(r2)
    alt_irq[id].context = isr_context;
 8016ac8:	e0bffe17 	ldw	r2,-8(fp)
 8016acc:	100890fa 	slli	r4,r2,3
 8016ad0:	e0fff717 	ldw	r3,-36(fp)
 8016ad4:	008200b4 	movhi	r2,2050
 8016ad8:	2085883a 	add	r2,r4,r2
 8016adc:	10ef8215 	stw	r3,-16888(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8016ae0:	e0bff817 	ldw	r2,-32(fp)
 8016ae4:	10000526 	beq	r2,zero,8016afc <alt_iic_isr_register+0xa8>
 8016ae8:	e0bffe17 	ldw	r2,-8(fp)
 8016aec:	100b883a 	mov	r5,r2
 8016af0:	e13ffa17 	ldw	r4,-24(fp)
 8016af4:	80168f40 	call	80168f4 <alt_ic_irq_enable>
 8016af8:	00000406 	br	8016b0c <alt_iic_isr_register+0xb8>
 8016afc:	e0bffe17 	ldw	r2,-8(fp)
 8016b00:	100b883a 	mov	r5,r2
 8016b04:	e13ffa17 	ldw	r4,-24(fp)
 8016b08:	801697c0 	call	801697c <alt_ic_irq_disable>
 8016b0c:	e0bfff15 	stw	r2,-4(fp)
 8016b10:	e0bffd17 	ldw	r2,-12(fp)
 8016b14:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8016b18:	e0bffb17 	ldw	r2,-20(fp)
 8016b1c:	1001703a 	wrctl	status,r2
}
 8016b20:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 8016b24:	e0bfff17 	ldw	r2,-4(fp)
}
 8016b28:	e037883a 	mov	sp,fp
 8016b2c:	dfc00117 	ldw	ra,4(sp)
 8016b30:	df000017 	ldw	fp,0(sp)
 8016b34:	dec00204 	addi	sp,sp,8
 8016b38:	f800283a 	ret

08016b3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8016b3c:	defff904 	addi	sp,sp,-28
 8016b40:	dfc00615 	stw	ra,24(sp)
 8016b44:	df000515 	stw	fp,20(sp)
 8016b48:	df000504 	addi	fp,sp,20
 8016b4c:	e13ffe15 	stw	r4,-8(fp)
 8016b50:	e17ffd15 	stw	r5,-12(fp)
 8016b54:	e1bffc15 	stw	r6,-16(fp)
 8016b58:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 8016b5c:	e1bffb17 	ldw	r6,-20(fp)
 8016b60:	e17ffc17 	ldw	r5,-16(fp)
 8016b64:	e13ffd17 	ldw	r4,-12(fp)
 8016b68:	8016da40 	call	8016da4 <open>
 8016b6c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 8016b70:	e0bfff17 	ldw	r2,-4(fp)
 8016b74:	10002016 	blt	r2,zero,8016bf8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8016b78:	e0ffff17 	ldw	r3,-4(fp)
 8016b7c:	1805883a 	mov	r2,r3
 8016b80:	1085883a 	add	r2,r2,r2
 8016b84:	10c5883a 	add	r2,r2,r3
 8016b88:	100490ba 	slli	r2,r2,2
 8016b8c:	00c200b4 	movhi	r3,2050
 8016b90:	10c7883a 	add	r3,r2,r3
 8016b94:	18e32e17 	ldw	r3,-29512(r3)
 8016b98:	e0bffe17 	ldw	r2,-8(fp)
 8016b9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8016ba0:	e0ffff17 	ldw	r3,-4(fp)
 8016ba4:	1805883a 	mov	r2,r3
 8016ba8:	1085883a 	add	r2,r2,r2
 8016bac:	10c5883a 	add	r2,r2,r3
 8016bb0:	100490ba 	slli	r2,r2,2
 8016bb4:	00c200b4 	movhi	r3,2050
 8016bb8:	10c7883a 	add	r3,r2,r3
 8016bbc:	18e32f17 	ldw	r3,-29508(r3)
 8016bc0:	e0bffe17 	ldw	r2,-8(fp)
 8016bc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8016bc8:	e0ffff17 	ldw	r3,-4(fp)
 8016bcc:	1805883a 	mov	r2,r3
 8016bd0:	1085883a 	add	r2,r2,r2
 8016bd4:	10c5883a 	add	r2,r2,r3
 8016bd8:	100490ba 	slli	r2,r2,2
 8016bdc:	00c200b4 	movhi	r3,2050
 8016be0:	10c7883a 	add	r3,r2,r3
 8016be4:	18e33017 	ldw	r3,-29504(r3)
 8016be8:	e0bffe17 	ldw	r2,-8(fp)
 8016bec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8016bf0:	e13fff17 	ldw	r4,-4(fp)
 8016bf4:	80134dc0 	call	80134dc <alt_release_fd>
  }
} 
 8016bf8:	0001883a 	nop
 8016bfc:	e037883a 	mov	sp,fp
 8016c00:	dfc00117 	ldw	ra,4(sp)
 8016c04:	df000017 	ldw	fp,0(sp)
 8016c08:	dec00204 	addi	sp,sp,8
 8016c0c:	f800283a 	ret

08016c10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8016c10:	defffb04 	addi	sp,sp,-20
 8016c14:	dfc00415 	stw	ra,16(sp)
 8016c18:	df000315 	stw	fp,12(sp)
 8016c1c:	df000304 	addi	fp,sp,12
 8016c20:	e13fff15 	stw	r4,-4(fp)
 8016c24:	e17ffe15 	stw	r5,-8(fp)
 8016c28:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8016c2c:	01c07fc4 	movi	r7,511
 8016c30:	01800044 	movi	r6,1
 8016c34:	e17fff17 	ldw	r5,-4(fp)
 8016c38:	010200b4 	movhi	r4,2050
 8016c3c:	21233104 	addi	r4,r4,-29500
 8016c40:	8016b3c0 	call	8016b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8016c44:	01c07fc4 	movi	r7,511
 8016c48:	000d883a 	mov	r6,zero
 8016c4c:	e17ffe17 	ldw	r5,-8(fp)
 8016c50:	010200b4 	movhi	r4,2050
 8016c54:	21232e04 	addi	r4,r4,-29512
 8016c58:	8016b3c0 	call	8016b3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8016c5c:	01c07fc4 	movi	r7,511
 8016c60:	01800044 	movi	r6,1
 8016c64:	e17ffd17 	ldw	r5,-12(fp)
 8016c68:	010200b4 	movhi	r4,2050
 8016c6c:	21233404 	addi	r4,r4,-29488
 8016c70:	8016b3c0 	call	8016b3c <alt_open_fd>
}  
 8016c74:	0001883a 	nop
 8016c78:	e037883a 	mov	sp,fp
 8016c7c:	dfc00117 	ldw	ra,4(sp)
 8016c80:	df000017 	ldw	fp,0(sp)
 8016c84:	dec00204 	addi	sp,sp,8
 8016c88:	f800283a 	ret

08016c8c <alt_get_errno>:
{
 8016c8c:	defffe04 	addi	sp,sp,-8
 8016c90:	dfc00115 	stw	ra,4(sp)
 8016c94:	df000015 	stw	fp,0(sp)
 8016c98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016c9c:	d0a01317 	ldw	r2,-32692(gp)
 8016ca0:	10000326 	beq	r2,zero,8016cb0 <alt_get_errno+0x24>
 8016ca4:	d0a01317 	ldw	r2,-32692(gp)
 8016ca8:	103ee83a 	callr	r2
 8016cac:	00000106 	br	8016cb4 <alt_get_errno+0x28>
 8016cb0:	d0a73f04 	addi	r2,gp,-25348
}
 8016cb4:	e037883a 	mov	sp,fp
 8016cb8:	dfc00117 	ldw	ra,4(sp)
 8016cbc:	df000017 	ldw	fp,0(sp)
 8016cc0:	dec00204 	addi	sp,sp,8
 8016cc4:	f800283a 	ret

08016cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8016cc8:	defffd04 	addi	sp,sp,-12
 8016ccc:	df000215 	stw	fp,8(sp)
 8016cd0:	df000204 	addi	fp,sp,8
 8016cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8016cd8:	e0bffe17 	ldw	r2,-8(fp)
 8016cdc:	10800217 	ldw	r2,8(r2)
 8016ce0:	10d00034 	orhi	r3,r2,16384
 8016ce4:	e0bffe17 	ldw	r2,-8(fp)
 8016ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8016cec:	e03fff15 	stw	zero,-4(fp)
 8016cf0:	00002306 	br	8016d80 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016cf4:	e0ffff17 	ldw	r3,-4(fp)
 8016cf8:	1805883a 	mov	r2,r3
 8016cfc:	1085883a 	add	r2,r2,r2
 8016d00:	10c5883a 	add	r2,r2,r3
 8016d04:	100490ba 	slli	r2,r2,2
 8016d08:	00c200b4 	movhi	r3,2050
 8016d0c:	10c7883a 	add	r3,r2,r3
 8016d10:	18e32e17 	ldw	r3,-29512(r3)
 8016d14:	e0bffe17 	ldw	r2,-8(fp)
 8016d18:	10800017 	ldw	r2,0(r2)
 8016d1c:	1880151e 	bne	r3,r2,8016d74 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016d20:	e0ffff17 	ldw	r3,-4(fp)
 8016d24:	1805883a 	mov	r2,r3
 8016d28:	1085883a 	add	r2,r2,r2
 8016d2c:	10c5883a 	add	r2,r2,r3
 8016d30:	100490ba 	slli	r2,r2,2
 8016d34:	00c200b4 	movhi	r3,2050
 8016d38:	10c7883a 	add	r3,r2,r3
 8016d3c:	18a33017 	ldw	r2,-29504(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016d40:	10000c0e 	bge	r2,zero,8016d74 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8016d44:	e0ffff17 	ldw	r3,-4(fp)
 8016d48:	1805883a 	mov	r2,r3
 8016d4c:	1085883a 	add	r2,r2,r2
 8016d50:	10c5883a 	add	r2,r2,r3
 8016d54:	100490ba 	slli	r2,r2,2
 8016d58:	00c200b4 	movhi	r3,2050
 8016d5c:	18e32e04 	addi	r3,r3,-29512
 8016d60:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016d64:	e0fffe17 	ldw	r3,-8(fp)
 8016d68:	18800226 	beq	r3,r2,8016d74 <alt_file_locked+0xac>
    {
      return -EACCES;
 8016d6c:	00bffcc4 	movi	r2,-13
 8016d70:	00000806 	br	8016d94 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8016d74:	e0bfff17 	ldw	r2,-4(fp)
 8016d78:	10800044 	addi	r2,r2,1
 8016d7c:	e0bfff15 	stw	r2,-4(fp)
 8016d80:	d0a01217 	ldw	r2,-32696(gp)
 8016d84:	1007883a 	mov	r3,r2
 8016d88:	e0bfff17 	ldw	r2,-4(fp)
 8016d8c:	18bfd92e 	bgeu	r3,r2,8016cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8016d90:	0005883a 	mov	r2,zero
}
 8016d94:	e037883a 	mov	sp,fp
 8016d98:	df000017 	ldw	fp,0(sp)
 8016d9c:	dec00104 	addi	sp,sp,4
 8016da0:	f800283a 	ret

08016da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8016da4:	defff604 	addi	sp,sp,-40
 8016da8:	dfc00915 	stw	ra,36(sp)
 8016dac:	df000815 	stw	fp,32(sp)
 8016db0:	df000804 	addi	fp,sp,32
 8016db4:	e13ffa15 	stw	r4,-24(fp)
 8016db8:	e17ff915 	stw	r5,-28(fp)
 8016dbc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8016dc0:	00bfffc4 	movi	r2,-1
 8016dc4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8016dc8:	00bffb44 	movi	r2,-19
 8016dcc:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8016dd0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8016dd4:	d1601004 	addi	r5,gp,-32704
 8016dd8:	e13ffa17 	ldw	r4,-24(fp)
 8016ddc:	80167f40 	call	80167f4 <alt_find_dev>
 8016de0:	e0bfff15 	stw	r2,-4(fp)
 8016de4:	e0bfff17 	ldw	r2,-4(fp)
 8016de8:	1000051e 	bne	r2,zero,8016e00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8016dec:	e13ffa17 	ldw	r4,-24(fp)
 8016df0:	80171840 	call	8017184 <alt_find_file>
 8016df4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8016df8:	00800044 	movi	r2,1
 8016dfc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016e00:	e0bfff17 	ldw	r2,-4(fp)
 8016e04:	10002c26 	beq	r2,zero,8016eb8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016e08:	e13fff17 	ldw	r4,-4(fp)
 8016e0c:	801728c0 	call	801728c <alt_get_fd>
 8016e10:	e0bffe15 	stw	r2,-8(fp)
 8016e14:	e0bffe17 	ldw	r2,-8(fp)
 8016e18:	1000030e 	bge	r2,zero,8016e28 <open+0x84>
    {
      status = index;
 8016e1c:	e0bffe17 	ldw	r2,-8(fp)
 8016e20:	e0bffd15 	stw	r2,-12(fp)
 8016e24:	00002606 	br	8016ec0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8016e28:	e0fffe17 	ldw	r3,-8(fp)
 8016e2c:	1805883a 	mov	r2,r3
 8016e30:	1085883a 	add	r2,r2,r2
 8016e34:	10c5883a 	add	r2,r2,r3
 8016e38:	100490ba 	slli	r2,r2,2
 8016e3c:	00c200b4 	movhi	r3,2050
 8016e40:	18e32e04 	addi	r3,r3,-29512
 8016e44:	10c5883a 	add	r2,r2,r3
 8016e48:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8016e4c:	e0fff917 	ldw	r3,-28(fp)
 8016e50:	00900034 	movhi	r2,16384
 8016e54:	10bfffc4 	addi	r2,r2,-1
 8016e58:	1886703a 	and	r3,r3,r2
 8016e5c:	e0bffb17 	ldw	r2,-20(fp)
 8016e60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8016e64:	e0bffc17 	ldw	r2,-16(fp)
 8016e68:	1000051e 	bne	r2,zero,8016e80 <open+0xdc>
 8016e6c:	e13ffb17 	ldw	r4,-20(fp)
 8016e70:	8016cc80 	call	8016cc8 <alt_file_locked>
 8016e74:	e0bffd15 	stw	r2,-12(fp)
 8016e78:	e0bffd17 	ldw	r2,-12(fp)
 8016e7c:	10001016 	blt	r2,zero,8016ec0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8016e80:	e0bfff17 	ldw	r2,-4(fp)
 8016e84:	10800317 	ldw	r2,12(r2)
 8016e88:	10000826 	beq	r2,zero,8016eac <open+0x108>
 8016e8c:	e0bfff17 	ldw	r2,-4(fp)
 8016e90:	10800317 	ldw	r2,12(r2)
 8016e94:	e1fff817 	ldw	r7,-32(fp)
 8016e98:	e1bff917 	ldw	r6,-28(fp)
 8016e9c:	e17ffa17 	ldw	r5,-24(fp)
 8016ea0:	e13ffb17 	ldw	r4,-20(fp)
 8016ea4:	103ee83a 	callr	r2
 8016ea8:	00000106 	br	8016eb0 <open+0x10c>
 8016eac:	0005883a 	mov	r2,zero
 8016eb0:	e0bffd15 	stw	r2,-12(fp)
 8016eb4:	00000206 	br	8016ec0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8016eb8:	00bffb44 	movi	r2,-19
 8016ebc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8016ec0:	e0bffd17 	ldw	r2,-12(fp)
 8016ec4:	1000090e 	bge	r2,zero,8016eec <open+0x148>
  {
    alt_release_fd (index);  
 8016ec8:	e13ffe17 	ldw	r4,-8(fp)
 8016ecc:	80134dc0 	call	80134dc <alt_release_fd>
    ALT_ERRNO = -status;
 8016ed0:	8016c8c0 	call	8016c8c <alt_get_errno>
 8016ed4:	1007883a 	mov	r3,r2
 8016ed8:	e0bffd17 	ldw	r2,-12(fp)
 8016edc:	0085c83a 	sub	r2,zero,r2
 8016ee0:	18800015 	stw	r2,0(r3)
    return -1;
 8016ee4:	00bfffc4 	movi	r2,-1
 8016ee8:	00000106 	br	8016ef0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8016eec:	e0bffe17 	ldw	r2,-8(fp)
}
 8016ef0:	e037883a 	mov	sp,fp
 8016ef4:	dfc00117 	ldw	ra,4(sp)
 8016ef8:	df000017 	ldw	fp,0(sp)
 8016efc:	dec00204 	addi	sp,sp,8
 8016f00:	f800283a 	ret

08016f04 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8016f04:	defff204 	addi	sp,sp,-56
 8016f08:	dfc00a15 	stw	ra,40(sp)
 8016f0c:	df000915 	stw	fp,36(sp)
 8016f10:	df000904 	addi	fp,sp,36
 8016f14:	e13ff715 	stw	r4,-36(fp)
 8016f18:	e1400215 	stw	r5,8(fp)
 8016f1c:	e1800315 	stw	r6,12(fp)
 8016f20:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8016f24:	e0800204 	addi	r2,fp,8
 8016f28:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8016f2c:	e0bff717 	ldw	r2,-36(fp)
 8016f30:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
 8016f34:	00006f06 	br	80170f4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8016f38:	e0bffec7 	ldb	r2,-5(fp)
 8016f3c:	10800960 	cmpeqi	r2,r2,37
 8016f40:	1000041e 	bne	r2,zero,8016f54 <alt_printf+0x50>
        {
            alt_putchar(c);
 8016f44:	e0bffec7 	ldb	r2,-5(fp)
 8016f48:	1009883a 	mov	r4,r2
 8016f4c:	80171300 	call	8017130 <alt_putchar>
 8016f50:	00006806 	br	80170f4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8016f54:	e0bfff17 	ldw	r2,-4(fp)
 8016f58:	10c00044 	addi	r3,r2,1
 8016f5c:	e0ffff15 	stw	r3,-4(fp)
 8016f60:	10800003 	ldbu	r2,0(r2)
 8016f64:	e0bffec5 	stb	r2,-5(fp)
 8016f68:	e0bffec7 	ldb	r2,-5(fp)
 8016f6c:	10006926 	beq	r2,zero,8017114 <alt_printf+0x210>
            {
                if (c == '%')
 8016f70:	e0bffec7 	ldb	r2,-5(fp)
 8016f74:	10800958 	cmpnei	r2,r2,37
 8016f78:	1000041e 	bne	r2,zero,8016f8c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8016f7c:	e0bffec7 	ldb	r2,-5(fp)
 8016f80:	1009883a 	mov	r4,r2
 8016f84:	80171300 	call	8017130 <alt_putchar>
 8016f88:	00005a06 	br	80170f4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8016f8c:	e0bffec7 	ldb	r2,-5(fp)
 8016f90:	108018d8 	cmpnei	r2,r2,99
 8016f94:	1000081e 	bne	r2,zero,8016fb8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8016f98:	e0bff817 	ldw	r2,-32(fp)
 8016f9c:	10c00104 	addi	r3,r2,4
 8016fa0:	e0fff815 	stw	r3,-32(fp)
 8016fa4:	10800017 	ldw	r2,0(r2)
 8016fa8:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
 8016fac:	e13ff917 	ldw	r4,-28(fp)
 8016fb0:	80171300 	call	8017130 <alt_putchar>
 8016fb4:	00004f06 	br	80170f4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8016fb8:	e0bffec7 	ldb	r2,-5(fp)
 8016fbc:	10801e18 	cmpnei	r2,r2,120
 8016fc0:	1000341e 	bne	r2,zero,8017094 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8016fc4:	e0bff817 	ldw	r2,-32(fp)
 8016fc8:	10c00104 	addi	r3,r2,4
 8016fcc:	e0fff815 	stw	r3,-32(fp)
 8016fd0:	10800017 	ldw	r2,0(r2)
 8016fd4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8016fd8:	e0bffb17 	ldw	r2,-20(fp)
 8016fdc:	1000031e 	bne	r2,zero,8016fec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8016fe0:	01000c04 	movi	r4,48
 8016fe4:	80171300 	call	8017130 <alt_putchar>
                        continue;
 8016fe8:	00004206 	br	80170f4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8016fec:	00800704 	movi	r2,28
 8016ff0:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 8016ff4:	00000306 	br	8017004 <alt_printf+0x100>
                        digit_shift -= 4;
 8016ff8:	e0bffd17 	ldw	r2,-12(fp)
 8016ffc:	10bfff04 	addi	r2,r2,-4
 8017000:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 8017004:	00c003c4 	movi	r3,15
 8017008:	e0bffd17 	ldw	r2,-12(fp)
 801700c:	1884983a 	sll	r2,r3,r2
 8017010:	1007883a 	mov	r3,r2
 8017014:	e0bffb17 	ldw	r2,-20(fp)
 8017018:	1884703a 	and	r2,r3,r2
 801701c:	103ff626 	beq	r2,zero,8016ff8 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8017020:	00001906 	br	8017088 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8017024:	00c003c4 	movi	r3,15
 8017028:	e0bffd17 	ldw	r2,-12(fp)
 801702c:	1884983a 	sll	r2,r3,r2
 8017030:	1007883a 	mov	r3,r2
 8017034:	e0bffb17 	ldw	r2,-20(fp)
 8017038:	1886703a 	and	r3,r3,r2
 801703c:	e0bffd17 	ldw	r2,-12(fp)
 8017040:	1884d83a 	srl	r2,r3,r2
 8017044:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
 8017048:	e0bffa17 	ldw	r2,-24(fp)
 801704c:	108002a8 	cmpgeui	r2,r2,10
 8017050:	1000041e 	bne	r2,zero,8017064 <alt_printf+0x160>
                            c = '0' + digit;
 8017054:	e0bffa17 	ldw	r2,-24(fp)
 8017058:	10800c04 	addi	r2,r2,48
 801705c:	e0bffec5 	stb	r2,-5(fp)
 8017060:	00000306 	br	8017070 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8017064:	e0bffa17 	ldw	r2,-24(fp)
 8017068:	108015c4 	addi	r2,r2,87
 801706c:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
 8017070:	e0bffec7 	ldb	r2,-5(fp)
 8017074:	1009883a 	mov	r4,r2
 8017078:	80171300 	call	8017130 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
 801707c:	e0bffd17 	ldw	r2,-12(fp)
 8017080:	10bfff04 	addi	r2,r2,-4
 8017084:	e0bffd15 	stw	r2,-12(fp)
 8017088:	e0bffd17 	ldw	r2,-12(fp)
 801708c:	103fe50e 	bge	r2,zero,8017024 <alt_printf+0x120>
 8017090:	00001806 	br	80170f4 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
 8017094:	e0bffec7 	ldb	r2,-5(fp)
 8017098:	10801cd8 	cmpnei	r2,r2,115
 801709c:	1000151e 	bne	r2,zero,80170f4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 80170a0:	e0bff817 	ldw	r2,-32(fp)
 80170a4:	10c00104 	addi	r3,r2,4
 80170a8:	e0fff815 	stw	r3,-32(fp)
 80170ac:	10800017 	ldw	r2,0(r2)
 80170b0:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
 80170b4:	00000906 	br	80170dc <alt_printf+0x1d8>
                      alt_putchar(*s++);
 80170b8:	e0bffc17 	ldw	r2,-16(fp)
 80170bc:	10c00044 	addi	r3,r2,1
 80170c0:	e0fffc15 	stw	r3,-16(fp)
 80170c4:	10800003 	ldbu	r2,0(r2)
 80170c8:	10803fcc 	andi	r2,r2,255
 80170cc:	1080201c 	xori	r2,r2,128
 80170d0:	10bfe004 	addi	r2,r2,-128
 80170d4:	1009883a 	mov	r4,r2
 80170d8:	80171300 	call	8017130 <alt_putchar>
                    while(*s)
 80170dc:	e0bffc17 	ldw	r2,-16(fp)
 80170e0:	10800003 	ldbu	r2,0(r2)
 80170e4:	10803fcc 	andi	r2,r2,255
 80170e8:	1080201c 	xori	r2,r2,128
 80170ec:	10bfe004 	addi	r2,r2,-128
 80170f0:	103ff11e 	bne	r2,zero,80170b8 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
 80170f4:	e0bfff17 	ldw	r2,-4(fp)
 80170f8:	10c00044 	addi	r3,r2,1
 80170fc:	e0ffff15 	stw	r3,-4(fp)
 8017100:	10800003 	ldbu	r2,0(r2)
 8017104:	e0bffec5 	stb	r2,-5(fp)
 8017108:	e0bffec7 	ldb	r2,-5(fp)
 801710c:	103f8a1e 	bne	r2,zero,8016f38 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8017110:	00000106 	br	8017118 <alt_printf+0x214>
                break;
 8017114:	0001883a 	nop
}
 8017118:	0001883a 	nop
 801711c:	e037883a 	mov	sp,fp
 8017120:	dfc00117 	ldw	ra,4(sp)
 8017124:	df000017 	ldw	fp,0(sp)
 8017128:	dec00504 	addi	sp,sp,20
 801712c:	f800283a 	ret

08017130 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8017130:	defffd04 	addi	sp,sp,-12
 8017134:	dfc00215 	stw	ra,8(sp)
 8017138:	df000115 	stw	fp,4(sp)
 801713c:	df000104 	addi	fp,sp,4
 8017140:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8017144:	e13fff17 	ldw	r4,-4(fp)
 8017148:	80086dc0 	call	80086dc <putchar>
#endif
#endif
}
 801714c:	e037883a 	mov	sp,fp
 8017150:	dfc00117 	ldw	ra,4(sp)
 8017154:	df000017 	ldw	fp,0(sp)
 8017158:	dec00204 	addi	sp,sp,8
 801715c:	f800283a 	ret

08017160 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8017160:	deffff04 	addi	sp,sp,-4
 8017164:	df000015 	stw	fp,0(sp)
 8017168:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801716c:	000170fa 	wrctl	ienable,zero
}
 8017170:	0001883a 	nop
 8017174:	e037883a 	mov	sp,fp
 8017178:	df000017 	ldw	fp,0(sp)
 801717c:	dec00104 	addi	sp,sp,4
 8017180:	f800283a 	ret

08017184 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017184:	defffb04 	addi	sp,sp,-20
 8017188:	dfc00415 	stw	ra,16(sp)
 801718c:	df000315 	stw	fp,12(sp)
 8017190:	df000304 	addi	fp,sp,12
 8017194:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8017198:	d0a00e17 	ldw	r2,-32712(gp)
 801719c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80171a0:	00003106 	br	8017268 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80171a4:	e0bfff17 	ldw	r2,-4(fp)
 80171a8:	10800217 	ldw	r2,8(r2)
 80171ac:	1009883a 	mov	r4,r2
 80171b0:	80087d00 	call	80087d0 <strlen>
 80171b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80171b8:	e0bfff17 	ldw	r2,-4(fp)
 80171bc:	10c00217 	ldw	r3,8(r2)
 80171c0:	e0bffe17 	ldw	r2,-8(fp)
 80171c4:	10bfffc4 	addi	r2,r2,-1
 80171c8:	1885883a 	add	r2,r3,r2
 80171cc:	10800003 	ldbu	r2,0(r2)
 80171d0:	10803fcc 	andi	r2,r2,255
 80171d4:	1080201c 	xori	r2,r2,128
 80171d8:	10bfe004 	addi	r2,r2,-128
 80171dc:	10800bd8 	cmpnei	r2,r2,47
 80171e0:	1000031e 	bne	r2,zero,80171f0 <alt_find_file+0x6c>
    {
      len -= 1;
 80171e4:	e0bffe17 	ldw	r2,-8(fp)
 80171e8:	10bfffc4 	addi	r2,r2,-1
 80171ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80171f0:	e0bffe17 	ldw	r2,-8(fp)
 80171f4:	e0fffd17 	ldw	r3,-12(fp)
 80171f8:	1885883a 	add	r2,r3,r2
 80171fc:	10800003 	ldbu	r2,0(r2)
 8017200:	10803fcc 	andi	r2,r2,255
 8017204:	1080201c 	xori	r2,r2,128
 8017208:	10bfe004 	addi	r2,r2,-128
 801720c:	10800be0 	cmpeqi	r2,r2,47
 8017210:	1000081e 	bne	r2,zero,8017234 <alt_find_file+0xb0>
 8017214:	e0bffe17 	ldw	r2,-8(fp)
 8017218:	e0fffd17 	ldw	r3,-12(fp)
 801721c:	1885883a 	add	r2,r3,r2
 8017220:	10800003 	ldbu	r2,0(r2)
 8017224:	10803fcc 	andi	r2,r2,255
 8017228:	1080201c 	xori	r2,r2,128
 801722c:	10bfe004 	addi	r2,r2,-128
 8017230:	10000a1e 	bne	r2,zero,801725c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8017234:	e0bfff17 	ldw	r2,-4(fp)
 8017238:	10800217 	ldw	r2,8(r2)
 801723c:	e0fffe17 	ldw	r3,-8(fp)
 8017240:	180d883a 	mov	r6,r3
 8017244:	e17ffd17 	ldw	r5,-12(fp)
 8017248:	1009883a 	mov	r4,r2
 801724c:	80174240 	call	8017424 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017250:	1000021e 	bne	r2,zero,801725c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8017254:	e0bfff17 	ldw	r2,-4(fp)
 8017258:	00000706 	br	8017278 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801725c:	e0bfff17 	ldw	r2,-4(fp)
 8017260:	10800017 	ldw	r2,0(r2)
 8017264:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8017268:	e0ffff17 	ldw	r3,-4(fp)
 801726c:	d0a00e04 	addi	r2,gp,-32712
 8017270:	18bfcc1e 	bne	r3,r2,80171a4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8017274:	0005883a 	mov	r2,zero
}
 8017278:	e037883a 	mov	sp,fp
 801727c:	dfc00117 	ldw	ra,4(sp)
 8017280:	df000017 	ldw	fp,0(sp)
 8017284:	dec00204 	addi	sp,sp,8
 8017288:	f800283a 	ret

0801728c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801728c:	defffc04 	addi	sp,sp,-16
 8017290:	df000315 	stw	fp,12(sp)
 8017294:	df000304 	addi	fp,sp,12
 8017298:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 801729c:	00bffa04 	movi	r2,-24
 80172a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80172a4:	e03fff15 	stw	zero,-4(fp)
 80172a8:	00001d06 	br	8017320 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80172ac:	e0ffff17 	ldw	r3,-4(fp)
 80172b0:	1805883a 	mov	r2,r3
 80172b4:	1085883a 	add	r2,r2,r2
 80172b8:	10c5883a 	add	r2,r2,r3
 80172bc:	100490ba 	slli	r2,r2,2
 80172c0:	00c200b4 	movhi	r3,2050
 80172c4:	10c7883a 	add	r3,r2,r3
 80172c8:	18a32e17 	ldw	r2,-29512(r3)
 80172cc:	1000111e 	bne	r2,zero,8017314 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 80172d0:	e0ffff17 	ldw	r3,-4(fp)
 80172d4:	1805883a 	mov	r2,r3
 80172d8:	1085883a 	add	r2,r2,r2
 80172dc:	10c5883a 	add	r2,r2,r3
 80172e0:	100490ba 	slli	r2,r2,2
 80172e4:	e13ffd17 	ldw	r4,-12(fp)
 80172e8:	00c200b4 	movhi	r3,2050
 80172ec:	10c7883a 	add	r3,r2,r3
 80172f0:	19232e15 	stw	r4,-29512(r3)
      if (i > alt_max_fd)
 80172f4:	d0e01217 	ldw	r3,-32696(gp)
 80172f8:	e0bfff17 	ldw	r2,-4(fp)
 80172fc:	1880020e 	bge	r3,r2,8017308 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8017300:	e0bfff17 	ldw	r2,-4(fp)
 8017304:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
 8017308:	e0bfff17 	ldw	r2,-4(fp)
 801730c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8017310:	00000706 	br	8017330 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8017314:	e0bfff17 	ldw	r2,-4(fp)
 8017318:	10800044 	addi	r2,r2,1
 801731c:	e0bfff15 	stw	r2,-4(fp)
 8017320:	e0bfff17 	ldw	r2,-4(fp)
 8017324:	10800810 	cmplti	r2,r2,32
 8017328:	103fe01e 	bne	r2,zero,80172ac <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 801732c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8017330:	e0bffe17 	ldw	r2,-8(fp)
}
 8017334:	e037883a 	mov	sp,fp
 8017338:	df000017 	ldw	fp,0(sp)
 801733c:	dec00104 	addi	sp,sp,4
 8017340:	f800283a 	ret

08017344 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8017344:	defffe04 	addi	sp,sp,-8
 8017348:	df000115 	stw	fp,4(sp)
 801734c:	df000104 	addi	fp,sp,4
 8017350:	e13fff15 	stw	r4,-4(fp)
 8017354:	e0bfff17 	ldw	r2,-4(fp)
 8017358:	10bffe84 	addi	r2,r2,-6
 801735c:	10c00428 	cmpgeui	r3,r2,16
 8017360:	1800191e 	bne	r3,zero,80173c8 <alt_exception_cause_generated_bad_addr+0x84>
 8017364:	100690ba 	slli	r3,r2,2
 8017368:	00820074 	movhi	r2,2049
 801736c:	1885883a 	add	r2,r3,r2
 8017370:	109cde17 	ldw	r2,29560(r2)
 8017374:	1000683a 	jmp	r2
 8017378:	080173b8 	rdprs	zero,at,1486
 801737c:	080173b8 	rdprs	zero,at,1486
 8017380:	080173c8 	cmpgei	zero,at,1487
 8017384:	080173c8 	cmpgei	zero,at,1487
 8017388:	080173c8 	cmpgei	zero,at,1487
 801738c:	080173b8 	rdprs	zero,at,1486
 8017390:	080173c0 	call	80173c <__alt_mem_onchip_memory2_0+0x80173c>
 8017394:	080173c8 	cmpgei	zero,at,1487
 8017398:	080173b8 	rdprs	zero,at,1486
 801739c:	080173b8 	rdprs	zero,at,1486
 80173a0:	080173c8 	cmpgei	zero,at,1487
 80173a4:	080173b8 	rdprs	zero,at,1486
 80173a8:	080173c0 	call	80173c <__alt_mem_onchip_memory2_0+0x80173c>
 80173ac:	080173c8 	cmpgei	zero,at,1487
 80173b0:	080173c8 	cmpgei	zero,at,1487
 80173b4:	080173b8 	rdprs	zero,at,1486
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80173b8:	00800044 	movi	r2,1
 80173bc:	00000306 	br	80173cc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80173c0:	0005883a 	mov	r2,zero
 80173c4:	00000106 	br	80173cc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 80173c8:	0005883a 	mov	r2,zero
  }
}
 80173cc:	e037883a 	mov	sp,fp
 80173d0:	df000017 	ldw	fp,0(sp)
 80173d4:	dec00104 	addi	sp,sp,4
 80173d8:	f800283a 	ret

080173dc <atexit>:
 80173dc:	200b883a 	mov	r5,r4
 80173e0:	000f883a 	mov	r7,zero
 80173e4:	000d883a 	mov	r6,zero
 80173e8:	0009883a 	mov	r4,zero
 80173ec:	801749c1 	jmpi	801749c <__register_exitproc>

080173f0 <exit>:
 80173f0:	defffe04 	addi	sp,sp,-8
 80173f4:	000b883a 	mov	r5,zero
 80173f8:	dc000015 	stw	r16,0(sp)
 80173fc:	dfc00115 	stw	ra,4(sp)
 8017400:	2021883a 	mov	r16,r4
 8017404:	801752c0 	call	801752c <__call_exitprocs>
 8017408:	008200b4 	movhi	r2,2050
 801740c:	1127be17 	ldw	r4,-24840(r2)
 8017410:	20800f17 	ldw	r2,60(r4)
 8017414:	10000126 	beq	r2,zero,801741c <exit+0x2c>
 8017418:	103ee83a 	callr	r2
 801741c:	8009883a 	mov	r4,r16
 8017420:	8012d280 	call	8012d28 <_exit>

08017424 <memcmp>:
 8017424:	30800130 	cmpltui	r2,r6,4
 8017428:	10000b1e 	bne	r2,zero,8017458 <memcmp+0x34>
 801742c:	2144b03a 	or	r2,r4,r5
 8017430:	108000cc 	andi	r2,r2,3
 8017434:	1000171e 	bne	r2,zero,8017494 <memcmp+0x70>
 8017438:	20c00017 	ldw	r3,0(r4)
 801743c:	28800017 	ldw	r2,0(r5)
 8017440:	1880141e 	bne	r3,r2,8017494 <memcmp+0x70>
 8017444:	31bfff04 	addi	r6,r6,-4
 8017448:	30800128 	cmpgeui	r2,r6,4
 801744c:	21000104 	addi	r4,r4,4
 8017450:	29400104 	addi	r5,r5,4
 8017454:	103ff81e 	bne	r2,zero,8017438 <memcmp+0x14>
 8017458:	30bfffc4 	addi	r2,r6,-1
 801745c:	30000b26 	beq	r6,zero,801748c <memcmp+0x68>
 8017460:	11800044 	addi	r6,r2,1
 8017464:	298d883a 	add	r6,r5,r6
 8017468:	00000106 	br	8017470 <memcmp+0x4c>
 801746c:	29800726 	beq	r5,r6,801748c <memcmp+0x68>
 8017470:	20800003 	ldbu	r2,0(r4)
 8017474:	28c00003 	ldbu	r3,0(r5)
 8017478:	21000044 	addi	r4,r4,1
 801747c:	29400044 	addi	r5,r5,1
 8017480:	10fffa26 	beq	r2,r3,801746c <memcmp+0x48>
 8017484:	10c5c83a 	sub	r2,r2,r3
 8017488:	f800283a 	ret
 801748c:	0005883a 	mov	r2,zero
 8017490:	f800283a 	ret
 8017494:	30bfffc4 	addi	r2,r6,-1
 8017498:	003ff106 	br	8017460 <memcmp+0x3c>

0801749c <__register_exitproc>:
 801749c:	008200b4 	movhi	r2,2050
 80174a0:	10e7be17 	ldw	r3,-24840(r2)
 80174a4:	18805217 	ldw	r2,328(r3)
 80174a8:	10001726 	beq	r2,zero,8017508 <__register_exitproc+0x6c>
 80174ac:	10c00117 	ldw	r3,4(r2)
 80174b0:	1a000808 	cmpgei	r8,r3,32
 80174b4:	40001b1e 	bne	r8,zero,8017524 <__register_exitproc+0x88>
 80174b8:	20000b26 	beq	r4,zero,80174e8 <__register_exitproc+0x4c>
 80174bc:	181090ba 	slli	r8,r3,2
 80174c0:	02400044 	movi	r9,1
 80174c4:	48d2983a 	sll	r9,r9,r3
 80174c8:	1211883a 	add	r8,r2,r8
 80174cc:	41802215 	stw	r6,136(r8)
 80174d0:	11806217 	ldw	r6,392(r2)
 80174d4:	21000098 	cmpnei	r4,r4,2
 80174d8:	324cb03a 	or	r6,r6,r9
 80174dc:	11806215 	stw	r6,392(r2)
 80174e0:	41c04215 	stw	r7,264(r8)
 80174e4:	20000b26 	beq	r4,zero,8017514 <__register_exitproc+0x78>
 80174e8:	19000084 	addi	r4,r3,2
 80174ec:	200890ba 	slli	r4,r4,2
 80174f0:	18c00044 	addi	r3,r3,1
 80174f4:	10c00115 	stw	r3,4(r2)
 80174f8:	1105883a 	add	r2,r2,r4
 80174fc:	11400015 	stw	r5,0(r2)
 8017500:	0005883a 	mov	r2,zero
 8017504:	f800283a 	ret
 8017508:	18805304 	addi	r2,r3,332
 801750c:	18805215 	stw	r2,328(r3)
 8017510:	003fe606 	br	80174ac <__register_exitproc+0x10>
 8017514:	11006317 	ldw	r4,396(r2)
 8017518:	2252b03a 	or	r9,r4,r9
 801751c:	12406315 	stw	r9,396(r2)
 8017520:	003ff106 	br	80174e8 <__register_exitproc+0x4c>
 8017524:	00bfffc4 	movi	r2,-1
 8017528:	f800283a 	ret

0801752c <__call_exitprocs>:
 801752c:	defff704 	addi	sp,sp,-36
 8017530:	008200b4 	movhi	r2,2050
 8017534:	dcc00315 	stw	r19,12(sp)
 8017538:	14e7be17 	ldw	r19,-24840(r2)
 801753c:	dc800215 	stw	r18,8(sp)
 8017540:	dfc00815 	stw	ra,32(sp)
 8017544:	9c805217 	ldw	r18,328(r19)
 8017548:	ddc00715 	stw	r23,28(sp)
 801754c:	dd800615 	stw	r22,24(sp)
 8017550:	dd400515 	stw	r21,20(sp)
 8017554:	dd000415 	stw	r20,16(sp)
 8017558:	dc400115 	stw	r17,4(sp)
 801755c:	dc000015 	stw	r16,0(sp)
 8017560:	90001026 	beq	r18,zero,80175a4 <__call_exitprocs+0x78>
 8017564:	202b883a 	mov	r21,r4
 8017568:	282d883a 	mov	r22,r5
 801756c:	05000044 	movi	r20,1
 8017570:	94000117 	ldw	r16,4(r18)
 8017574:	847fffc4 	addi	r17,r16,-1
 8017578:	88000a16 	blt	r17,zero,80175a4 <__call_exitprocs+0x78>
 801757c:	84000044 	addi	r16,r16,1
 8017580:	802090ba 	slli	r16,r16,2
 8017584:	9421883a 	add	r16,r18,r16
 8017588:	b0001126 	beq	r22,zero,80175d0 <__call_exitprocs+0xa4>
 801758c:	80804017 	ldw	r2,256(r16)
 8017590:	15800f26 	beq	r2,r22,80175d0 <__call_exitprocs+0xa4>
 8017594:	8c7fffc4 	addi	r17,r17,-1
 8017598:	88bfffd8 	cmpnei	r2,r17,-1
 801759c:	843fff04 	addi	r16,r16,-4
 80175a0:	103ff91e 	bne	r2,zero,8017588 <__call_exitprocs+0x5c>
 80175a4:	dfc00817 	ldw	ra,32(sp)
 80175a8:	ddc00717 	ldw	r23,28(sp)
 80175ac:	dd800617 	ldw	r22,24(sp)
 80175b0:	dd400517 	ldw	r21,20(sp)
 80175b4:	dd000417 	ldw	r20,16(sp)
 80175b8:	dcc00317 	ldw	r19,12(sp)
 80175bc:	dc800217 	ldw	r18,8(sp)
 80175c0:	dc400117 	ldw	r17,4(sp)
 80175c4:	dc000017 	ldw	r16,0(sp)
 80175c8:	dec00904 	addi	sp,sp,36
 80175cc:	f800283a 	ret
 80175d0:	90800117 	ldw	r2,4(r18)
 80175d4:	81800017 	ldw	r6,0(r16)
 80175d8:	10bfffc4 	addi	r2,r2,-1
 80175dc:	14401726 	beq	r2,r17,801763c <__call_exitprocs+0x110>
 80175e0:	80000015 	stw	zero,0(r16)
 80175e4:	303feb26 	beq	r6,zero,8017594 <__call_exitprocs+0x68>
 80175e8:	a446983a 	sll	r3,r20,r17
 80175ec:	90806217 	ldw	r2,392(r18)
 80175f0:	95c00117 	ldw	r23,4(r18)
 80175f4:	1884703a 	and	r2,r3,r2
 80175f8:	1000081e 	bne	r2,zero,801761c <__call_exitprocs+0xf0>
 80175fc:	303ee83a 	callr	r6
 8017600:	90c00117 	ldw	r3,4(r18)
 8017604:	98805217 	ldw	r2,328(r19)
 8017608:	1dc0011e 	bne	r3,r23,8017610 <__call_exitprocs+0xe4>
 801760c:	90bfe126 	beq	r18,r2,8017594 <__call_exitprocs+0x68>
 8017610:	103fe426 	beq	r2,zero,80175a4 <__call_exitprocs+0x78>
 8017614:	1025883a 	mov	r18,r2
 8017618:	003fd506 	br	8017570 <__call_exitprocs+0x44>
 801761c:	90806317 	ldw	r2,396(r18)
 8017620:	81002017 	ldw	r4,128(r16)
 8017624:	1886703a 	and	r3,r3,r2
 8017628:	1800061e 	bne	r3,zero,8017644 <__call_exitprocs+0x118>
 801762c:	200b883a 	mov	r5,r4
 8017630:	a809883a 	mov	r4,r21
 8017634:	303ee83a 	callr	r6
 8017638:	003ff106 	br	8017600 <__call_exitprocs+0xd4>
 801763c:	94400115 	stw	r17,4(r18)
 8017640:	003fe806 	br	80175e4 <__call_exitprocs+0xb8>
 8017644:	303ee83a 	callr	r6
 8017648:	003fed06 	br	8017600 <__call_exitprocs+0xd4>
