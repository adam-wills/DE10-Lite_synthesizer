--alt_ded_mult_y CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" dedicated_multiplier_circuitry="YES" device_family="MAX 10" dsp_block_balancing="Auto" input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="CLOCK0" input_reg_b="CLOCK0" output_aclr="ACLR0" output_reg="CLOCK0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=64 width_b=16 aclr clock dataa datab ena result
--VERSION_BEGIN 20.1 cbx_alt_ded_mult_y 2020:06:05:12:04:51:SJ cbx_cycloneii 2020:06:05:12:04:51:SJ cbx_lpm_add_sub 2020:06:05:12:04:51:SJ cbx_mgl 2020:06:05:12:11:10:SJ cbx_nadder 2020:06:05:12:04:51:SJ cbx_padd 2020:06:05:12:04:51:SJ cbx_parallel_add 2020:06:05:12:04:51:SJ cbx_stratix 2020:06:05:12:04:51:SJ cbx_stratixii 2020:06:05:12:04:51:SJ cbx_util_mgl 2020:06:05:12:04:51:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION ded_mult_m1e1 (aclr[3..0], clock[3..0], dataa[31..0], datab[15..0], ena[3..0])
RETURNS ( result[47..0]);

--synthesis_resources = dsp_9bit 8 lut 108 reg 80 
SUBDESIGN ded_mult_c091
( 
	aclr[3..0]	:	input;
	clock[3..0]	:	input;
	dataa[63..0]	:	input;
	datab[15..0]	:	input;
	ena[3..0]	:	input;
	result[79..0]	:	output;
) 
VARIABLE 
	left_mult : ded_mult_m1e1;
	right_mult : ded_mult_m1e1;
	external_mult_registers[79..0] : dffe;
	substage_adder_dataa[47..0]	:	WIRE;
	substage_adder_datab[47..0]	:	WIRE;
	substage_adder_result[47..0]	:	WIRE;
	extension_bits[31..0]	: WIRE;

BEGIN 
	left_mult.aclr[] = aclr[];
	left_mult.clock[] = clock[];
	left_mult.dataa[31..0] = dataa[63..32];
	left_mult.datab[] = datab[];
	left_mult.ena[] = ena[];
	right_mult.aclr[] = aclr[];
	right_mult.clock[] = clock[];
	right_mult.dataa[31..0] = dataa[31..0];
	right_mult.datab[] = datab[];
	right_mult.ena[] = ena[];
	external_mult_registers[].clk = clock[0..0];
	external_mult_registers[].clrn = (! aclr[0..0]);
	external_mult_registers[].d = ( substage_adder_result[], right_mult.result[31..0]);
	external_mult_registers[].ena = ena[0..0];
	substage_adder_result[] = substage_adder_dataa[] + substage_adder_datab[];
	substage_adder_dataa[] = left_mult.result[];
	substage_adder_datab[] = ( ( extension_bits[], right_mult.result[47..32]));
	extension_bits[] = B"00000000000000000000000000000000";
	result[] = external_mult_registers[].q;
END;
--VALID FILE
